// let debug = (isProd) => {
//     window.process = {
//         env: {
//             NODE_ENV: "testing",
//             JMG_ENV: "testing"
//         }
//     }

//     if (!isProd) {
//         window.process.env.NODE_ENV = "production";
//         window.process.env.JMG_ENV = "PROD";
//     }
// }

var apiurl = function (url = "", mark = "test-", envName = "JMG_ENV") {
    
    let $this = this;
	if (!this) {
		$this = {};
	}

    $this.default = {
        url: url,
        mark: mark,
        envName: envName
    }
    $this.newUrl = () => {
        try {
            let markstr = "";
            const isIPadress =
                /(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])/
                    .test(url);
            const islocalhost = url.toLocaleLowerCase().includes("localhost") ? true : false;
            let testUrl = false;
            if (typeof window != "undefined" && typeof window.location != "undefined") {
                let is_test, islocalhost, islocalip;
                is_test = window.location.host.toLocaleLowerCase().substring(0, 4).indexOf(mark.substring(0, 4).toLocaleLowerCase()) == 0 ? true : false;
                islocalhost = window.location.host.toLocaleLowerCase().indexOf("localhost") == 0 ? true : false;
                islocalip = window.location.host.toLocaleLowerCase().indexOf("127.0.0.") == 0 ? true : false;
                if (is_test || islocalhost || islocalip) testUrl = true;
            }

            if (!isIPadress && !islocalhost) {
                if (testUrl) markstr = mark;
            }
            let newUrl = "";
            let httpType = "http://";
            if (typeof window != "undefined" && typeof window.location != "undefined") { //存在地址栏的情况
                httpType = window.location.origin.includes("https://") ? "https://" : "http://";
            }

            let u = $this.default.url.toLocaleLowerCase().includes("http://") || url.toLocaleLowerCase().includes("https://");
            if (u) { //包含Http://或Https://
                let httpType = $this.default.url.toLocaleLowerCase().includes("https://") ? "https://" : "http://";
                let OrginUrl = $this.default.url.replace(/http(s?):\/\//, "");
                newUrl = httpType + markstr + OrginUrl;
            } else
                newUrl = httpType + markstr + url;
            return newUrl
        } catch (error) {
            throw error;
        }
    };

    return $this.newUrl();

}
apiurl.prototype.toString = function () {
    return this.newUrl();
}
apiurl.prototype.post = function (router, data) {
    return new Promise((res, rej) => {
        return fetch(this.newUrl() + router, {
            method: "POST",
            body: new URLSearchParams(data).toString(),
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded',
            }

        }).then(result => {
            if (result.ok) result.text().then(data => {
                res({
                    result: result,
                    data: JSON.parse(data)
                })
            });
            else rej(res);
        }).catch(err => {
            rej(err);
        })
    })
}
apiurl.prototype.get = function (router, data) {
    return new Promise((res, rej) => {
        let currurl = this.newUrl() + router;
        if (currurl.includes("?")) {
            currurl += "&" + new URLSearchParams(data).toString()
        } else {
            currurl += "?" + new URLSearchParams(data).toString()
        }
        return fetch(currurl, {
            method: "GET",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded',
            }
        }).then(result => {
            if (result.ok)
                result.text().then(data => {
                    res({
                        result: result,
                        data: JSON.parse(data)
                    });
                });
        }).catch(err => {
            rej(err)
        })
    })
}

apiurl.post = (url, data) => {
    return new Promise((res, rej) => {
        return fetch(apiurl(url), {
            method: "POST",
            body: new URLSearchParams(data).toString(),
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded',
            }

        }).then(result => {
            if (result.ok) result.text().then(data => {
                res({
                    result: result,
                    data: JSON.parse(data)
                })
            });
            else rej(res);
        }).catch(err => {
            rej(err);
        })
    })
}
apiurl.get = function (url, data) {
    return new Promise((res, rej) => {
        let currurl = apiurl(url);
        if (currurl.includes("?")) {
            currurl += "&" + new URLSearchParams(data).toString()
        } else {
            currurl += "?" + new URLSearchParams(data).toString()
        }
        return fetch(currurl, {
            method: "GET",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded',
            }
        }).then(result => {
            if (result.ok)
                result.text().then(data => {
                    res({
                        result: result,
                        data: JSON.parse(data)
                    });
                });
        }).catch(err => {
            rej(err)
        })
    })
}
/**
 * 转换当前地址
 * 传入三个参数,其中必需包含的参数有:
 *  @param {string} url 当前需要请求的地址
 * 可选参数:
 *  @param {string} envName 当前环境变量的变量名称,不填默认: JMG_ENV
 *  @param {string} mark 需要标记的前缀,如果不设置,默认: test_
 * 如果地址栏当中包含test_ 则使用测试环境地址
 * 如果为IP则原样返回
 */
module.exports = function (
    url = "",
    mark = "test-",
    envName = "JMG_ENV"
) {
    let $this = this;
    if ($this == null)
        $this = new Object();
    $this.default = {
        url: url,
        mark: mark,
        envName: envName
    }
    $this.newUrl = () => {
        try {
            // process.env[envName] = 'PROD' //模拟生产环境
            // process.env.NODE_ENV = 'production' //模拟生产环境
            let markstr = "";
            const env_vue = !Object.is(process.env.NODE_ENV, 'production');
            const env_express = !Object.is(process.env[envName], 'PROD');

            const isIPadress =
                /(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])/
                .test(url);
            const islocalhost = url.toLocaleLowerCase().includes("localhost") ? true : false;
            let testUrl = false;
            if (typeof window != "undefined" && typeof window.location != "undefined") {
                let is_test, islocalhost, islocalip;
                is_test = window.location.host.toLocaleLowerCase().substring(0, 4).indexOf(mark.substring(0, 4).toLocaleLowerCase()) == 0 ? true : false;
                islocalhost = window.location.host.toLocaleLowerCase().indexOf("localhost") == 0 ? true : false;
                islocalip = window.location.host.toLocaleLowerCase().indexOf("127.0.0.") == 0 ? true : false;
                if (is_test || islocalhost || islocalip) testUrl = true;
            }
            if (!isIPadress && !islocalhost) {
                if (testUrl || (env_vue && env_express)) markstr = mark;
            }

            let newUrl = "";
            let httpType = "http://";
            if (typeof window != "undefined" && typeof window.location != "undefined") { //存在地址栏的情况
                httpType = window.location.origin.includes("https://") ? "https://" : "http://";
            }

            let u = url.toLocaleLowerCase().includes("http://") || url.toLocaleLowerCase().includes("https://");
            if (u) { //包含Http://或Https://
                httpType = url.toLocaleLowerCase().includes("https://") ? "https://" : "http://";
                let OrginUrl = url.replace(/http(s?):\/\//, "");
                newUrl = httpType + markstr + OrginUrl;
            } else
                newUrl = httpType + markstr + url;
            return newUrl;
        } catch (error) {
            throw error;
        }
    }

    return $this.newUrl();
};
exports = module.exports.prototype.toString = function () {
    return this.newUrl();
}

let axios = require("axios");
if (typeof axios != "undefined") {
    exports = module.exports.prototype.axios = axios;
    exports = module.exports.axios = axios;

    exports = module.exports.prototype.post = async function (router, data) {
        return this.axios.post(this.newUrl() + router, data);
    }
    exports = module.exports.post = async function (url, data) {
        return this.axios.post(this(url), data);
    }
    exports = module.exports.prototype.get = async function (router, params) {
        return this.axios.get(this.newUrl() + router, {
            params: params
        });
    }
    exports = module.exports.get = async function (url, params) {

        return this.axios.get(this(url), {
            params: params
        });
    }
    exports = module.exports.prototype.delete = async function (router, params) {
        return this.axios.delete(this.newUrl() + router, {
            params: params
        });
    }
    exports = module.exports.delete = async function (url, params) {
        return this.axios.delete(this(url), {
            params: params
        });
    }
    exports = module.exports.prototype.head = async function (router, params) {
        return this.axios.head(this.newUrl() + router, {
            params: params
        });
    }
    exports = module.exports.head = async function (url, params) {
        return this.axios.head(this(url), {
            params: params
        });
    }
    exports = module.exports.prototype.put = async function (router, data) {
        return this.axios.put(this.newUrl() + router, data);
    }
    exports = module.exports.put = async function (url, data) {
        return this.axios.put(this(url), data);
    }
}
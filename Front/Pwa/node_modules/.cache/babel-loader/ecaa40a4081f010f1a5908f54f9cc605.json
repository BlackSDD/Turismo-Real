{"ast":null,"code":"'use strict';\n\nconst TYPES = require('./datatypes').TYPES;\n\nconst declareType = require('./datatypes').declare;\n\nconst objectHasProperty = require('./utils').objectHasProperty;\n\nconst MAX = 65535; // (1 << 16) - 1\n\nconst JSON_COLUMN_ID = 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B';\n\nfunction Table(name) {\n  if (name) {\n    const parsed = Table.parseName(name);\n    this.name = parsed.name;\n    this.schema = parsed.schema;\n    this.database = parsed.database;\n    this.path = (this.database ? `[${this.database}].` : '') + (this.schema ? `[${this.schema}].` : '') + `[${this.name}]`;\n    this.temporary = this.name.charAt(0) === '#';\n  }\n\n  this.columns = [];\n  this.rows = [];\n  Object.defineProperty(this.columns, 'add', {\n    value(name, column, options) {\n      if (column == null) {\n        throw new Error('Column data type is not defined.');\n      }\n\n      if (column instanceof Function) {\n        column = column();\n      }\n\n      options = options || {};\n      column.name = name;\n      ['nullable', 'primary', 'identity', 'readOnly', 'length'].forEach(prop => {\n        if (objectHasProperty(options, prop)) {\n          column[prop] = options[prop];\n        }\n      });\n      return this.push(column);\n    }\n\n  });\n  Object.defineProperty(this.rows, 'add', {\n    value() {\n      return this.push(Array.prototype.slice.call(arguments));\n    }\n\n  });\n}\n/*\n@private\n*/\n\n\nTable.prototype._makeBulk = function _makeBulk() {\n  for (let i = 0; i < this.columns.length; i++) {\n    const col = this.columns[i];\n\n    switch (col.type) {\n      case TYPES.Date:\n      case TYPES.DateTime:\n      case TYPES.DateTime2:\n        for (let j = 0; j < this.rows.length; j++) {\n          const dateValue = this.rows[j][i];\n\n          if (typeof dateValue === 'string' || typeof dateValue === 'number') {\n            const date = new Date(dateValue);\n\n            if (isNaN(date.getDate())) {\n              throw new TypeError('Invalid date value passed to bulk rows');\n            }\n\n            this.rows[j][i] = date;\n          }\n        }\n\n        break;\n\n      case TYPES.Xml:\n        col.type = TYPES.NVarChar(MAX).type;\n        break;\n\n      case TYPES.UDT:\n      case TYPES.Geography:\n      case TYPES.Geometry:\n        col.type = TYPES.VarBinary(MAX).type;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return this;\n};\n\nTable.prototype.declare = function declare() {\n  const pkey = this.columns.filter(col => col.primary === true).map(col => col.name);\n  const cols = this.columns.map(col => {\n    const def = [`[${col.name}] ${declareType(col.type, col)}`];\n\n    if (col.nullable === true) {\n      def.push('null');\n    } else if (col.nullable === false) {\n      def.push('not null');\n    }\n\n    if (col.primary === true && pkey.length === 1) {\n      def.push('primary key');\n    }\n\n    return def.join(' ');\n  });\n  const constraint = pkey.length > 1 ? `, constraint PK_${this.temporary ? this.name.substr(1) : this.name} primary key (${pkey.join(', ')})` : '';\n  return `create table ${this.path} (${cols.join(', ')}${constraint})`;\n};\n\nTable.fromRecordset = function fromRecordset(recordset, name) {\n  const t = new this(name);\n\n  for (const colName in recordset.columns) {\n    if (objectHasProperty(recordset.columns, colName)) {\n      const col = recordset.columns[colName];\n      t.columns.add(colName, {\n        type: col.type,\n        length: col.length,\n        scale: col.scale,\n        precision: col.precision\n      }, {\n        nullable: col.nullable,\n        identity: col.identity,\n        readOnly: col.readOnly\n      });\n    }\n  }\n\n  if (t.columns.length === 1 && t.columns[0].name === JSON_COLUMN_ID) {\n    for (let i = 0; i < recordset.length; i++) {\n      t.rows.add(JSON.stringify(recordset[i]));\n    }\n  } else {\n    for (let i = 0; i < recordset.length; i++) {\n      t.rows.add.apply(t.rows, t.columns.map(col => recordset[i][col.name]));\n    }\n  }\n\n  return t;\n};\n\nTable.parseName = function parseName(name) {\n  const length = name.length;\n  let cursor = -1;\n  let buffer = '';\n  let escaped = false;\n  const path = [];\n\n  while (++cursor < length) {\n    const char = name.charAt(cursor);\n\n    if (char === '[') {\n      if (escaped) {\n        buffer += char;\n      } else {\n        escaped = true;\n      }\n    } else if (char === ']') {\n      if (escaped) {\n        escaped = false;\n      } else {\n        throw new Error('Invalid table name.');\n      }\n    } else if (char === '.') {\n      if (escaped) {\n        buffer += char;\n      } else {\n        path.push(buffer);\n        buffer = '';\n      }\n    } else {\n      buffer += char;\n    }\n  }\n\n  if (buffer) {\n    path.push(buffer);\n  }\n\n  switch (path.length) {\n    case 1:\n      return {\n        name: path[0],\n        schema: null,\n        database: null\n      };\n\n    case 2:\n      return {\n        name: path[1],\n        schema: path[0],\n        database: null\n      };\n\n    case 3:\n      return {\n        name: path[2],\n        schema: path[1],\n        database: path[0]\n      };\n\n    default:\n      throw new Error('Invalid table name.');\n  }\n};\n\nmodule.exports = Table;","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/lib/table.js"],"names":["TYPES","require","declareType","declare","objectHasProperty","MAX","JSON_COLUMN_ID","Table","name","parsed","parseName","schema","database","path","temporary","charAt","columns","rows","Object","defineProperty","value","column","options","Error","Function","forEach","prop","push","Array","prototype","slice","call","arguments","_makeBulk","i","length","col","type","Date","DateTime","DateTime2","j","dateValue","date","isNaN","getDate","TypeError","Xml","NVarChar","UDT","Geography","Geometry","VarBinary","pkey","filter","primary","map","cols","def","nullable","join","constraint","substr","fromRecordset","recordset","t","colName","add","scale","precision","identity","readOnly","JSON","stringify","apply","cursor","buffer","escaped","char","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst TYPES = require('./datatypes').TYPES\nconst declareType = require('./datatypes').declare\nconst objectHasProperty = require('./utils').objectHasProperty\n\nconst MAX = 65535 // (1 << 16) - 1\nconst JSON_COLUMN_ID = 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B'\n\nfunction Table (name) {\n  if (name) {\n    const parsed = Table.parseName(name)\n    this.name = parsed.name\n    this.schema = parsed.schema\n    this.database = parsed.database\n    this.path = (this.database ? `[${this.database}].` : '') + (this.schema ? `[${this.schema}].` : '') + `[${this.name}]`\n    this.temporary = this.name.charAt(0) === '#'\n  }\n\n  this.columns = []\n  this.rows = []\n\n  Object.defineProperty(this.columns, 'add', {\n    value (name, column, options) {\n      if (column == null) {\n        throw new Error('Column data type is not defined.')\n      }\n      if (column instanceof Function) {\n        column = column()\n      }\n\n      options = options || {}\n      column.name = name;\n\n      ['nullable', 'primary', 'identity', 'readOnly', 'length'].forEach(prop => {\n        if (objectHasProperty(options, prop)) {\n          column[prop] = options[prop]\n        }\n      })\n\n      return this.push(column)\n    }\n  })\n\n  Object.defineProperty(this.rows, 'add', {\n    value () {\n      return this.push(Array.prototype.slice.call(arguments))\n    }\n  }\n  )\n}\n\n/*\n@private\n*/\n\nTable.prototype._makeBulk = function _makeBulk () {\n  for (let i = 0; i < this.columns.length; i++) {\n    const col = this.columns[i]\n    switch (col.type) {\n      case TYPES.Date:\n      case TYPES.DateTime:\n      case TYPES.DateTime2:\n        for (let j = 0; j < this.rows.length; j++) {\n          const dateValue = this.rows[j][i]\n          if (typeof dateValue === 'string' || typeof dateValue === 'number') {\n            const date = new Date(dateValue)\n            if (isNaN(date.getDate())) {\n              throw new TypeError('Invalid date value passed to bulk rows')\n            }\n            this.rows[j][i] = date\n          }\n        }\n        break\n\n      case TYPES.Xml:\n        col.type = TYPES.NVarChar(MAX).type\n        break\n\n      case TYPES.UDT:\n      case TYPES.Geography:\n      case TYPES.Geometry:\n        col.type = TYPES.VarBinary(MAX).type\n        break\n\n      default:\n        break\n    }\n  }\n\n  return this\n}\n\nTable.prototype.declare = function declare () {\n  const pkey = this.columns.filter(col => col.primary === true).map(col => col.name)\n  const cols = this.columns.map(col => {\n    const def = [`[${col.name}] ${declareType(col.type, col)}`]\n\n    if (col.nullable === true) {\n      def.push('null')\n    } else if (col.nullable === false) {\n      def.push('not null')\n    }\n\n    if (col.primary === true && pkey.length === 1) {\n      def.push('primary key')\n    }\n\n    return def.join(' ')\n  })\n\n  const constraint = pkey.length > 1 ? `, constraint PK_${this.temporary ? this.name.substr(1) : this.name} primary key (${pkey.join(', ')})` : ''\n  return `create table ${this.path} (${cols.join(', ')}${constraint})`\n}\n\nTable.fromRecordset = function fromRecordset (recordset, name) {\n  const t = new this(name)\n\n  for (const colName in recordset.columns) {\n    if (objectHasProperty(recordset.columns, colName)) {\n      const col = recordset.columns[colName]\n\n      t.columns.add(colName, {\n        type: col.type,\n        length: col.length,\n        scale: col.scale,\n        precision: col.precision\n      }, {\n        nullable: col.nullable,\n        identity: col.identity,\n        readOnly: col.readOnly\n      })\n    }\n  }\n\n  if (t.columns.length === 1 && t.columns[0].name === JSON_COLUMN_ID) {\n    for (let i = 0; i < recordset.length; i++) {\n      t.rows.add(JSON.stringify(recordset[i]))\n    }\n  } else {\n    for (let i = 0; i < recordset.length; i++) {\n      t.rows.add.apply(t.rows, t.columns.map(col => recordset[i][col.name]))\n    }\n  }\n\n  return t\n}\n\nTable.parseName = function parseName (name) {\n  const length = name.length\n  let cursor = -1\n  let buffer = ''\n  let escaped = false\n  const path = []\n\n  while (++cursor < length) {\n    const char = name.charAt(cursor)\n    if (char === '[') {\n      if (escaped) {\n        buffer += char\n      } else {\n        escaped = true\n      }\n    } else if (char === ']') {\n      if (escaped) {\n        escaped = false\n      } else {\n        throw new Error('Invalid table name.')\n      }\n    } else if (char === '.') {\n      if (escaped) {\n        buffer += char\n      } else {\n        path.push(buffer)\n        buffer = ''\n      }\n    } else {\n      buffer += char\n    }\n  }\n\n  if (buffer) {\n    path.push(buffer)\n  }\n\n  switch (path.length) {\n    case 1:\n      return {\n        name: path[0],\n        schema: null,\n        database: null\n      }\n\n    case 2:\n      return {\n        name: path[1],\n        schema: path[0],\n        database: null\n      }\n\n    case 3:\n      return {\n        name: path[2],\n        schema: path[1],\n        database: path[0]\n      }\n\n    default:\n      throw new Error('Invalid table name.')\n  }\n}\n\nmodule.exports = Table\n"]},"metadata":{},"sourceType":"script"}
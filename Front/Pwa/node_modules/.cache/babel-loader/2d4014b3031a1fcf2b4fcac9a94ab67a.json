{"ast":null,"code":"'use strict';\n\nvar ConnectionPool = require('./connection-pool');\n\nvar PreparedStatement = require('./prepared-statement');\n\nvar Request = require('./request');\n\nvar Transaction = require('./transaction');\n\nvar _require = require('../error'),\n    ConnectionError = _require.ConnectionError,\n    TransactionError = _require.TransactionError,\n    RequestError = _require.RequestError,\n    PreparedStatementError = _require.PreparedStatementError,\n    MSSQLError = _require.MSSQLError;\n\nvar shared = require('../shared');\n\nvar Table = require('../table');\n\nvar ISOLATION_LEVEL = require('../isolationlevel');\n\nvar _require2 = require('../datatypes'),\n    TYPES = _require2.TYPES;\n\nvar _require3 = require('../global-connection'),\n    connect = _require3.connect,\n    close = _require3.close,\n    on = _require3.on,\n    off = _require3.off,\n    removeListener = _require3.removeListener,\n    query = _require3.query,\n    batch = _require3.batch;\n\nmodule.exports = {\n  ConnectionPool: ConnectionPool,\n  Transaction: Transaction,\n  Request: Request,\n  PreparedStatement: PreparedStatement,\n  ConnectionError: ConnectionError,\n  TransactionError: TransactionError,\n  RequestError: RequestError,\n  PreparedStatementError: PreparedStatementError,\n  MSSQLError: MSSQLError,\n  driver: shared.driver,\n  exports: {\n    ConnectionError: ConnectionError,\n    TransactionError: TransactionError,\n    RequestError: RequestError,\n    PreparedStatementError: PreparedStatementError,\n    MSSQLError: MSSQLError,\n    Table: Table,\n    ISOLATION_LEVEL: ISOLATION_LEVEL,\n    TYPES: TYPES,\n    MAX: 65535,\n    // (1 << 16) - 1\n    map: shared.map,\n    getTypeByValue: shared.getTypeByValue,\n    connect: connect,\n    close: close,\n    on: on,\n    removeListener: removeListener,\n    off: off,\n    query: query,\n    batch: batch\n  }\n};\nObject.defineProperty(module.exports, 'Promise', {\n  enumerable: true,\n  get: function get() {\n    return shared.Promise;\n  },\n  set: function set(value) {\n    shared.Promise = value;\n  }\n});\n\nfor (var key in TYPES) {\n  var value = TYPES[key];\n  module.exports.exports[key] = value;\n  module.exports.exports[key.toUpperCase()] = value;\n}\n/**\r\n * @callback Request~requestCallback\r\n * @param {Error} err Error on error, otherwise null.\r\n * @param {Object} [result] Request result.\r\n */\n\n/**\r\n * @callback Request~bulkCallback\r\n * @param {Error} err Error on error, otherwise null.\r\n * @param {Number} [rowsAffected] Number of affected rows.\r\n */\n\n/**\r\n * @callback basicCallback\r\n * @param {Error} err Error on error, otherwise null.\r\n * @param {Connection} [connection] Acquired connection.\r\n */\n\n/**\r\n * @callback acquireCallback\r\n * @param {Error} err Error on error, otherwise null.\r\n * @param {Connection} [connection] Acquired connection.\r\n * @param {Object} [config] Connection config\r\n */\n\n/**\r\n * Dispatched after connection has established.\r\n * @event ConnectionPool#connect\r\n */\n\n/**\r\n * Dispatched after connection has closed a pool (by calling close).\r\n * @event ConnectionPool#close\r\n */\n\n/**\r\n * Dispatched when transaction begin.\r\n * @event Transaction#begin\r\n */\n\n/**\r\n * Dispatched on successful commit.\r\n * @event Transaction#commit\r\n */\n\n/**\r\n * Dispatched on successful rollback.\r\n * @event Transaction#rollback\r\n */\n\n/**\r\n * Dispatched when metadata for new recordset are parsed.\r\n * @event Request#recordset\r\n */\n\n/**\r\n * Dispatched when new row is parsed.\r\n * @event Request#row\r\n */\n\n/**\r\n * Dispatched when request is complete.\r\n * @event Request#done\r\n */\n\n/**\r\n * Dispatched on error.\r\n * @event Request#error\r\n */","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/lib/base/index.js"],"names":["ConnectionPool","require","PreparedStatement","Request","Transaction","ConnectionError","TransactionError","RequestError","PreparedStatementError","MSSQLError","shared","Table","ISOLATION_LEVEL","TYPES","connect","close","on","off","removeListener","query","batch","module","exports","driver","MAX","map","getTypeByValue","Object","defineProperty","enumerable","get","Promise","set","value","key","toUpperCase"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst ConnectionPool = require('./connection-pool')\r\nconst PreparedStatement = require('./prepared-statement')\r\nconst Request = require('./request')\r\nconst Transaction = require('./transaction')\r\nconst { ConnectionError, TransactionError, RequestError, PreparedStatementError, MSSQLError } = require('../error')\r\nconst shared = require('../shared')\r\nconst Table = require('../table')\r\nconst ISOLATION_LEVEL = require('../isolationlevel')\r\nconst { TYPES } = require('../datatypes')\r\nconst { connect, close, on, off, removeListener, query, batch } = require('../global-connection')\r\n\r\nmodule.exports = {\r\n  ConnectionPool,\r\n  Transaction,\r\n  Request,\r\n  PreparedStatement,\r\n  ConnectionError,\r\n  TransactionError,\r\n  RequestError,\r\n  PreparedStatementError,\r\n  MSSQLError,\r\n  driver: shared.driver,\r\n  exports: {\r\n    ConnectionError,\r\n    TransactionError,\r\n    RequestError,\r\n    PreparedStatementError,\r\n    MSSQLError,\r\n    Table,\r\n    ISOLATION_LEVEL,\r\n    TYPES,\r\n    MAX: 65535, // (1 << 16) - 1\r\n    map: shared.map,\r\n    getTypeByValue: shared.getTypeByValue,\r\n    connect,\r\n    close,\r\n    on,\r\n    removeListener,\r\n    off,\r\n    query,\r\n    batch\r\n  }\r\n}\r\n\r\nObject.defineProperty(module.exports, 'Promise', {\r\n  enumerable: true,\r\n  get: () => {\r\n    return shared.Promise\r\n  },\r\n  set: (value) => {\r\n    shared.Promise = value\r\n  }\r\n})\r\n\r\nfor (const key in TYPES) {\r\n  const value = TYPES[key]\r\n  module.exports.exports[key] = value\r\n  module.exports.exports[key.toUpperCase()] = value\r\n}\r\n\r\n/**\r\n * @callback Request~requestCallback\r\n * @param {Error} err Error on error, otherwise null.\r\n * @param {Object} [result] Request result.\r\n */\r\n\r\n/**\r\n * @callback Request~bulkCallback\r\n * @param {Error} err Error on error, otherwise null.\r\n * @param {Number} [rowsAffected] Number of affected rows.\r\n */\r\n\r\n/**\r\n * @callback basicCallback\r\n * @param {Error} err Error on error, otherwise null.\r\n * @param {Connection} [connection] Acquired connection.\r\n */\r\n\r\n/**\r\n * @callback acquireCallback\r\n * @param {Error} err Error on error, otherwise null.\r\n * @param {Connection} [connection] Acquired connection.\r\n * @param {Object} [config] Connection config\r\n */\r\n\r\n/**\r\n * Dispatched after connection has established.\r\n * @event ConnectionPool#connect\r\n */\r\n\r\n/**\r\n * Dispatched after connection has closed a pool (by calling close).\r\n * @event ConnectionPool#close\r\n */\r\n\r\n/**\r\n * Dispatched when transaction begin.\r\n * @event Transaction#begin\r\n */\r\n\r\n/**\r\n * Dispatched on successful commit.\r\n * @event Transaction#commit\r\n */\r\n\r\n/**\r\n * Dispatched on successful rollback.\r\n * @event Transaction#rollback\r\n */\r\n\r\n/**\r\n * Dispatched when metadata for new recordset are parsed.\r\n * @event Request#recordset\r\n */\r\n\r\n/**\r\n * Dispatched when new row is parsed.\r\n * @event Request#row\r\n */\r\n\r\n/**\r\n * Dispatched when request is complete.\r\n * @event Request#done\r\n */\r\n\r\n/**\r\n * Dispatched on error.\r\n * @event Request#error\r\n */\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __extends } from \"tslib\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { RestError } from \"../restError\";\nexport function exponentialRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\n  return {\n    create: function create(nextPolicy, options) {\n      return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\nvar DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\nvar DEFAULT_CLIENT_RETRY_COUNT = 3;\nvar DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\nvar DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n/**\r\n * @class\r\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\r\n */\n\nvar ExponentialRetryPolicy =\n/** @class */\nfunction (_super) {\n  __extends(ExponentialRetryPolicy, _super);\n  /**\r\n   * @constructor\r\n   * @param {RequestPolicy} nextPolicy The next RequestPolicy in the pipeline chain.\r\n   * @param {RequestPolicyOptionsLike} options The options for this RequestPolicy.\r\n   * @param {number} [retryCount]        The client retry count.\r\n   * @param {number} [retryInterval]     The client retry interval, in milliseconds.\r\n   * @param {number} [minRetryInterval]  The minimum retry interval, in milliseconds.\r\n   * @param {number} [maxRetryInterval]  The maximum retry interval, in milliseconds.\r\n   */\n\n\n  function ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    function isNumber(n) {\n      return typeof n === \"number\";\n    }\n\n    _this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    _this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    _this.minRetryInterval = isNumber(minRetryInterval) ? minRetryInterval : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    _this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    return _this;\n  }\n\n  ExponentialRetryPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    return this._nextPolicy.sendRequest(request.clone()).then(function (response) {\n      return retry(_this, request, response);\n    }).catch(function (error) {\n      return retry(_this, request, error.response, undefined, error);\n    });\n  };\n\n  return ExponentialRetryPolicy;\n}(BaseRequestPolicy);\n\nexport { ExponentialRetryPolicy };\n/**\r\n * Determines if the operation should be retried and how long to wait until the next retry.\r\n *\r\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\r\n * @param {number} statusCode The HTTP status code.\r\n * @param {RetryData} retryData  The retry data.\r\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\r\n */\n\nfunction shouldRetry(policy, statusCode, retryData) {\n  if (statusCode == undefined || statusCode < 500 && statusCode !== 408 || statusCode === 501 || statusCode === 505) {\n    return false;\n  }\n\n  var currentCount;\n\n  if (!retryData) {\n    throw new Error(\"retryData for the ExponentialRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = retryData && retryData.retryCount;\n  }\n\n  return currentCount < policy.retryCount;\n}\n/**\r\n * Updates the retry data for the next attempt.\r\n *\r\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\r\n * @param {RetryData} retryData  The retry data.\r\n * @param {RetryError} [err] The operation\"s error, if any.\r\n */\n\n\nfunction updateRetryData(policy, retryData, err) {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  } // Adjust retry count\n\n\n  retryData.retryCount++; // Adjust retry interval\n\n  var incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  var boundedRandDelta = policy.retryInterval * 0.8 + Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n  retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\n  return retryData;\n}\n\nfunction retry(policy, request, response, retryData, requestError) {\n  retryData = updateRetryData(policy, retryData, requestError);\n  var isAborted = request.abortSignal && request.abortSignal.aborted;\n\n  if (!isAborted && shouldRetry(policy, response && response.status, retryData)) {\n    return utils.delay(retryData.retryInterval).then(function () {\n      return policy._nextPolicy.sendRequest(request.clone());\n    }).then(function (res) {\n      return retry(policy, request, res, retryData, undefined);\n    }).catch(function (err) {\n      return retry(policy, request, response, retryData, err);\n    });\n  } else if (isAborted || requestError || !response) {\n    // If the operation failed in the end, return all errors instead of just the last one\n    var err = retryData.error || new RestError(\"Failed to send the request.\", RestError.REQUEST_SEND_ERROR, response && response.status, response && response.request, response);\n    return Promise.reject(err);\n  } else {\n    return Promise.resolve(response);\n  }\n}","map":{"version":3,"sources":["../../../lib/policies/exponentialRetryPolicy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nimport { __extends } from \"tslib\";\r\nimport * as utils from \"../util/utils\";\r\nimport { BaseRequestPolicy, } from \"./requestPolicy\";\r\nimport { RestError } from \"../restError\";\r\nexport function exponentialRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\r\n    return {\r\n        create: function (nextPolicy, options) {\r\n            return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\r\n        },\r\n    };\r\n}\r\nvar DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\r\nvar DEFAULT_CLIENT_RETRY_COUNT = 3;\r\nvar DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\r\nvar DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\r\n/**\r\n * @class\r\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\r\n */\r\nvar ExponentialRetryPolicy = /** @class */ (function (_super) {\r\n    __extends(ExponentialRetryPolicy, _super);\r\n    /**\r\n     * @constructor\r\n     * @param {RequestPolicy} nextPolicy The next RequestPolicy in the pipeline chain.\r\n     * @param {RequestPolicyOptionsLike} options The options for this RequestPolicy.\r\n     * @param {number} [retryCount]        The client retry count.\r\n     * @param {number} [retryInterval]     The client retry interval, in milliseconds.\r\n     * @param {number} [minRetryInterval]  The minimum retry interval, in milliseconds.\r\n     * @param {number} [maxRetryInterval]  The maximum retry interval, in milliseconds.\r\n     */\r\n    function ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\r\n        var _this = _super.call(this, nextPolicy, options) || this;\r\n        function isNumber(n) {\r\n            return typeof n === \"number\";\r\n        }\r\n        _this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\r\n        _this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\r\n        _this.minRetryInterval = isNumber(minRetryInterval)\r\n            ? minRetryInterval\r\n            : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\r\n        _this.maxRetryInterval = isNumber(maxRetryInterval)\r\n            ? maxRetryInterval\r\n            : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\r\n        return _this;\r\n    }\r\n    ExponentialRetryPolicy.prototype.sendRequest = function (request) {\r\n        var _this = this;\r\n        return this._nextPolicy\r\n            .sendRequest(request.clone())\r\n            .then(function (response) { return retry(_this, request, response); })\r\n            .catch(function (error) { return retry(_this, request, error.response, undefined, error); });\r\n    };\r\n    return ExponentialRetryPolicy;\r\n}(BaseRequestPolicy));\r\nexport { ExponentialRetryPolicy };\r\n/**\r\n * Determines if the operation should be retried and how long to wait until the next retry.\r\n *\r\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\r\n * @param {number} statusCode The HTTP status code.\r\n * @param {RetryData} retryData  The retry data.\r\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\r\n */\r\nfunction shouldRetry(policy, statusCode, retryData) {\r\n    if (statusCode == undefined ||\r\n        (statusCode < 500 && statusCode !== 408) ||\r\n        statusCode === 501 ||\r\n        statusCode === 505) {\r\n        return false;\r\n    }\r\n    var currentCount;\r\n    if (!retryData) {\r\n        throw new Error(\"retryData for the ExponentialRetryPolicyFilter cannot be null.\");\r\n    }\r\n    else {\r\n        currentCount = retryData && retryData.retryCount;\r\n    }\r\n    return currentCount < policy.retryCount;\r\n}\r\n/**\r\n * Updates the retry data for the next attempt.\r\n *\r\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\r\n * @param {RetryData} retryData  The retry data.\r\n * @param {RetryError} [err] The operation\"s error, if any.\r\n */\r\nfunction updateRetryData(policy, retryData, err) {\r\n    if (!retryData) {\r\n        retryData = {\r\n            retryCount: 0,\r\n            retryInterval: 0,\r\n        };\r\n    }\r\n    if (err) {\r\n        if (retryData.error) {\r\n            err.innerError = retryData.error;\r\n        }\r\n        retryData.error = err;\r\n    }\r\n    // Adjust retry count\r\n    retryData.retryCount++;\r\n    // Adjust retry interval\r\n    var incrementDelta = Math.pow(2, retryData.retryCount) - 1;\r\n    var boundedRandDelta = policy.retryInterval * 0.8 +\r\n        Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\r\n    incrementDelta *= boundedRandDelta;\r\n    retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\r\n    return retryData;\r\n}\r\nfunction retry(policy, request, response, retryData, requestError) {\r\n    retryData = updateRetryData(policy, retryData, requestError);\r\n    var isAborted = request.abortSignal && request.abortSignal.aborted;\r\n    if (!isAborted && shouldRetry(policy, response && response.status, retryData)) {\r\n        return utils\r\n            .delay(retryData.retryInterval)\r\n            .then(function () { return policy._nextPolicy.sendRequest(request.clone()); })\r\n            .then(function (res) { return retry(policy, request, res, retryData, undefined); })\r\n            .catch(function (err) { return retry(policy, request, response, retryData, err); });\r\n    }\r\n    else if (isAborted || requestError || !response) {\r\n        // If the operation failed in the end, return all errors instead of just the last one\r\n        var err = retryData.error ||\r\n            new RestError(\"Failed to send the request.\", RestError.REQUEST_SEND_ERROR, response && response.status, response && response.request, response);\r\n        return Promise.reject(err);\r\n    }\r\n    else {\r\n        return Promise.resolve(response);\r\n    }\r\n}\r\n//# sourceMappingURL=exponentialRetryPolicy.js.map"]},"metadata":{},"sourceType":"module"}
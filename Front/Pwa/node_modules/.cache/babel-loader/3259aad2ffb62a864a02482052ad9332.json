{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _stream = require(\"stream\");\n\nvar _token = require(\"./token/token\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * @private\r\n */\n\n\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\n/**\r\n * @private\r\n */\n\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n/**\r\n * @private\r\n */\n\nconst rowTokenBuffer = Buffer.from([_token.TYPE.ROW]);\nconst textPointerAndTimestampBuffer = Buffer.from([// TextPointer length\n0x10, // TextPointer\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\nconst textPointerNullBuffer = Buffer.from([0x00]); // A transform that converts rows to packets.\n\nclass RowTransform extends _stream.Transform {\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n  constructor(bulkLoad) {\n    super({\n      writableObjectMode: true\n    });\n    this.columnMetadataWritten = void 0;\n    this.bulkLoad = void 0;\n    this.mainOptions = void 0;\n    this.columns = void 0;\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n    this.columnMetadataWritten = false;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _transform(row, _encoding, callback) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n\n    this.push(rowTokenBuffer);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n      let value = Array.isArray(row) ? row[i] : row[c.objName];\n\n      if (this.bulkLoad.options.validateBulkLoadParameters) {\n        try {\n          value = c.type.validate(value);\n        } catch (error) {\n          return callback(error);\n        }\n      }\n\n      const parameter = {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: value\n      };\n\n      if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\n        if (value == null) {\n          this.push(textPointerNullBuffer);\n          continue;\n        }\n\n        this.push(textPointerAndTimestampBuffer);\n      }\n\n      this.push(c.type.generateParameterLength(parameter, this.mainOptions));\n\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\n        this.push(chunk);\n      }\n    }\n\n    process.nextTick(callback);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _flush(callback) {\n    this.push(this.bulkLoad.createDoneToken());\n    process.nextTick(callback);\n  }\n\n}\n/**\r\n * A BulkLoad instance is used to perform a bulk insert.\r\n *\r\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\r\n *\r\n * Example of BulkLoad Usages:\r\n *\r\n * ```js\r\n * // optional BulkLoad options\r\n * const options = { keepNulls: true };\r\n *\r\n * // instantiate - provide the table where you'll be inserting to, options and a callback\r\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\r\n *   console.log('inserted %d rows', rowCount);\r\n * });\r\n *\r\n * // setup your columns - always indicate whether the column is nullable\r\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\r\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\r\n *\r\n * // execute\r\n * connection.execBulkLoad(bulkLoad, [\r\n *   { myInt: 7, myString: 'hello' },\r\n *   { myInt: 23, myString: 'world' }\r\n * ]);\r\n * ```\r\n */\n\n\nclass BulkLoad extends _events.EventEmitter {\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n  constructor(table, connectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false,\n    order = {}\n  }, callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    if (typeof order !== 'object' || order === null) {\n      throw new TypeError('The \"options.order\" property must be of type object.');\n    }\n\n    for (const [column, direction] of Object.entries(order)) {\n      if (direction !== 'ASC' && direction !== 'DESC') {\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\n      }\n    }\n\n    super();\n    this.error = void 0;\n    this.canceled = void 0;\n    this.executionStarted = void 0;\n    this.streamingMode = void 0;\n    this.table = void 0;\n    this.timeout = void 0;\n    this.options = void 0;\n    this.callback = void 0;\n    this.columns = void 0;\n    this.columnsByName = void 0;\n    this.firstRowWritten = void 0;\n    this.rowToPacketTransform = void 0;\n    this.bulkOptions = void 0;\n    this.connection = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.bulkOptions = {\n      checkConstraints,\n      fireTriggers,\n      keepNulls,\n      lockTable,\n      order\n    };\n  }\n  /**\r\n   * Adds a column to the bulk load.\r\n   *\r\n   * The column definitions should match the table you are trying to insert into.\r\n   * Attempting to call addColumn after the first row has been added will throw an exception.\r\n   *\r\n   * ```js\r\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\r\n   * ```\r\n   *\r\n   * @param name The name of the column.\r\n   * @param type One of the supported `data types`.\r\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\r\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\r\n   * @param nullable Indicates whether the column accepts NULL values.\r\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\r\n   * @param precision For Numeric, Decimal.\r\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\r\n  */\n\n\n  addColumn(name, type, {\n    output = false,\n    length,\n    precision,\n    scale,\n    objName = name,\n    nullable = true\n  }) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n\n    const column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable\n    };\n\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n\n    this.columns.push(column);\n    this.columnsByName[name] = column;\n  }\n  /**\r\n   * Adds a row to the bulk insert.\r\n   *\r\n   * ```js\r\n   * bulkLoad.addRow({ first_name: 'Bill', last_name: 'Gates' });\r\n   * ```\r\n   *\r\n   * @param row An object of key/value pairs representing column name (or objName) and value.\r\n   *\r\n   * @deprecated This method is deprecated. Instead of adding rows individually, you should pass\r\n   *   all row objects when calling [[Connection.execBulkLoad]]. This method will be removed in the future.\r\n   */\n\n\n  addRow(...input) {\n    this.firstRowWritten = true;\n    let row;\n\n    if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\n      row = input;\n    } else {\n      row = input[0];\n    } // write each column\n\n\n    if (Array.isArray(row)) {\n      this.rowToPacketTransform.write(this.columns.map((column, i) => {\n        let value = row[i];\n\n        if (this.options.validateBulkLoadParameters) {\n          value = column.type.validate(value);\n        }\n\n        return value;\n      }));\n    } else {\n      this.rowToPacketTransform.write(this.columns.map(column => {\n        let value = row[column.objName];\n\n        if (this.options.validateBulkLoadParameters) {\n          value = column.type.validate(value);\n        }\n\n        return value;\n      }));\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  getOptionsSql() {\n    const addOptions = [];\n\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n\n    if (this.bulkOptions.order) {\n      const orderColumns = [];\n\n      for (const [column, direction] of Object.entries(this.bulkOptions.order)) {\n        orderColumns.push(`${column} ${direction}`);\n      }\n\n      if (orderColumns.length) {\n        addOptions.push(`ORDER (${orderColumns.join(', ')})`);\n      }\n    }\n\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ', ';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n    }\n\n    sql += ')';\n    sql += this.getOptionsSql();\n    return sql;\n  }\n  /**\r\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\r\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\r\n   *\r\n   * ```js\r\n   * var sql = bulkLoad.getTableCreationSql();\r\n   * ```\r\n   *\r\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\r\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\r\n   */\n\n\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n\n    sql += '\\n)';\n    return sql;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  getColMetaData() {\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n    tBuf.writeUInt16LE(this.columns.length);\n\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j]; // UserType\n\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      } // Flags\n\n\n      let flags = FLAGS.updateableReadWrite;\n\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // TableName\n\n      if (c.type.hasTableName) {\n        tBuf.writeUsVarchar(this.table, 'ucs2');\n      } // ColName\n\n\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n\n    return tBuf.data;\n  }\n  /**\r\n   * Sets a timeout for this bulk load.\r\n   *\r\n   * ```js\r\n   * bulkLoad.setTimeout(timeout);\r\n   * ```\r\n   *\r\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\r\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\r\n   */\n\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(_token.TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n\n    return tBuf.data;\n  }\n  /**\r\n   * Switches the `BulkLoad` object into streaming mode and returns a\r\n   * [writable stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_streams)\r\n   * that can be used to send a large amount of rows to the server.\r\n   *\r\n   * ```js\r\n   * const bulkLoad = connection.newBulkLoad(...);\r\n   * bulkLoad.addColumn(...);\r\n   *\r\n   * const rowStream = bulkLoad.getRowStream();\r\n   *\r\n   * connection.execBulkLoad(bulkLoad);\r\n   * ```\r\n   *\r\n   * In streaming mode, [[addRow]] cannot be used. Instead all data rows must be written to the returned stream object.\r\n   * The stream implementation uses data flow control to prevent memory overload. [`stream.write()`](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_write_chunk_encoding_callback)\r\n   * returns `false` to indicate that data transfer should be paused.\r\n   *\r\n   * After that, the stream emits a ['drain' event](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_event_drain)\r\n   * when it is ready to resume data transfer.\r\n   *\r\n   * @deprecated\r\n   *   This method is deprecated. Instead of writing rows to the stream returned by this method,\r\n   *   you can pass any object that implements the `Iterable` or `AsyncIterable` interface (e.g. a `Readable`\r\n   *   stream or an `AsyncGenerator`) when calling [[Connection.execBulkLoad]]. This method will be removed in the future.\r\n   */\n\n\n  getRowStream() {\n    if (this.firstRowWritten) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\n    }\n\n    this.streamingMode = true;\n    return this.rowToPacketTransform;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n}\n\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/bulk-load.js"],"names":["Object","defineProperty","exports","value","default","_events","require","_writableTrackingBuffer","_interopRequireDefault","_stream","_token","obj","__esModule","FLAGS","nullable","caseSen","updateableReadWrite","updateableUnknown","identity","computed","fixedLenCLRType","sparseColumnSet","hidden","key","nullableUnknown","DONE_STATUS","FINAL","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","rowTokenBuffer","Buffer","from","TYPE","ROW","textPointerAndTimestampBuffer","textPointerNullBuffer","RowTransform","Transform","constructor","bulkLoad","writableObjectMode","columnMetadataWritten","mainOptions","columns","options","_transform","row","_encoding","callback","push","getColMetaData","i","length","c","Array","isArray","objName","validateBulkLoadParameters","type","validate","error","parameter","scale","precision","name","generateParameterLength","chunk","generateParameterData","process","nextTick","_flush","createDoneToken","BulkLoad","EventEmitter","table","connectionOptions","checkConstraints","fireTriggers","keepNulls","lockTable","order","TypeError","column","direction","entries","canceled","executionStarted","streamingMode","timeout","columnsByName","firstRowWritten","rowToPacketTransform","bulkOptions","connection","rows","rst","rowCount","undefined","addColumn","output","Error","id","resolveLength","resolvePrecision","resolveScale","addRow","input","write","map","getOptionsSql","addOptions","orderColumns","join","getBulkInsertSql","sql","len","declaration","getTableCreationSql","tBuf","writeUInt8","COLMETADATA","writeUInt16LE","j","tdsVersion","writeUInt32LE","flags","writeBuffer","generateTypeInfo","hasTableName","writeUsVarchar","writeBVarchar","data","setTimeout","DONE","status","getRowStream","cancel","emit","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _events = require(\"events\");\r\n\r\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\r\n\r\nvar _stream = require(\"stream\");\r\n\r\nvar _token = require(\"./token/token\");\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * @private\r\n */\r\nconst FLAGS = {\r\n  nullable: 1 << 0,\r\n  caseSen: 1 << 1,\r\n  updateableReadWrite: 1 << 2,\r\n  updateableUnknown: 1 << 3,\r\n  identity: 1 << 4,\r\n  computed: 1 << 5,\r\n  // introduced in TDS 7.2\r\n  fixedLenCLRType: 1 << 8,\r\n  // introduced in TDS 7.2\r\n  sparseColumnSet: 1 << 10,\r\n  // introduced in TDS 7.3.B\r\n  hidden: 1 << 13,\r\n  // introduced in TDS 7.2\r\n  key: 1 << 14,\r\n  // introduced in TDS 7.2\r\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\r\n\r\n};\r\n/**\r\n * @private\r\n */\r\n\r\nconst DONE_STATUS = {\r\n  FINAL: 0x00,\r\n  MORE: 0x1,\r\n  ERROR: 0x2,\r\n  INXACT: 0x4,\r\n  COUNT: 0x10,\r\n  ATTN: 0x20,\r\n  SRVERROR: 0x100\r\n};\r\n/**\r\n * @private\r\n */\r\n\r\nconst rowTokenBuffer = Buffer.from([_token.TYPE.ROW]);\r\nconst textPointerAndTimestampBuffer = Buffer.from([// TextPointer length\r\n0x10, // TextPointer\r\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp\r\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\r\nconst textPointerNullBuffer = Buffer.from([0x00]); // A transform that converts rows to packets.\r\n\r\nclass RowTransform extends _stream.Transform {\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  constructor(bulkLoad) {\r\n    super({\r\n      writableObjectMode: true\r\n    });\r\n    this.columnMetadataWritten = void 0;\r\n    this.bulkLoad = void 0;\r\n    this.mainOptions = void 0;\r\n    this.columns = void 0;\r\n    this.bulkLoad = bulkLoad;\r\n    this.mainOptions = bulkLoad.options;\r\n    this.columns = bulkLoad.columns;\r\n    this.columnMetadataWritten = false;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  _transform(row, _encoding, callback) {\r\n    if (!this.columnMetadataWritten) {\r\n      this.push(this.bulkLoad.getColMetaData());\r\n      this.columnMetadataWritten = true;\r\n    }\r\n\r\n    this.push(rowTokenBuffer);\r\n\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      const c = this.columns[i];\r\n      let value = Array.isArray(row) ? row[i] : row[c.objName];\r\n\r\n      if (this.bulkLoad.options.validateBulkLoadParameters) {\r\n        try {\r\n          value = c.type.validate(value);\r\n        } catch (error) {\r\n          return callback(error);\r\n        }\r\n      }\r\n\r\n      const parameter = {\r\n        length: c.length,\r\n        scale: c.scale,\r\n        precision: c.precision,\r\n        value: value\r\n      };\r\n\r\n      if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\r\n        if (value == null) {\r\n          this.push(textPointerNullBuffer);\r\n          continue;\r\n        }\r\n\r\n        this.push(textPointerAndTimestampBuffer);\r\n      }\r\n\r\n      this.push(c.type.generateParameterLength(parameter, this.mainOptions));\r\n\r\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\r\n        this.push(chunk);\r\n      }\r\n    }\r\n\r\n    process.nextTick(callback);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  _flush(callback) {\r\n    this.push(this.bulkLoad.createDoneToken());\r\n    process.nextTick(callback);\r\n  }\r\n\r\n}\r\n/**\r\n * A BulkLoad instance is used to perform a bulk insert.\r\n *\r\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\r\n *\r\n * Example of BulkLoad Usages:\r\n *\r\n * ```js\r\n * // optional BulkLoad options\r\n * const options = { keepNulls: true };\r\n *\r\n * // instantiate - provide the table where you'll be inserting to, options and a callback\r\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\r\n *   console.log('inserted %d rows', rowCount);\r\n * });\r\n *\r\n * // setup your columns - always indicate whether the column is nullable\r\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\r\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\r\n *\r\n * // execute\r\n * connection.execBulkLoad(bulkLoad, [\r\n *   { myInt: 7, myString: 'hello' },\r\n *   { myInt: 23, myString: 'world' }\r\n * ]);\r\n * ```\r\n */\r\n\r\n\r\nclass BulkLoad extends _events.EventEmitter {\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  constructor(table, connectionOptions, {\r\n    checkConstraints = false,\r\n    fireTriggers = false,\r\n    keepNulls = false,\r\n    lockTable = false,\r\n    order = {}\r\n  }, callback) {\r\n    if (typeof checkConstraints !== 'boolean') {\r\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\r\n    }\r\n\r\n    if (typeof fireTriggers !== 'boolean') {\r\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\r\n    }\r\n\r\n    if (typeof keepNulls !== 'boolean') {\r\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\r\n    }\r\n\r\n    if (typeof lockTable !== 'boolean') {\r\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\r\n    }\r\n\r\n    if (typeof order !== 'object' || order === null) {\r\n      throw new TypeError('The \"options.order\" property must be of type object.');\r\n    }\r\n\r\n    for (const [column, direction] of Object.entries(order)) {\r\n      if (direction !== 'ASC' && direction !== 'DESC') {\r\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\r\n      }\r\n    }\r\n\r\n    super();\r\n    this.error = void 0;\r\n    this.canceled = void 0;\r\n    this.executionStarted = void 0;\r\n    this.streamingMode = void 0;\r\n    this.table = void 0;\r\n    this.timeout = void 0;\r\n    this.options = void 0;\r\n    this.callback = void 0;\r\n    this.columns = void 0;\r\n    this.columnsByName = void 0;\r\n    this.firstRowWritten = void 0;\r\n    this.rowToPacketTransform = void 0;\r\n    this.bulkOptions = void 0;\r\n    this.connection = void 0;\r\n    this.rows = void 0;\r\n    this.rst = void 0;\r\n    this.rowCount = void 0;\r\n    this.error = undefined;\r\n    this.canceled = false;\r\n    this.executionStarted = false;\r\n    this.table = table;\r\n    this.options = connectionOptions;\r\n    this.callback = callback;\r\n    this.columns = [];\r\n    this.columnsByName = {};\r\n    this.firstRowWritten = false;\r\n    this.streamingMode = false;\r\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\r\n\r\n    this.bulkOptions = {\r\n      checkConstraints,\r\n      fireTriggers,\r\n      keepNulls,\r\n      lockTable,\r\n      order\r\n    };\r\n  }\r\n  /**\r\n   * Adds a column to the bulk load.\r\n   *\r\n   * The column definitions should match the table you are trying to insert into.\r\n   * Attempting to call addColumn after the first row has been added will throw an exception.\r\n   *\r\n   * ```js\r\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\r\n   * ```\r\n   *\r\n   * @param name The name of the column.\r\n   * @param type One of the supported `data types`.\r\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\r\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\r\n   * @param nullable Indicates whether the column accepts NULL values.\r\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\r\n   * @param precision For Numeric, Decimal.\r\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\r\n  */\r\n\r\n\r\n  addColumn(name, type, {\r\n    output = false,\r\n    length,\r\n    precision,\r\n    scale,\r\n    objName = name,\r\n    nullable = true\r\n  }) {\r\n    if (this.firstRowWritten) {\r\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\r\n    }\r\n\r\n    if (this.executionStarted) {\r\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\r\n    }\r\n\r\n    const column = {\r\n      type: type,\r\n      name: name,\r\n      value: null,\r\n      output: output,\r\n      length: length,\r\n      precision: precision,\r\n      scale: scale,\r\n      objName: objName,\r\n      nullable: nullable\r\n    };\r\n\r\n    if ((type.id & 0x30) === 0x20) {\r\n      if (column.length == null && type.resolveLength) {\r\n        column.length = type.resolveLength(column);\r\n      }\r\n    }\r\n\r\n    if (type.resolvePrecision && column.precision == null) {\r\n      column.precision = type.resolvePrecision(column);\r\n    }\r\n\r\n    if (type.resolveScale && column.scale == null) {\r\n      column.scale = type.resolveScale(column);\r\n    }\r\n\r\n    this.columns.push(column);\r\n    this.columnsByName[name] = column;\r\n  }\r\n  /**\r\n   * Adds a row to the bulk insert.\r\n   *\r\n   * ```js\r\n   * bulkLoad.addRow({ first_name: 'Bill', last_name: 'Gates' });\r\n   * ```\r\n   *\r\n   * @param row An object of key/value pairs representing column name (or objName) and value.\r\n   *\r\n   * @deprecated This method is deprecated. Instead of adding rows individually, you should pass\r\n   *   all row objects when calling [[Connection.execBulkLoad]]. This method will be removed in the future.\r\n   */\r\n\r\n\r\n  addRow(...input) {\r\n    this.firstRowWritten = true;\r\n    let row;\r\n\r\n    if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\r\n      row = input;\r\n    } else {\r\n      row = input[0];\r\n    } // write each column\r\n\r\n\r\n    if (Array.isArray(row)) {\r\n      this.rowToPacketTransform.write(this.columns.map((column, i) => {\r\n        let value = row[i];\r\n\r\n        if (this.options.validateBulkLoadParameters) {\r\n          value = column.type.validate(value);\r\n        }\r\n\r\n        return value;\r\n      }));\r\n    } else {\r\n      this.rowToPacketTransform.write(this.columns.map(column => {\r\n        let value = row[column.objName];\r\n\r\n        if (this.options.validateBulkLoadParameters) {\r\n          value = column.type.validate(value);\r\n        }\r\n\r\n        return value;\r\n      }));\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getOptionsSql() {\r\n    const addOptions = [];\r\n\r\n    if (this.bulkOptions.checkConstraints) {\r\n      addOptions.push('CHECK_CONSTRAINTS');\r\n    }\r\n\r\n    if (this.bulkOptions.fireTriggers) {\r\n      addOptions.push('FIRE_TRIGGERS');\r\n    }\r\n\r\n    if (this.bulkOptions.keepNulls) {\r\n      addOptions.push('KEEP_NULLS');\r\n    }\r\n\r\n    if (this.bulkOptions.lockTable) {\r\n      addOptions.push('TABLOCK');\r\n    }\r\n\r\n    if (this.bulkOptions.order) {\r\n      const orderColumns = [];\r\n\r\n      for (const [column, direction] of Object.entries(this.bulkOptions.order)) {\r\n        orderColumns.push(`${column} ${direction}`);\r\n      }\r\n\r\n      if (orderColumns.length) {\r\n        addOptions.push(`ORDER (${orderColumns.join(', ')})`);\r\n      }\r\n    }\r\n\r\n    if (addOptions.length > 0) {\r\n      return ` WITH (${addOptions.join(',')})`;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getBulkInsertSql() {\r\n    let sql = 'insert bulk ' + this.table + '(';\r\n\r\n    for (let i = 0, len = this.columns.length; i < len; i++) {\r\n      const c = this.columns[i];\r\n\r\n      if (i !== 0) {\r\n        sql += ', ';\r\n      }\r\n\r\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\r\n    }\r\n\r\n    sql += ')';\r\n    sql += this.getOptionsSql();\r\n    return sql;\r\n  }\r\n  /**\r\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\r\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\r\n   *\r\n   * ```js\r\n   * var sql = bulkLoad.getTableCreationSql();\r\n   * ```\r\n   *\r\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\r\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\r\n   */\r\n\r\n\r\n  getTableCreationSql() {\r\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\r\n\r\n    for (let i = 0, len = this.columns.length; i < len; i++) {\r\n      const c = this.columns[i];\r\n\r\n      if (i !== 0) {\r\n        sql += ',\\n';\r\n      }\r\n\r\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\r\n\r\n      if (c.nullable !== undefined) {\r\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\r\n      }\r\n    }\r\n\r\n    sql += '\\n)';\r\n    return sql;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getColMetaData() {\r\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\r\n\r\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\r\n\r\n    tBuf.writeUInt16LE(this.columns.length);\r\n\r\n    for (let j = 0, len = this.columns.length; j < len; j++) {\r\n      const c = this.columns[j]; // UserType\r\n\r\n      if (this.options.tdsVersion < '7_2') {\r\n        tBuf.writeUInt16LE(0);\r\n      } else {\r\n        tBuf.writeUInt32LE(0);\r\n      } // Flags\r\n\r\n\r\n      let flags = FLAGS.updateableReadWrite;\r\n\r\n      if (c.nullable) {\r\n        flags |= FLAGS.nullable;\r\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\r\n        flags |= FLAGS.nullableUnknown;\r\n      }\r\n\r\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\r\n\r\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // TableName\r\n\r\n      if (c.type.hasTableName) {\r\n        tBuf.writeUsVarchar(this.table, 'ucs2');\r\n      } // ColName\r\n\r\n\r\n      tBuf.writeBVarchar(c.name, 'ucs2');\r\n    }\r\n\r\n    return tBuf.data;\r\n  }\r\n  /**\r\n   * Sets a timeout for this bulk load.\r\n   *\r\n   * ```js\r\n   * bulkLoad.setTimeout(timeout);\r\n   * ```\r\n   *\r\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\r\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\r\n   */\r\n\r\n\r\n  setTimeout(timeout) {\r\n    this.timeout = timeout;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createDoneToken() {\r\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\r\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\r\n    tBuf.writeUInt8(_token.TYPE.DONE);\r\n    const status = DONE_STATUS.FINAL;\r\n    tBuf.writeUInt16LE(status);\r\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\r\n\r\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\r\n\r\n    if (this.options.tdsVersion >= '7_2') {\r\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\r\n    }\r\n\r\n    return tBuf.data;\r\n  }\r\n  /**\r\n   * Switches the `BulkLoad` object into streaming mode and returns a\r\n   * [writable stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_streams)\r\n   * that can be used to send a large amount of rows to the server.\r\n   *\r\n   * ```js\r\n   * const bulkLoad = connection.newBulkLoad(...);\r\n   * bulkLoad.addColumn(...);\r\n   *\r\n   * const rowStream = bulkLoad.getRowStream();\r\n   *\r\n   * connection.execBulkLoad(bulkLoad);\r\n   * ```\r\n   *\r\n   * In streaming mode, [[addRow]] cannot be used. Instead all data rows must be written to the returned stream object.\r\n   * The stream implementation uses data flow control to prevent memory overload. [`stream.write()`](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_write_chunk_encoding_callback)\r\n   * returns `false` to indicate that data transfer should be paused.\r\n   *\r\n   * After that, the stream emits a ['drain' event](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_event_drain)\r\n   * when it is ready to resume data transfer.\r\n   *\r\n   * @deprecated\r\n   *   This method is deprecated. Instead of writing rows to the stream returned by this method,\r\n   *   you can pass any object that implements the `Iterable` or `AsyncIterable` interface (e.g. a `Readable`\r\n   *   stream or an `AsyncGenerator`) when calling [[Connection.execBulkLoad]]. This method will be removed in the future.\r\n   */\r\n\r\n\r\n  getRowStream() {\r\n    if (this.firstRowWritten) {\r\n      throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\r\n    }\r\n\r\n    if (this.executionStarted) {\r\n      throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\r\n    }\r\n\r\n    this.streamingMode = true;\r\n    return this.rowToPacketTransform;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  cancel() {\r\n    if (this.canceled) {\r\n      return;\r\n    }\r\n\r\n    this.canceled = true;\r\n    this.emit('cancel');\r\n  }\r\n\r\n}\r\n\r\nvar _default = BulkLoad;\r\nexports.default = _default;\r\nmodule.exports = BulkLoad;"]},"metadata":{},"sourceType":"script"}
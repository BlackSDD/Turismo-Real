{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _jsbi = _interopRequireDefault(require(\"jsbi\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\nvar SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\nvar UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nvar ZERO_LENGTH_BUFFER = Buffer.alloc(0);\n/**\r\n  A Buffer-like class that tracks position.\r\n\r\n  As values are written, the position advances by the size of the written data.\r\n  When writing, automatically allocates new buffers if there's not enough space.\r\n */\n\nvar WritableTrackingBuffer = /*#__PURE__*/function () {\n  function WritableTrackingBuffer(initialSize, encoding, doubleSizeGrowth) {\n    _classCallCheck(this, WritableTrackingBuffer);\n\n    this.initialSize = void 0;\n    this.encoding = void 0;\n    this.doubleSizeGrowth = void 0;\n    this.buffer = void 0;\n    this.compositeBuffer = void 0;\n    this.position = void 0;\n    this.initialSize = initialSize;\n    this.encoding = encoding || 'ucs2';\n    this.doubleSizeGrowth = doubleSizeGrowth || false;\n    this.buffer = Buffer.alloc(this.initialSize, 0);\n    this.compositeBuffer = ZERO_LENGTH_BUFFER;\n    this.position = 0;\n  }\n\n  _createClass(WritableTrackingBuffer, [{\n    key: \"data\",\n    get: function get() {\n      this.newBuffer(0);\n      return this.compositeBuffer;\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(buffer) {\n      var length = buffer.length;\n      this.makeRoomFor(length);\n      buffer.copy(this.buffer, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"makeRoomFor\",\n    value: function makeRoomFor(requiredLength) {\n      if (this.buffer.length - this.position < requiredLength) {\n        if (this.doubleSizeGrowth) {\n          var size = Math.max(128, this.buffer.length * 2);\n\n          while (size < requiredLength) {\n            size *= 2;\n          }\n\n          this.newBuffer(size);\n        } else {\n          this.newBuffer(requiredLength);\n        }\n      }\n    }\n  }, {\n    key: \"newBuffer\",\n    value: function newBuffer(size) {\n      var buffer = this.buffer.slice(0, this.position);\n      this.compositeBuffer = Buffer.concat([this.compositeBuffer, buffer]);\n      this.buffer = size === 0 ? ZERO_LENGTH_BUFFER : Buffer.alloc(size, 0);\n      this.position = 0;\n    }\n  }, {\n    key: \"writeUInt8\",\n    value: function writeUInt8(value) {\n      var length = 1;\n      this.makeRoomFor(length);\n      this.buffer.writeUInt8(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeUInt16LE\",\n    value: function writeUInt16LE(value) {\n      var length = 2;\n      this.makeRoomFor(length);\n      this.buffer.writeUInt16LE(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeUShort\",\n    value: function writeUShort(value) {\n      this.writeUInt16LE(value);\n    }\n  }, {\n    key: \"writeUInt16BE\",\n    value: function writeUInt16BE(value) {\n      var length = 2;\n      this.makeRoomFor(length);\n      this.buffer.writeUInt16BE(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeUInt24LE\",\n    value: function writeUInt24LE(value) {\n      var length = 3;\n      this.makeRoomFor(length);\n      this.buffer[this.position + 2] = value >>> 16 & 0xff;\n      this.buffer[this.position + 1] = value >>> 8 & 0xff;\n      this.buffer[this.position] = value & 0xff;\n      this.position += length;\n    }\n  }, {\n    key: \"writeUInt32LE\",\n    value: function writeUInt32LE(value) {\n      var length = 4;\n      this.makeRoomFor(length);\n      this.buffer.writeUInt32LE(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeBigInt64LE\",\n    value: function writeBigInt64LE(value) {\n      this.writeBigU_Int64LE(value);\n    }\n  }, {\n    key: \"writeBigU_Int64LE\",\n    value: function writeBigU_Int64LE(value) {\n      this.makeRoomFor(8);\n\n      var lo = _jsbi.default.toNumber(_jsbi.default.bitwiseAnd(value, _jsbi.default.BigInt(0xffffffff)));\n\n      this.buffer[this.position++] = lo;\n      lo = lo >> 8;\n      this.buffer[this.position++] = lo;\n      lo = lo >> 8;\n      this.buffer[this.position++] = lo;\n      lo = lo >> 8;\n      this.buffer[this.position++] = lo;\n\n      var hi = _jsbi.default.toNumber(_jsbi.default.bitwiseAnd(_jsbi.default.signedRightShift(value, _jsbi.default.BigInt(32)), _jsbi.default.BigInt(0xffffffff)));\n\n      this.buffer[this.position++] = hi;\n      hi = hi >> 8;\n      this.buffer[this.position++] = hi;\n      hi = hi >> 8;\n      this.buffer[this.position++] = hi;\n      hi = hi >> 8;\n      this.buffer[this.position++] = hi;\n    }\n  }, {\n    key: \"writeInt64LE\",\n    value: function writeInt64LE(value) {\n      this.writeBigInt64LE(_jsbi.default.BigInt(value));\n    }\n  }, {\n    key: \"writeUInt32BE\",\n    value: function writeUInt32BE(value) {\n      var length = 4;\n      this.makeRoomFor(length);\n      this.buffer.writeUInt32BE(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeUInt40LE\",\n    value: function writeUInt40LE(value) {\n      // inspired by https://github.com/dpw/node-buffer-more-ints\n      this.writeInt32LE(value & -1);\n      this.writeUInt8(Math.floor(value * SHIFT_RIGHT_32));\n    }\n  }, {\n    key: \"writeUInt64LE\",\n    value: function writeUInt64LE(value) {\n      this.writeBigUInt64LE(_jsbi.default.BigInt(value));\n    }\n  }, {\n    key: \"writeBigUInt64LE\",\n    value: function writeBigUInt64LE(value) {\n      this.writeBigU_Int64LE(value);\n    }\n  }, {\n    key: \"writeInt8\",\n    value: function writeInt8(value) {\n      var length = 1;\n      this.makeRoomFor(length);\n      this.buffer.writeInt8(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeInt16LE\",\n    value: function writeInt16LE(value) {\n      var length = 2;\n      this.makeRoomFor(length);\n      this.buffer.writeInt16LE(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeInt16BE\",\n    value: function writeInt16BE(value) {\n      var length = 2;\n      this.makeRoomFor(length);\n      this.buffer.writeInt16BE(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeInt32LE\",\n    value: function writeInt32LE(value) {\n      var length = 4;\n      this.makeRoomFor(length);\n      this.buffer.writeInt32LE(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeInt32BE\",\n    value: function writeInt32BE(value) {\n      var length = 4;\n      this.makeRoomFor(length);\n      this.buffer.writeInt32BE(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeFloatLE\",\n    value: function writeFloatLE(value) {\n      var length = 4;\n      this.makeRoomFor(length);\n      this.buffer.writeFloatLE(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeDoubleLE\",\n    value: function writeDoubleLE(value) {\n      var length = 8;\n      this.makeRoomFor(length);\n      this.buffer.writeDoubleLE(value, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeString\",\n    value: function writeString(value, encoding) {\n      if (encoding == null) {\n        encoding = this.encoding;\n      }\n\n      var length = Buffer.byteLength(value, encoding);\n      this.makeRoomFor(length); // $FlowFixMe https://github.com/facebook/flow/pull/5398\n\n      this.buffer.write(value, this.position, encoding);\n      this.position += length;\n    }\n  }, {\n    key: \"writeBVarchar\",\n    value: function writeBVarchar(value, encoding) {\n      this.writeUInt8(value.length);\n      this.writeString(value, encoding);\n    }\n  }, {\n    key: \"writeUsVarchar\",\n    value: function writeUsVarchar(value, encoding) {\n      this.writeUInt16LE(value.length);\n      this.writeString(value, encoding);\n    } // TODO: Figure out what types are passed in other than `Buffer`\n\n  }, {\n    key: \"writeUsVarbyte\",\n    value: function writeUsVarbyte(value, encoding) {\n      if (encoding == null) {\n        encoding = this.encoding;\n      }\n\n      var length;\n\n      if (value instanceof Buffer) {\n        length = value.length;\n      } else {\n        value = value.toString();\n        length = Buffer.byteLength(value, encoding);\n      }\n\n      this.writeUInt16LE(length);\n\n      if (value instanceof Buffer) {\n        this.writeBuffer(value);\n      } else {\n        this.makeRoomFor(length); // $FlowFixMe https://github.com/facebook/flow/pull/5398\n\n        this.buffer.write(value, this.position, encoding);\n        this.position += length;\n      }\n    }\n  }, {\n    key: \"writePLPBody\",\n    value: function writePLPBody(value, encoding) {\n      if (encoding == null) {\n        encoding = this.encoding;\n      }\n\n      var length;\n\n      if (value instanceof Buffer) {\n        length = value.length;\n      } else {\n        value = value.toString();\n        length = Buffer.byteLength(value, encoding);\n      } // Length of all chunks.\n      // this.writeUInt64LE(length);\n      // unknown seems to work better here - might revisit later.\n\n\n      this.writeBuffer(UNKNOWN_PLP_LEN); // In the UNKNOWN_PLP_LEN case, the data is represented as a series of zero or more chunks.\n\n      if (length > 0) {\n        // One chunk.\n        this.writeUInt32LE(length);\n\n        if (value instanceof Buffer) {\n          this.writeBuffer(value);\n        } else {\n          this.makeRoomFor(length);\n          this.buffer.write(value, this.position, encoding);\n          this.position += length;\n        }\n      } // PLP_TERMINATOR (no more chunks).\n\n\n      this.writeUInt32LE(0);\n    }\n  }, {\n    key: \"writeBuffer\",\n    value: function writeBuffer(value) {\n      var length = value.length;\n      this.makeRoomFor(length);\n      value.copy(this.buffer, this.position);\n      this.position += length;\n    }\n  }, {\n    key: \"writeMoney\",\n    value: function writeMoney(value) {\n      this.writeInt32LE(Math.floor(value * SHIFT_RIGHT_32));\n      this.writeInt32LE(value & -1);\n    }\n  }]);\n\n  return WritableTrackingBuffer;\n}();\n\nvar _default = WritableTrackingBuffer;\nexports.default = _default;\nmodule.exports = WritableTrackingBuffer;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/tracking-buffer/writable-tracking-buffer.js"],"names":["Object","defineProperty","exports","value","default","_jsbi","_interopRequireDefault","require","obj","__esModule","SHIFT_LEFT_32","SHIFT_RIGHT_32","UNKNOWN_PLP_LEN","Buffer","from","ZERO_LENGTH_BUFFER","alloc","WritableTrackingBuffer","initialSize","encoding","doubleSizeGrowth","buffer","compositeBuffer","position","newBuffer","length","makeRoomFor","copy","requiredLength","size","Math","max","slice","concat","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeBigU_Int64LE","lo","toNumber","bitwiseAnd","BigInt","hi","signedRightShift","writeBigInt64LE","writeUInt32BE","writeInt32LE","floor","writeBigUInt64LE","writeInt8","writeInt16LE","writeInt16BE","writeInt32BE","writeFloatLE","writeDoubleLE","byteLength","write","writeString","toString","writeBuffer","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _jsbi = _interopRequireDefault(require(\"jsbi\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\r\nconst SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\r\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\r\nconst ZERO_LENGTH_BUFFER = Buffer.alloc(0);\r\n\r\n/**\r\n  A Buffer-like class that tracks position.\r\n\r\n  As values are written, the position advances by the size of the written data.\r\n  When writing, automatically allocates new buffers if there's not enough space.\r\n */\r\nclass WritableTrackingBuffer {\r\n  constructor(initialSize, encoding, doubleSizeGrowth) {\r\n    this.initialSize = void 0;\r\n    this.encoding = void 0;\r\n    this.doubleSizeGrowth = void 0;\r\n    this.buffer = void 0;\r\n    this.compositeBuffer = void 0;\r\n    this.position = void 0;\r\n    this.initialSize = initialSize;\r\n    this.encoding = encoding || 'ucs2';\r\n    this.doubleSizeGrowth = doubleSizeGrowth || false;\r\n    this.buffer = Buffer.alloc(this.initialSize, 0);\r\n    this.compositeBuffer = ZERO_LENGTH_BUFFER;\r\n    this.position = 0;\r\n  }\r\n\r\n  get data() {\r\n    this.newBuffer(0);\r\n    return this.compositeBuffer;\r\n  }\r\n\r\n  copyFrom(buffer) {\r\n    const length = buffer.length;\r\n    this.makeRoomFor(length);\r\n    buffer.copy(this.buffer, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  makeRoomFor(requiredLength) {\r\n    if (this.buffer.length - this.position < requiredLength) {\r\n      if (this.doubleSizeGrowth) {\r\n        let size = Math.max(128, this.buffer.length * 2);\r\n\r\n        while (size < requiredLength) {\r\n          size *= 2;\r\n        }\r\n\r\n        this.newBuffer(size);\r\n      } else {\r\n        this.newBuffer(requiredLength);\r\n      }\r\n    }\r\n  }\r\n\r\n  newBuffer(size) {\r\n    const buffer = this.buffer.slice(0, this.position);\r\n    this.compositeBuffer = Buffer.concat([this.compositeBuffer, buffer]);\r\n    this.buffer = size === 0 ? ZERO_LENGTH_BUFFER : Buffer.alloc(size, 0);\r\n    this.position = 0;\r\n  }\r\n\r\n  writeUInt8(value) {\r\n    const length = 1;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeUInt8(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeUInt16LE(value) {\r\n    const length = 2;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeUInt16LE(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeUShort(value) {\r\n    this.writeUInt16LE(value);\r\n  }\r\n\r\n  writeUInt16BE(value) {\r\n    const length = 2;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeUInt16BE(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeUInt24LE(value) {\r\n    const length = 3;\r\n    this.makeRoomFor(length);\r\n    this.buffer[this.position + 2] = value >>> 16 & 0xff;\r\n    this.buffer[this.position + 1] = value >>> 8 & 0xff;\r\n    this.buffer[this.position] = value & 0xff;\r\n    this.position += length;\r\n  }\r\n\r\n  writeUInt32LE(value) {\r\n    const length = 4;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeUInt32LE(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeBigInt64LE(value) {\r\n    this.writeBigU_Int64LE(value);\r\n  }\r\n\r\n  writeBigU_Int64LE(value) {\r\n    this.makeRoomFor(8);\r\n\r\n    let lo = _jsbi.default.toNumber(_jsbi.default.bitwiseAnd(value, _jsbi.default.BigInt(0xffffffff)));\r\n\r\n    this.buffer[this.position++] = lo;\r\n    lo = lo >> 8;\r\n    this.buffer[this.position++] = lo;\r\n    lo = lo >> 8;\r\n    this.buffer[this.position++] = lo;\r\n    lo = lo >> 8;\r\n    this.buffer[this.position++] = lo;\r\n\r\n    let hi = _jsbi.default.toNumber(_jsbi.default.bitwiseAnd(_jsbi.default.signedRightShift(value, _jsbi.default.BigInt(32)), _jsbi.default.BigInt(0xffffffff)));\r\n\r\n    this.buffer[this.position++] = hi;\r\n    hi = hi >> 8;\r\n    this.buffer[this.position++] = hi;\r\n    hi = hi >> 8;\r\n    this.buffer[this.position++] = hi;\r\n    hi = hi >> 8;\r\n    this.buffer[this.position++] = hi;\r\n  }\r\n\r\n  writeInt64LE(value) {\r\n    this.writeBigInt64LE(_jsbi.default.BigInt(value));\r\n  }\r\n\r\n  writeUInt32BE(value) {\r\n    const length = 4;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeUInt32BE(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeUInt40LE(value) {\r\n    // inspired by https://github.com/dpw/node-buffer-more-ints\r\n    this.writeInt32LE(value & -1);\r\n    this.writeUInt8(Math.floor(value * SHIFT_RIGHT_32));\r\n  }\r\n\r\n  writeUInt64LE(value) {\r\n    this.writeBigUInt64LE(_jsbi.default.BigInt(value));\r\n  }\r\n\r\n  writeBigUInt64LE(value) {\r\n    this.writeBigU_Int64LE(value);\r\n  }\r\n\r\n  writeInt8(value) {\r\n    const length = 1;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeInt8(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeInt16LE(value) {\r\n    const length = 2;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeInt16LE(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeInt16BE(value) {\r\n    const length = 2;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeInt16BE(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeInt32LE(value) {\r\n    const length = 4;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeInt32LE(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeInt32BE(value) {\r\n    const length = 4;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeInt32BE(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeFloatLE(value) {\r\n    const length = 4;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeFloatLE(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeDoubleLE(value) {\r\n    const length = 8;\r\n    this.makeRoomFor(length);\r\n    this.buffer.writeDoubleLE(value, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeString(value, encoding) {\r\n    if (encoding == null) {\r\n      encoding = this.encoding;\r\n    }\r\n\r\n    const length = Buffer.byteLength(value, encoding);\r\n    this.makeRoomFor(length); // $FlowFixMe https://github.com/facebook/flow/pull/5398\r\n\r\n    this.buffer.write(value, this.position, encoding);\r\n    this.position += length;\r\n  }\r\n\r\n  writeBVarchar(value, encoding) {\r\n    this.writeUInt8(value.length);\r\n    this.writeString(value, encoding);\r\n  }\r\n\r\n  writeUsVarchar(value, encoding) {\r\n    this.writeUInt16LE(value.length);\r\n    this.writeString(value, encoding);\r\n  } // TODO: Figure out what types are passed in other than `Buffer`\r\n\r\n\r\n  writeUsVarbyte(value, encoding) {\r\n    if (encoding == null) {\r\n      encoding = this.encoding;\r\n    }\r\n\r\n    let length;\r\n\r\n    if (value instanceof Buffer) {\r\n      length = value.length;\r\n    } else {\r\n      value = value.toString();\r\n      length = Buffer.byteLength(value, encoding);\r\n    }\r\n\r\n    this.writeUInt16LE(length);\r\n\r\n    if (value instanceof Buffer) {\r\n      this.writeBuffer(value);\r\n    } else {\r\n      this.makeRoomFor(length); // $FlowFixMe https://github.com/facebook/flow/pull/5398\r\n\r\n      this.buffer.write(value, this.position, encoding);\r\n      this.position += length;\r\n    }\r\n  }\r\n\r\n  writePLPBody(value, encoding) {\r\n    if (encoding == null) {\r\n      encoding = this.encoding;\r\n    }\r\n\r\n    let length;\r\n\r\n    if (value instanceof Buffer) {\r\n      length = value.length;\r\n    } else {\r\n      value = value.toString();\r\n      length = Buffer.byteLength(value, encoding);\r\n    } // Length of all chunks.\r\n    // this.writeUInt64LE(length);\r\n    // unknown seems to work better here - might revisit later.\r\n\r\n\r\n    this.writeBuffer(UNKNOWN_PLP_LEN); // In the UNKNOWN_PLP_LEN case, the data is represented as a series of zero or more chunks.\r\n\r\n    if (length > 0) {\r\n      // One chunk.\r\n      this.writeUInt32LE(length);\r\n\r\n      if (value instanceof Buffer) {\r\n        this.writeBuffer(value);\r\n      } else {\r\n        this.makeRoomFor(length);\r\n        this.buffer.write(value, this.position, encoding);\r\n        this.position += length;\r\n      }\r\n    } // PLP_TERMINATOR (no more chunks).\r\n\r\n\r\n    this.writeUInt32LE(0);\r\n  }\r\n\r\n  writeBuffer(value) {\r\n    const length = value.length;\r\n    this.makeRoomFor(length);\r\n    value.copy(this.buffer, this.position);\r\n    this.position += length;\r\n  }\r\n\r\n  writeMoney(value) {\r\n    this.writeInt32LE(Math.floor(value * SHIFT_RIGHT_32));\r\n    this.writeInt32LE(value & -1);\r\n  }\r\n\r\n}\r\n\r\nvar _default = WritableTrackingBuffer;\r\nexports.default = _default;\r\nmodule.exports = WritableTrackingBuffer;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst applicationTokenCredentials_1 = require(\"./applicationTokenCredentials\");\n\nconst applicationTokenCertificateCredentials_1 = require(\"./applicationTokenCertificateCredentials\");\n\nconst deviceTokenCredentials_1 = require(\"./deviceTokenCredentials\");\n\nconst msiAppServiceTokenCredentials_1 = require(\"./msiAppServiceTokenCredentials\");\n\nconst msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\n\nconst msiVmTokenCredentials_1 = require(\"./msiVmTokenCredentials\");\n\nconst tokenCredentialsBase_1 = require(\"./tokenCredentialsBase\");\n\nconst userTokenCredentials_1 = require(\"./userTokenCredentials\");\n\nconst adal_node_1 = require(\"adal-node\");\n\nfunction createAuthenticator(credentials) {\n  const convertedCredentials = _convert(credentials);\n\n  const authenticator = _createAuthenticatorMapper(convertedCredentials);\n\n  return authenticator;\n}\n\nexports.createAuthenticator = createAuthenticator;\n\nfunction _convert(credentials) {\n  if (credentials instanceof msiAppServiceTokenCredentials_1.MSIAppServiceTokenCredentials) {\n    return new msiAppServiceTokenCredentials_1.MSIAppServiceTokenCredentials({\n      msiEndpoint: credentials.msiEndpoint,\n      msiSecret: credentials.msiSecret,\n      msiApiVersion: credentials.msiApiVersion,\n      resource: credentials.resource\n    });\n  } else if (credentials instanceof msiVmTokenCredentials_1.MSIVmTokenCredentials) {\n    return new msiVmTokenCredentials_1.MSIVmTokenCredentials({\n      resource: credentials.resource,\n      msiEndpoint: credentials.msiEndpoint\n    });\n  } else if (credentials instanceof msiTokenCredentials_1.MSITokenCredentials) {\n    throw new Error(\"MSI-credentials not one of: MSIVmTokenCredentials, MSIAppServiceTokenCredentials\");\n  } else {\n    return credentials;\n  }\n}\n\nfunction _createAuthenticatorMapper(credentials) {\n  return challenge => new Promise((resolve, reject) => {\n    // Function to take token Response and format a authorization value\n    const _formAuthorizationValue = (err, tokenResponse) => {\n      if (err) {\n        return reject(err);\n      }\n\n      if (tokenResponse.error) {\n        return reject(tokenResponse.error);\n      }\n\n      tokenResponse = tokenResponse; // Calculate the value to be set in the request's Authorization header and resume the call.\n\n      const authorizationValue = tokenResponse.tokenType + \" \" + tokenResponse.accessToken;\n      return resolve(authorizationValue);\n    }; // Create a new authentication context.\n\n\n    if (credentials instanceof tokenCredentialsBase_1.TokenCredentialsBase) {\n      const context = new adal_node_1.AuthenticationContext(challenge.authorization, true, credentials.authContext && credentials.authContext.cache);\n\n      if (credentials instanceof applicationTokenCredentials_1.ApplicationTokenCredentials) {\n        return context.acquireTokenWithClientCredentials(challenge.resource, credentials.clientId, credentials.secret, _formAuthorizationValue);\n      } else if (credentials instanceof applicationTokenCertificateCredentials_1.ApplicationTokenCertificateCredentials) {\n        return context.acquireTokenWithClientCertificate(challenge.resource, credentials.clientId, credentials.certificate, credentials.thumbprint, _formAuthorizationValue);\n      } else if (credentials instanceof userTokenCredentials_1.UserTokenCredentials) {\n        return context.acquireTokenWithUsernamePassword(challenge.resource, credentials.username, credentials.password, credentials.clientId, _formAuthorizationValue);\n      } else if (credentials instanceof deviceTokenCredentials_1.DeviceTokenCredentials) {\n        return context.acquireToken(challenge.resource, credentials.username, credentials.clientId, _formAuthorizationValue);\n      }\n    } else if (credentials instanceof msiTokenCredentials_1.MSITokenCredentials) {\n      return credentials.getToken();\n    } else {\n      return reject(new Error(\"credentials must be one of: ApplicationTokenCredentials, UserTokenCredentials, \" + \"DeviceTokenCredentials, MSITokenCredentials\"));\n    }\n  });\n}","map":{"version":3,"sources":["../../../lib/credentials/keyVaultFactory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst applicationTokenCredentials_1 = require(\"./applicationTokenCredentials\");\r\nconst applicationTokenCertificateCredentials_1 = require(\"./applicationTokenCertificateCredentials\");\r\nconst deviceTokenCredentials_1 = require(\"./deviceTokenCredentials\");\r\nconst msiAppServiceTokenCredentials_1 = require(\"./msiAppServiceTokenCredentials\");\r\nconst msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\r\nconst msiVmTokenCredentials_1 = require(\"./msiVmTokenCredentials\");\r\nconst tokenCredentialsBase_1 = require(\"./tokenCredentialsBase\");\r\nconst userTokenCredentials_1 = require(\"./userTokenCredentials\");\r\nconst adal_node_1 = require(\"adal-node\");\r\nfunction createAuthenticator(credentials) {\r\n    const convertedCredentials = _convert(credentials);\r\n    const authenticator = _createAuthenticatorMapper(convertedCredentials);\r\n    return authenticator;\r\n}\r\nexports.createAuthenticator = createAuthenticator;\r\nfunction _convert(credentials) {\r\n    if (credentials instanceof msiAppServiceTokenCredentials_1.MSIAppServiceTokenCredentials) {\r\n        return new msiAppServiceTokenCredentials_1.MSIAppServiceTokenCredentials({\r\n            msiEndpoint: credentials.msiEndpoint,\r\n            msiSecret: credentials.msiSecret,\r\n            msiApiVersion: credentials.msiApiVersion,\r\n            resource: credentials.resource\r\n        });\r\n    }\r\n    else if (credentials instanceof msiVmTokenCredentials_1.MSIVmTokenCredentials) {\r\n        return new msiVmTokenCredentials_1.MSIVmTokenCredentials({\r\n            resource: credentials.resource,\r\n            msiEndpoint: credentials.msiEndpoint\r\n        });\r\n    }\r\n    else if (credentials instanceof msiTokenCredentials_1.MSITokenCredentials) {\r\n        throw new Error(\"MSI-credentials not one of: MSIVmTokenCredentials, MSIAppServiceTokenCredentials\");\r\n    }\r\n    else {\r\n        return credentials;\r\n    }\r\n}\r\nfunction _createAuthenticatorMapper(credentials) {\r\n    return (challenge) => new Promise((resolve, reject) => {\r\n        // Function to take token Response and format a authorization value\r\n        const _formAuthorizationValue = (err, tokenResponse) => {\r\n            if (err) {\r\n                return reject(err);\r\n            }\r\n            if (tokenResponse.error) {\r\n                return reject(tokenResponse.error);\r\n            }\r\n            tokenResponse = tokenResponse;\r\n            // Calculate the value to be set in the request's Authorization header and resume the call.\r\n            const authorizationValue = tokenResponse.tokenType + \" \" + tokenResponse.accessToken;\r\n            return resolve(authorizationValue);\r\n        };\r\n        // Create a new authentication context.\r\n        if (credentials instanceof tokenCredentialsBase_1.TokenCredentialsBase) {\r\n            const context = new adal_node_1.AuthenticationContext(challenge.authorization, true, credentials.authContext && credentials.authContext.cache);\r\n            if (credentials instanceof applicationTokenCredentials_1.ApplicationTokenCredentials) {\r\n                return context.acquireTokenWithClientCredentials(challenge.resource, credentials.clientId, credentials.secret, _formAuthorizationValue);\r\n            }\r\n            else if (credentials instanceof applicationTokenCertificateCredentials_1.ApplicationTokenCertificateCredentials) {\r\n                return context.acquireTokenWithClientCertificate(challenge.resource, credentials.clientId, credentials.certificate, credentials.thumbprint, _formAuthorizationValue);\r\n            }\r\n            else if (credentials instanceof userTokenCredentials_1.UserTokenCredentials) {\r\n                return context.acquireTokenWithUsernamePassword(challenge.resource, credentials.username, credentials.password, credentials.clientId, _formAuthorizationValue);\r\n            }\r\n            else if (credentials instanceof deviceTokenCredentials_1.DeviceTokenCredentials) {\r\n                return context.acquireToken(challenge.resource, credentials.username, credentials.clientId, _formAuthorizationValue);\r\n            }\r\n        }\r\n        else if (credentials instanceof msiTokenCredentials_1.MSITokenCredentials) {\r\n            return credentials.getToken();\r\n        }\r\n        else {\r\n            return reject(new Error(\"credentials must be one of: ApplicationTokenCredentials, UserTokenCredentials, \" +\r\n                \"DeviceTokenCredentials, MSITokenCredentials\"));\r\n        }\r\n    });\r\n}\r\n//# sourceMappingURL=keyVaultFactory.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _metadataParser = _interopRequireDefault(require(\"../metadata-parser\"));\n\nvar _token = require(\"./token\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction readTableName(parser, options, metadata, callback) {\n  if (metadata.type.hasTableName) {\n    if (options.tdsVersion >= '7_2') {\n      parser.readUInt8(numberOfTableNameParts => {\n        const tableName = [];\n        let i = 0;\n\n        function next(done) {\n          if (numberOfTableNameParts === i) {\n            return done();\n          }\n\n          parser.readUsVarChar(part => {\n            tableName.push(part);\n            i++;\n            next(done);\n          });\n        }\n\n        next(() => {\n          callback(tableName);\n        });\n      });\n    } else {\n      parser.readUsVarChar(callback);\n    }\n  } else {\n    callback(undefined);\n  }\n}\n\nfunction readColumnName(parser, options, index, metadata, callback) {\n  parser.readBVarChar(colName => {\n    if (options.columnNameReplacer) {\n      callback(options.columnNameReplacer(colName, index, metadata));\n    } else if (options.camelCaseColumns) {\n      callback(colName.replace(/^[A-Z]/, function (s) {\n        return s.toLowerCase();\n      }));\n    } else {\n      callback(colName);\n    }\n  });\n}\n\nfunction readColumn(parser, options, index, callback) {\n  (0, _metadataParser.default)(parser, options, metadata => {\n    readTableName(parser, options, metadata, tableName => {\n      readColumnName(parser, options, index, metadata, colName => {\n        callback({\n          userType: metadata.userType,\n          flags: metadata.flags,\n          type: metadata.type,\n          collation: metadata.collation,\n          precision: metadata.precision,\n          scale: metadata.scale,\n          udtInfo: metadata.udtInfo,\n          dataLength: metadata.dataLength,\n          schema: metadata.schema,\n          colName: colName,\n          tableName: tableName\n        });\n      });\n    });\n  });\n}\n\nasync function colMetadataParser(parser) {\n  while (parser.buffer.length - parser.position < 2) {\n    await parser.streamBuffer.waitForChunk();\n  }\n\n  const columnCount = parser.buffer.readUInt16LE(parser.position);\n  parser.position += 2;\n  const columns = [];\n\n  for (let i = 0; i < columnCount; i++) {\n    let column;\n    readColumn(parser, parser.options, i, c => {\n      column = c;\n    });\n\n    while (parser.suspended) {\n      await parser.streamBuffer.waitForChunk();\n      parser.suspended = false;\n      const next = parser.next;\n      next();\n    }\n\n    columns.push(column);\n  }\n\n  return new _token.ColMetadataToken(columns);\n}\n\nvar _default = colMetadataParser;\nexports.default = _default;\nmodule.exports = colMetadataParser;","map":{"version":3,"sources":["B:/Duoc/Portafolio_de_titulo/Git/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/token/colmetadata-token-parser.js"],"names":["Object","defineProperty","exports","value","default","_metadataParser","_interopRequireDefault","require","_token","obj","__esModule","readTableName","parser","options","metadata","callback","type","hasTableName","tdsVersion","readUInt8","numberOfTableNameParts","tableName","i","next","done","readUsVarChar","part","push","undefined","readColumnName","index","readBVarChar","colName","columnNameReplacer","camelCaseColumns","replace","s","toLowerCase","readColumn","userType","flags","collation","precision","scale","udtInfo","dataLength","schema","colMetadataParser","buffer","length","position","streamBuffer","waitForChunk","columnCount","readUInt16LE","columns","column","c","suspended","ColMetadataToken","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _metadataParser = _interopRequireDefault(require(\"../metadata-parser\"));\r\n\r\nvar _token = require(\"./token\");\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction readTableName(parser, options, metadata, callback) {\r\n  if (metadata.type.hasTableName) {\r\n    if (options.tdsVersion >= '7_2') {\r\n      parser.readUInt8(numberOfTableNameParts => {\r\n        const tableName = [];\r\n        let i = 0;\r\n\r\n        function next(done) {\r\n          if (numberOfTableNameParts === i) {\r\n            return done();\r\n          }\r\n\r\n          parser.readUsVarChar(part => {\r\n            tableName.push(part);\r\n            i++;\r\n            next(done);\r\n          });\r\n        }\r\n\r\n        next(() => {\r\n          callback(tableName);\r\n        });\r\n      });\r\n    } else {\r\n      parser.readUsVarChar(callback);\r\n    }\r\n  } else {\r\n    callback(undefined);\r\n  }\r\n}\r\n\r\nfunction readColumnName(parser, options, index, metadata, callback) {\r\n  parser.readBVarChar(colName => {\r\n    if (options.columnNameReplacer) {\r\n      callback(options.columnNameReplacer(colName, index, metadata));\r\n    } else if (options.camelCaseColumns) {\r\n      callback(colName.replace(/^[A-Z]/, function (s) {\r\n        return s.toLowerCase();\r\n      }));\r\n    } else {\r\n      callback(colName);\r\n    }\r\n  });\r\n}\r\n\r\nfunction readColumn(parser, options, index, callback) {\r\n  (0, _metadataParser.default)(parser, options, metadata => {\r\n    readTableName(parser, options, metadata, tableName => {\r\n      readColumnName(parser, options, index, metadata, colName => {\r\n        callback({\r\n          userType: metadata.userType,\r\n          flags: metadata.flags,\r\n          type: metadata.type,\r\n          collation: metadata.collation,\r\n          precision: metadata.precision,\r\n          scale: metadata.scale,\r\n          udtInfo: metadata.udtInfo,\r\n          dataLength: metadata.dataLength,\r\n          schema: metadata.schema,\r\n          colName: colName,\r\n          tableName: tableName\r\n        });\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nasync function colMetadataParser(parser) {\r\n  while (parser.buffer.length - parser.position < 2) {\r\n    await parser.streamBuffer.waitForChunk();\r\n  }\r\n\r\n  const columnCount = parser.buffer.readUInt16LE(parser.position);\r\n  parser.position += 2;\r\n  const columns = [];\r\n\r\n  for (let i = 0; i < columnCount; i++) {\r\n    let column;\r\n    readColumn(parser, parser.options, i, c => {\r\n      column = c;\r\n    });\r\n\r\n    while (parser.suspended) {\r\n      await parser.streamBuffer.waitForChunk();\r\n      parser.suspended = false;\r\n      const next = parser.next;\r\n      next();\r\n    }\r\n\r\n    columns.push(column);\r\n  }\r\n\r\n  return new _token.ColMetadataToken(columns);\r\n}\r\n\r\nvar _default = colMetadataParser;\r\nexports.default = _default;\r\nmodule.exports = colMetadataParser;"]},"metadata":{},"sourceType":"script"}
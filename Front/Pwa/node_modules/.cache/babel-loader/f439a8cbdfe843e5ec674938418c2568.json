{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __awaiter, __generator } from \"tslib\";\nimport { Constants as MSRestConstants } from \"../util/constants\";\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Bearer\";\n/**\r\n * Resource manager endpoints to match in order to specify a valid scope to the AzureIdentityCredentialAdapter.\r\n */\n\nexport var azureResourceManagerEndpoints = [\"https://management.windows.net\", \"https://management.chinacloudapi.cn\", \"https://management.usgovcloudapi.net\", \"https://management.cloudapi.de\"];\n/**\r\n * This class provides a simple extension to use {@link TokenCredential} from `@azure/identity` library to\r\n * use with legacy Azure SDKs that accept {@link ServiceClientCredentials} family of credentials for authentication.\r\n */\n\nvar AzureIdentityCredentialAdapter =\n/** @class */\nfunction () {\n  function AzureIdentityCredentialAdapter(azureTokenCredential, scopes) {\n    if (scopes === void 0) {\n      scopes = \"https://management.azure.com/.default\";\n    }\n\n    this.azureTokenCredential = azureTokenCredential;\n    this.scopes = scopes;\n  }\n\n  AzureIdentityCredentialAdapter.prototype.getToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var accessToken, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.azureTokenCredential.getToken(this.scopes)];\n\n          case 1:\n            accessToken = _a.sent();\n\n            if (accessToken !== null) {\n              result = {\n                accessToken: accessToken.token,\n                tokenType: DEFAULT_AUTHORIZATION_SCHEME,\n                expiresOn: accessToken.expiresOnTimestamp\n              };\n              return [2\n              /*return*/\n              , result];\n            } else {\n              throw new Error(\"Could find token for scope\");\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AzureIdentityCredentialAdapter.prototype.signRequest = function (webResource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getToken()];\n\n          case 1:\n            tokenResponse = _a.sent();\n            webResource.headers.set(MSRestConstants.HeaderConstants.AUTHORIZATION, tokenResponse.tokenType + \" \" + tokenResponse.accessToken);\n            return [2\n            /*return*/\n            , Promise.resolve(webResource)];\n        }\n      });\n    });\n  };\n\n  return AzureIdentityCredentialAdapter;\n}();\n\nexport { AzureIdentityCredentialAdapter };","map":{"version":3,"sources":["../../../lib/credentials/azureIdentityTokenCredentialAdapter.ts"],"names":[],"mappings":"AAAA;AACA;;AAGA,SAAS,SAAS,IAAI,eAAtB,QAA6C,mBAA7C;AAMA,IAAM,4BAA4B,GAAG,QAArC;AAEA;;AAEG;;AACH,OAAO,IAAM,6BAA6B,GAAG,CAC3C,gCAD2C,EAE3C,qCAF2C,EAG3C,sCAH2C,EAI3C,gCAJ2C,CAAtC;AAOP;;;AAGG;;AACH,IAAA,8BAAA;AAAA;AAAA,YAAA;AAGE,WAAA,8BAAA,CACE,oBADF,EAEE,MAFF,EAEqE;AAAnE,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,uCAAA;AAAmE;;AAEnE,SAAK,oBAAL,GAA4B,oBAA5B;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;AAEY,EAAA,8BAAA,CAAA,SAAA,CAAA,QAAA,GAAb,YAAA;;;;;;AACsB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,oBAAL,CAA0B,QAA1B,CAAmC,KAAK,MAAxC,CAAN,CAAA;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;;AACN,gBAAI,WAAW,KAAK,IAApB,EAA0B;AAClB,cAAA,MAAM,GAAkB;AAC5B,gBAAA,WAAW,EAAE,WAAW,CAAC,KADG;AAE5B,gBAAA,SAAS,EAAE,4BAFiB;AAG5B,gBAAA,SAAS,EAAE,WAAW,CAAC;AAHK,eAAxB;AAKN,qBAAA,CAAA;AAAA;AAAA,gBAAO,MAAP,CAAA;AACD,aAPD,MAOO;AACL,oBAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACD;;;;;;;;AACF,GAZY;;AAcA,EAAA,8BAAA,CAAA,SAAA,CAAA,WAAA,GAAb,UAAyB,WAAzB,EAAiD;;;;;;AACzB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,QAAL,EAAN,CAAA;;;AAAhB,YAAA,aAAa,GAAG,EAAA,CAAA,IAAA,EAAhB;AACN,YAAA,WAAW,CAAC,OAAZ,CAAoB,GAApB,CACE,eAAe,CAAC,eAAhB,CAAgC,aADlC,EAEK,aAAa,CAAC,SAAd,GAAuB,GAAvB,GAA2B,aAAa,CAAC,WAF9C;AAIA,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,OAAR,CAAgB,WAAhB,CAAP,CAAA;;;;AACD,GAPY;;AAQf,SAAA,8BAAA;AAAC,CAjCD,EAAA","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Constants as MSRestConstants } from \"../util/constants\";\r\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Bearer\";\r\n/**\r\n * Resource manager endpoints to match in order to specify a valid scope to the AzureIdentityCredentialAdapter.\r\n */\r\nexport var azureResourceManagerEndpoints = [\r\n    \"https://management.windows.net\",\r\n    \"https://management.chinacloudapi.cn\",\r\n    \"https://management.usgovcloudapi.net\",\r\n    \"https://management.cloudapi.de\",\r\n];\r\n/**\r\n * This class provides a simple extension to use {@link TokenCredential} from `@azure/identity` library to\r\n * use with legacy Azure SDKs that accept {@link ServiceClientCredentials} family of credentials for authentication.\r\n */\r\nvar AzureIdentityCredentialAdapter = /** @class */ (function () {\r\n    function AzureIdentityCredentialAdapter(azureTokenCredential, scopes) {\r\n        if (scopes === void 0) { scopes = \"https://management.azure.com/.default\"; }\r\n        this.azureTokenCredential = azureTokenCredential;\r\n        this.scopes = scopes;\r\n    }\r\n    AzureIdentityCredentialAdapter.prototype.getToken = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var accessToken, result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.azureTokenCredential.getToken(this.scopes)];\r\n                    case 1:\r\n                        accessToken = _a.sent();\r\n                        if (accessToken !== null) {\r\n                            result = {\r\n                                accessToken: accessToken.token,\r\n                                tokenType: DEFAULT_AUTHORIZATION_SCHEME,\r\n                                expiresOn: accessToken.expiresOnTimestamp,\r\n                            };\r\n                            return [2 /*return*/, result];\r\n                        }\r\n                        else {\r\n                            throw new Error(\"Could find token for scope\");\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    AzureIdentityCredentialAdapter.prototype.signRequest = function (webResource) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getToken()];\r\n                    case 1:\r\n                        tokenResponse = _a.sent();\r\n                        webResource.headers.set(MSRestConstants.HeaderConstants.AUTHORIZATION, tokenResponse.tokenType + \" \" + tokenResponse.accessToken);\r\n                        return [2 /*return*/, Promise.resolve(webResource)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return AzureIdentityCredentialAdapter;\r\n}());\r\nexport { AzureIdentityCredentialAdapter };\r\n//# sourceMappingURL=azureIdentityTokenCredentialAdapter.js.map"]},"metadata":{},"sourceType":"module"}
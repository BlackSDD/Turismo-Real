{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\n\nvar _core = require(\"@js-joda/core\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst EPOCH_DATE = _core.LocalDate.ofYearDay(1900, 1);\n\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x08]);\nconst DateTime = {\n  id: 0x3D,\n  type: 'DATETIME',\n  name: 'DateTime',\n  declaration: function () {\n    return 'datetime';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([_datetimen.default.id, 0x08]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let date;\n\n    if (options.useUTC) {\n      date = _core.LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    } else {\n      date = _core.LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n    }\n\n    let days = EPOCH_DATE.until(date, _core.ChronoUnit.DAYS);\n    let milliseconds, threeHundredthsOfSecond;\n\n    if (options.useUTC) {\n      let seconds = value.getUTCHours() * 60 * 60;\n      seconds += value.getUTCMinutes() * 60;\n      seconds += value.getUTCSeconds();\n      milliseconds = seconds * 1000 + value.getUTCMilliseconds();\n    } else {\n      let seconds = value.getHours() * 60 * 60;\n      seconds += value.getMinutes() * 60;\n      seconds += value.getSeconds();\n      milliseconds = seconds * 1000 + value.getMilliseconds();\n    }\n\n    threeHundredthsOfSecond = milliseconds / (3 + 1 / 3);\n    threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond); // 25920000 equals one day\n\n    if (threeHundredthsOfSecond === 25920000) {\n      days += 1;\n      threeHundredthsOfSecond = 0;\n    }\n\n    const buffer = Buffer.alloc(8);\n    buffer.writeInt32LE(days, 0);\n    buffer.writeUInt32LE(threeHundredthsOfSecond, 4);\n    yield buffer;\n  },\n  // TODO: type 'any' needs to be revisited.\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = DateTime;\nexports.default = _default;\nmodule.exports = DateTime;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/data-types/datetime.js"],"names":["Object","defineProperty","exports","value","default","_datetimen","_interopRequireDefault","require","_core","obj","__esModule","EPOCH_DATE","LocalDate","ofYearDay","NULL_LENGTH","Buffer","from","DATA_LENGTH","DateTime","id","type","name","declaration","generateTypeInfo","generateParameterLength","parameter","options","generateParameterData","date","useUTC","of","getUTCFullYear","getUTCMonth","getUTCDate","getFullYear","getMonth","getDate","days","until","ChronoUnit","DAYS","milliseconds","threeHundredthsOfSecond","seconds","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getHours","getMinutes","getSeconds","getMilliseconds","Math","round","buffer","alloc","writeInt32LE","writeUInt32LE","validate","Date","parse","isNaN","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\r\n\r\nvar _core = require(\"@js-joda/core\");\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst EPOCH_DATE = _core.LocalDate.ofYearDay(1900, 1);\r\n\r\nconst NULL_LENGTH = Buffer.from([0x00]);\r\nconst DATA_LENGTH = Buffer.from([0x08]);\r\nconst DateTime = {\r\n  id: 0x3D,\r\n  type: 'DATETIME',\r\n  name: 'DateTime',\r\n  declaration: function () {\r\n    return 'datetime';\r\n  },\r\n\r\n  generateTypeInfo() {\r\n    return Buffer.from([_datetimen.default.id, 0x08]);\r\n  },\r\n\r\n  generateParameterLength(parameter, options) {\r\n    if (parameter.value == null) {\r\n      return NULL_LENGTH;\r\n    }\r\n\r\n    return DATA_LENGTH;\r\n  },\r\n\r\n  generateParameterData: function* (parameter, options) {\r\n    if (parameter.value == null) {\r\n      return;\r\n    }\r\n\r\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\r\n\r\n    let date;\r\n\r\n    if (options.useUTC) {\r\n      date = _core.LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\r\n    } else {\r\n      date = _core.LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\r\n    }\r\n\r\n    let days = EPOCH_DATE.until(date, _core.ChronoUnit.DAYS);\r\n    let milliseconds, threeHundredthsOfSecond;\r\n\r\n    if (options.useUTC) {\r\n      let seconds = value.getUTCHours() * 60 * 60;\r\n      seconds += value.getUTCMinutes() * 60;\r\n      seconds += value.getUTCSeconds();\r\n      milliseconds = seconds * 1000 + value.getUTCMilliseconds();\r\n    } else {\r\n      let seconds = value.getHours() * 60 * 60;\r\n      seconds += value.getMinutes() * 60;\r\n      seconds += value.getSeconds();\r\n      milliseconds = seconds * 1000 + value.getMilliseconds();\r\n    }\r\n\r\n    threeHundredthsOfSecond = milliseconds / (3 + 1 / 3);\r\n    threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond); // 25920000 equals one day\r\n\r\n    if (threeHundredthsOfSecond === 25920000) {\r\n      days += 1;\r\n      threeHundredthsOfSecond = 0;\r\n    }\r\n\r\n    const buffer = Buffer.alloc(8);\r\n    buffer.writeInt32LE(days, 0);\r\n    buffer.writeUInt32LE(threeHundredthsOfSecond, 4);\r\n    yield buffer;\r\n  },\r\n  // TODO: type 'any' needs to be revisited.\r\n  validate: function (value) {\r\n    if (value == null) {\r\n      return null;\r\n    }\r\n\r\n    if (!(value instanceof Date)) {\r\n      value = new Date(Date.parse(value));\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n      throw new TypeError('Invalid date.');\r\n    }\r\n\r\n    return value;\r\n  }\r\n};\r\nvar _default = DateTime;\r\nexports.default = _default;\r\nmodule.exports = DateTime;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { replaceAll } from \"./util/utils\";\n/**\r\n * A class that handles the query portion of a URLBuilder.\r\n */\n\nvar URLQuery =\n/** @class */\nfunction () {\n  function URLQuery() {\n    this._rawQuery = {};\n  }\n  /**\r\n   * Get whether or not there any query parameters in this URLQuery.\r\n   */\n\n\n  URLQuery.prototype.any = function () {\n    return Object.keys(this._rawQuery).length > 0;\n  };\n  /**\r\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\r\n   * empty, then this will attempt to remove an existing query parameter with the provided\r\n   * parameterName.\r\n   */\n\n\n  URLQuery.prototype.set = function (parameterName, parameterValue) {\n    if (parameterName) {\n      if (parameterValue != undefined) {\n        var newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  };\n  /**\r\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\r\n   * provided parameter name, then undefined will be returned.\r\n   */\n\n\n  URLQuery.prototype.get = function (parameterName) {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  };\n  /**\r\n   * Get the string representation of this query. The return value will not start with a \"?\".\r\n   */\n\n\n  URLQuery.prototype.toString = function () {\n    var result = \"\";\n\n    for (var parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n\n      var parameterValue = this._rawQuery[parameterName];\n\n      if (Array.isArray(parameterValue)) {\n        var parameterStrings = [];\n\n        for (var _i = 0, parameterValue_1 = parameterValue; _i < parameterValue_1.length; _i++) {\n          var parameterValueElement = parameterValue_1[_i];\n          parameterStrings.push(parameterName + \"=\" + parameterValueElement);\n        }\n\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += parameterName + \"=\" + parameterValue;\n      }\n    }\n\n    return result;\n  };\n  /**\r\n   * Parse a URLQuery from the provided text.\r\n   */\n\n\n  URLQuery.parse = function (text) {\n    var result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      var currentState = \"ParameterName\";\n      var parameterName = \"\";\n      var parameterValue = \"\";\n\n      for (var i = 0; i < text.length; ++i) {\n        var currentCharacter = text[i];\n\n        switch (currentState) {\n          case \"ParameterName\":\n            switch (currentCharacter) {\n              case \"=\":\n                currentState = \"ParameterValue\";\n                break;\n\n              case \"&\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                break;\n\n              default:\n                parameterName += currentCharacter;\n                break;\n            }\n\n            break;\n\n          case \"ParameterValue\":\n            switch (currentCharacter) {\n              case \"&\":\n                result.set(parameterName, parameterValue);\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"ParameterName\";\n                break;\n\n              default:\n                parameterValue += currentCharacter;\n                break;\n            }\n\n            break;\n\n          default:\n            throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  };\n\n  return URLQuery;\n}();\n\nexport { URLQuery };\n/**\r\n * A class that handles creating, modifying, and parsing URLs.\r\n */\n\nvar URLBuilder =\n/** @class */\nfunction () {\n  function URLBuilder() {}\n  /**\r\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\r\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\r\n   */\n\n\n  URLBuilder.prototype.setScheme = function (scheme) {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  };\n  /**\r\n   * Get the scheme that has been set in this URL.\r\n   */\n\n\n  URLBuilder.prototype.getScheme = function () {\n    return this._scheme;\n  };\n  /**\r\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\r\n   * port, path, or query), those parts will be added to this URL as well.\r\n   */\n\n\n  URLBuilder.prototype.setHost = function (host) {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  };\n  /**\r\n   * Get the host that has been set in this URL.\r\n   */\n\n\n  URLBuilder.prototype.getHost = function () {\n    return this._host;\n  };\n  /**\r\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\r\n   * path or query), those parts will be added to this URL as well.\r\n   */\n\n\n  URLBuilder.prototype.setPort = function (port) {\n    if (port == undefined || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  };\n  /**\r\n   * Get the port that has been set in this URL.\r\n   */\n\n\n  URLBuilder.prototype.getPort = function () {\n    return this._port;\n  };\n  /**\r\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\r\n   * this URL as well.\r\n   */\n\n\n  URLBuilder.prototype.setPath = function (path) {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      var schemeIndex = path.indexOf(\"://\");\n\n      if (schemeIndex !== -1) {\n        var schemeStart = path.lastIndexOf(\"/\", schemeIndex); // Make sure to only grab the URL part of the path before setting the state back to SCHEME\n        // this will handle cases such as \"/a/b/c/https://microsoft.com\" => \"https://microsoft.com\"\n\n        this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  };\n  /**\r\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\r\n   * then it will be added to this URL as well.\r\n   */\n\n\n  URLBuilder.prototype.appendPath = function (path) {\n    if (path) {\n      var currentPath = this.getPath();\n\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n\n      this.set(path, \"PATH\");\n    }\n  };\n  /**\r\n   * Get the path that has been set in this URL.\r\n   */\n\n\n  URLBuilder.prototype.getPath = function () {\n    return this._path;\n  };\n  /**\r\n   * Set the query in this URL.\r\n   */\n\n\n  URLBuilder.prototype.setQuery = function (query) {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  };\n  /**\r\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\r\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\r\n   * existed.\r\n   */\n\n\n  URLBuilder.prototype.setQueryParameter = function (queryParameterName, queryParameterValue) {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  };\n  /**\r\n   * Get the value of the query parameter with the provided query parameter name. If no query\r\n   * parameter exists with the provided name, then undefined will be returned.\r\n   */\n\n\n  URLBuilder.prototype.getQueryParameterValue = function (queryParameterName) {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  };\n  /**\r\n   * Get the query in this URL.\r\n   */\n\n\n  URLBuilder.prototype.getQuery = function () {\n    return this._query ? this._query.toString() : undefined;\n  };\n  /**\r\n   * Set the parts of this URL by parsing the provided text using the provided startState.\r\n   */\n\n\n  URLBuilder.prototype.set = function (text, startState) {\n    var tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      var token = tokenizer.current();\n\n      if (token) {\n        switch (token.type) {\n          case \"SCHEME\":\n            this._scheme = token.text || undefined;\n            break;\n\n          case \"HOST\":\n            this._host = token.text || undefined;\n            break;\n\n          case \"PORT\":\n            this._port = token.text || undefined;\n            break;\n\n          case \"PATH\":\n            var tokenPath = token.text || undefined;\n\n            if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n              this._path = tokenPath;\n            }\n\n            break;\n\n          case \"QUERY\":\n            this._query = URLQuery.parse(token.text);\n            break;\n\n          default:\n            throw new Error(\"Unrecognized URLTokenType: \" + token.type);\n        }\n      }\n    }\n  };\n\n  URLBuilder.prototype.toString = function () {\n    var result = \"\";\n\n    if (this._scheme) {\n      result += this._scheme + \"://\";\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += \":\" + this._port;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += \"?\" + this._query.toString();\n    }\n\n    return result;\n  };\n  /**\r\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\r\n   * replaceValue.\r\n   */\n\n\n  URLBuilder.prototype.replaceAll = function (searchValue, replaceValue) {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  };\n\n  URLBuilder.parse = function (text) {\n    var result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  };\n\n  return URLBuilder;\n}();\n\nexport { URLBuilder };\n\nvar URLToken =\n/** @class */\nfunction () {\n  function URLToken(text, type) {\n    this.text = text;\n    this.type = type;\n  }\n\n  URLToken.scheme = function (text) {\n    return new URLToken(text, \"SCHEME\");\n  };\n\n  URLToken.host = function (text) {\n    return new URLToken(text, \"HOST\");\n  };\n\n  URLToken.port = function (text) {\n    return new URLToken(text, \"PORT\");\n  };\n\n  URLToken.path = function (text) {\n    return new URLToken(text, \"PATH\");\n  };\n\n  URLToken.query = function (text) {\n    return new URLToken(text, \"QUERY\");\n  };\n\n  return URLToken;\n}();\n\nexport { URLToken };\n/**\r\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\r\n * digit) character.\r\n */\n\nexport function isAlphaNumericCharacter(character) {\n  var characterCode = character.charCodeAt(0);\n  return 48\n  /* '0' */\n  <= characterCode && characterCode <= 57 ||\n  /* '9' */\n  65\n  /* 'A' */\n  <= characterCode && characterCode <= 90\n  /* 'Z' */\n  || 97\n  /* 'a' */\n  <= characterCode && characterCode <= 122\n  /* 'z' */\n  ;\n}\n/**\r\n * A class that tokenizes URL strings.\r\n */\n\nvar URLTokenizer =\n/** @class */\nfunction () {\n  function URLTokenizer(_text, state) {\n    this._text = _text;\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state != undefined ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n  /**\r\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\r\n   * hasn't started or has finished tokenizing.\r\n   */\n\n\n  URLTokenizer.prototype.current = function () {\n    return this._currentToken;\n  };\n  /**\r\n   * Advance to the next URLToken and return whether or not a URLToken was found.\r\n   */\n\n\n  URLTokenizer.prototype.next = function () {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n        case \"SCHEME\":\n          nextScheme(this);\n          break;\n\n        case \"SCHEME_OR_HOST\":\n          nextSchemeOrHost(this);\n          break;\n\n        case \"HOST\":\n          nextHost(this);\n          break;\n\n        case \"PORT\":\n          nextPort(this);\n          break;\n\n        case \"PATH\":\n          nextPath(this);\n          break;\n\n        case \"QUERY\":\n          nextQuery(this);\n          break;\n\n        default:\n          throw new Error(\"Unrecognized URLTokenizerState: \" + this._currentState);\n      }\n    }\n\n    return !!this._currentToken;\n  };\n\n  return URLTokenizer;\n}();\n\nexport { URLTokenizer };\n/**\r\n * Read the remaining characters from this Tokenizer's character stream.\r\n */\n\nfunction readRemaining(tokenizer) {\n  var result = \"\";\n\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n\n  return result;\n}\n/**\r\n * Whether or not this URLTokenizer has a current character.\r\n */\n\n\nfunction hasCurrentCharacter(tokenizer) {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n/**\r\n * Get the character in the text string at the current index.\r\n */\n\n\nfunction getCurrentCharacter(tokenizer) {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n/**\r\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\r\n * then step will default to 1.\r\n */\n\n\nfunction nextCharacter(tokenizer, step) {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n\n    tokenizer._currentIndex += step;\n  }\n}\n/**\r\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\r\n * Tokenizer's stream of characters.\r\n */\n\n\nfunction peekCharacters(tokenizer, charactersToPeek) {\n  var endIndex = tokenizer._currentIndex + charactersToPeek;\n\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n/**\r\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\r\n * is false when provided the current character.\r\n */\n\n\nfunction readWhile(tokenizer, condition) {\n  var result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    var currentCharacter = getCurrentCharacter(tokenizer);\n\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n/**\r\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\r\n * character stream is reached.\r\n */\n\n\nfunction readWhileLetterOrDigit(tokenizer) {\n  return readWhile(tokenizer, function (character) {\n    return isAlphaNumericCharacter(character);\n  });\n}\n/**\r\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\r\n * the end of the character stream is reached.\r\n */\n\n\nfunction readUntilCharacter(tokenizer) {\n  var terminatingCharacters = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    terminatingCharacters[_i - 1] = arguments[_i];\n  }\n\n  return readWhile(tokenizer, function (character) {\n    return terminatingCharacters.indexOf(character) === -1;\n  });\n}\n\nfunction nextScheme(tokenizer) {\n  var scheme = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer) {\n  var schemeOrHost = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer) {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  var host = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer) {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  var port = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer) {\n  var path = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer) {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  var query = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}","map":{"version":3,"sources":["../../lib/url.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nimport { replaceAll } from \"./util/utils\";\r\n/**\r\n * A class that handles the query portion of a URLBuilder.\r\n */\r\nvar URLQuery = /** @class */ (function () {\r\n    function URLQuery() {\r\n        this._rawQuery = {};\r\n    }\r\n    /**\r\n     * Get whether or not there any query parameters in this URLQuery.\r\n     */\r\n    URLQuery.prototype.any = function () {\r\n        return Object.keys(this._rawQuery).length > 0;\r\n    };\r\n    /**\r\n     * Set a query parameter with the provided name and value. If the parameterValue is undefined or\r\n     * empty, then this will attempt to remove an existing query parameter with the provided\r\n     * parameterName.\r\n     */\r\n    URLQuery.prototype.set = function (parameterName, parameterValue) {\r\n        if (parameterName) {\r\n            if (parameterValue != undefined) {\r\n                var newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();\r\n                this._rawQuery[parameterName] = newValue;\r\n            }\r\n            else {\r\n                delete this._rawQuery[parameterName];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Get the value of the query parameter with the provided name. If no parameter exists with the\r\n     * provided parameter name, then undefined will be returned.\r\n     */\r\n    URLQuery.prototype.get = function (parameterName) {\r\n        return parameterName ? this._rawQuery[parameterName] : undefined;\r\n    };\r\n    /**\r\n     * Get the string representation of this query. The return value will not start with a \"?\".\r\n     */\r\n    URLQuery.prototype.toString = function () {\r\n        var result = \"\";\r\n        for (var parameterName in this._rawQuery) {\r\n            if (result) {\r\n                result += \"&\";\r\n            }\r\n            var parameterValue = this._rawQuery[parameterName];\r\n            if (Array.isArray(parameterValue)) {\r\n                var parameterStrings = [];\r\n                for (var _i = 0, parameterValue_1 = parameterValue; _i < parameterValue_1.length; _i++) {\r\n                    var parameterValueElement = parameterValue_1[_i];\r\n                    parameterStrings.push(parameterName + \"=\" + parameterValueElement);\r\n                }\r\n                result += parameterStrings.join(\"&\");\r\n            }\r\n            else {\r\n                result += parameterName + \"=\" + parameterValue;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Parse a URLQuery from the provided text.\r\n     */\r\n    URLQuery.parse = function (text) {\r\n        var result = new URLQuery();\r\n        if (text) {\r\n            if (text.startsWith(\"?\")) {\r\n                text = text.substring(1);\r\n            }\r\n            var currentState = \"ParameterName\";\r\n            var parameterName = \"\";\r\n            var parameterValue = \"\";\r\n            for (var i = 0; i < text.length; ++i) {\r\n                var currentCharacter = text[i];\r\n                switch (currentState) {\r\n                    case \"ParameterName\":\r\n                        switch (currentCharacter) {\r\n                            case \"=\":\r\n                                currentState = \"ParameterValue\";\r\n                                break;\r\n                            case \"&\":\r\n                                parameterName = \"\";\r\n                                parameterValue = \"\";\r\n                                break;\r\n                            default:\r\n                                parameterName += currentCharacter;\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case \"ParameterValue\":\r\n                        switch (currentCharacter) {\r\n                            case \"&\":\r\n                                result.set(parameterName, parameterValue);\r\n                                parameterName = \"\";\r\n                                parameterValue = \"\";\r\n                                currentState = \"ParameterName\";\r\n                                break;\r\n                            default:\r\n                                parameterValue += currentCharacter;\r\n                                break;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\r\n                }\r\n            }\r\n            if (currentState === \"ParameterValue\") {\r\n                result.set(parameterName, parameterValue);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return URLQuery;\r\n}());\r\nexport { URLQuery };\r\n/**\r\n * A class that handles creating, modifying, and parsing URLs.\r\n */\r\nvar URLBuilder = /** @class */ (function () {\r\n    function URLBuilder() {\r\n    }\r\n    /**\r\n     * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\r\n     * (such as a host, port, path, or query), those parts will be added to this URL as well.\r\n     */\r\n    URLBuilder.prototype.setScheme = function (scheme) {\r\n        if (!scheme) {\r\n            this._scheme = undefined;\r\n        }\r\n        else {\r\n            this.set(scheme, \"SCHEME\");\r\n        }\r\n    };\r\n    /**\r\n     * Get the scheme that has been set in this URL.\r\n     */\r\n    URLBuilder.prototype.getScheme = function () {\r\n        return this._scheme;\r\n    };\r\n    /**\r\n     * Set the host for this URL. If the provided host contains other parts of a URL (such as a\r\n     * port, path, or query), those parts will be added to this URL as well.\r\n     */\r\n    URLBuilder.prototype.setHost = function (host) {\r\n        if (!host) {\r\n            this._host = undefined;\r\n        }\r\n        else {\r\n            this.set(host, \"SCHEME_OR_HOST\");\r\n        }\r\n    };\r\n    /**\r\n     * Get the host that has been set in this URL.\r\n     */\r\n    URLBuilder.prototype.getHost = function () {\r\n        return this._host;\r\n    };\r\n    /**\r\n     * Set the port for this URL. If the provided port contains other parts of a URL (such as a\r\n     * path or query), those parts will be added to this URL as well.\r\n     */\r\n    URLBuilder.prototype.setPort = function (port) {\r\n        if (port == undefined || port === \"\") {\r\n            this._port = undefined;\r\n        }\r\n        else {\r\n            this.set(port.toString(), \"PORT\");\r\n        }\r\n    };\r\n    /**\r\n     * Get the port that has been set in this URL.\r\n     */\r\n    URLBuilder.prototype.getPort = function () {\r\n        return this._port;\r\n    };\r\n    /**\r\n     * Set the path for this URL. If the provided path contains a query, then it will be added to\r\n     * this URL as well.\r\n     */\r\n    URLBuilder.prototype.setPath = function (path) {\r\n        if (!path) {\r\n            this._path = undefined;\r\n        }\r\n        else {\r\n            var schemeIndex = path.indexOf(\"://\");\r\n            if (schemeIndex !== -1) {\r\n                var schemeStart = path.lastIndexOf(\"/\", schemeIndex);\r\n                // Make sure to only grab the URL part of the path before setting the state back to SCHEME\r\n                // this will handle cases such as \"/a/b/c/https://microsoft.com\" => \"https://microsoft.com\"\r\n                this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), \"SCHEME\");\r\n            }\r\n            else {\r\n                this.set(path, \"PATH\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Append the provided path to this URL's existing path. If the provided path contains a query,\r\n     * then it will be added to this URL as well.\r\n     */\r\n    URLBuilder.prototype.appendPath = function (path) {\r\n        if (path) {\r\n            var currentPath = this.getPath();\r\n            if (currentPath) {\r\n                if (!currentPath.endsWith(\"/\")) {\r\n                    currentPath += \"/\";\r\n                }\r\n                if (path.startsWith(\"/\")) {\r\n                    path = path.substring(1);\r\n                }\r\n                path = currentPath + path;\r\n            }\r\n            this.set(path, \"PATH\");\r\n        }\r\n    };\r\n    /**\r\n     * Get the path that has been set in this URL.\r\n     */\r\n    URLBuilder.prototype.getPath = function () {\r\n        return this._path;\r\n    };\r\n    /**\r\n     * Set the query in this URL.\r\n     */\r\n    URLBuilder.prototype.setQuery = function (query) {\r\n        if (!query) {\r\n            this._query = undefined;\r\n        }\r\n        else {\r\n            this._query = URLQuery.parse(query);\r\n        }\r\n    };\r\n    /**\r\n     * Set a query parameter with the provided name and value in this URL's query. If the provided\r\n     * query parameter value is undefined or empty, then the query parameter will be removed if it\r\n     * existed.\r\n     */\r\n    URLBuilder.prototype.setQueryParameter = function (queryParameterName, queryParameterValue) {\r\n        if (queryParameterName) {\r\n            if (!this._query) {\r\n                this._query = new URLQuery();\r\n            }\r\n            this._query.set(queryParameterName, queryParameterValue);\r\n        }\r\n    };\r\n    /**\r\n     * Get the value of the query parameter with the provided query parameter name. If no query\r\n     * parameter exists with the provided name, then undefined will be returned.\r\n     */\r\n    URLBuilder.prototype.getQueryParameterValue = function (queryParameterName) {\r\n        return this._query ? this._query.get(queryParameterName) : undefined;\r\n    };\r\n    /**\r\n     * Get the query in this URL.\r\n     */\r\n    URLBuilder.prototype.getQuery = function () {\r\n        return this._query ? this._query.toString() : undefined;\r\n    };\r\n    /**\r\n     * Set the parts of this URL by parsing the provided text using the provided startState.\r\n     */\r\n    URLBuilder.prototype.set = function (text, startState) {\r\n        var tokenizer = new URLTokenizer(text, startState);\r\n        while (tokenizer.next()) {\r\n            var token = tokenizer.current();\r\n            if (token) {\r\n                switch (token.type) {\r\n                    case \"SCHEME\":\r\n                        this._scheme = token.text || undefined;\r\n                        break;\r\n                    case \"HOST\":\r\n                        this._host = token.text || undefined;\r\n                        break;\r\n                    case \"PORT\":\r\n                        this._port = token.text || undefined;\r\n                        break;\r\n                    case \"PATH\":\r\n                        var tokenPath = token.text || undefined;\r\n                        if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\r\n                            this._path = tokenPath;\r\n                        }\r\n                        break;\r\n                    case \"QUERY\":\r\n                        this._query = URLQuery.parse(token.text);\r\n                        break;\r\n                    default:\r\n                        throw new Error(\"Unrecognized URLTokenType: \" + token.type);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    URLBuilder.prototype.toString = function () {\r\n        var result = \"\";\r\n        if (this._scheme) {\r\n            result += this._scheme + \"://\";\r\n        }\r\n        if (this._host) {\r\n            result += this._host;\r\n        }\r\n        if (this._port) {\r\n            result += \":\" + this._port;\r\n        }\r\n        if (this._path) {\r\n            if (!this._path.startsWith(\"/\")) {\r\n                result += \"/\";\r\n            }\r\n            result += this._path;\r\n        }\r\n        if (this._query && this._query.any()) {\r\n            result += \"?\" + this._query.toString();\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * If the provided searchValue is found in this URLBuilder, then replace it with the provided\r\n     * replaceValue.\r\n     */\r\n    URLBuilder.prototype.replaceAll = function (searchValue, replaceValue) {\r\n        if (searchValue) {\r\n            this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\r\n            this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\r\n            this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\r\n            this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\r\n            this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\r\n        }\r\n    };\r\n    URLBuilder.parse = function (text) {\r\n        var result = new URLBuilder();\r\n        result.set(text, \"SCHEME_OR_HOST\");\r\n        return result;\r\n    };\r\n    return URLBuilder;\r\n}());\r\nexport { URLBuilder };\r\nvar URLToken = /** @class */ (function () {\r\n    function URLToken(text, type) {\r\n        this.text = text;\r\n        this.type = type;\r\n    }\r\n    URLToken.scheme = function (text) {\r\n        return new URLToken(text, \"SCHEME\");\r\n    };\r\n    URLToken.host = function (text) {\r\n        return new URLToken(text, \"HOST\");\r\n    };\r\n    URLToken.port = function (text) {\r\n        return new URLToken(text, \"PORT\");\r\n    };\r\n    URLToken.path = function (text) {\r\n        return new URLToken(text, \"PATH\");\r\n    };\r\n    URLToken.query = function (text) {\r\n        return new URLToken(text, \"QUERY\");\r\n    };\r\n    return URLToken;\r\n}());\r\nexport { URLToken };\r\n/**\r\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\r\n * digit) character.\r\n */\r\nexport function isAlphaNumericCharacter(character) {\r\n    var characterCode = character.charCodeAt(0);\r\n    return ((48 /* '0' */ <= characterCode && characterCode <= 57) /* '9' */ ||\r\n        (65 /* 'A' */ <= characterCode && characterCode <= 90) /* 'Z' */ ||\r\n        (97 /* 'a' */ <= characterCode && characterCode <= 122) /* 'z' */);\r\n}\r\n/**\r\n * A class that tokenizes URL strings.\r\n */\r\nvar URLTokenizer = /** @class */ (function () {\r\n    function URLTokenizer(_text, state) {\r\n        this._text = _text;\r\n        this._textLength = _text ? _text.length : 0;\r\n        this._currentState = state != undefined ? state : \"SCHEME_OR_HOST\";\r\n        this._currentIndex = 0;\r\n    }\r\n    /**\r\n     * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\r\n     * hasn't started or has finished tokenizing.\r\n     */\r\n    URLTokenizer.prototype.current = function () {\r\n        return this._currentToken;\r\n    };\r\n    /**\r\n     * Advance to the next URLToken and return whether or not a URLToken was found.\r\n     */\r\n    URLTokenizer.prototype.next = function () {\r\n        if (!hasCurrentCharacter(this)) {\r\n            this._currentToken = undefined;\r\n        }\r\n        else {\r\n            switch (this._currentState) {\r\n                case \"SCHEME\":\r\n                    nextScheme(this);\r\n                    break;\r\n                case \"SCHEME_OR_HOST\":\r\n                    nextSchemeOrHost(this);\r\n                    break;\r\n                case \"HOST\":\r\n                    nextHost(this);\r\n                    break;\r\n                case \"PORT\":\r\n                    nextPort(this);\r\n                    break;\r\n                case \"PATH\":\r\n                    nextPath(this);\r\n                    break;\r\n                case \"QUERY\":\r\n                    nextQuery(this);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Unrecognized URLTokenizerState: \" + this._currentState);\r\n            }\r\n        }\r\n        return !!this._currentToken;\r\n    };\r\n    return URLTokenizer;\r\n}());\r\nexport { URLTokenizer };\r\n/**\r\n * Read the remaining characters from this Tokenizer's character stream.\r\n */\r\nfunction readRemaining(tokenizer) {\r\n    var result = \"\";\r\n    if (tokenizer._currentIndex < tokenizer._textLength) {\r\n        result = tokenizer._text.substring(tokenizer._currentIndex);\r\n        tokenizer._currentIndex = tokenizer._textLength;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Whether or not this URLTokenizer has a current character.\r\n */\r\nfunction hasCurrentCharacter(tokenizer) {\r\n    return tokenizer._currentIndex < tokenizer._textLength;\r\n}\r\n/**\r\n * Get the character in the text string at the current index.\r\n */\r\nfunction getCurrentCharacter(tokenizer) {\r\n    return tokenizer._text[tokenizer._currentIndex];\r\n}\r\n/**\r\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\r\n * then step will default to 1.\r\n */\r\nfunction nextCharacter(tokenizer, step) {\r\n    if (hasCurrentCharacter(tokenizer)) {\r\n        if (!step) {\r\n            step = 1;\r\n        }\r\n        tokenizer._currentIndex += step;\r\n    }\r\n}\r\n/**\r\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\r\n * Tokenizer's stream of characters.\r\n */\r\nfunction peekCharacters(tokenizer, charactersToPeek) {\r\n    var endIndex = tokenizer._currentIndex + charactersToPeek;\r\n    if (tokenizer._textLength < endIndex) {\r\n        endIndex = tokenizer._textLength;\r\n    }\r\n    return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\r\n}\r\n/**\r\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\r\n * is false when provided the current character.\r\n */\r\nfunction readWhile(tokenizer, condition) {\r\n    var result = \"\";\r\n    while (hasCurrentCharacter(tokenizer)) {\r\n        var currentCharacter = getCurrentCharacter(tokenizer);\r\n        if (!condition(currentCharacter)) {\r\n            break;\r\n        }\r\n        else {\r\n            result += currentCharacter;\r\n            nextCharacter(tokenizer);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\r\n * character stream is reached.\r\n */\r\nfunction readWhileLetterOrDigit(tokenizer) {\r\n    return readWhile(tokenizer, function (character) { return isAlphaNumericCharacter(character); });\r\n}\r\n/**\r\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\r\n * the end of the character stream is reached.\r\n */\r\nfunction readUntilCharacter(tokenizer) {\r\n    var terminatingCharacters = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        terminatingCharacters[_i - 1] = arguments[_i];\r\n    }\r\n    return readWhile(tokenizer, function (character) { return terminatingCharacters.indexOf(character) === -1; });\r\n}\r\nfunction nextScheme(tokenizer) {\r\n    var scheme = readWhileLetterOrDigit(tokenizer);\r\n    tokenizer._currentToken = URLToken.scheme(scheme);\r\n    if (!hasCurrentCharacter(tokenizer)) {\r\n        tokenizer._currentState = \"DONE\";\r\n    }\r\n    else {\r\n        tokenizer._currentState = \"HOST\";\r\n    }\r\n}\r\nfunction nextSchemeOrHost(tokenizer) {\r\n    var schemeOrHost = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\r\n    if (!hasCurrentCharacter(tokenizer)) {\r\n        tokenizer._currentToken = URLToken.host(schemeOrHost);\r\n        tokenizer._currentState = \"DONE\";\r\n    }\r\n    else if (getCurrentCharacter(tokenizer) === \":\") {\r\n        if (peekCharacters(tokenizer, 3) === \"://\") {\r\n            tokenizer._currentToken = URLToken.scheme(schemeOrHost);\r\n            tokenizer._currentState = \"HOST\";\r\n        }\r\n        else {\r\n            tokenizer._currentToken = URLToken.host(schemeOrHost);\r\n            tokenizer._currentState = \"PORT\";\r\n        }\r\n    }\r\n    else {\r\n        tokenizer._currentToken = URLToken.host(schemeOrHost);\r\n        if (getCurrentCharacter(tokenizer) === \"/\") {\r\n            tokenizer._currentState = \"PATH\";\r\n        }\r\n        else {\r\n            tokenizer._currentState = \"QUERY\";\r\n        }\r\n    }\r\n}\r\nfunction nextHost(tokenizer) {\r\n    if (peekCharacters(tokenizer, 3) === \"://\") {\r\n        nextCharacter(tokenizer, 3);\r\n    }\r\n    var host = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\r\n    tokenizer._currentToken = URLToken.host(host);\r\n    if (!hasCurrentCharacter(tokenizer)) {\r\n        tokenizer._currentState = \"DONE\";\r\n    }\r\n    else if (getCurrentCharacter(tokenizer) === \":\") {\r\n        tokenizer._currentState = \"PORT\";\r\n    }\r\n    else if (getCurrentCharacter(tokenizer) === \"/\") {\r\n        tokenizer._currentState = \"PATH\";\r\n    }\r\n    else {\r\n        tokenizer._currentState = \"QUERY\";\r\n    }\r\n}\r\nfunction nextPort(tokenizer) {\r\n    if (getCurrentCharacter(tokenizer) === \":\") {\r\n        nextCharacter(tokenizer);\r\n    }\r\n    var port = readUntilCharacter(tokenizer, \"/\", \"?\");\r\n    tokenizer._currentToken = URLToken.port(port);\r\n    if (!hasCurrentCharacter(tokenizer)) {\r\n        tokenizer._currentState = \"DONE\";\r\n    }\r\n    else if (getCurrentCharacter(tokenizer) === \"/\") {\r\n        tokenizer._currentState = \"PATH\";\r\n    }\r\n    else {\r\n        tokenizer._currentState = \"QUERY\";\r\n    }\r\n}\r\nfunction nextPath(tokenizer) {\r\n    var path = readUntilCharacter(tokenizer, \"?\");\r\n    tokenizer._currentToken = URLToken.path(path);\r\n    if (!hasCurrentCharacter(tokenizer)) {\r\n        tokenizer._currentState = \"DONE\";\r\n    }\r\n    else {\r\n        tokenizer._currentState = \"QUERY\";\r\n    }\r\n}\r\nfunction nextQuery(tokenizer) {\r\n    if (getCurrentCharacter(tokenizer) === \"?\") {\r\n        nextCharacter(tokenizer);\r\n    }\r\n    var query = readRemaining(tokenizer);\r\n    tokenizer._currentToken = URLToken.query(query);\r\n    tokenizer._currentState = \"DONE\";\r\n}\r\n//# sourceMappingURL=url.js.map"]},"metadata":{},"sourceType":"module"}
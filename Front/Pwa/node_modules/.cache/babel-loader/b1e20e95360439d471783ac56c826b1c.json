{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst debug = require('debug')('mssql:base');\n\nconst {\n  parseSqlConnectionString\n} = require('@tediousjs/connection-string');\n\nconst tarn = require('tarn');\n\nconst {\n  IDS\n} = require('../utils');\n\nconst ConnectionError = require('../error/connection-error');\n\nconst shared = require('../shared');\n\nconst deepclone = require('rfdc/default');\n/**\n * Class ConnectionPool.\n *\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\n *\n * @property {Boolean} connected If true, connection is established.\n * @property {Boolean} connecting If true, connection is being established.\n *\n * @fires ConnectionPool#connect\n * @fires ConnectionPool#close\n */\n\n\nclass ConnectionPool extends EventEmitter {\n  /**\n   * Create new Connection.\n   *\n   * @param {Object|String} config Connection configuration object or connection string.\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\n   */\n  constructor(config, callback) {\n    super();\n    IDS.add(this, 'ConnectionPool');\n    debug('pool(%d): created', IDS.get(this));\n    this._connectStack = [];\n    this._closeStack = [];\n    this._connected = false;\n    this._connecting = false;\n    this._healthy = false;\n\n    if (typeof config === 'string') {\n      try {\n        this.config = this.parseConnectionString(config);\n      } catch (ex) {\n        if (typeof callback === 'function') {\n          return setImmediate(callback, ex);\n        }\n\n        throw ex;\n      }\n    } else {\n      this.config = deepclone(config);\n    } // set defaults\n\n\n    this.config.port = this.config.port || 1433;\n    this.config.options = this.config.options || {};\n    this.config.stream = this.config.stream || false;\n    this.config.parseJSON = this.config.parseJSON || false;\n    this.config.arrayRowMode = this.config.arrayRowMode || false;\n    this.config.validateConnection = 'validateConnection' in this.config ? this.config.validateConnection : true;\n\n    if (/^(.*)\\\\(.*)$/.exec(this.config.server)) {\n      this.config.server = RegExp.$1;\n      this.config.options.instanceName = RegExp.$2;\n    }\n\n    if (typeof callback === 'function') {\n      this.connect(callback);\n    }\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get healthy() {\n    return this._healthy;\n  }\n\n  parseConnectionString(connectionString) {\n    return this._parseConnectionString(connectionString);\n  }\n\n  _parseConnectionString(connectionString) {\n    const parsed = parseSqlConnectionString(connectionString, true, true);\n    return Object.entries(parsed).reduce((config, [key, value]) => {\n      switch (key) {\n        case 'application name':\n          break;\n\n        case 'applicationintent':\n          Object.assign(config.options, {\n            readOnlyIntent: value === 'readonly'\n          });\n          break;\n\n        case 'asynchronous processing':\n          break;\n\n        case 'attachdbfilename':\n          break;\n\n        case 'authentication':\n          break;\n\n        case 'column encryption setting':\n          break;\n\n        case 'connection timeout':\n          Object.assign(config, {\n            connectionTimeout: value * 1000\n          });\n          break;\n\n        case 'connection lifetime':\n          break;\n\n        case 'connectretrycount':\n          break;\n\n        case 'connectretryinterval':\n          Object.assign(config.options, {\n            connectionRetryInterval: value * 1000\n          });\n          break;\n\n        case 'context connection':\n          break;\n\n        case 'current language':\n          Object.assign(config.options, {\n            language: value\n          });\n          break;\n\n        case 'data source':\n          {\n            let server = value;\n            let instanceName;\n            let port = 1433;\n\n            if (/^np:/i.test(server)) {\n              throw new Error('Connection via Named Pipes is not supported.');\n            }\n\n            if (/^tcp:/i.test(server)) {\n              server = server.substr(4);\n            }\n\n            if (/^(.*)\\\\(.*)$/.exec(server)) {\n              server = RegExp.$1;\n              instanceName = RegExp.$2;\n            }\n\n            if (/^(.*),(.*)$/.exec(server)) {\n              server = RegExp.$1.trim();\n              port = parseInt(RegExp.$2.trim(), 10);\n            }\n\n            if (server === '.' || server === '(.)' || server.toLowerCase() === '(localdb)' || server.toLowerCase() === '(local)') {\n              server = 'localhost';\n            }\n\n            Object.assign(config, {\n              port,\n              server\n            });\n            Object.assign(config.options, {\n              instanceName\n            });\n            break;\n          }\n\n        case 'encrypt':\n          Object.assign(config.options, {\n            encrypt: !!value\n          });\n          break;\n\n        case 'enlist':\n          break;\n\n        case 'failover partner':\n          break;\n\n        case 'initial catalog':\n          Object.assign(config, {\n            database: value\n          });\n          break;\n\n        case 'integrated security':\n          break;\n\n        case 'max pool size':\n          Object.assign(config.pool, {\n            max: value\n          });\n          break;\n\n        case 'min pool size':\n          Object.assign(config.pool, {\n            min: value\n          });\n          break;\n\n        case 'multipleactiveresultsets':\n          break;\n\n        case 'multisubnetfailover':\n          Object.assign(config.options, {\n            multiSubnetFailover: value\n          });\n          break;\n\n        case 'network library':\n          break;\n\n        case 'packet size':\n          Object.assign(config.options, {\n            packetSize: value\n          });\n          break;\n\n        case 'password':\n          Object.assign(config, {\n            password: value\n          });\n          break;\n\n        case 'persist security info':\n          break;\n\n        case 'poolblockingperiod':\n          break;\n\n        case 'pooling':\n          break;\n\n        case 'replication':\n          break;\n\n        case 'transaction binding':\n          Object.assign(config.options, {\n            enableImplicitTransactions: value.toLowerCase() === 'implicit unbind'\n          });\n          break;\n\n        case 'transparentnetworkipresolution':\n          break;\n\n        case 'trustservercertificate':\n          Object.assign(config.options, {\n            trustServerCertificate: value\n          });\n          break;\n\n        case 'type system version':\n          break;\n\n        case 'user id':\n          {\n            let user = value;\n            let domain;\n\n            if (/^(.*)\\\\(.*)$/.exec(user)) {\n              domain = RegExp.$1;\n              user = RegExp.$2;\n            }\n\n            Object.assign(config, {\n              domain,\n              user\n            });\n            break;\n          }\n\n        case 'user instance':\n          break;\n\n        case 'workstation id':\n          Object.assign(config.options, {\n            workstationId: value\n          });\n          break;\n\n        case 'request timeout':\n          Object.assign(config, {\n            requestTimeout: parseInt(value, 10)\n          });\n          break;\n\n        case 'stream':\n          Object.assign(config, {\n            stream: !!value\n          });\n          break;\n\n        case 'useutc':\n          Object.assign(config.options, {\n            useUTC: !!value\n          });\n          break;\n\n        case 'parsejson':\n          Object.assign(config, {\n            parseJSON: !!value\n          });\n          break;\n      }\n\n      return config;\n    }, {\n      options: {},\n      pool: {}\n    });\n  }\n  /**\n   * Acquire connection from this connection pool.\n   *\n   * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\n   * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n\n  acquire(requester, callback) {\n    const acquirePromise = shared.Promise.resolve(this._acquire().promise).catch(err => {\n      this.emit('error', err);\n      throw err;\n    });\n\n    if (typeof callback === 'function') {\n      acquirePromise.then(connection => callback(null, connection, this.config)).catch(callback);\n      return this;\n    }\n\n    return acquirePromise;\n  }\n\n  _acquire() {\n    if (!this.pool) {\n      return shared.Promise.reject(new ConnectionError('Connection not yet open.', 'ENOTOPEN'));\n    } else if (this.pool.destroyed) {\n      return shared.Promise.reject(new ConnectionError('Connection is closing', 'ENOTOPEN'));\n    }\n\n    return this.pool.acquire();\n  }\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {ConnectionPool}\n   */\n\n\n  release(connection) {\n    debug('connection(%d): released', IDS.get(connection));\n\n    if (this.pool) {\n      this.pool.release(connection);\n    }\n\n    return this;\n  }\n  /**\n   * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n\n  connect(callback) {\n    if (typeof callback === 'function') {\n      this._connect(callback);\n\n      return this;\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      return this._connect(err => {\n        if (err) return reject(err);\n        resolve(this);\n      });\n    });\n  }\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n\n  _connect(callback) {\n    if (this._connected) {\n      debug('pool(%d): already connected, executing connect callback immediately', IDS.get(this));\n      return setImmediate(callback, null, this);\n    }\n\n    this._connectStack.push(callback);\n\n    if (this._connecting) {\n      return;\n    }\n\n    this._connecting = true;\n    debug('pool(%d): connecting', IDS.get(this)); // create one test connection to check if everything is ok\n\n    this._poolCreate().then(connection => {\n      debug('pool(%d): connected', IDS.get(this));\n      this._healthy = true;\n      return this._poolDestroy(connection).then(() => {\n        // prepare pool\n        this.pool = new tarn.Pool(Object.assign({\n          create: () => this._poolCreate().then(connection => {\n            this._healthy = true;\n            return connection;\n          }).catch(err => {\n            if (this.pool.numUsed() + this.pool.numFree() <= 0) {\n              this._healthy = false;\n            }\n\n            throw err;\n          }),\n          validate: this._poolValidate.bind(this),\n          destroy: this._poolDestroy.bind(this),\n          max: 10,\n          min: 0,\n          idleTimeoutMillis: 30000,\n          propagateCreateError: true\n        }, this.config.pool));\n        const self = this;\n        Object.defineProperties(this.pool, {\n          size: {\n            get: () => {\n              const message = 'the `size` property on pool is deprecated, access it directly on the `ConnectionPool`';\n              self.emit('debug', message);\n              process.emitWarning(message);\n              return self.size;\n            }\n          },\n          available: {\n            get: () => {\n              const message = 'the `available` property on pool is deprecated, access it directly on the `ConnectionPool`';\n              self.emit('debug', message);\n              process.emitWarning(message);\n              return self.available;\n            }\n          },\n          pending: {\n            get: () => {\n              const message = 'the `pending` property on pool is deprecate, access it directly on the `ConnectionPool`';\n              self.emit('debug', message);\n              process.emitWarning(message);\n              return self.pending;\n            }\n          },\n          borrowed: {\n            get: () => {\n              const message = 'the `borrowed` property on pool is deprecated, access it directly on the `ConnectionPool`';\n              self.emit('debug', message);\n              process.emitWarning(message);\n              return self.borrowed;\n            }\n          }\n        });\n        this._connecting = false;\n        this._connected = true;\n      });\n    }).then(() => {\n      this._connectStack.forEach(cb => {\n        setImmediate(cb, null, this);\n      });\n    }).catch(err => {\n      this._connecting = false;\n\n      this._connectStack.forEach(cb => {\n        setImmediate(cb, err);\n      });\n    }).then(() => {\n      this._connectStack = [];\n    });\n  }\n\n  get size() {\n    return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates();\n  }\n\n  get available() {\n    return this.pool.numFree();\n  }\n\n  get pending() {\n    return this.pool.numPendingAcquires();\n  }\n\n  get borrowed() {\n    return this.pool.numUsed();\n  }\n  /**\n   * Close all active connections in the pool.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n\n  close(callback) {\n    if (typeof callback === 'function') {\n      this._close(callback);\n\n      return this;\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._close(err => {\n        if (err) return reject(err);\n        resolve(this);\n      });\n    });\n  }\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n\n  _close(callback) {\n    // we don't allow pools in a connecting state to be closed because it means there are far too many\n    // edge cases to deal with\n    if (this._connecting) {\n      debug('pool(%d): close called while connecting', IDS.get(this));\n      setImmediate(callback, new ConnectionError('Cannot close a pool while it is connecting'));\n    }\n\n    if (!this.pool) {\n      debug('pool(%d): already closed, executing close callback immediately', IDS.get(this));\n      return setImmediate(callback, null);\n    }\n\n    this._closeStack.push(callback);\n\n    if (this.pool.destroyed) return;\n    this._connecting = this._connected = this._healthy = false;\n    this.pool.destroy().then(() => {\n      debug('pool(%d): pool closed, removing pool reference and executing close callbacks', IDS.get(this));\n      this.pool = null;\n\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, null);\n      });\n    }).catch(err => {\n      this.pool = null;\n\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, err);\n      });\n    }).then(() => {\n      this._closeStack = [];\n    });\n  }\n  /**\n   * Returns new request using this connection.\n   *\n   * @return {Request}\n   */\n\n\n  request() {\n    return new shared.driver.Request(this);\n  }\n  /**\n   * Returns new transaction using this connection.\n   *\n   * @return {Transaction}\n   */\n\n\n  transaction() {\n    return new shared.driver.Transaction(this);\n  }\n  /**\n   * Creates a new query using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n\n  query() {\n    if (typeof arguments[0] === 'string') {\n      return new shared.driver.Request(this).query(arguments[0], arguments[1]);\n    }\n\n    const values = Array.prototype.slice.call(arguments);\n    const strings = values.shift();\n    return new shared.driver.Request(this)._template(strings, values, 'query');\n  }\n  /**\n   * Creates a new batch using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n\n  batch() {\n    if (typeof arguments[0] === 'string') {\n      return new shared.driver.Request(this).batch(arguments[0], arguments[1]);\n    }\n\n    const values = Array.prototype.slice.call(arguments);\n    const strings = values.shift();\n    return new shared.driver.Request(this)._template(strings, values, 'batch');\n  }\n\n}\n\nmodule.exports = ConnectionPool;","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/lib/base/connection-pool.js"],"names":["EventEmitter","require","debug","parseSqlConnectionString","tarn","IDS","ConnectionError","shared","deepclone","ConnectionPool","constructor","config","callback","add","get","_connectStack","_closeStack","_connected","_connecting","_healthy","parseConnectionString","ex","setImmediate","port","options","stream","parseJSON","arrayRowMode","validateConnection","exec","server","RegExp","$1","instanceName","$2","connect","connected","connecting","healthy","connectionString","_parseConnectionString","parsed","Object","entries","reduce","key","value","assign","readOnlyIntent","connectionTimeout","connectionRetryInterval","language","test","Error","substr","trim","parseInt","toLowerCase","encrypt","database","pool","max","min","multiSubnetFailover","packetSize","password","enableImplicitTransactions","trustServerCertificate","user","domain","workstationId","requestTimeout","useUTC","acquire","requester","acquirePromise","Promise","resolve","_acquire","promise","catch","err","emit","then","connection","reject","destroyed","release","_connect","push","_poolCreate","_poolDestroy","Pool","create","numUsed","numFree","validate","_poolValidate","bind","destroy","idleTimeoutMillis","propagateCreateError","self","defineProperties","size","message","process","emitWarning","available","pending","borrowed","forEach","cb","numPendingCreates","numPendingAcquires","close","_close","request","driver","Request","transaction","Transaction","query","arguments","values","Array","prototype","slice","call","strings","shift","_template","batch","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst debug = require('debug')('mssql:base')\nconst { parseSqlConnectionString } = require('@tediousjs/connection-string')\nconst tarn = require('tarn')\nconst { IDS } = require('../utils')\nconst ConnectionError = require('../error/connection-error')\nconst shared = require('../shared')\nconst deepclone = require('rfdc/default')\n\n/**\n * Class ConnectionPool.\n *\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\n *\n * @property {Boolean} connected If true, connection is established.\n * @property {Boolean} connecting If true, connection is being established.\n *\n * @fires ConnectionPool#connect\n * @fires ConnectionPool#close\n */\n\nclass ConnectionPool extends EventEmitter {\n  /**\n   * Create new Connection.\n   *\n   * @param {Object|String} config Connection configuration object or connection string.\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\n   */\n\n  constructor (config, callback) {\n    super()\n\n    IDS.add(this, 'ConnectionPool')\n    debug('pool(%d): created', IDS.get(this))\n\n    this._connectStack = []\n    this._closeStack = []\n\n    this._connected = false\n    this._connecting = false\n    this._healthy = false\n\n    if (typeof config === 'string') {\n      try {\n        this.config = this.parseConnectionString(config)\n      } catch (ex) {\n        if (typeof callback === 'function') {\n          return setImmediate(callback, ex)\n        }\n        throw ex\n      }\n    } else {\n      this.config = deepclone(config)\n    }\n\n    // set defaults\n    this.config.port = this.config.port || 1433\n    this.config.options = this.config.options || {}\n    this.config.stream = this.config.stream || false\n    this.config.parseJSON = this.config.parseJSON || false\n    this.config.arrayRowMode = this.config.arrayRowMode || false\n    this.config.validateConnection = 'validateConnection' in this.config ? this.config.validateConnection : true\n\n    if (/^(.*)\\\\(.*)$/.exec(this.config.server)) {\n      this.config.server = RegExp.$1\n      this.config.options.instanceName = RegExp.$2\n    }\n\n    if (typeof callback === 'function') {\n      this.connect(callback)\n    }\n  }\n\n  get connected () {\n    return this._connected\n  }\n\n  get connecting () {\n    return this._connecting\n  }\n\n  get healthy () {\n    return this._healthy\n  }\n\n  parseConnectionString (connectionString) {\n    return this._parseConnectionString(connectionString)\n  }\n\n  _parseConnectionString (connectionString) {\n    const parsed = parseSqlConnectionString(connectionString, true, true)\n    return Object.entries(parsed).reduce((config, [key, value]) => {\n      switch (key) {\n        case 'application name':\n          break\n        case 'applicationintent':\n          Object.assign(config.options, {\n            readOnlyIntent: value === 'readonly'\n          })\n          break\n        case 'asynchronous processing':\n          break\n        case 'attachdbfilename':\n          break\n        case 'authentication':\n          break\n        case 'column encryption setting':\n          break\n        case 'connection timeout':\n          Object.assign(config, {\n            connectionTimeout: value * 1000\n          })\n          break\n        case 'connection lifetime':\n          break\n        case 'connectretrycount':\n          break\n        case 'connectretryinterval':\n          Object.assign(config.options, {\n            connectionRetryInterval: value * 1000\n          })\n          break\n        case 'context connection':\n          break\n        case 'current language':\n          Object.assign(config.options, {\n            language: value\n          })\n          break\n        case 'data source':\n        {\n          let server = value\n          let instanceName\n          let port = 1433\n          if (/^np:/i.test(server)) {\n            throw new Error('Connection via Named Pipes is not supported.')\n          }\n          if (/^tcp:/i.test(server)) {\n            server = server.substr(4)\n          }\n          if (/^(.*)\\\\(.*)$/.exec(server)) {\n            server = RegExp.$1\n            instanceName = RegExp.$2\n          }\n          if (/^(.*),(.*)$/.exec(server)) {\n            server = RegExp.$1.trim()\n            port = parseInt(RegExp.$2.trim(), 10)\n          }\n          if (server === '.' || server === '(.)' || server.toLowerCase() === '(localdb)' || server.toLowerCase() === '(local)') {\n            server = 'localhost'\n          }\n          Object.assign(config, {\n            port,\n            server\n          })\n          Object.assign(config.options, {\n            instanceName\n          })\n          break\n        }\n        case 'encrypt':\n          Object.assign(config.options, {\n            encrypt: !!value\n          })\n          break\n        case 'enlist':\n          break\n        case 'failover partner':\n          break\n        case 'initial catalog':\n          Object.assign(config, {\n            database: value\n          })\n          break\n        case 'integrated security':\n          break\n        case 'max pool size':\n          Object.assign(config.pool, {\n            max: value\n          })\n          break\n        case 'min pool size':\n          Object.assign(config.pool, {\n            min: value\n          })\n          break\n        case 'multipleactiveresultsets':\n          break\n        case 'multisubnetfailover':\n          Object.assign(config.options, {\n            multiSubnetFailover: value\n          })\n          break\n        case 'network library':\n          break\n        case 'packet size':\n          Object.assign(config.options, {\n            packetSize: value\n          })\n          break\n        case 'password':\n          Object.assign(config, {\n            password: value\n          })\n          break\n        case 'persist security info':\n          break\n        case 'poolblockingperiod':\n          break\n        case 'pooling':\n          break\n        case 'replication':\n          break\n        case 'transaction binding':\n          Object.assign(config.options, {\n            enableImplicitTransactions: value.toLowerCase() === 'implicit unbind'\n          })\n          break\n        case 'transparentnetworkipresolution':\n          break\n        case 'trustservercertificate':\n          Object.assign(config.options, {\n            trustServerCertificate: value\n          })\n          break\n        case 'type system version':\n          break\n        case 'user id': {\n          let user = value\n          let domain\n          if (/^(.*)\\\\(.*)$/.exec(user)) {\n            domain = RegExp.$1\n            user = RegExp.$2\n          }\n          Object.assign(config, {\n            domain,\n            user\n          })\n          break\n        }\n        case 'user instance':\n          break\n        case 'workstation id':\n          Object.assign(config.options, {\n            workstationId: value\n          })\n          break\n        case 'request timeout':\n          Object.assign(config, {\n            requestTimeout: parseInt(value, 10)\n          })\n          break\n        case 'stream':\n          Object.assign(config, {\n            stream: !!value\n          })\n          break\n        case 'useutc':\n          Object.assign(config.options, {\n            useUTC: !!value\n          })\n          break\n        case 'parsejson':\n          Object.assign(config, {\n            parseJSON: !!value\n          })\n          break\n      }\n      return config\n    }, { options: {}, pool: {} })\n  }\n\n  /**\n   * Acquire connection from this connection pool.\n   *\n   * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\n   * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  acquire (requester, callback) {\n    const acquirePromise = shared.Promise.resolve(this._acquire().promise).catch(err => {\n      this.emit('error', err)\n      throw err\n    })\n    if (typeof callback === 'function') {\n      acquirePromise.then(connection => callback(null, connection, this.config)).catch(callback)\n      return this\n    }\n\n    return acquirePromise\n  }\n\n  _acquire () {\n    if (!this.pool) {\n      return shared.Promise.reject(new ConnectionError('Connection not yet open.', 'ENOTOPEN'))\n    } else if (this.pool.destroyed) {\n      return shared.Promise.reject(new ConnectionError('Connection is closing', 'ENOTOPEN'))\n    }\n\n    return this.pool.acquire()\n  }\n\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {ConnectionPool}\n   */\n\n  release (connection) {\n    debug('connection(%d): released', IDS.get(connection))\n\n    if (this.pool) {\n      this.pool.release(connection)\n    }\n    return this\n  }\n\n  /**\n   * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  connect (callback) {\n    if (typeof callback === 'function') {\n      this._connect(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      return this._connect(err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _connect (callback) {\n    if (this._connected) {\n      debug('pool(%d): already connected, executing connect callback immediately', IDS.get(this))\n      return setImmediate(callback, null, this)\n    }\n\n    this._connectStack.push(callback)\n\n    if (this._connecting) {\n      return\n    }\n\n    this._connecting = true\n    debug('pool(%d): connecting', IDS.get(this))\n\n    // create one test connection to check if everything is ok\n    this._poolCreate().then((connection) => {\n      debug('pool(%d): connected', IDS.get(this))\n      this._healthy = true\n\n      return this._poolDestroy(connection).then(() => {\n        // prepare pool\n        this.pool = new tarn.Pool(\n          Object.assign({\n            create: () => this._poolCreate()\n              .then(connection => {\n                this._healthy = true\n                return connection\n              })\n              .catch(err => {\n                if (this.pool.numUsed() + this.pool.numFree() <= 0) {\n                  this._healthy = false\n                }\n                throw err\n              }),\n            validate: this._poolValidate.bind(this),\n            destroy: this._poolDestroy.bind(this),\n            max: 10,\n            min: 0,\n            idleTimeoutMillis: 30000,\n            propagateCreateError: true\n          }, this.config.pool)\n        )\n        const self = this\n        Object.defineProperties(this.pool, {\n          size: {\n            get: () => {\n              const message = 'the `size` property on pool is deprecated, access it directly on the `ConnectionPool`'\n              self.emit('debug', message)\n              process.emitWarning(message)\n              return self.size\n            }\n          },\n          available: {\n            get: () => {\n              const message = 'the `available` property on pool is deprecated, access it directly on the `ConnectionPool`'\n              self.emit('debug', message)\n              process.emitWarning(message)\n              return self.available\n            }\n          },\n          pending: {\n            get: () => {\n              const message = 'the `pending` property on pool is deprecate, access it directly on the `ConnectionPool`'\n              self.emit('debug', message)\n              process.emitWarning(message)\n              return self.pending\n            }\n          },\n          borrowed: {\n            get: () => {\n              const message = 'the `borrowed` property on pool is deprecated, access it directly on the `ConnectionPool`'\n              self.emit('debug', message)\n              process.emitWarning(message)\n              return self.borrowed\n            }\n          }\n        })\n\n        this._connecting = false\n        this._connected = true\n      })\n    }).then(() => {\n      this._connectStack.forEach((cb) => {\n        setImmediate(cb, null, this)\n      })\n    }).catch(err => {\n      this._connecting = false\n      this._connectStack.forEach((cb) => {\n        setImmediate(cb, err)\n      })\n    }).then(() => {\n      this._connectStack = []\n    })\n  }\n\n  get size () {\n    return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates()\n  }\n\n  get available () {\n    return this.pool.numFree()\n  }\n\n  get pending () {\n    return this.pool.numPendingAcquires()\n  }\n\n  get borrowed () {\n    return this.pool.numUsed()\n  }\n\n  /**\n   * Close all active connections in the pool.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  close (callback) {\n    if (typeof callback === 'function') {\n      this._close(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._close(err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _close (callback) {\n    // we don't allow pools in a connecting state to be closed because it means there are far too many\n    // edge cases to deal with\n    if (this._connecting) {\n      debug('pool(%d): close called while connecting', IDS.get(this))\n      setImmediate(callback, new ConnectionError('Cannot close a pool while it is connecting'))\n    }\n\n    if (!this.pool) {\n      debug('pool(%d): already closed, executing close callback immediately', IDS.get(this))\n      return setImmediate(callback, null)\n    }\n\n    this._closeStack.push(callback)\n\n    if (this.pool.destroyed) return\n\n    this._connecting = this._connected = this._healthy = false\n\n    this.pool.destroy().then(() => {\n      debug('pool(%d): pool closed, removing pool reference and executing close callbacks', IDS.get(this))\n      this.pool = null\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, null)\n      })\n    }).catch(err => {\n      this.pool = null\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, err)\n      })\n    }).then(() => {\n      this._closeStack = []\n    })\n  }\n\n  /**\n   * Returns new request using this connection.\n   *\n   * @return {Request}\n   */\n\n  request () {\n    return new shared.driver.Request(this)\n  }\n\n  /**\n   * Returns new transaction using this connection.\n   *\n   * @return {Transaction}\n   */\n\n  transaction () {\n    return new shared.driver.Transaction(this)\n  }\n\n  /**\n   * Creates a new query using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query () {\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).query(arguments[0], arguments[1]) }\n\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n\n    return new shared.driver.Request(this)._template(strings, values, 'query')\n  }\n\n  /**\n   * Creates a new batch using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch () {\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).batch(arguments[0], arguments[1]) }\n\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n\n    return new shared.driver.Request(this)._template(strings, values, 'batch')\n  }\n}\n\nmodule.exports = ConnectionPool\n"]},"metadata":{},"sourceType":"script"}
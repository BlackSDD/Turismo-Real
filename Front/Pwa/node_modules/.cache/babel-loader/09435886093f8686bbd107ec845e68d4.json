{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _regeneratorRuntime = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\n\nvar ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n/**\r\n * Provides information about managed service identity token credentials in an App Service environment.\r\n */\n\n\nvar MSIAppServiceTokenCredentials = /*#__PURE__*/function (_msiTokenCredentials_) {\n  _inherits(MSIAppServiceTokenCredentials, _msiTokenCredentials_);\n\n  var _super = _createSuper(MSIAppServiceTokenCredentials);\n\n  /**\r\n   * Creates an instance of MSIAppServiceTokenCredentials.\r\n   * @param options.msiEndpoint - The local URL from which your app can request tokens.\r\n   * Unless this property is specified, any of the two environment variables `IDENTITY_ENDPOINT` or `MSI_ENDPOINT` will be used as the default value.\r\n   * @param options.msiSecret - The secret used in communication between your code and the local MSI agent.\r\n   * Unless this property is specified, any of the two environment variables `IDENTITY_SECRET` or `MSI_SECRET` will be used as the default value.\r\n   * @param options.resource - The resource uri or token audience for which the token is needed.\r\n   * For e.g. it can be:\r\n   * - resource management endpoint \"https://management.azure.com/\" (default)\r\n   * - management endpoint \"https://management.core.windows.net/\"\r\n   * @param options.msiApiVersion - The api-version of the local MSI agent. Default value is \"2017-09-01\".\r\n   * @param options.clientId - The clientId of the managed identity you would like the token for. Required, if\r\n   * your app service has user-assigned managed identities.\r\n   */\n  function MSIAppServiceTokenCredentials(options) {\n    var _this;\n\n    _classCallCheck(this, MSIAppServiceTokenCredentials);\n\n    if (!options) options = {};\n    _this = _super.call(this, options);\n    options.msiEndpoint = options.msiEndpoint || process.env[\"IDENTITY_ENDPOINT\"] || process.env[\"MSI_ENDPOINT\"];\n    options.msiSecret = options.msiSecret || process.env[\"IDENTITY_SECRET\"] || process.env[\"MSI_SECRET\"];\n\n    if (!options.msiEndpoint || options.msiEndpoint && typeof options.msiEndpoint.valueOf() !== \"string\") {\n      throw new Error('Either provide \"msiEndpoint\" as a property of the \"options\" object ' + 'or set the environment variable \"IDENTITY_ENDPOINT\" or \"MSI_ENDPOINT\" and it must be of type \"string\".');\n    }\n\n    if (!options.msiSecret || options.msiSecret && typeof options.msiSecret.valueOf() !== \"string\") {\n      throw new Error('Either provide \"msiSecret\" as a property of the \"options\" object ' + 'or set the environment variable \"IDENTITY_SECRET\" or \"MSI_SECRET\" and it must be of type \"string\".');\n    }\n\n    if (!options.msiApiVersion) {\n      options.msiApiVersion = \"2017-09-01\";\n    } else if (typeof options.msiApiVersion.valueOf() !== \"string\") {\n      throw new Error(\"msiApiVersion must be a uri.\");\n    }\n\n    _this.msiEndpoint = options.msiEndpoint;\n    _this.msiSecret = options.msiSecret;\n    _this.msiApiVersion = options.msiApiVersion;\n    _this.clientId = options.clientId;\n    return _this;\n  }\n  /**\r\n   * Prepares and sends a GET request to a service endpoint indicated by the app service, which responds with the access token.\r\n   * @returns Promise with the tokenResponse (tokenType and accessToken are the two important properties).\r\n   */\n\n\n  _createClass(MSIAppServiceTokenCredentials, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var reqOptions, opRes, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                reqOptions = this.prepareRequestOptions();\n                _context.next = 3;\n                return this._httpClient.sendRequest(reqOptions);\n\n              case 3:\n                opRes = _context.sent;\n\n                if (!(opRes.bodyAsText === undefined || opRes.bodyAsText.indexOf(\"ExceptionMessage\") !== -1)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"MSI: Failed to retrieve a token from \\\"\".concat(reqOptions.url, \"\\\" with an error: \").concat(opRes.bodyAsText));\n\n              case 6:\n                result = this.parseTokenResponse(opRes.bodyAsText);\n\n                if (result.tokenType) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Invalid token response, did not find tokenType. Response body is: \".concat(opRes.bodyAsText));\n\n              case 11:\n                if (result.accessToken) {\n                  _context.next = 13;\n                  break;\n                }\n\n                throw new Error(\"Invalid token response, did not find accessToken. Response body is: \".concat(opRes.bodyAsText));\n\n              case 13:\n                return _context.abrupt(\"return\", result);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"prepareRequestOptions\",\n    value: function prepareRequestOptions() {\n      var endpoint = this.msiEndpoint.endsWith(\"/\") ? this.msiEndpoint : \"\".concat(this.msiEndpoint, \"/\");\n      var reqOptions = {\n        url: endpoint,\n        headers: {\n          secret: this.msiSecret\n        },\n        queryParameters: {\n          resource: this.resource,\n          \"api-version\": this.msiApiVersion,\n          clientid: this.clientId\n        },\n        method: \"GET\"\n      };\n      var webResource = new ms_rest_js_1.WebResource();\n      return webResource.prepare(reqOptions);\n    }\n  }]);\n\n  return MSIAppServiceTokenCredentials;\n}(msiTokenCredentials_1.MSITokenCredentials);\n\nexports.MSIAppServiceTokenCredentials = MSIAppServiceTokenCredentials;","map":{"version":3,"sources":["../../../lib/credentials/msiAppServiceTokenCredentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\r\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\r\n/**\r\n * Provides information about managed service identity token credentials in an App Service environment.\r\n */\r\nclass MSIAppServiceTokenCredentials extends msiTokenCredentials_1.MSITokenCredentials {\r\n    /**\r\n     * Creates an instance of MSIAppServiceTokenCredentials.\r\n     * @param options.msiEndpoint - The local URL from which your app can request tokens.\r\n     * Unless this property is specified, any of the two environment variables `IDENTITY_ENDPOINT` or `MSI_ENDPOINT` will be used as the default value.\r\n     * @param options.msiSecret - The secret used in communication between your code and the local MSI agent.\r\n     * Unless this property is specified, any of the two environment variables `IDENTITY_SECRET` or `MSI_SECRET` will be used as the default value.\r\n     * @param options.resource - The resource uri or token audience for which the token is needed.\r\n     * For e.g. it can be:\r\n     * - resource management endpoint \"https://management.azure.com/\" (default)\r\n     * - management endpoint \"https://management.core.windows.net/\"\r\n     * @param options.msiApiVersion - The api-version of the local MSI agent. Default value is \"2017-09-01\".\r\n     * @param options.clientId - The clientId of the managed identity you would like the token for. Required, if\r\n     * your app service has user-assigned managed identities.\r\n     */\r\n    constructor(options) {\r\n        if (!options)\r\n            options = {};\r\n        super(options);\r\n        options.msiEndpoint =\r\n            options.msiEndpoint || process.env[\"IDENTITY_ENDPOINT\"] || process.env[\"MSI_ENDPOINT\"];\r\n        options.msiSecret =\r\n            options.msiSecret || process.env[\"IDENTITY_SECRET\"] || process.env[\"MSI_SECRET\"];\r\n        if (!options.msiEndpoint ||\r\n            (options.msiEndpoint && typeof options.msiEndpoint.valueOf() !== \"string\")) {\r\n            throw new Error('Either provide \"msiEndpoint\" as a property of the \"options\" object ' +\r\n                'or set the environment variable \"IDENTITY_ENDPOINT\" or \"MSI_ENDPOINT\" and it must be of type \"string\".');\r\n        }\r\n        if (!options.msiSecret ||\r\n            (options.msiSecret && typeof options.msiSecret.valueOf() !== \"string\")) {\r\n            throw new Error('Either provide \"msiSecret\" as a property of the \"options\" object ' +\r\n                'or set the environment variable \"IDENTITY_SECRET\" or \"MSI_SECRET\" and it must be of type \"string\".');\r\n        }\r\n        if (!options.msiApiVersion) {\r\n            options.msiApiVersion = \"2017-09-01\";\r\n        }\r\n        else if (typeof options.msiApiVersion.valueOf() !== \"string\") {\r\n            throw new Error(\"msiApiVersion must be a uri.\");\r\n        }\r\n        this.msiEndpoint = options.msiEndpoint;\r\n        this.msiSecret = options.msiSecret;\r\n        this.msiApiVersion = options.msiApiVersion;\r\n        this.clientId = options.clientId;\r\n    }\r\n    /**\r\n     * Prepares and sends a GET request to a service endpoint indicated by the app service, which responds with the access token.\r\n     * @returns Promise with the tokenResponse (tokenType and accessToken are the two important properties).\r\n     */\r\n    getToken() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const reqOptions = this.prepareRequestOptions();\r\n            const opRes = yield this._httpClient.sendRequest(reqOptions);\r\n            if (opRes.bodyAsText === undefined || opRes.bodyAsText.indexOf(\"ExceptionMessage\") !== -1) {\r\n                throw new Error(`MSI: Failed to retrieve a token from \"${reqOptions.url}\" with an error: ${opRes.bodyAsText}`);\r\n            }\r\n            const result = this.parseTokenResponse(opRes.bodyAsText);\r\n            if (!result.tokenType) {\r\n                throw new Error(`Invalid token response, did not find tokenType. Response body is: ${opRes.bodyAsText}`);\r\n            }\r\n            else if (!result.accessToken) {\r\n                throw new Error(`Invalid token response, did not find accessToken. Response body is: ${opRes.bodyAsText}`);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    prepareRequestOptions() {\r\n        const endpoint = this.msiEndpoint.endsWith(\"/\") ? this.msiEndpoint : `${this.msiEndpoint}/`;\r\n        const reqOptions = {\r\n            url: endpoint,\r\n            headers: {\r\n                secret: this.msiSecret\r\n            },\r\n            queryParameters: {\r\n                resource: this.resource,\r\n                \"api-version\": this.msiApiVersion,\r\n                clientid: this.clientId\r\n            },\r\n            method: \"GET\"\r\n        };\r\n        const webResource = new ms_rest_js_1.WebResource();\r\n        return webResource.prepare(reqOptions);\r\n    }\r\n}\r\nexports.MSIAppServiceTokenCredentials = MSIAppServiceTokenCredentials;\r\n//# sourceMappingURL=msiAppServiceTokenCredentials.js.map"]},"metadata":{},"sourceType":"script"}
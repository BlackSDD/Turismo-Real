{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _floatn = _interopRequireDefault(require(\"./floatn\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst Float = {\n  id: 0x3E,\n  type: 'FLT8',\n  name: 'Float',\n  declaration: function () {\n    return 'float';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([_floatn.default.id, 0x08]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return Buffer.from([0x08]);\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = Buffer.alloc(8);\n    buffer.writeDoubleLE(parseFloat(parameter.value), 0);\n    yield buffer;\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    value = parseFloat(value);\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n\n    return value;\n  }\n};\nvar _default = Float;\nexports.default = _default;\nmodule.exports = Float;","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/node_modules/tedious/lib/data-types/float.js"],"names":["Object","defineProperty","exports","value","default","_floatn","_interopRequireDefault","require","obj","__esModule","NULL_LENGTH","Buffer","from","Float","id","type","name","declaration","generateTypeInfo","generateParameterLength","parameter","options","generateParameterData","buffer","alloc","writeDoubleLE","parseFloat","validate","isNaN","TypeError","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;;AAE/F,MAAME,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAApB;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,EAAE,EAAE,IADQ;AAEZC,EAAAA,IAAI,EAAE,MAFM;AAGZC,EAAAA,IAAI,EAAE,OAHM;AAIZC,EAAAA,WAAW,EAAE,YAAY;AACvB,WAAO,OAAP;AACD,GANW;;AAQZC,EAAAA,gBAAgB,GAAG;AACjB,WAAOP,MAAM,CAACC,IAAP,CAAY,CAACP,OAAO,CAACD,OAAR,CAAgBU,EAAjB,EAAqB,IAArB,CAAZ,CAAP;AACD,GAVW;;AAYZK,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AAC1C,QAAID,SAAS,CAACjB,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,aAAOO,WAAP;AACD;;AAED,WAAOC,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAP;AACD,GAlBW;;AAoBZ,GAACU,qBAAD,CAAuBF,SAAvB,EAAkCC,OAAlC,EAA2C;AACzC,QAAID,SAAS,CAACjB,KAAV,IAAmB,IAAvB,EAA6B;AAC3B;AACD;;AAED,UAAMoB,MAAM,GAAGZ,MAAM,CAACa,KAAP,CAAa,CAAb,CAAf;AACAD,IAAAA,MAAM,CAACE,aAAP,CAAqBC,UAAU,CAACN,SAAS,CAACjB,KAAX,CAA/B,EAAkD,CAAlD;AACA,UAAMoB,MAAN;AACD,GA5BW;;AA8BZI,EAAAA,QAAQ,EAAE,UAAUxB,KAAV,EAAiB;AACzB,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAEDA,IAAAA,KAAK,GAAGuB,UAAU,CAACvB,KAAD,CAAlB;;AAEA,QAAIyB,KAAK,CAACzB,KAAD,CAAT,EAAkB;AAChB,YAAM,IAAI0B,SAAJ,CAAc,iBAAd,CAAN;AACD;;AAED,WAAO1B,KAAP;AACD;AA1CW,CAAd;AA4CA,IAAI2B,QAAQ,GAAGjB,KAAf;AACAX,OAAO,CAACE,OAAR,GAAkB0B,QAAlB;AACAC,MAAM,CAAC7B,OAAP,GAAiBW,KAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _floatn = _interopRequireDefault(require(\"./floatn\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst Float = {\n  id: 0x3E,\n  type: 'FLT8',\n  name: 'Float',\n  declaration: function () {\n    return 'float';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([_floatn.default.id, 0x08]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return Buffer.from([0x08]);\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = Buffer.alloc(8);\n    buffer.writeDoubleLE(parseFloat(parameter.value), 0);\n    yield buffer;\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    value = parseFloat(value);\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n\n    return value;\n  }\n};\nvar _default = Float;\nexports.default = _default;\nmodule.exports = Float;"]},"metadata":{},"sourceType":"script"}
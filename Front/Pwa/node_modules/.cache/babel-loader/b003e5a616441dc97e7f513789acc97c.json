{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _metadataParser = require(\"./metadata-parser\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _iconvLite = _interopRequireDefault(require(\"iconv-lite\"));\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nvar _guidParser = require(\"./guid-parser\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar NULL = (1 << 16) - 1;\nvar MAX = (1 << 16) - 1;\nvar THREE_AND_A_THIRD = 3 + 1 / 3;\nvar MONEY_DIVISOR = 10000;\nvar PLP_NULL = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nvar UNKNOWN_PLP_LEN = Buffer.from([0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nvar DEFAULT_ENCODING = 'utf8';\n\nfunction readTinyInt(parser, callback) {\n  parser.readUInt8(callback);\n}\n\nfunction readSmallInt(parser, callback) {\n  parser.readInt16LE(callback);\n}\n\nfunction readInt(parser, callback) {\n  parser.readInt32LE(callback);\n}\n\nfunction readBigInt(parser, callback) {\n  parser.readBigInt64LE(function (value) {\n    callback(value.toString());\n  });\n}\n\nfunction readReal(parser, callback) {\n  parser.readFloatLE(callback);\n}\n\nfunction readFloat(parser, callback) {\n  parser.readDoubleLE(callback);\n}\n\nfunction readSmallMoney(parser, callback) {\n  parser.readInt32LE(function (value) {\n    callback(value / MONEY_DIVISOR);\n  });\n}\n\nfunction readMoney(parser, callback) {\n  parser.readInt32LE(function (high) {\n    parser.readUInt32LE(function (low) {\n      callback((low + 0x100000000 * high) / MONEY_DIVISOR);\n    });\n  });\n}\n\nfunction readBit(parser, callback) {\n  parser.readUInt8(function (value) {\n    callback(!!value);\n  });\n}\n\nfunction valueParse(parser, metadata, options, callback) {\n  var type = metadata.type;\n\n  switch (type.name) {\n    case 'Null':\n      return callback(null);\n\n    case 'TinyInt':\n      return readTinyInt(parser, callback);\n\n    case 'SmallInt':\n      return readSmallInt(parser, callback);\n\n    case 'Int':\n      return readInt(parser, callback);\n\n    case 'BigInt':\n      return readBigInt(parser, callback);\n\n    case 'IntN':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 1:\n            return readTinyInt(parser, callback);\n\n          case 2:\n            return readSmallInt(parser, callback);\n\n          case 4:\n            return readInt(parser, callback);\n\n          case 8:\n            return readBigInt(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for IntN');\n        }\n      });\n\n    case 'Real':\n      return readReal(parser, callback);\n\n    case 'Float':\n      return readFloat(parser, callback);\n\n    case 'FloatN':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readReal(parser, callback);\n\n          case 8:\n            return readFloat(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for FloatN');\n        }\n      });\n\n    case 'SmallMoney':\n      return readSmallMoney(parser, callback);\n\n    case 'Money':\n      return readMoney(parser, callback);\n\n    case 'MoneyN':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readSmallMoney(parser, callback);\n\n          case 8:\n            return readMoney(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for MoneyN');\n        }\n      });\n\n    case 'Bit':\n      return readBit(parser, callback);\n\n    case 'BitN':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 1:\n            return readBit(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for BitN');\n        }\n      });\n\n    case 'VarChar':\n    case 'Char':\n      var codepage = metadata.collation.codepage;\n\n      if (metadata.dataLength === MAX) {\n        return readMaxChars(parser, codepage, callback);\n      } else {\n        return parser.readUInt16LE(function (dataLength) {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readChars(parser, dataLength, codepage, callback);\n        });\n      }\n\n    case 'NVarChar':\n    case 'NChar':\n      if (metadata.dataLength === MAX) {\n        return readMaxNChars(parser, callback);\n      } else {\n        return parser.readUInt16LE(function (dataLength) {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readNChars(parser, dataLength, callback);\n        });\n      }\n\n    case 'VarBinary':\n    case 'Binary':\n      if (metadata.dataLength === MAX) {\n        return readMaxBinary(parser, callback);\n      } else {\n        return parser.readUInt16LE(function (dataLength) {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readBinary(parser, dataLength, callback);\n        });\n      }\n\n    case 'Text':\n      return parser.readUInt8(function (textPointerLength) {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, function (_textPointer) {\n          parser.readBuffer(8, function (_timestamp) {\n            parser.readUInt32LE(function (dataLength) {\n              readChars(parser, dataLength, metadata.collation.codepage, callback);\n            });\n          });\n        });\n      });\n\n    case 'NText':\n      return parser.readUInt8(function (textPointerLength) {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, function (_textPointer) {\n          parser.readBuffer(8, function (_timestamp) {\n            parser.readUInt32LE(function (dataLength) {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n\n    case 'Image':\n      return parser.readUInt8(function (textPointerLength) {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, function (_textPointer) {\n          parser.readBuffer(8, function (_timestamp) {\n            parser.readUInt32LE(function (dataLength) {\n              readBinary(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n\n    case 'Xml':\n      return readMaxNChars(parser, callback);\n\n    case 'SmallDateTime':\n      return readSmallDateTime(parser, options.useUTC, callback);\n\n    case 'DateTime':\n      return readDateTime(parser, options.useUTC, callback);\n\n    case 'DateTimeN':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readSmallDateTime(parser, options.useUTC, callback);\n\n          case 8:\n            return readDateTime(parser, options.useUTC, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for DateTimeN');\n        }\n      });\n\n    case 'Time':\n      return parser.readUInt8(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readTime(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n\n    case 'Date':\n      return parser.readUInt8(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDate(parser, options.useUTC, callback);\n        }\n      });\n\n    case 'DateTime2':\n      return parser.readUInt8(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTime2(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n\n    case 'DateTimeOffset':\n      return parser.readUInt8(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTimeOffset(parser, dataLength, metadata.scale, callback);\n        }\n      });\n\n    case 'NumericN':\n    case 'DecimalN':\n      return parser.readUInt8(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readNumeric(parser, dataLength, metadata.precision, metadata.scale, callback);\n        }\n      });\n\n    case 'UniqueIdentifier':\n      return parser.readUInt8(function (dataLength) {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 0x10:\n            return readUniqueIdentifier(parser, options, callback);\n\n          default:\n            throw new Error((0, _sprintfJs.sprintf)('Unsupported guid size %d', dataLength - 1));\n        }\n      });\n\n    case 'UDT':\n      return readMaxBinary(parser, callback);\n\n    case 'Variant':\n      return parser.readUInt32LE(function (dataLength) {\n        if (dataLength === 0) {\n          return callback(null);\n        }\n\n        readVariant(parser, options, dataLength, callback);\n      });\n\n    default:\n      throw new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name));\n  }\n}\n\nfunction readUniqueIdentifier(parser, options, callback) {\n  parser.readBuffer(0x10, function (data) {\n    callback(options.lowerCaseGuids ? (0, _guidParser.bufferToLowerCaseGuid)(data) : (0, _guidParser.bufferToUpperCaseGuid)(data));\n  });\n}\n\nfunction readNumeric(parser, dataLength, _precision, scale, callback) {\n  parser.readUInt8(function (sign) {\n    sign = sign === 1 ? 1 : -1;\n    var readValue;\n\n    if (dataLength === 5) {\n      readValue = parser.readUInt32LE;\n    } else if (dataLength === 9) {\n      readValue = parser.readUNumeric64LE;\n    } else if (dataLength === 13) {\n      readValue = parser.readUNumeric96LE;\n    } else if (dataLength === 17) {\n      readValue = parser.readUNumeric128LE;\n    } else {\n      throw new Error((0, _sprintfJs.sprintf)('Unsupported numeric dataLength %d', dataLength));\n    }\n\n    readValue.call(parser, function (value) {\n      callback(value * sign / Math.pow(10, scale));\n    });\n  });\n}\n\nfunction readVariant(parser, options, dataLength, callback) {\n  return parser.readUInt8(function (baseType) {\n    var type = _dataType.TYPE[baseType];\n    return parser.readUInt8(function (propBytes) {\n      dataLength = dataLength - propBytes - 2;\n\n      switch (type.name) {\n        case 'UniqueIdentifier':\n          return readUniqueIdentifier(parser, options, callback);\n\n        case 'Bit':\n          return readBit(parser, callback);\n\n        case 'TinyInt':\n          return readTinyInt(parser, callback);\n\n        case 'SmallInt':\n          return readSmallInt(parser, callback);\n\n        case 'Int':\n          return readInt(parser, callback);\n\n        case 'BigInt':\n          return readBigInt(parser, callback);\n\n        case 'SmallDateTime':\n          return readSmallDateTime(parser, options.useUTC, callback);\n\n        case 'DateTime':\n          return readDateTime(parser, options.useUTC, callback);\n\n        case 'Real':\n          return readReal(parser, callback);\n\n        case 'Float':\n          return readFloat(parser, callback);\n\n        case 'SmallMoney':\n          return readSmallMoney(parser, callback);\n\n        case 'Money':\n          return readMoney(parser, callback);\n\n        case 'Date':\n          return readDate(parser, options.useUTC, callback);\n\n        case 'Time':\n          return parser.readUInt8(function (scale) {\n            return readTime(parser, dataLength, scale, options.useUTC, callback);\n          });\n\n        case 'DateTime2':\n          return parser.readUInt8(function (scale) {\n            return readDateTime2(parser, dataLength, scale, options.useUTC, callback);\n          });\n\n        case 'DateTimeOffset':\n          return parser.readUInt8(function (scale) {\n            return readDateTimeOffset(parser, dataLength, scale, callback);\n          });\n\n        case 'VarBinary':\n        case 'Binary':\n          return parser.readUInt16LE(function (_maxLength) {\n            readBinary(parser, dataLength, callback);\n          });\n\n        case 'NumericN':\n        case 'DecimalN':\n          return parser.readUInt8(function (precision) {\n            parser.readUInt8(function (scale) {\n              readNumeric(parser, dataLength, precision, scale, callback);\n            });\n          });\n\n        case 'VarChar':\n        case 'Char':\n          return parser.readUInt16LE(function (_maxLength) {\n            (0, _metadataParser.readCollation)(parser, function (collation) {\n              readChars(parser, dataLength, collation.codepage, callback);\n            });\n          });\n\n        case 'NVarChar':\n        case 'NChar':\n          return parser.readUInt16LE(function (_maxLength) {\n            (0, _metadataParser.readCollation)(parser, function (_collation) {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n\n        default:\n          throw new Error('Invalid type!');\n      }\n    });\n  });\n}\n\nfunction readBinary(parser, dataLength, callback) {\n  return parser.readBuffer(dataLength, callback);\n}\n\nfunction readChars(parser, dataLength, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n\n  return parser.readBuffer(dataLength, function (data) {\n    callback(_iconvLite.default.decode(data, codepage));\n  });\n}\n\nfunction readNChars(parser, dataLength, callback) {\n  parser.readBuffer(dataLength, function (data) {\n    callback(data.toString('ucs2'));\n  });\n}\n\nfunction readMaxBinary(parser, callback) {\n  return readMax(parser, callback);\n}\n\nfunction readMaxChars(parser, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n\n  readMax(parser, function (data) {\n    if (data) {\n      callback(_iconvLite.default.decode(data, codepage));\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction readMaxNChars(parser, callback) {\n  readMax(parser, function (data) {\n    if (data) {\n      callback(data.toString('ucs2'));\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction readMax(parser, callback) {\n  parser.readBuffer(8, function (type) {\n    if (type.equals(PLP_NULL)) {\n      return callback(null);\n    } else if (type.equals(UNKNOWN_PLP_LEN)) {\n      return readMaxUnknownLength(parser, callback);\n    } else {\n      var low = type.readUInt32LE(0);\n      var high = type.readUInt32LE(4);\n\n      if (high >= 2 << 53 - 32) {\n        console.warn('Read UInt64LE > 53 bits : high=' + high + ', low=' + low);\n      }\n\n      var expectedLength = low + 0x100000000 * high;\n      return readMaxKnownLength(parser, expectedLength, callback);\n    }\n  });\n}\n\nfunction readMaxKnownLength(parser, totalLength, callback) {\n  var data = Buffer.alloc(totalLength, 0);\n  var offset = 0;\n\n  function next(done) {\n    parser.readUInt32LE(function (chunkLength) {\n      if (!chunkLength) {\n        return done();\n      }\n\n      parser.readBuffer(chunkLength, function (chunk) {\n        chunk.copy(data, offset);\n        offset += chunkLength;\n        next(done);\n      });\n    });\n  }\n\n  next(function () {\n    if (offset !== totalLength) {\n      throw new Error('Partially Length-prefixed Bytes unmatched lengths : expected ' + totalLength + ', but got ' + offset + ' bytes');\n    }\n\n    callback(data);\n  });\n}\n\nfunction readMaxUnknownLength(parser, callback) {\n  var chunks = [];\n  var length = 0;\n\n  function next(done) {\n    parser.readUInt32LE(function (chunkLength) {\n      if (!chunkLength) {\n        return done();\n      }\n\n      parser.readBuffer(chunkLength, function (chunk) {\n        chunks.push(chunk);\n        length += chunkLength;\n        next(done);\n      });\n    });\n  }\n\n  next(function () {\n    callback(Buffer.concat(chunks, length));\n  });\n}\n\nfunction readSmallDateTime(parser, useUTC, callback) {\n  parser.readUInt16LE(function (days) {\n    parser.readUInt16LE(function (minutes) {\n      var value;\n\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, minutes));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, minutes);\n      }\n\n      callback(value);\n    });\n  });\n}\n\nfunction readDateTime(parser, useUTC, callback) {\n  parser.readInt32LE(function (days) {\n    parser.readUInt32LE(function (threeHundredthsOfSecond) {\n      var milliseconds = Math.round(threeHundredthsOfSecond * THREE_AND_A_THIRD);\n      var value;\n\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, 0, 0, milliseconds));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, 0, 0, milliseconds);\n      }\n\n      callback(value);\n    });\n  });\n}\n\nfunction readTime(parser, dataLength, scale, useUTC, callback) {\n  var readValue;\n\n  switch (dataLength) {\n    case 3:\n      readValue = parser.readUInt24LE;\n      break;\n\n    case 4:\n      readValue = parser.readUInt32LE;\n      break;\n\n    case 5:\n      readValue = parser.readUInt40LE;\n  }\n\n  readValue.call(parser, function (value) {\n    if (scale < 7) {\n      for (var i = scale; i < 7; i++) {\n        value *= 10;\n      }\n    }\n\n    var date;\n\n    if (useUTC) {\n      date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000));\n    } else {\n      date = new Date(1970, 0, 1, 0, 0, 0, value / 10000);\n    }\n\n    Object.defineProperty(date, 'nanosecondsDelta', {\n      enumerable: false,\n      value: value % 10000 / Math.pow(10, 7)\n    });\n    callback(date);\n  });\n}\n\nfunction readDate(parser, useUTC, callback) {\n  parser.readUInt24LE(function (days) {\n    if (useUTC) {\n      callback(new Date(Date.UTC(2000, 0, days - 730118)));\n    } else {\n      callback(new Date(2000, 0, days - 730118));\n    }\n  });\n}\n\nfunction readDateTime2(parser, dataLength, scale, useUTC, callback) {\n  readTime(parser, dataLength - 3, scale, useUTC, function (time) {\n    // TODO: 'input' is 'time', but TypeScript cannot find \"time.nanosecondsDelta\";\n    parser.readUInt24LE(function (days) {\n      var date;\n\n      if (useUTC) {\n        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n      } else {\n        date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\n      }\n\n      Object.defineProperty(date, 'nanosecondsDelta', {\n        enumerable: false,\n        value: time.nanosecondsDelta\n      });\n      callback(date);\n    });\n  });\n}\n\nfunction readDateTimeOffset(parser, dataLength, scale, callback) {\n  readTime(parser, dataLength - 5, scale, true, function (time) {\n    parser.readUInt24LE(function (days) {\n      // offset\n      parser.readInt16LE(function () {\n        var date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n        Object.defineProperty(date, 'nanosecondsDelta', {\n          enumerable: false,\n          value: time.nanosecondsDelta\n        });\n        callback(date);\n      });\n    });\n  });\n}\n\nvar _default = valueParse;\nexports.default = _default;\nmodule.exports = valueParse;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/value-parser.js"],"names":["Object","defineProperty","exports","value","default","_metadataParser","require","_dataType","_iconvLite","_interopRequireDefault","_sprintfJs","_guidParser","obj","__esModule","NULL","MAX","THREE_AND_A_THIRD","MONEY_DIVISOR","PLP_NULL","Buffer","from","UNKNOWN_PLP_LEN","DEFAULT_ENCODING","readTinyInt","parser","callback","readUInt8","readSmallInt","readInt16LE","readInt","readInt32LE","readBigInt","readBigInt64LE","toString","readReal","readFloatLE","readFloat","readDoubleLE","readSmallMoney","readMoney","high","readUInt32LE","low","readBit","valueParse","metadata","options","type","name","dataLength","Error","codepage","collation","readMaxChars","readUInt16LE","readChars","readMaxNChars","readNChars","readMaxBinary","readBinary","textPointerLength","readBuffer","_textPointer","_timestamp","readSmallDateTime","useUTC","readDateTime","readTime","scale","readDate","readDateTime2","readDateTimeOffset","readNumeric","precision","readUniqueIdentifier","sprintf","readVariant","data","lowerCaseGuids","bufferToLowerCaseGuid","bufferToUpperCaseGuid","_precision","sign","readValue","readUNumeric64LE","readUNumeric96LE","readUNumeric128LE","call","Math","pow","baseType","TYPE","propBytes","_maxLength","readCollation","_collation","decode","readMax","equals","readMaxUnknownLength","console","warn","expectedLength","readMaxKnownLength","totalLength","alloc","offset","next","done","chunkLength","chunk","copy","chunks","length","push","concat","days","minutes","Date","UTC","threeHundredthsOfSecond","milliseconds","round","readUInt24LE","readUInt40LE","i","date","enumerable","time","getHours","getMinutes","getSeconds","getMilliseconds","nanosecondsDelta","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA7B;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGC,sBAAsB,CAACH,OAAO,CAAC,YAAD,CAAR,CAAvC;;AAEA,IAAII,UAAU,GAAGJ,OAAO,CAAC,YAAD,CAAxB;;AAEA,IAAIK,WAAW,GAAGL,OAAO,CAAC,eAAD,CAAzB;;AAEA,SAASG,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAER,IAAAA,OAAO,EAAEQ;AAAX,GAArC;AAAwD;;AAE/F,IAAME,IAAI,GAAG,CAAC,KAAK,EAAN,IAAY,CAAzB;AACA,IAAMC,GAAG,GAAG,CAAC,KAAK,EAAN,IAAY,CAAxB;AACA,IAAMC,iBAAiB,GAAG,IAAI,IAAI,CAAlC;AACA,IAAMC,aAAa,GAAG,KAAtB;AACA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CAAZ,CAAjB;AACA,IAAMC,eAAe,GAAGF,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CAAZ,CAAxB;AACA,IAAME,gBAAgB,GAAG,MAAzB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AACrCD,EAAAA,MAAM,CAACE,SAAP,CAAiBD,QAAjB;AACD;;AAED,SAASE,YAAT,CAAsBH,MAAtB,EAA8BC,QAA9B,EAAwC;AACtCD,EAAAA,MAAM,CAACI,WAAP,CAAmBH,QAAnB;AACD;;AAED,SAASI,OAAT,CAAiBL,MAAjB,EAAyBC,QAAzB,EAAmC;AACjCD,EAAAA,MAAM,CAACM,WAAP,CAAmBL,QAAnB;AACD;;AAED,SAASM,UAAT,CAAoBP,MAApB,EAA4BC,QAA5B,EAAsC;AACpCD,EAAAA,MAAM,CAACQ,cAAP,CAAsB,UAAA7B,KAAK,EAAI;AAC7BsB,IAAAA,QAAQ,CAACtB,KAAK,CAAC8B,QAAN,EAAD,CAAR;AACD,GAFD;AAGD;;AAED,SAASC,QAAT,CAAkBV,MAAlB,EAA0BC,QAA1B,EAAoC;AAClCD,EAAAA,MAAM,CAACW,WAAP,CAAmBV,QAAnB;AACD;;AAED,SAASW,SAAT,CAAmBZ,MAAnB,EAA2BC,QAA3B,EAAqC;AACnCD,EAAAA,MAAM,CAACa,YAAP,CAAoBZ,QAApB;AACD;;AAED,SAASa,cAAT,CAAwBd,MAAxB,EAAgCC,QAAhC,EAA0C;AACxCD,EAAAA,MAAM,CAACM,WAAP,CAAmB,UAAA3B,KAAK,EAAI;AAC1BsB,IAAAA,QAAQ,CAACtB,KAAK,GAAGc,aAAT,CAAR;AACD,GAFD;AAGD;;AAED,SAASsB,SAAT,CAAmBf,MAAnB,EAA2BC,QAA3B,EAAqC;AACnCD,EAAAA,MAAM,CAACM,WAAP,CAAmB,UAAAU,IAAI,EAAI;AACzBhB,IAAAA,MAAM,CAACiB,YAAP,CAAoB,UAAAC,GAAG,EAAI;AACzBjB,MAAAA,QAAQ,CAAC,CAACiB,GAAG,GAAG,cAAcF,IAArB,IAA6BvB,aAA9B,CAAR;AACD,KAFD;AAGD,GAJD;AAKD;;AAED,SAAS0B,OAAT,CAAiBnB,MAAjB,EAAyBC,QAAzB,EAAmC;AACjCD,EAAAA,MAAM,CAACE,SAAP,CAAiB,UAAAvB,KAAK,EAAI;AACxBsB,IAAAA,QAAQ,CAAC,CAAC,CAACtB,KAAH,CAAR;AACD,GAFD;AAGD;;AAED,SAASyC,UAAT,CAAoBpB,MAApB,EAA4BqB,QAA5B,EAAsCC,OAAtC,EAA+CrB,QAA/C,EAAyD;AACvD,MAAMsB,IAAI,GAAGF,QAAQ,CAACE,IAAtB;;AAEA,UAAQA,IAAI,CAACC,IAAb;AACE,SAAK,MAAL;AACE,aAAOvB,QAAQ,CAAC,IAAD,CAAf;;AAEF,SAAK,SAAL;AACE,aAAOF,WAAW,CAACC,MAAD,EAASC,QAAT,CAAlB;;AAEF,SAAK,UAAL;AACE,aAAOE,YAAY,CAACH,MAAD,EAASC,QAAT,CAAnB;;AAEF,SAAK,KAAL;AACE,aAAOI,OAAO,CAACL,MAAD,EAASC,QAAT,CAAd;;AAEF,SAAK,QAAL;AACE,aAAOM,UAAU,CAACP,MAAD,EAASC,QAAT,CAAjB;;AAEF,SAAK,MAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,gBAAQA,UAAR;AACE,eAAK,CAAL;AACE,mBAAOxB,QAAQ,CAAC,IAAD,CAAf;;AAEF,eAAK,CAAL;AACE,mBAAOF,WAAW,CAACC,MAAD,EAASC,QAAT,CAAlB;;AAEF,eAAK,CAAL;AACE,mBAAOE,YAAY,CAACH,MAAD,EAASC,QAAT,CAAnB;;AAEF,eAAK,CAAL;AACE,mBAAOI,OAAO,CAACL,MAAD,EAASC,QAAT,CAAd;;AAEF,eAAK,CAAL;AACE,mBAAOM,UAAU,CAACP,MAAD,EAASC,QAAT,CAAjB;;AAEF;AACE,kBAAM,IAAIyB,KAAJ,CAAU,4BAA4BD,UAA5B,GAAyC,WAAnD,CAAN;AAjBJ;AAmBD,OApBM,CAAP;;AAsBF,SAAK,MAAL;AACE,aAAOf,QAAQ,CAACV,MAAD,EAASC,QAAT,CAAf;;AAEF,SAAK,OAAL;AACE,aAAOW,SAAS,CAACZ,MAAD,EAASC,QAAT,CAAhB;;AAEF,SAAK,QAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,gBAAQA,UAAR;AACE,eAAK,CAAL;AACE,mBAAOxB,QAAQ,CAAC,IAAD,CAAf;;AAEF,eAAK,CAAL;AACE,mBAAOS,QAAQ,CAACV,MAAD,EAASC,QAAT,CAAf;;AAEF,eAAK,CAAL;AACE,mBAAOW,SAAS,CAACZ,MAAD,EAASC,QAAT,CAAhB;;AAEF;AACE,kBAAM,IAAIyB,KAAJ,CAAU,4BAA4BD,UAA5B,GAAyC,aAAnD,CAAN;AAXJ;AAaD,OAdM,CAAP;;AAgBF,SAAK,YAAL;AACE,aAAOX,cAAc,CAACd,MAAD,EAASC,QAAT,CAArB;;AAEF,SAAK,OAAL;AACE,aAAOc,SAAS,CAACf,MAAD,EAASC,QAAT,CAAhB;;AAEF,SAAK,QAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,gBAAQA,UAAR;AACE,eAAK,CAAL;AACE,mBAAOxB,QAAQ,CAAC,IAAD,CAAf;;AAEF,eAAK,CAAL;AACE,mBAAOa,cAAc,CAACd,MAAD,EAASC,QAAT,CAArB;;AAEF,eAAK,CAAL;AACE,mBAAOc,SAAS,CAACf,MAAD,EAASC,QAAT,CAAhB;;AAEF;AACE,kBAAM,IAAIyB,KAAJ,CAAU,4BAA4BD,UAA5B,GAAyC,aAAnD,CAAN;AAXJ;AAaD,OAdM,CAAP;;AAgBF,SAAK,KAAL;AACE,aAAON,OAAO,CAACnB,MAAD,EAASC,QAAT,CAAd;;AAEF,SAAK,MAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,gBAAQA,UAAR;AACE,eAAK,CAAL;AACE,mBAAOxB,QAAQ,CAAC,IAAD,CAAf;;AAEF,eAAK,CAAL;AACE,mBAAOkB,OAAO,CAACnB,MAAD,EAASC,QAAT,CAAd;;AAEF;AACE,kBAAM,IAAIyB,KAAJ,CAAU,4BAA4BD,UAA5B,GAAyC,WAAnD,CAAN;AARJ;AAUD,OAXM,CAAP;;AAaF,SAAK,SAAL;AACA,SAAK,MAAL;AACE,UAAME,QAAQ,GAAGN,QAAQ,CAACO,SAAT,CAAmBD,QAApC;;AAEA,UAAIN,QAAQ,CAACI,UAAT,KAAwBlC,GAA5B,EAAiC;AAC/B,eAAOsC,YAAY,CAAC7B,MAAD,EAAS2B,QAAT,EAAmB1B,QAAnB,CAAnB;AACD,OAFD,MAEO;AACL,eAAOD,MAAM,CAAC8B,YAAP,CAAoB,UAAAL,UAAU,EAAI;AACvC,cAAIA,UAAU,KAAKnC,IAAnB,EAAyB;AACvB,mBAAOW,QAAQ,CAAC,IAAD,CAAf;AACD;;AAED8B,UAAAA,SAAS,CAAC/B,MAAD,EAASyB,UAAT,EAAqBE,QAArB,EAA+B1B,QAA/B,CAAT;AACD,SANM,CAAP;AAOD;;AAEH,SAAK,UAAL;AACA,SAAK,OAAL;AACE,UAAIoB,QAAQ,CAACI,UAAT,KAAwBlC,GAA5B,EAAiC;AAC/B,eAAOyC,aAAa,CAAChC,MAAD,EAASC,QAAT,CAApB;AACD,OAFD,MAEO;AACL,eAAOD,MAAM,CAAC8B,YAAP,CAAoB,UAAAL,UAAU,EAAI;AACvC,cAAIA,UAAU,KAAKnC,IAAnB,EAAyB;AACvB,mBAAOW,QAAQ,CAAC,IAAD,CAAf;AACD;;AAEDgC,UAAAA,UAAU,CAACjC,MAAD,EAASyB,UAAT,EAAqBxB,QAArB,CAAV;AACD,SANM,CAAP;AAOD;;AAEH,SAAK,WAAL;AACA,SAAK,QAAL;AACE,UAAIoB,QAAQ,CAACI,UAAT,KAAwBlC,GAA5B,EAAiC;AAC/B,eAAO2C,aAAa,CAAClC,MAAD,EAASC,QAAT,CAApB;AACD,OAFD,MAEO;AACL,eAAOD,MAAM,CAAC8B,YAAP,CAAoB,UAAAL,UAAU,EAAI;AACvC,cAAIA,UAAU,KAAKnC,IAAnB,EAAyB;AACvB,mBAAOW,QAAQ,CAAC,IAAD,CAAf;AACD;;AAEDkC,UAAAA,UAAU,CAACnC,MAAD,EAASyB,UAAT,EAAqBxB,QAArB,CAAV;AACD,SANM,CAAP;AAOD;;AAEH,SAAK,MAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAkC,iBAAiB,EAAI;AAC3C,YAAIA,iBAAiB,KAAK,CAA1B,EAA6B;AAC3B,iBAAOnC,QAAQ,CAAC,IAAD,CAAf;AACD;;AAEDD,QAAAA,MAAM,CAACqC,UAAP,CAAkBD,iBAAlB,EAAqC,UAAAE,YAAY,EAAI;AACnDtC,UAAAA,MAAM,CAACqC,UAAP,CAAkB,CAAlB,EAAqB,UAAAE,UAAU,EAAI;AACjCvC,YAAAA,MAAM,CAACiB,YAAP,CAAoB,UAAAQ,UAAU,EAAI;AAChCM,cAAAA,SAAS,CAAC/B,MAAD,EAASyB,UAAT,EAAqBJ,QAAQ,CAACO,SAAT,CAAmBD,QAAxC,EAAkD1B,QAAlD,CAAT;AACD,aAFD;AAGD,WAJD;AAKD,SAND;AAOD,OAZM,CAAP;;AAcF,SAAK,OAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAkC,iBAAiB,EAAI;AAC3C,YAAIA,iBAAiB,KAAK,CAA1B,EAA6B;AAC3B,iBAAOnC,QAAQ,CAAC,IAAD,CAAf;AACD;;AAEDD,QAAAA,MAAM,CAACqC,UAAP,CAAkBD,iBAAlB,EAAqC,UAAAE,YAAY,EAAI;AACnDtC,UAAAA,MAAM,CAACqC,UAAP,CAAkB,CAAlB,EAAqB,UAAAE,UAAU,EAAI;AACjCvC,YAAAA,MAAM,CAACiB,YAAP,CAAoB,UAAAQ,UAAU,EAAI;AAChCQ,cAAAA,UAAU,CAACjC,MAAD,EAASyB,UAAT,EAAqBxB,QAArB,CAAV;AACD,aAFD;AAGD,WAJD;AAKD,SAND;AAOD,OAZM,CAAP;;AAcF,SAAK,OAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAkC,iBAAiB,EAAI;AAC3C,YAAIA,iBAAiB,KAAK,CAA1B,EAA6B;AAC3B,iBAAOnC,QAAQ,CAAC,IAAD,CAAf;AACD;;AAEDD,QAAAA,MAAM,CAACqC,UAAP,CAAkBD,iBAAlB,EAAqC,UAAAE,YAAY,EAAI;AACnDtC,UAAAA,MAAM,CAACqC,UAAP,CAAkB,CAAlB,EAAqB,UAAAE,UAAU,EAAI;AACjCvC,YAAAA,MAAM,CAACiB,YAAP,CAAoB,UAAAQ,UAAU,EAAI;AAChCU,cAAAA,UAAU,CAACnC,MAAD,EAASyB,UAAT,EAAqBxB,QAArB,CAAV;AACD,aAFD;AAGD,WAJD;AAKD,SAND;AAOD,OAZM,CAAP;;AAcF,SAAK,KAAL;AACE,aAAO+B,aAAa,CAAChC,MAAD,EAASC,QAAT,CAApB;;AAEF,SAAK,eAAL;AACE,aAAOuC,iBAAiB,CAACxC,MAAD,EAASsB,OAAO,CAACmB,MAAjB,EAAyBxC,QAAzB,CAAxB;;AAEF,SAAK,UAAL;AACE,aAAOyC,YAAY,CAAC1C,MAAD,EAASsB,OAAO,CAACmB,MAAjB,EAAyBxC,QAAzB,CAAnB;;AAEF,SAAK,WAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,gBAAQA,UAAR;AACE,eAAK,CAAL;AACE,mBAAOxB,QAAQ,CAAC,IAAD,CAAf;;AAEF,eAAK,CAAL;AACE,mBAAOuC,iBAAiB,CAACxC,MAAD,EAASsB,OAAO,CAACmB,MAAjB,EAAyBxC,QAAzB,CAAxB;;AAEF,eAAK,CAAL;AACE,mBAAOyC,YAAY,CAAC1C,MAAD,EAASsB,OAAO,CAACmB,MAAjB,EAAyBxC,QAAzB,CAAnB;;AAEF;AACE,kBAAM,IAAIyB,KAAJ,CAAU,4BAA4BD,UAA5B,GAAyC,gBAAnD,CAAN;AAXJ;AAaD,OAdM,CAAP;;AAgBF,SAAK,MAAL;AACE,aAAOzB,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,YAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpB,iBAAOxB,QAAQ,CAAC,IAAD,CAAf;AACD,SAFD,MAEO;AACL,iBAAO0C,QAAQ,CAAC3C,MAAD,EAASyB,UAAT,EAAqBJ,QAAQ,CAACuB,KAA9B,EAAqCtB,OAAO,CAACmB,MAA7C,EAAqDxC,QAArD,CAAf;AACD;AACF,OANM,CAAP;;AAQF,SAAK,MAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,YAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpB,iBAAOxB,QAAQ,CAAC,IAAD,CAAf;AACD,SAFD,MAEO;AACL,iBAAO4C,QAAQ,CAAC7C,MAAD,EAASsB,OAAO,CAACmB,MAAjB,EAAyBxC,QAAzB,CAAf;AACD;AACF,OANM,CAAP;;AAQF,SAAK,WAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,YAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpB,iBAAOxB,QAAQ,CAAC,IAAD,CAAf;AACD,SAFD,MAEO;AACL,iBAAO6C,aAAa,CAAC9C,MAAD,EAASyB,UAAT,EAAqBJ,QAAQ,CAACuB,KAA9B,EAAqCtB,OAAO,CAACmB,MAA7C,EAAqDxC,QAArD,CAApB;AACD;AACF,OANM,CAAP;;AAQF,SAAK,gBAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,YAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpB,iBAAOxB,QAAQ,CAAC,IAAD,CAAf;AACD,SAFD,MAEO;AACL,iBAAO8C,kBAAkB,CAAC/C,MAAD,EAASyB,UAAT,EAAqBJ,QAAQ,CAACuB,KAA9B,EAAqC3C,QAArC,CAAzB;AACD;AACF,OANM,CAAP;;AAQF,SAAK,UAAL;AACA,SAAK,UAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,YAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpB,iBAAOxB,QAAQ,CAAC,IAAD,CAAf;AACD,SAFD,MAEO;AACL,iBAAO+C,WAAW,CAAChD,MAAD,EAASyB,UAAT,EAAqBJ,QAAQ,CAAC4B,SAA9B,EAAyC5B,QAAQ,CAACuB,KAAlD,EAAyD3C,QAAzD,CAAlB;AACD;AACF,OANM,CAAP;;AAQF,SAAK,kBAAL;AACE,aAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAuB,UAAU,EAAI;AACpC,gBAAQA,UAAR;AACE,eAAK,CAAL;AACE,mBAAOxB,QAAQ,CAAC,IAAD,CAAf;;AAEF,eAAK,IAAL;AACE,mBAAOiD,oBAAoB,CAAClD,MAAD,EAASsB,OAAT,EAAkBrB,QAAlB,CAA3B;;AAEF;AACE,kBAAM,IAAIyB,KAAJ,CAAU,CAAC,GAAGxC,UAAU,CAACiE,OAAf,EAAwB,0BAAxB,EAAoD1B,UAAU,GAAG,CAAjE,CAAV,CAAN;AARJ;AAUD,OAXM,CAAP;;AAaF,SAAK,KAAL;AACE,aAAOS,aAAa,CAAClC,MAAD,EAASC,QAAT,CAApB;;AAEF,SAAK,SAAL;AACE,aAAOD,MAAM,CAACiB,YAAP,CAAoB,UAAAQ,UAAU,EAAI;AACvC,YAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpB,iBAAOxB,QAAQ,CAAC,IAAD,CAAf;AACD;;AAEDmD,QAAAA,WAAW,CAACpD,MAAD,EAASsB,OAAT,EAAkBG,UAAlB,EAA8BxB,QAA9B,CAAX;AACD,OANM,CAAP;;AAQF;AACE,YAAM,IAAIyB,KAAJ,CAAU,CAAC,GAAGxC,UAAU,CAACiE,OAAf,EAAwB,sBAAxB,EAAgD5B,IAAI,CAACC,IAArD,CAAV,CAAN;AAlSJ;AAoSD;;AAED,SAAS0B,oBAAT,CAA8BlD,MAA9B,EAAsCsB,OAAtC,EAA+CrB,QAA/C,EAAyD;AACvDD,EAAAA,MAAM,CAACqC,UAAP,CAAkB,IAAlB,EAAwB,UAAAgB,IAAI,EAAI;AAC9BpD,IAAAA,QAAQ,CAACqB,OAAO,CAACgC,cAAR,GAAyB,CAAC,GAAGnE,WAAW,CAACoE,qBAAhB,EAAuCF,IAAvC,CAAzB,GAAwE,CAAC,GAAGlE,WAAW,CAACqE,qBAAhB,EAAuCH,IAAvC,CAAzE,CAAR;AACD,GAFD;AAGD;;AAED,SAASL,WAAT,CAAqBhD,MAArB,EAA6ByB,UAA7B,EAAyCgC,UAAzC,EAAqDb,KAArD,EAA4D3C,QAA5D,EAAsE;AACpED,EAAAA,MAAM,CAACE,SAAP,CAAiB,UAAAwD,IAAI,EAAI;AACvBA,IAAAA,IAAI,GAAGA,IAAI,KAAK,CAAT,GAAa,CAAb,GAAiB,CAAC,CAAzB;AACA,QAAIC,SAAJ;;AAEA,QAAIlC,UAAU,KAAK,CAAnB,EAAsB;AACpBkC,MAAAA,SAAS,GAAG3D,MAAM,CAACiB,YAAnB;AACD,KAFD,MAEO,IAAIQ,UAAU,KAAK,CAAnB,EAAsB;AAC3BkC,MAAAA,SAAS,GAAG3D,MAAM,CAAC4D,gBAAnB;AACD,KAFM,MAEA,IAAInC,UAAU,KAAK,EAAnB,EAAuB;AAC5BkC,MAAAA,SAAS,GAAG3D,MAAM,CAAC6D,gBAAnB;AACD,KAFM,MAEA,IAAIpC,UAAU,KAAK,EAAnB,EAAuB;AAC5BkC,MAAAA,SAAS,GAAG3D,MAAM,CAAC8D,iBAAnB;AACD,KAFM,MAEA;AACL,YAAM,IAAIpC,KAAJ,CAAU,CAAC,GAAGxC,UAAU,CAACiE,OAAf,EAAwB,mCAAxB,EAA6D1B,UAA7D,CAAV,CAAN;AACD;;AAEDkC,IAAAA,SAAS,CAACI,IAAV,CAAe/D,MAAf,EAAuB,UAAArB,KAAK,EAAI;AAC9BsB,MAAAA,QAAQ,CAACtB,KAAK,GAAG+E,IAAR,GAAeM,IAAI,CAACC,GAAL,CAAS,EAAT,EAAarB,KAAb,CAAhB,CAAR;AACD,KAFD;AAGD,GAnBD;AAoBD;;AAED,SAASQ,WAAT,CAAqBpD,MAArB,EAA6BsB,OAA7B,EAAsCG,UAAtC,EAAkDxB,QAAlD,EAA4D;AAC1D,SAAOD,MAAM,CAACE,SAAP,CAAiB,UAAAgE,QAAQ,EAAI;AAClC,QAAM3C,IAAI,GAAGxC,SAAS,CAACoF,IAAV,CAAeD,QAAf,CAAb;AACA,WAAOlE,MAAM,CAACE,SAAP,CAAiB,UAAAkE,SAAS,EAAI;AACnC3C,MAAAA,UAAU,GAAGA,UAAU,GAAG2C,SAAb,GAAyB,CAAtC;;AAEA,cAAQ7C,IAAI,CAACC,IAAb;AACE,aAAK,kBAAL;AACE,iBAAO0B,oBAAoB,CAAClD,MAAD,EAASsB,OAAT,EAAkBrB,QAAlB,CAA3B;;AAEF,aAAK,KAAL;AACE,iBAAOkB,OAAO,CAACnB,MAAD,EAASC,QAAT,CAAd;;AAEF,aAAK,SAAL;AACE,iBAAOF,WAAW,CAACC,MAAD,EAASC,QAAT,CAAlB;;AAEF,aAAK,UAAL;AACE,iBAAOE,YAAY,CAACH,MAAD,EAASC,QAAT,CAAnB;;AAEF,aAAK,KAAL;AACE,iBAAOI,OAAO,CAACL,MAAD,EAASC,QAAT,CAAd;;AAEF,aAAK,QAAL;AACE,iBAAOM,UAAU,CAACP,MAAD,EAASC,QAAT,CAAjB;;AAEF,aAAK,eAAL;AACE,iBAAOuC,iBAAiB,CAACxC,MAAD,EAASsB,OAAO,CAACmB,MAAjB,EAAyBxC,QAAzB,CAAxB;;AAEF,aAAK,UAAL;AACE,iBAAOyC,YAAY,CAAC1C,MAAD,EAASsB,OAAO,CAACmB,MAAjB,EAAyBxC,QAAzB,CAAnB;;AAEF,aAAK,MAAL;AACE,iBAAOS,QAAQ,CAACV,MAAD,EAASC,QAAT,CAAf;;AAEF,aAAK,OAAL;AACE,iBAAOW,SAAS,CAACZ,MAAD,EAASC,QAAT,CAAhB;;AAEF,aAAK,YAAL;AACE,iBAAOa,cAAc,CAACd,MAAD,EAASC,QAAT,CAArB;;AAEF,aAAK,OAAL;AACE,iBAAOc,SAAS,CAACf,MAAD,EAASC,QAAT,CAAhB;;AAEF,aAAK,MAAL;AACE,iBAAO4C,QAAQ,CAAC7C,MAAD,EAASsB,OAAO,CAACmB,MAAjB,EAAyBxC,QAAzB,CAAf;;AAEF,aAAK,MAAL;AACE,iBAAOD,MAAM,CAACE,SAAP,CAAiB,UAAA0C,KAAK,EAAI;AAC/B,mBAAOD,QAAQ,CAAC3C,MAAD,EAASyB,UAAT,EAAqBmB,KAArB,EAA4BtB,OAAO,CAACmB,MAApC,EAA4CxC,QAA5C,CAAf;AACD,WAFM,CAAP;;AAIF,aAAK,WAAL;AACE,iBAAOD,MAAM,CAACE,SAAP,CAAiB,UAAA0C,KAAK,EAAI;AAC/B,mBAAOE,aAAa,CAAC9C,MAAD,EAASyB,UAAT,EAAqBmB,KAArB,EAA4BtB,OAAO,CAACmB,MAApC,EAA4CxC,QAA5C,CAApB;AACD,WAFM,CAAP;;AAIF,aAAK,gBAAL;AACE,iBAAOD,MAAM,CAACE,SAAP,CAAiB,UAAA0C,KAAK,EAAI;AAC/B,mBAAOG,kBAAkB,CAAC/C,MAAD,EAASyB,UAAT,EAAqBmB,KAArB,EAA4B3C,QAA5B,CAAzB;AACD,WAFM,CAAP;;AAIF,aAAK,WAAL;AACA,aAAK,QAAL;AACE,iBAAOD,MAAM,CAAC8B,YAAP,CAAoB,UAAAuC,UAAU,EAAI;AACvClC,YAAAA,UAAU,CAACnC,MAAD,EAASyB,UAAT,EAAqBxB,QAArB,CAAV;AACD,WAFM,CAAP;;AAIF,aAAK,UAAL;AACA,aAAK,UAAL;AACE,iBAAOD,MAAM,CAACE,SAAP,CAAiB,UAAA+C,SAAS,EAAI;AACnCjD,YAAAA,MAAM,CAACE,SAAP,CAAiB,UAAA0C,KAAK,EAAI;AACxBI,cAAAA,WAAW,CAAChD,MAAD,EAASyB,UAAT,EAAqBwB,SAArB,EAAgCL,KAAhC,EAAuC3C,QAAvC,CAAX;AACD,aAFD;AAGD,WAJM,CAAP;;AAMF,aAAK,SAAL;AACA,aAAK,MAAL;AACE,iBAAOD,MAAM,CAAC8B,YAAP,CAAoB,UAAAuC,UAAU,EAAI;AACvC,aAAC,GAAGxF,eAAe,CAACyF,aAApB,EAAmCtE,MAAnC,EAA2C,UAAA4B,SAAS,EAAI;AACtDG,cAAAA,SAAS,CAAC/B,MAAD,EAASyB,UAAT,EAAqBG,SAAS,CAACD,QAA/B,EAAyC1B,QAAzC,CAAT;AACD,aAFD;AAGD,WAJM,CAAP;;AAMF,aAAK,UAAL;AACA,aAAK,OAAL;AACE,iBAAOD,MAAM,CAAC8B,YAAP,CAAoB,UAAAuC,UAAU,EAAI;AACvC,aAAC,GAAGxF,eAAe,CAACyF,aAApB,EAAmCtE,MAAnC,EAA2C,UAAAuE,UAAU,EAAI;AACvDtC,cAAAA,UAAU,CAACjC,MAAD,EAASyB,UAAT,EAAqBxB,QAArB,CAAV;AACD,aAFD;AAGD,WAJM,CAAP;;AAMF;AACE,gBAAM,IAAIyB,KAAJ,CAAU,eAAV,CAAN;AAtFJ;AAwFD,KA3FM,CAAP;AA4FD,GA9FM,CAAP;AA+FD;;AAED,SAASS,UAAT,CAAoBnC,MAApB,EAA4ByB,UAA5B,EAAwCxB,QAAxC,EAAkD;AAChD,SAAOD,MAAM,CAACqC,UAAP,CAAkBZ,UAAlB,EAA8BxB,QAA9B,CAAP;AACD;;AAED,SAAS8B,SAAT,CAAmB/B,MAAnB,EAA2ByB,UAA3B,EAAuCE,QAAvC,EAAiD1B,QAAjD,EAA2D;AACzD,MAAI0B,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,IAAAA,QAAQ,GAAG7B,gBAAX;AACD;;AAED,SAAOE,MAAM,CAACqC,UAAP,CAAkBZ,UAAlB,EAA8B,UAAA4B,IAAI,EAAI;AAC3CpD,IAAAA,QAAQ,CAACjB,UAAU,CAACJ,OAAX,CAAmB4F,MAAnB,CAA0BnB,IAA1B,EAAgC1B,QAAhC,CAAD,CAAR;AACD,GAFM,CAAP;AAGD;;AAED,SAASM,UAAT,CAAoBjC,MAApB,EAA4ByB,UAA5B,EAAwCxB,QAAxC,EAAkD;AAChDD,EAAAA,MAAM,CAACqC,UAAP,CAAkBZ,UAAlB,EAA8B,UAAA4B,IAAI,EAAI;AACpCpD,IAAAA,QAAQ,CAACoD,IAAI,CAAC5C,QAAL,CAAc,MAAd,CAAD,CAAR;AACD,GAFD;AAGD;;AAED,SAASyB,aAAT,CAAuBlC,MAAvB,EAA+BC,QAA/B,EAAyC;AACvC,SAAOwE,OAAO,CAACzE,MAAD,EAASC,QAAT,CAAd;AACD;;AAED,SAAS4B,YAAT,CAAsB7B,MAAtB,EAA8B2B,QAA9B,EAAwC1B,QAAxC,EAAkD;AAChD,MAAI0B,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,IAAAA,QAAQ,GAAG7B,gBAAX;AACD;;AAED2E,EAAAA,OAAO,CAACzE,MAAD,EAAS,UAAAqD,IAAI,EAAI;AACtB,QAAIA,IAAJ,EAAU;AACRpD,MAAAA,QAAQ,CAACjB,UAAU,CAACJ,OAAX,CAAmB4F,MAAnB,CAA0BnB,IAA1B,EAAgC1B,QAAhC,CAAD,CAAR;AACD,KAFD,MAEO;AACL1B,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GANM,CAAP;AAOD;;AAED,SAAS+B,aAAT,CAAuBhC,MAAvB,EAA+BC,QAA/B,EAAyC;AACvCwE,EAAAA,OAAO,CAACzE,MAAD,EAAS,UAAAqD,IAAI,EAAI;AACtB,QAAIA,IAAJ,EAAU;AACRpD,MAAAA,QAAQ,CAACoD,IAAI,CAAC5C,QAAL,CAAc,MAAd,CAAD,CAAR;AACD,KAFD,MAEO;AACLR,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GANM,CAAP;AAOD;;AAED,SAASwE,OAAT,CAAiBzE,MAAjB,EAAyBC,QAAzB,EAAmC;AACjCD,EAAAA,MAAM,CAACqC,UAAP,CAAkB,CAAlB,EAAqB,UAAAd,IAAI,EAAI;AAC3B,QAAIA,IAAI,CAACmD,MAAL,CAAYhF,QAAZ,CAAJ,EAA2B;AACzB,aAAOO,QAAQ,CAAC,IAAD,CAAf;AACD,KAFD,MAEO,IAAIsB,IAAI,CAACmD,MAAL,CAAY7E,eAAZ,CAAJ,EAAkC;AACvC,aAAO8E,oBAAoB,CAAC3E,MAAD,EAASC,QAAT,CAA3B;AACD,KAFM,MAEA;AACL,UAAMiB,GAAG,GAAGK,IAAI,CAACN,YAAL,CAAkB,CAAlB,CAAZ;AACA,UAAMD,IAAI,GAAGO,IAAI,CAACN,YAAL,CAAkB,CAAlB,CAAb;;AAEA,UAAID,IAAI,IAAI,KAAK,KAAK,EAAtB,EAA0B;AACxB4D,QAAAA,OAAO,CAACC,IAAR,CAAa,oCAAoC7D,IAApC,GAA2C,QAA3C,GAAsDE,GAAnE;AACD;;AAED,UAAM4D,cAAc,GAAG5D,GAAG,GAAG,cAAcF,IAA3C;AACA,aAAO+D,kBAAkB,CAAC/E,MAAD,EAAS8E,cAAT,EAAyB7E,QAAzB,CAAzB;AACD;AACF,GAhBD;AAiBD;;AAED,SAAS8E,kBAAT,CAA4B/E,MAA5B,EAAoCgF,WAApC,EAAiD/E,QAAjD,EAA2D;AACzD,MAAMoD,IAAI,GAAG1D,MAAM,CAACsF,KAAP,CAAaD,WAAb,EAA0B,CAA1B,CAAb;AACA,MAAIE,MAAM,GAAG,CAAb;;AAEA,WAASC,IAAT,CAAcC,IAAd,EAAoB;AAClBpF,IAAAA,MAAM,CAACiB,YAAP,CAAoB,UAAAoE,WAAW,EAAI;AACjC,UAAI,CAACA,WAAL,EAAkB;AAChB,eAAOD,IAAI,EAAX;AACD;;AAEDpF,MAAAA,MAAM,CAACqC,UAAP,CAAkBgD,WAAlB,EAA+B,UAAAC,KAAK,EAAI;AACtCA,QAAAA,KAAK,CAACC,IAAN,CAAWlC,IAAX,EAAiB6B,MAAjB;AACAA,QAAAA,MAAM,IAAIG,WAAV;AACAF,QAAAA,IAAI,CAACC,IAAD,CAAJ;AACD,OAJD;AAKD,KAVD;AAWD;;AAEDD,EAAAA,IAAI,CAAC,YAAM;AACT,QAAID,MAAM,KAAKF,WAAf,EAA4B;AAC1B,YAAM,IAAItD,KAAJ,CAAU,kEAAkEsD,WAAlE,GAAgF,YAAhF,GAA+FE,MAA/F,GAAwG,QAAlH,CAAN;AACD;;AAEDjF,IAAAA,QAAQ,CAACoD,IAAD,CAAR;AACD,GANG,CAAJ;AAOD;;AAED,SAASsB,oBAAT,CAA8B3E,MAA9B,EAAsCC,QAAtC,EAAgD;AAC9C,MAAMuF,MAAM,GAAG,EAAf;AACA,MAAIC,MAAM,GAAG,CAAb;;AAEA,WAASN,IAAT,CAAcC,IAAd,EAAoB;AAClBpF,IAAAA,MAAM,CAACiB,YAAP,CAAoB,UAAAoE,WAAW,EAAI;AACjC,UAAI,CAACA,WAAL,EAAkB;AAChB,eAAOD,IAAI,EAAX;AACD;;AAEDpF,MAAAA,MAAM,CAACqC,UAAP,CAAkBgD,WAAlB,EAA+B,UAAAC,KAAK,EAAI;AACtCE,QAAAA,MAAM,CAACE,IAAP,CAAYJ,KAAZ;AACAG,QAAAA,MAAM,IAAIJ,WAAV;AACAF,QAAAA,IAAI,CAACC,IAAD,CAAJ;AACD,OAJD;AAKD,KAVD;AAWD;;AAEDD,EAAAA,IAAI,CAAC,YAAM;AACTlF,IAAAA,QAAQ,CAACN,MAAM,CAACgG,MAAP,CAAcH,MAAd,EAAsBC,MAAtB,CAAD,CAAR;AACD,GAFG,CAAJ;AAGD;;AAED,SAASjD,iBAAT,CAA2BxC,MAA3B,EAAmCyC,MAAnC,EAA2CxC,QAA3C,EAAqD;AACnDD,EAAAA,MAAM,CAAC8B,YAAP,CAAoB,UAAA8D,IAAI,EAAI;AAC1B5F,IAAAA,MAAM,CAAC8B,YAAP,CAAoB,UAAA+D,OAAO,EAAI;AAC7B,UAAIlH,KAAJ;;AAEA,UAAI8D,MAAJ,EAAY;AACV9D,QAAAA,KAAK,GAAG,IAAImH,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkB,IAAIH,IAAtB,EAA4B,CAA5B,EAA+BC,OAA/B,CAAT,CAAR;AACD,OAFD,MAEO;AACLlH,QAAAA,KAAK,GAAG,IAAImH,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,IAAIF,IAAtB,EAA4B,CAA5B,EAA+BC,OAA/B,CAAR;AACD;;AAED5F,MAAAA,QAAQ,CAACtB,KAAD,CAAR;AACD,KAVD;AAWD,GAZD;AAaD;;AAED,SAAS+D,YAAT,CAAsB1C,MAAtB,EAA8ByC,MAA9B,EAAsCxC,QAAtC,EAAgD;AAC9CD,EAAAA,MAAM,CAACM,WAAP,CAAmB,UAAAsF,IAAI,EAAI;AACzB5F,IAAAA,MAAM,CAACiB,YAAP,CAAoB,UAAA+E,uBAAuB,EAAI;AAC7C,UAAMC,YAAY,GAAGjC,IAAI,CAACkC,KAAL,CAAWF,uBAAuB,GAAGxG,iBAArC,CAArB;AACA,UAAIb,KAAJ;;AAEA,UAAI8D,MAAJ,EAAY;AACV9D,QAAAA,KAAK,GAAG,IAAImH,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkB,IAAIH,IAAtB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqCK,YAArC,CAAT,CAAR;AACD,OAFD,MAEO;AACLtH,QAAAA,KAAK,GAAG,IAAImH,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,IAAIF,IAAtB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqCK,YAArC,CAAR;AACD;;AAEDhG,MAAAA,QAAQ,CAACtB,KAAD,CAAR;AACD,KAXD;AAYD,GAbD;AAcD;;AAED,SAASgE,QAAT,CAAkB3C,MAAlB,EAA0ByB,UAA1B,EAAsCmB,KAAtC,EAA6CH,MAA7C,EAAqDxC,QAArD,EAA+D;AAC7D,MAAI0D,SAAJ;;AAEA,UAAQlC,UAAR;AACE,SAAK,CAAL;AACEkC,MAAAA,SAAS,GAAG3D,MAAM,CAACmG,YAAnB;AACA;;AAEF,SAAK,CAAL;AACExC,MAAAA,SAAS,GAAG3D,MAAM,CAACiB,YAAnB;AACA;;AAEF,SAAK,CAAL;AACE0C,MAAAA,SAAS,GAAG3D,MAAM,CAACoG,YAAnB;AAVJ;;AAaAzC,EAAAA,SAAS,CAACI,IAAV,CAAe/D,MAAf,EAAuB,UAAArB,KAAK,EAAI;AAC9B,QAAIiE,KAAK,GAAG,CAAZ,EAAe;AACb,WAAK,IAAIyD,CAAC,GAAGzD,KAAb,EAAoByD,CAAC,GAAG,CAAxB,EAA2BA,CAAC,EAA5B,EAAgC;AAC9B1H,QAAAA,KAAK,IAAI,EAAT;AACD;AACF;;AAED,QAAI2H,IAAJ;;AAEA,QAAI7D,MAAJ,EAAY;AACV6D,MAAAA,IAAI,GAAG,IAAIR,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8BpH,KAAK,GAAG,KAAtC,CAAT,CAAP;AACD,KAFD,MAEO;AACL2H,MAAAA,IAAI,GAAG,IAAIR,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8BnH,KAAK,GAAG,KAAtC,CAAP;AACD;;AAEDH,IAAAA,MAAM,CAACC,cAAP,CAAsB6H,IAAtB,EAA4B,kBAA5B,EAAgD;AAC9CC,MAAAA,UAAU,EAAE,KADkC;AAE9C5H,MAAAA,KAAK,EAAEA,KAAK,GAAG,KAAR,GAAgBqF,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAAb;AAFuB,KAAhD;AAIAhE,IAAAA,QAAQ,CAACqG,IAAD,CAAR;AACD,GApBD;AAqBD;;AAED,SAASzD,QAAT,CAAkB7C,MAAlB,EAA0ByC,MAA1B,EAAkCxC,QAAlC,EAA4C;AAC1CD,EAAAA,MAAM,CAACmG,YAAP,CAAoB,UAAAP,IAAI,EAAI;AAC1B,QAAInD,MAAJ,EAAY;AACVxC,MAAAA,QAAQ,CAAC,IAAI6F,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkBH,IAAI,GAAG,MAAzB,CAAT,CAAD,CAAR;AACD,KAFD,MAEO;AACL3F,MAAAA,QAAQ,CAAC,IAAI6F,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkBF,IAAI,GAAG,MAAzB,CAAD,CAAR;AACD;AACF,GAND;AAOD;;AAED,SAAS9C,aAAT,CAAuB9C,MAAvB,EAA+ByB,UAA/B,EAA2CmB,KAA3C,EAAkDH,MAAlD,EAA0DxC,QAA1D,EAAoE;AAClE0C,EAAAA,QAAQ,CAAC3C,MAAD,EAASyB,UAAU,GAAG,CAAtB,EAAyBmB,KAAzB,EAAgCH,MAAhC,EAAwC,UAAA+D,IAAI,EAAI;AACtD;AACAxG,IAAAA,MAAM,CAACmG,YAAP,CAAoB,UAAAP,IAAI,EAAI;AAC1B,UAAIU,IAAJ;;AAEA,UAAI7D,MAAJ,EAAY;AACV6D,QAAAA,IAAI,GAAG,IAAIR,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkBH,IAAI,GAAG,MAAzB,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,CAACY,IAA3C,CAAT,CAAP;AACD,OAFD,MAEO;AACLF,QAAAA,IAAI,GAAG,IAAIR,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkBF,IAAI,GAAG,MAAzB,EAAiCY,IAAI,CAACC,QAAL,EAAjC,EAAkDD,IAAI,CAACE,UAAL,EAAlD,EAAqEF,IAAI,CAACG,UAAL,EAArE,EAAwFH,IAAI,CAACI,eAAL,EAAxF,CAAP;AACD;;AAEDpI,MAAAA,MAAM,CAACC,cAAP,CAAsB6H,IAAtB,EAA4B,kBAA5B,EAAgD;AAC9CC,QAAAA,UAAU,EAAE,KADkC;AAE9C5H,QAAAA,KAAK,EAAE6H,IAAI,CAACK;AAFkC,OAAhD;AAIA5G,MAAAA,QAAQ,CAACqG,IAAD,CAAR;AACD,KAdD;AAeD,GAjBO,CAAR;AAkBD;;AAED,SAASvD,kBAAT,CAA4B/C,MAA5B,EAAoCyB,UAApC,EAAgDmB,KAAhD,EAAuD3C,QAAvD,EAAiE;AAC/D0C,EAAAA,QAAQ,CAAC3C,MAAD,EAASyB,UAAU,GAAG,CAAtB,EAAyBmB,KAAzB,EAAgC,IAAhC,EAAsC,UAAA4D,IAAI,EAAI;AACpDxG,IAAAA,MAAM,CAACmG,YAAP,CAAoB,UAAAP,IAAI,EAAI;AAC1B;AACA5F,MAAAA,MAAM,CAACI,WAAP,CAAmB,YAAM;AACvB,YAAMkG,IAAI,GAAG,IAAIR,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkBH,IAAI,GAAG,MAAzB,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,CAACY,IAA3C,CAAT,CAAb;AACAhI,QAAAA,MAAM,CAACC,cAAP,CAAsB6H,IAAtB,EAA4B,kBAA5B,EAAgD;AAC9CC,UAAAA,UAAU,EAAE,KADkC;AAE9C5H,UAAAA,KAAK,EAAE6H,IAAI,CAACK;AAFkC,SAAhD;AAIA5G,QAAAA,QAAQ,CAACqG,IAAD,CAAR;AACD,OAPD;AAQD,KAVD;AAWD,GAZO,CAAR;AAaD;;AAED,IAAIQ,QAAQ,GAAG1F,UAAf;AACA1C,OAAO,CAACE,OAAR,GAAkBkI,QAAlB;AACAC,MAAM,CAACrI,OAAP,GAAiB0C,UAAjB","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _metadataParser = require(\"./metadata-parser\");\r\n\r\nvar _dataType = require(\"./data-type\");\r\n\r\nvar _iconvLite = _interopRequireDefault(require(\"iconv-lite\"));\r\n\r\nvar _sprintfJs = require(\"sprintf-js\");\r\n\r\nvar _guidParser = require(\"./guid-parser\");\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst NULL = (1 << 16) - 1;\r\nconst MAX = (1 << 16) - 1;\r\nconst THREE_AND_A_THIRD = 3 + 1 / 3;\r\nconst MONEY_DIVISOR = 10000;\r\nconst PLP_NULL = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\r\nconst UNKNOWN_PLP_LEN = Buffer.from([0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\r\nconst DEFAULT_ENCODING = 'utf8';\r\n\r\nfunction readTinyInt(parser, callback) {\r\n  parser.readUInt8(callback);\r\n}\r\n\r\nfunction readSmallInt(parser, callback) {\r\n  parser.readInt16LE(callback);\r\n}\r\n\r\nfunction readInt(parser, callback) {\r\n  parser.readInt32LE(callback);\r\n}\r\n\r\nfunction readBigInt(parser, callback) {\r\n  parser.readBigInt64LE(value => {\r\n    callback(value.toString());\r\n  });\r\n}\r\n\r\nfunction readReal(parser, callback) {\r\n  parser.readFloatLE(callback);\r\n}\r\n\r\nfunction readFloat(parser, callback) {\r\n  parser.readDoubleLE(callback);\r\n}\r\n\r\nfunction readSmallMoney(parser, callback) {\r\n  parser.readInt32LE(value => {\r\n    callback(value / MONEY_DIVISOR);\r\n  });\r\n}\r\n\r\nfunction readMoney(parser, callback) {\r\n  parser.readInt32LE(high => {\r\n    parser.readUInt32LE(low => {\r\n      callback((low + 0x100000000 * high) / MONEY_DIVISOR);\r\n    });\r\n  });\r\n}\r\n\r\nfunction readBit(parser, callback) {\r\n  parser.readUInt8(value => {\r\n    callback(!!value);\r\n  });\r\n}\r\n\r\nfunction valueParse(parser, metadata, options, callback) {\r\n  const type = metadata.type;\r\n\r\n  switch (type.name) {\r\n    case 'Null':\r\n      return callback(null);\r\n\r\n    case 'TinyInt':\r\n      return readTinyInt(parser, callback);\r\n\r\n    case 'SmallInt':\r\n      return readSmallInt(parser, callback);\r\n\r\n    case 'Int':\r\n      return readInt(parser, callback);\r\n\r\n    case 'BigInt':\r\n      return readBigInt(parser, callback);\r\n\r\n    case 'IntN':\r\n      return parser.readUInt8(dataLength => {\r\n        switch (dataLength) {\r\n          case 0:\r\n            return callback(null);\r\n\r\n          case 1:\r\n            return readTinyInt(parser, callback);\r\n\r\n          case 2:\r\n            return readSmallInt(parser, callback);\r\n\r\n          case 4:\r\n            return readInt(parser, callback);\r\n\r\n          case 8:\r\n            return readBigInt(parser, callback);\r\n\r\n          default:\r\n            throw new Error('Unsupported dataLength ' + dataLength + ' for IntN');\r\n        }\r\n      });\r\n\r\n    case 'Real':\r\n      return readReal(parser, callback);\r\n\r\n    case 'Float':\r\n      return readFloat(parser, callback);\r\n\r\n    case 'FloatN':\r\n      return parser.readUInt8(dataLength => {\r\n        switch (dataLength) {\r\n          case 0:\r\n            return callback(null);\r\n\r\n          case 4:\r\n            return readReal(parser, callback);\r\n\r\n          case 8:\r\n            return readFloat(parser, callback);\r\n\r\n          default:\r\n            throw new Error('Unsupported dataLength ' + dataLength + ' for FloatN');\r\n        }\r\n      });\r\n\r\n    case 'SmallMoney':\r\n      return readSmallMoney(parser, callback);\r\n\r\n    case 'Money':\r\n      return readMoney(parser, callback);\r\n\r\n    case 'MoneyN':\r\n      return parser.readUInt8(dataLength => {\r\n        switch (dataLength) {\r\n          case 0:\r\n            return callback(null);\r\n\r\n          case 4:\r\n            return readSmallMoney(parser, callback);\r\n\r\n          case 8:\r\n            return readMoney(parser, callback);\r\n\r\n          default:\r\n            throw new Error('Unsupported dataLength ' + dataLength + ' for MoneyN');\r\n        }\r\n      });\r\n\r\n    case 'Bit':\r\n      return readBit(parser, callback);\r\n\r\n    case 'BitN':\r\n      return parser.readUInt8(dataLength => {\r\n        switch (dataLength) {\r\n          case 0:\r\n            return callback(null);\r\n\r\n          case 1:\r\n            return readBit(parser, callback);\r\n\r\n          default:\r\n            throw new Error('Unsupported dataLength ' + dataLength + ' for BitN');\r\n        }\r\n      });\r\n\r\n    case 'VarChar':\r\n    case 'Char':\r\n      const codepage = metadata.collation.codepage;\r\n\r\n      if (metadata.dataLength === MAX) {\r\n        return readMaxChars(parser, codepage, callback);\r\n      } else {\r\n        return parser.readUInt16LE(dataLength => {\r\n          if (dataLength === NULL) {\r\n            return callback(null);\r\n          }\r\n\r\n          readChars(parser, dataLength, codepage, callback);\r\n        });\r\n      }\r\n\r\n    case 'NVarChar':\r\n    case 'NChar':\r\n      if (metadata.dataLength === MAX) {\r\n        return readMaxNChars(parser, callback);\r\n      } else {\r\n        return parser.readUInt16LE(dataLength => {\r\n          if (dataLength === NULL) {\r\n            return callback(null);\r\n          }\r\n\r\n          readNChars(parser, dataLength, callback);\r\n        });\r\n      }\r\n\r\n    case 'VarBinary':\r\n    case 'Binary':\r\n      if (metadata.dataLength === MAX) {\r\n        return readMaxBinary(parser, callback);\r\n      } else {\r\n        return parser.readUInt16LE(dataLength => {\r\n          if (dataLength === NULL) {\r\n            return callback(null);\r\n          }\r\n\r\n          readBinary(parser, dataLength, callback);\r\n        });\r\n      }\r\n\r\n    case 'Text':\r\n      return parser.readUInt8(textPointerLength => {\r\n        if (textPointerLength === 0) {\r\n          return callback(null);\r\n        }\r\n\r\n        parser.readBuffer(textPointerLength, _textPointer => {\r\n          parser.readBuffer(8, _timestamp => {\r\n            parser.readUInt32LE(dataLength => {\r\n              readChars(parser, dataLength, metadata.collation.codepage, callback);\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n    case 'NText':\r\n      return parser.readUInt8(textPointerLength => {\r\n        if (textPointerLength === 0) {\r\n          return callback(null);\r\n        }\r\n\r\n        parser.readBuffer(textPointerLength, _textPointer => {\r\n          parser.readBuffer(8, _timestamp => {\r\n            parser.readUInt32LE(dataLength => {\r\n              readNChars(parser, dataLength, callback);\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n    case 'Image':\r\n      return parser.readUInt8(textPointerLength => {\r\n        if (textPointerLength === 0) {\r\n          return callback(null);\r\n        }\r\n\r\n        parser.readBuffer(textPointerLength, _textPointer => {\r\n          parser.readBuffer(8, _timestamp => {\r\n            parser.readUInt32LE(dataLength => {\r\n              readBinary(parser, dataLength, callback);\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n    case 'Xml':\r\n      return readMaxNChars(parser, callback);\r\n\r\n    case 'SmallDateTime':\r\n      return readSmallDateTime(parser, options.useUTC, callback);\r\n\r\n    case 'DateTime':\r\n      return readDateTime(parser, options.useUTC, callback);\r\n\r\n    case 'DateTimeN':\r\n      return parser.readUInt8(dataLength => {\r\n        switch (dataLength) {\r\n          case 0:\r\n            return callback(null);\r\n\r\n          case 4:\r\n            return readSmallDateTime(parser, options.useUTC, callback);\r\n\r\n          case 8:\r\n            return readDateTime(parser, options.useUTC, callback);\r\n\r\n          default:\r\n            throw new Error('Unsupported dataLength ' + dataLength + ' for DateTimeN');\r\n        }\r\n      });\r\n\r\n    case 'Time':\r\n      return parser.readUInt8(dataLength => {\r\n        if (dataLength === 0) {\r\n          return callback(null);\r\n        } else {\r\n          return readTime(parser, dataLength, metadata.scale, options.useUTC, callback);\r\n        }\r\n      });\r\n\r\n    case 'Date':\r\n      return parser.readUInt8(dataLength => {\r\n        if (dataLength === 0) {\r\n          return callback(null);\r\n        } else {\r\n          return readDate(parser, options.useUTC, callback);\r\n        }\r\n      });\r\n\r\n    case 'DateTime2':\r\n      return parser.readUInt8(dataLength => {\r\n        if (dataLength === 0) {\r\n          return callback(null);\r\n        } else {\r\n          return readDateTime2(parser, dataLength, metadata.scale, options.useUTC, callback);\r\n        }\r\n      });\r\n\r\n    case 'DateTimeOffset':\r\n      return parser.readUInt8(dataLength => {\r\n        if (dataLength === 0) {\r\n          return callback(null);\r\n        } else {\r\n          return readDateTimeOffset(parser, dataLength, metadata.scale, callback);\r\n        }\r\n      });\r\n\r\n    case 'NumericN':\r\n    case 'DecimalN':\r\n      return parser.readUInt8(dataLength => {\r\n        if (dataLength === 0) {\r\n          return callback(null);\r\n        } else {\r\n          return readNumeric(parser, dataLength, metadata.precision, metadata.scale, callback);\r\n        }\r\n      });\r\n\r\n    case 'UniqueIdentifier':\r\n      return parser.readUInt8(dataLength => {\r\n        switch (dataLength) {\r\n          case 0:\r\n            return callback(null);\r\n\r\n          case 0x10:\r\n            return readUniqueIdentifier(parser, options, callback);\r\n\r\n          default:\r\n            throw new Error((0, _sprintfJs.sprintf)('Unsupported guid size %d', dataLength - 1));\r\n        }\r\n      });\r\n\r\n    case 'UDT':\r\n      return readMaxBinary(parser, callback);\r\n\r\n    case 'Variant':\r\n      return parser.readUInt32LE(dataLength => {\r\n        if (dataLength === 0) {\r\n          return callback(null);\r\n        }\r\n\r\n        readVariant(parser, options, dataLength, callback);\r\n      });\r\n\r\n    default:\r\n      throw new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name));\r\n  }\r\n}\r\n\r\nfunction readUniqueIdentifier(parser, options, callback) {\r\n  parser.readBuffer(0x10, data => {\r\n    callback(options.lowerCaseGuids ? (0, _guidParser.bufferToLowerCaseGuid)(data) : (0, _guidParser.bufferToUpperCaseGuid)(data));\r\n  });\r\n}\r\n\r\nfunction readNumeric(parser, dataLength, _precision, scale, callback) {\r\n  parser.readUInt8(sign => {\r\n    sign = sign === 1 ? 1 : -1;\r\n    let readValue;\r\n\r\n    if (dataLength === 5) {\r\n      readValue = parser.readUInt32LE;\r\n    } else if (dataLength === 9) {\r\n      readValue = parser.readUNumeric64LE;\r\n    } else if (dataLength === 13) {\r\n      readValue = parser.readUNumeric96LE;\r\n    } else if (dataLength === 17) {\r\n      readValue = parser.readUNumeric128LE;\r\n    } else {\r\n      throw new Error((0, _sprintfJs.sprintf)('Unsupported numeric dataLength %d', dataLength));\r\n    }\r\n\r\n    readValue.call(parser, value => {\r\n      callback(value * sign / Math.pow(10, scale));\r\n    });\r\n  });\r\n}\r\n\r\nfunction readVariant(parser, options, dataLength, callback) {\r\n  return parser.readUInt8(baseType => {\r\n    const type = _dataType.TYPE[baseType];\r\n    return parser.readUInt8(propBytes => {\r\n      dataLength = dataLength - propBytes - 2;\r\n\r\n      switch (type.name) {\r\n        case 'UniqueIdentifier':\r\n          return readUniqueIdentifier(parser, options, callback);\r\n\r\n        case 'Bit':\r\n          return readBit(parser, callback);\r\n\r\n        case 'TinyInt':\r\n          return readTinyInt(parser, callback);\r\n\r\n        case 'SmallInt':\r\n          return readSmallInt(parser, callback);\r\n\r\n        case 'Int':\r\n          return readInt(parser, callback);\r\n\r\n        case 'BigInt':\r\n          return readBigInt(parser, callback);\r\n\r\n        case 'SmallDateTime':\r\n          return readSmallDateTime(parser, options.useUTC, callback);\r\n\r\n        case 'DateTime':\r\n          return readDateTime(parser, options.useUTC, callback);\r\n\r\n        case 'Real':\r\n          return readReal(parser, callback);\r\n\r\n        case 'Float':\r\n          return readFloat(parser, callback);\r\n\r\n        case 'SmallMoney':\r\n          return readSmallMoney(parser, callback);\r\n\r\n        case 'Money':\r\n          return readMoney(parser, callback);\r\n\r\n        case 'Date':\r\n          return readDate(parser, options.useUTC, callback);\r\n\r\n        case 'Time':\r\n          return parser.readUInt8(scale => {\r\n            return readTime(parser, dataLength, scale, options.useUTC, callback);\r\n          });\r\n\r\n        case 'DateTime2':\r\n          return parser.readUInt8(scale => {\r\n            return readDateTime2(parser, dataLength, scale, options.useUTC, callback);\r\n          });\r\n\r\n        case 'DateTimeOffset':\r\n          return parser.readUInt8(scale => {\r\n            return readDateTimeOffset(parser, dataLength, scale, callback);\r\n          });\r\n\r\n        case 'VarBinary':\r\n        case 'Binary':\r\n          return parser.readUInt16LE(_maxLength => {\r\n            readBinary(parser, dataLength, callback);\r\n          });\r\n\r\n        case 'NumericN':\r\n        case 'DecimalN':\r\n          return parser.readUInt8(precision => {\r\n            parser.readUInt8(scale => {\r\n              readNumeric(parser, dataLength, precision, scale, callback);\r\n            });\r\n          });\r\n\r\n        case 'VarChar':\r\n        case 'Char':\r\n          return parser.readUInt16LE(_maxLength => {\r\n            (0, _metadataParser.readCollation)(parser, collation => {\r\n              readChars(parser, dataLength, collation.codepage, callback);\r\n            });\r\n          });\r\n\r\n        case 'NVarChar':\r\n        case 'NChar':\r\n          return parser.readUInt16LE(_maxLength => {\r\n            (0, _metadataParser.readCollation)(parser, _collation => {\r\n              readNChars(parser, dataLength, callback);\r\n            });\r\n          });\r\n\r\n        default:\r\n          throw new Error('Invalid type!');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction readBinary(parser, dataLength, callback) {\r\n  return parser.readBuffer(dataLength, callback);\r\n}\r\n\r\nfunction readChars(parser, dataLength, codepage, callback) {\r\n  if (codepage == null) {\r\n    codepage = DEFAULT_ENCODING;\r\n  }\r\n\r\n  return parser.readBuffer(dataLength, data => {\r\n    callback(_iconvLite.default.decode(data, codepage));\r\n  });\r\n}\r\n\r\nfunction readNChars(parser, dataLength, callback) {\r\n  parser.readBuffer(dataLength, data => {\r\n    callback(data.toString('ucs2'));\r\n  });\r\n}\r\n\r\nfunction readMaxBinary(parser, callback) {\r\n  return readMax(parser, callback);\r\n}\r\n\r\nfunction readMaxChars(parser, codepage, callback) {\r\n  if (codepage == null) {\r\n    codepage = DEFAULT_ENCODING;\r\n  }\r\n\r\n  readMax(parser, data => {\r\n    if (data) {\r\n      callback(_iconvLite.default.decode(data, codepage));\r\n    } else {\r\n      callback(null);\r\n    }\r\n  });\r\n}\r\n\r\nfunction readMaxNChars(parser, callback) {\r\n  readMax(parser, data => {\r\n    if (data) {\r\n      callback(data.toString('ucs2'));\r\n    } else {\r\n      callback(null);\r\n    }\r\n  });\r\n}\r\n\r\nfunction readMax(parser, callback) {\r\n  parser.readBuffer(8, type => {\r\n    if (type.equals(PLP_NULL)) {\r\n      return callback(null);\r\n    } else if (type.equals(UNKNOWN_PLP_LEN)) {\r\n      return readMaxUnknownLength(parser, callback);\r\n    } else {\r\n      const low = type.readUInt32LE(0);\r\n      const high = type.readUInt32LE(4);\r\n\r\n      if (high >= 2 << 53 - 32) {\r\n        console.warn('Read UInt64LE > 53 bits : high=' + high + ', low=' + low);\r\n      }\r\n\r\n      const expectedLength = low + 0x100000000 * high;\r\n      return readMaxKnownLength(parser, expectedLength, callback);\r\n    }\r\n  });\r\n}\r\n\r\nfunction readMaxKnownLength(parser, totalLength, callback) {\r\n  const data = Buffer.alloc(totalLength, 0);\r\n  let offset = 0;\r\n\r\n  function next(done) {\r\n    parser.readUInt32LE(chunkLength => {\r\n      if (!chunkLength) {\r\n        return done();\r\n      }\r\n\r\n      parser.readBuffer(chunkLength, chunk => {\r\n        chunk.copy(data, offset);\r\n        offset += chunkLength;\r\n        next(done);\r\n      });\r\n    });\r\n  }\r\n\r\n  next(() => {\r\n    if (offset !== totalLength) {\r\n      throw new Error('Partially Length-prefixed Bytes unmatched lengths : expected ' + totalLength + ', but got ' + offset + ' bytes');\r\n    }\r\n\r\n    callback(data);\r\n  });\r\n}\r\n\r\nfunction readMaxUnknownLength(parser, callback) {\r\n  const chunks = [];\r\n  let length = 0;\r\n\r\n  function next(done) {\r\n    parser.readUInt32LE(chunkLength => {\r\n      if (!chunkLength) {\r\n        return done();\r\n      }\r\n\r\n      parser.readBuffer(chunkLength, chunk => {\r\n        chunks.push(chunk);\r\n        length += chunkLength;\r\n        next(done);\r\n      });\r\n    });\r\n  }\r\n\r\n  next(() => {\r\n    callback(Buffer.concat(chunks, length));\r\n  });\r\n}\r\n\r\nfunction readSmallDateTime(parser, useUTC, callback) {\r\n  parser.readUInt16LE(days => {\r\n    parser.readUInt16LE(minutes => {\r\n      let value;\r\n\r\n      if (useUTC) {\r\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, minutes));\r\n      } else {\r\n        value = new Date(1900, 0, 1 + days, 0, minutes);\r\n      }\r\n\r\n      callback(value);\r\n    });\r\n  });\r\n}\r\n\r\nfunction readDateTime(parser, useUTC, callback) {\r\n  parser.readInt32LE(days => {\r\n    parser.readUInt32LE(threeHundredthsOfSecond => {\r\n      const milliseconds = Math.round(threeHundredthsOfSecond * THREE_AND_A_THIRD);\r\n      let value;\r\n\r\n      if (useUTC) {\r\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, 0, 0, milliseconds));\r\n      } else {\r\n        value = new Date(1900, 0, 1 + days, 0, 0, 0, milliseconds);\r\n      }\r\n\r\n      callback(value);\r\n    });\r\n  });\r\n}\r\n\r\nfunction readTime(parser, dataLength, scale, useUTC, callback) {\r\n  let readValue;\r\n\r\n  switch (dataLength) {\r\n    case 3:\r\n      readValue = parser.readUInt24LE;\r\n      break;\r\n\r\n    case 4:\r\n      readValue = parser.readUInt32LE;\r\n      break;\r\n\r\n    case 5:\r\n      readValue = parser.readUInt40LE;\r\n  }\r\n\r\n  readValue.call(parser, value => {\r\n    if (scale < 7) {\r\n      for (let i = scale; i < 7; i++) {\r\n        value *= 10;\r\n      }\r\n    }\r\n\r\n    let date;\r\n\r\n    if (useUTC) {\r\n      date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000));\r\n    } else {\r\n      date = new Date(1970, 0, 1, 0, 0, 0, value / 10000);\r\n    }\r\n\r\n    Object.defineProperty(date, 'nanosecondsDelta', {\r\n      enumerable: false,\r\n      value: value % 10000 / Math.pow(10, 7)\r\n    });\r\n    callback(date);\r\n  });\r\n}\r\n\r\nfunction readDate(parser, useUTC, callback) {\r\n  parser.readUInt24LE(days => {\r\n    if (useUTC) {\r\n      callback(new Date(Date.UTC(2000, 0, days - 730118)));\r\n    } else {\r\n      callback(new Date(2000, 0, days - 730118));\r\n    }\r\n  });\r\n}\r\n\r\nfunction readDateTime2(parser, dataLength, scale, useUTC, callback) {\r\n  readTime(parser, dataLength - 3, scale, useUTC, time => {\r\n    // TODO: 'input' is 'time', but TypeScript cannot find \"time.nanosecondsDelta\";\r\n    parser.readUInt24LE(days => {\r\n      let date;\r\n\r\n      if (useUTC) {\r\n        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\r\n      } else {\r\n        date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\r\n      }\r\n\r\n      Object.defineProperty(date, 'nanosecondsDelta', {\r\n        enumerable: false,\r\n        value: time.nanosecondsDelta\r\n      });\r\n      callback(date);\r\n    });\r\n  });\r\n}\r\n\r\nfunction readDateTimeOffset(parser, dataLength, scale, callback) {\r\n  readTime(parser, dataLength - 5, scale, true, time => {\r\n    parser.readUInt24LE(days => {\r\n      // offset\r\n      parser.readInt16LE(() => {\r\n        const date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\r\n        Object.defineProperty(date, 'nanosecondsDelta', {\r\n          enumerable: false,\r\n          value: time.nanosecondsDelta\r\n        });\r\n        callback(date);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nvar _default = valueParse;\r\nexports.default = _default;\r\nmodule.exports = valueParse;"]},"metadata":{},"sourceType":"script"}
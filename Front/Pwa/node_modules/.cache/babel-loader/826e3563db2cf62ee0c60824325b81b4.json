{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst NVarChar = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  maximumLength: 4000,\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return value.length / 2 || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length * 2, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      if (parameter.length <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n\n    let value = parameter.value;\n\n    if (parameter.length <= this.maximumLength) {\n      let length;\n\n      if (value instanceof Buffer) {\n        length = value.length;\n      } else {\n        value = value.toString();\n        length = Buffer.byteLength(value, 'ucs2');\n      }\n\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      return buffer;\n    } else {\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    let value = parameter.value;\n\n    if (parameter.length <= this.maximumLength) {\n      if (value instanceof Buffer) {\n        yield value;\n      } else {\n        value = value.toString();\n        yield Buffer.from(value, 'ucs2');\n      }\n    } else {\n      if (value instanceof Buffer) {\n        const length = value.length;\n\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield value;\n        }\n      } else {\n        value = value.toString();\n        const length = Buffer.byteLength(value, 'ucs2');\n\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield Buffer.from(value, 'ucs2');\n        }\n      }\n\n      yield PLP_TERMINATOR;\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        throw new TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = NVarChar;\nexports.default = _default;\nmodule.exports = NVarChar;","map":{"version":3,"sources":["B:/Duoc/Portafolio_de_titulo/Git/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/data-types/nvarchar.js"],"names":["Object","defineProperty","exports","value","default","MAX","UNKNOWN_PLP_LEN","Buffer","from","PLP_TERMINATOR","NULL_LENGTH","MAX_NULL_LENGTH","NVarChar","id","type","name","maximumLength","declaration","parameter","length","toString","output","resolveLength","isBuffer","generateTypeInfo","buffer","alloc","writeUInt8","writeUInt16LE","generateParameterLength","options","byteLength","generateParameterData","writeUInt32LE","validate","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\nconst MAX = (1 << 16) - 1;\r\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\r\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\r\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\r\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\r\nconst NVarChar = {\r\n  id: 0xE7,\r\n  type: 'NVARCHAR',\r\n  name: 'NVarChar',\r\n  maximumLength: 4000,\r\n  declaration: function (parameter) {\r\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\r\n\r\n    let length;\r\n\r\n    if (parameter.length) {\r\n      length = parameter.length;\r\n    } else if (value != null) {\r\n      length = value.toString().length || 1;\r\n    } else if (value === null && !parameter.output) {\r\n      length = 1;\r\n    } else {\r\n      length = this.maximumLength;\r\n    }\r\n\r\n    if (length <= this.maximumLength) {\r\n      return 'nvarchar(' + length + ')';\r\n    } else {\r\n      return 'nvarchar(max)';\r\n    }\r\n  },\r\n  resolveLength: function (parameter) {\r\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\r\n\r\n    if (parameter.length != null) {\r\n      return parameter.length;\r\n    } else if (value != null) {\r\n      if (Buffer.isBuffer(value)) {\r\n        return value.length / 2 || 1;\r\n      } else {\r\n        return value.toString().length || 1;\r\n      }\r\n    } else {\r\n      return this.maximumLength;\r\n    }\r\n  },\r\n\r\n  generateTypeInfo(parameter) {\r\n    const buffer = Buffer.alloc(8);\r\n    buffer.writeUInt8(this.id, 0);\r\n\r\n    if (parameter.length <= this.maximumLength) {\r\n      buffer.writeUInt16LE(parameter.length * 2, 1);\r\n    } else {\r\n      buffer.writeUInt16LE(MAX, 1);\r\n    }\r\n\r\n    return buffer;\r\n  },\r\n\r\n  generateParameterLength(parameter, options) {\r\n    if (parameter.value == null) {\r\n      if (parameter.length <= this.maximumLength) {\r\n        return NULL_LENGTH;\r\n      } else {\r\n        return MAX_NULL_LENGTH;\r\n      }\r\n    }\r\n\r\n    let value = parameter.value;\r\n\r\n    if (parameter.length <= this.maximumLength) {\r\n      let length;\r\n\r\n      if (value instanceof Buffer) {\r\n        length = value.length;\r\n      } else {\r\n        value = value.toString();\r\n        length = Buffer.byteLength(value, 'ucs2');\r\n      }\r\n\r\n      const buffer = Buffer.alloc(2);\r\n      buffer.writeUInt16LE(length, 0);\r\n      return buffer;\r\n    } else {\r\n      return UNKNOWN_PLP_LEN;\r\n    }\r\n  },\r\n\r\n  *generateParameterData(parameter, options) {\r\n    if (parameter.value == null) {\r\n      return;\r\n    }\r\n\r\n    let value = parameter.value;\r\n\r\n    if (parameter.length <= this.maximumLength) {\r\n      if (value instanceof Buffer) {\r\n        yield value;\r\n      } else {\r\n        value = value.toString();\r\n        yield Buffer.from(value, 'ucs2');\r\n      }\r\n    } else {\r\n      if (value instanceof Buffer) {\r\n        const length = value.length;\r\n\r\n        if (length > 0) {\r\n          const buffer = Buffer.alloc(4);\r\n          buffer.writeUInt32LE(length, 0);\r\n          yield buffer;\r\n          yield value;\r\n        }\r\n      } else {\r\n        value = value.toString();\r\n        const length = Buffer.byteLength(value, 'ucs2');\r\n\r\n        if (length > 0) {\r\n          const buffer = Buffer.alloc(4);\r\n          buffer.writeUInt32LE(length, 0);\r\n          yield buffer;\r\n          yield Buffer.from(value, 'ucs2');\r\n        }\r\n      }\r\n\r\n      yield PLP_TERMINATOR;\r\n    }\r\n  },\r\n\r\n  validate: function (value) {\r\n    if (value == null) {\r\n      return null;\r\n    }\r\n\r\n    if (typeof value !== 'string') {\r\n      if (typeof value.toString !== 'function') {\r\n        throw new TypeError('Invalid string.');\r\n      }\r\n\r\n      value = value.toString();\r\n    }\r\n\r\n    return value;\r\n  }\r\n};\r\nvar _default = NVarChar;\r\nexports.default = _default;\r\nmodule.exports = NVarChar;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst VarBinary = {\n  id: 0xA5,\n  type: 'BIGVARBIN',\n  name: 'VarBinary',\n  maximumLength: 8000,\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'varbinary(' + length + ')';\n    } else {\n      return 'varbinary(max)';\n    }\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  generateTypeInfo: function (parameter) {\n    const buffer = Buffer.alloc(3);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      if (parameter.length <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n\n    let value = parameter.value;\n\n    if (!Buffer.isBuffer(value)) {\n      value = value.toString();\n    }\n\n    const length = Buffer.byteLength(value, 'ucs2');\n\n    if (parameter.length <= this.maximumLength) {\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      return buffer;\n    } else {\n      // writePLPBody\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    let value = parameter.value;\n\n    if (parameter.length <= this.maximumLength) {\n      if (Buffer.isBuffer(value)) {\n        yield value;\n      } else {\n        yield Buffer.from(value.toString(), 'ucs2');\n      }\n    } else {\n      // writePLPBody\n      if (!Buffer.isBuffer(value)) {\n        value = value.toString();\n      }\n\n      const length = Buffer.byteLength(value, 'ucs2');\n\n      if (length > 0) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeUInt32LE(length, 0);\n        yield buffer;\n\n        if (Buffer.isBuffer(value)) {\n          yield value;\n        } else {\n          yield Buffer.from(value, 'ucs2');\n        }\n      }\n\n      yield PLP_TERMINATOR;\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      throw new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = VarBinary;\nexports.default = _default;\nmodule.exports = VarBinary;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/data-types/varbinary.js"],"names":["Object","defineProperty","exports","value","default","MAX","UNKNOWN_PLP_LEN","Buffer","from","PLP_TERMINATOR","NULL_LENGTH","MAX_NULL_LENGTH","VarBinary","id","type","name","maximumLength","declaration","parameter","length","output","resolveLength","generateTypeInfo","buffer","alloc","writeUInt8","writeUInt16LE","generateParameterLength","options","isBuffer","toString","byteLength","generateParameterData","writeUInt32LE","validate","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\nconst MAX = (1 << 16) - 1;\r\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\r\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\r\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\r\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\r\nconst VarBinary = {\r\n  id: 0xA5,\r\n  type: 'BIGVARBIN',\r\n  name: 'VarBinary',\r\n  maximumLength: 8000,\r\n  declaration: function (parameter) {\r\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\r\n\r\n    let length;\r\n\r\n    if (parameter.length) {\r\n      length = parameter.length;\r\n    } else if (value != null) {\r\n      length = value.length || 1;\r\n    } else if (value === null && !parameter.output) {\r\n      length = 1;\r\n    } else {\r\n      length = this.maximumLength;\r\n    }\r\n\r\n    if (length <= this.maximumLength) {\r\n      return 'varbinary(' + length + ')';\r\n    } else {\r\n      return 'varbinary(max)';\r\n    }\r\n  },\r\n  resolveLength: function (parameter) {\r\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\r\n\r\n    if (parameter.length != null) {\r\n      return parameter.length;\r\n    } else if (value != null) {\r\n      return value.length;\r\n    } else {\r\n      return this.maximumLength;\r\n    }\r\n  },\r\n  generateTypeInfo: function (parameter) {\r\n    const buffer = Buffer.alloc(3);\r\n    buffer.writeUInt8(this.id, 0);\r\n\r\n    if (parameter.length <= this.maximumLength) {\r\n      buffer.writeUInt16LE(parameter.length, 1);\r\n    } else {\r\n      buffer.writeUInt16LE(MAX, 1);\r\n    }\r\n\r\n    return buffer;\r\n  },\r\n\r\n  generateParameterLength(parameter, options) {\r\n    if (parameter.value == null) {\r\n      if (parameter.length <= this.maximumLength) {\r\n        return NULL_LENGTH;\r\n      } else {\r\n        return MAX_NULL_LENGTH;\r\n      }\r\n    }\r\n\r\n    let value = parameter.value;\r\n\r\n    if (!Buffer.isBuffer(value)) {\r\n      value = value.toString();\r\n    }\r\n\r\n    const length = Buffer.byteLength(value, 'ucs2');\r\n\r\n    if (parameter.length <= this.maximumLength) {\r\n      const buffer = Buffer.alloc(2);\r\n      buffer.writeUInt16LE(length, 0);\r\n      return buffer;\r\n    } else {\r\n      // writePLPBody\r\n      return UNKNOWN_PLP_LEN;\r\n    }\r\n  },\r\n\r\n  *generateParameterData(parameter, options) {\r\n    if (parameter.value == null) {\r\n      return;\r\n    }\r\n\r\n    let value = parameter.value;\r\n\r\n    if (parameter.length <= this.maximumLength) {\r\n      if (Buffer.isBuffer(value)) {\r\n        yield value;\r\n      } else {\r\n        yield Buffer.from(value.toString(), 'ucs2');\r\n      }\r\n    } else {\r\n      // writePLPBody\r\n      if (!Buffer.isBuffer(value)) {\r\n        value = value.toString();\r\n      }\r\n\r\n      const length = Buffer.byteLength(value, 'ucs2');\r\n\r\n      if (length > 0) {\r\n        const buffer = Buffer.alloc(4);\r\n        buffer.writeUInt32LE(length, 0);\r\n        yield buffer;\r\n\r\n        if (Buffer.isBuffer(value)) {\r\n          yield value;\r\n        } else {\r\n          yield Buffer.from(value, 'ucs2');\r\n        }\r\n      }\r\n\r\n      yield PLP_TERMINATOR;\r\n    }\r\n  },\r\n\r\n  validate: function (value) {\r\n    if (value == null) {\r\n      return null;\r\n    }\r\n\r\n    if (!Buffer.isBuffer(value)) {\r\n      throw new TypeError('Invalid buffer.');\r\n    }\r\n\r\n    return value;\r\n  }\r\n};\r\nvar _default = VarBinary;\r\nexports.default = _default;\r\nmodule.exports = VarBinary;"]},"metadata":{},"sourceType":"script"}
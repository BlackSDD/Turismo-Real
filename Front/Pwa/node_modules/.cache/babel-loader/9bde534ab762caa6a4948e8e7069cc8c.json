{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF]);\nconst Text = {\n  id: 0x23,\n  type: 'TEXT',\n  name: 'Text',\n  hasTableName: true,\n  declaration: function () {\n    return 'text';\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return -1;\n    }\n  },\n\n  generateTypeInfo(parameter, _options) {\n    const buffer = Buffer.alloc(10);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeInt32LE(parameter.length, 1); // TODO: Collation handling\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32LE(parameter.value.length, 0);\n    return buffer;\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield Buffer.from(parameter.value.toString(), 'ascii');\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        throw new TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = Text;\nexports.default = _default;\nmodule.exports = Text;","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/node_modules/tedious/lib/data-types/text.js"],"names":["Object","defineProperty","exports","value","default","NULL_LENGTH","Buffer","from","Text","id","type","name","hasTableName","declaration","resolveLength","parameter","length","generateTypeInfo","_options","buffer","alloc","writeUInt8","writeInt32LE","generateParameterLength","options","generateParameterData","toString","validate","TypeError","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAZ,CAApB;AACA,MAAMC,IAAI,GAAG;AACXC,EAAAA,EAAE,EAAE,IADO;AAEXC,EAAAA,IAAI,EAAE,MAFK;AAGXC,EAAAA,IAAI,EAAE,MAHK;AAIXC,EAAAA,YAAY,EAAE,IAJH;AAKXC,EAAAA,WAAW,EAAE,YAAY;AACvB,WAAO,MAAP;AACD,GAPU;AAQXC,EAAAA,aAAa,EAAE,UAAUC,SAAV,EAAqB;AAClC,UAAMZ,KAAK,GAAGY,SAAS,CAACZ,KAAxB,CADkC,CACH;;AAE/B,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAOA,KAAK,CAACa,MAAb;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GAhBU;;AAkBXC,EAAAA,gBAAgB,CAACF,SAAD,EAAYG,QAAZ,EAAsB;AACpC,UAAMC,MAAM,GAAGb,MAAM,CAACc,KAAP,CAAa,EAAb,CAAf;AACAD,IAAAA,MAAM,CAACE,UAAP,CAAkB,KAAKZ,EAAvB,EAA2B,CAA3B;AACAU,IAAAA,MAAM,CAACG,YAAP,CAAoBP,SAAS,CAACC,MAA9B,EAAsC,CAAtC,EAHoC,CAGM;;AAE1C,WAAOG,MAAP;AACD,GAxBU;;AA0BXI,EAAAA,uBAAuB,CAACR,SAAD,EAAYS,OAAZ,EAAqB;AAC1C,QAAIT,SAAS,CAACZ,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,aAAOE,WAAP;AACD;;AAED,UAAMc,MAAM,GAAGb,MAAM,CAACc,KAAP,CAAa,CAAb,CAAf;AACAD,IAAAA,MAAM,CAACG,YAAP,CAAoBP,SAAS,CAACZ,KAAV,CAAgBa,MAApC,EAA4C,CAA5C;AACA,WAAOG,MAAP;AACD,GAlCU;;AAoCXM,EAAAA,qBAAqB,EAAE,WAAWV,SAAX,EAAsBS,OAAtB,EAA+B;AACpD,QAAIT,SAAS,CAACZ,KAAV,IAAmB,IAAvB,EAA6B;AAC3B;AACD;;AAED,UAAMG,MAAM,CAACC,IAAP,CAAYQ,SAAS,CAACZ,KAAV,CAAgBuB,QAAhB,EAAZ,EAAwC,OAAxC,CAAN;AACD,GA1CU;AA2CXC,EAAAA,QAAQ,EAAE,UAAUxB,KAAV,EAAiB;AACzB,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAI,OAAOA,KAAK,CAACuB,QAAb,KAA0B,UAA9B,EAA0C;AACxC,cAAM,IAAIE,SAAJ,CAAc,iBAAd,CAAN;AACD;;AAEDzB,MAAAA,KAAK,GAAGA,KAAK,CAACuB,QAAN,EAAR;AACD;;AAED,WAAOvB,KAAP;AACD;AAzDU,CAAb;AA2DA,IAAI0B,QAAQ,GAAGrB,IAAf;AACAN,OAAO,CAACE,OAAR,GAAkByB,QAAlB;AACAC,MAAM,CAAC5B,OAAP,GAAiBM,IAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF]);\nconst Text = {\n  id: 0x23,\n  type: 'TEXT',\n  name: 'Text',\n  hasTableName: true,\n  declaration: function () {\n    return 'text';\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return -1;\n    }\n  },\n\n  generateTypeInfo(parameter, _options) {\n    const buffer = Buffer.alloc(10);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeInt32LE(parameter.length, 1); // TODO: Collation handling\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32LE(parameter.value.length, 0);\n    return buffer;\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield Buffer.from(parameter.value.toString(), 'ascii');\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        throw new TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = Text;\nexports.default = _default;\nmodule.exports = Text;"]},"metadata":{},"sourceType":"script"}
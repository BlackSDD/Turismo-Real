{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar CollectionMode;\n\n(function (CollectionMode) {\n  CollectionMode[CollectionMode[\"key\"] = 0] = \"key\";\n  CollectionMode[CollectionMode[\"value\"] = 1] = \"value\";\n})(CollectionMode || (CollectionMode = {}));\n\nconst CONFIG = Object.freeze({\n  key: {\n    terminator: '=',\n    quotes: {}\n  },\n  value: {\n    terminator: ';',\n    quotes: {\n      '\"': '\"',\n      \"'\": \"'\",\n      '{': '}'\n    }\n  }\n});\n\nfunction connectionStringParser(connectionString, parserConfig = CONFIG) {\n  const parsed = {};\n  let collectionMode = CollectionMode.key;\n  let started = false;\n  let finished = false;\n  let quoted = false;\n  let quote = '';\n  let buffer = '';\n  let currentKey = '';\n  let pointer = 0;\n\n  function start() {\n    started = true;\n  }\n\n  function finish() {\n    finished = true;\n  }\n\n  function reset() {\n    started = false;\n    finished = false;\n    quoted = false;\n    quote = '';\n    buffer = '';\n  }\n\n  function config() {\n    return collectionMode === CollectionMode.key ? parserConfig.key : parserConfig.value;\n  }\n\n  function isTerminator(char) {\n    return config().terminator === char;\n  }\n\n  function isStartQuote(char) {\n    return Object.keys(config().quotes).some(val => char === val);\n  }\n\n  function isEndQuote(char) {\n    return quoted && char === config().quotes[quote];\n  }\n\n  function push(char) {\n    buffer += char;\n  }\n\n  function collect() {\n    if (!quoted) {\n      buffer = buffer.trim();\n    }\n\n    switch (collectionMode) {\n      case CollectionMode.key:\n        currentKey = buffer.toLowerCase();\n        collectionMode = CollectionMode.value;\n        break;\n\n      case CollectionMode.value:\n        collectionMode = CollectionMode.key;\n        parsed[currentKey] = buffer;\n        currentKey = '';\n        break;\n    }\n\n    reset();\n  }\n\n  while (pointer < connectionString.length) {\n    const current = connectionString.charAt(pointer);\n\n    if (!finished) {\n      if (!started) {\n        if (current.trim()) {\n          start();\n\n          if (isStartQuote(current)) {\n            quoted = true;\n            quote = current;\n          } else {\n            push(current);\n          }\n        }\n      } else {\n        if (quoted && isEndQuote(current)) {\n          const next = connectionString.charAt(pointer + 1);\n\n          if (current === next) {\n            push(current);\n            pointer++;\n          } else {\n            finish();\n          }\n        } else if (!quoted && isTerminator(current)) {\n          const next = connectionString.charAt(pointer + 1);\n\n          if (current === next) {\n            push(current);\n            pointer++;\n          } else {\n            collect();\n          }\n        } else {\n          push(current);\n        }\n      }\n    } else if (isTerminator(current)) {\n      collect();\n    } else if (current.trim()) {\n      throw new Error('Malformed connection string');\n    }\n\n    pointer++;\n  }\n\n  if (quoted && !finished) {\n    throw new Error('Connection string terminated unexpectedly');\n  } else {\n    collect();\n  }\n\n  return parsed;\n}\n\nexports.default = connectionStringParser;","map":{"version":3,"sources":["B:/Duoc/Portafolio_de_titulo/Git/Turismo-Real/Front/Pwa/node_modules/@tediousjs/connection-string/lib/parser/connection-string.js"],"names":["Object","defineProperty","exports","value","CollectionMode","CONFIG","freeze","key","terminator","quotes","connectionStringParser","connectionString","parserConfig","parsed","collectionMode","started","finished","quoted","quote","buffer","currentKey","pointer","start","finish","reset","config","isTerminator","char","isStartQuote","keys","some","val","isEndQuote","push","collect","trim","toLowerCase","length","current","charAt","next","Error","default"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CollectionMode;\r\n(function (CollectionMode) {\r\n    CollectionMode[CollectionMode[\"key\"] = 0] = \"key\";\r\n    CollectionMode[CollectionMode[\"value\"] = 1] = \"value\";\r\n})(CollectionMode || (CollectionMode = {}));\r\nconst CONFIG = Object.freeze({\r\n    key: {\r\n        terminator: '=',\r\n        quotes: {},\r\n    },\r\n    value: {\r\n        terminator: ';',\r\n        quotes: {\r\n            '\"': '\"',\r\n            \"'\": \"'\",\r\n            '{': '}',\r\n        },\r\n    },\r\n});\r\nfunction connectionStringParser(connectionString, parserConfig = CONFIG) {\r\n    const parsed = {};\r\n    let collectionMode = CollectionMode.key;\r\n    let started = false;\r\n    let finished = false;\r\n    let quoted = false;\r\n    let quote = '';\r\n    let buffer = '';\r\n    let currentKey = '';\r\n    let pointer = 0;\r\n    function start() {\r\n        started = true;\r\n    }\r\n    function finish() {\r\n        finished = true;\r\n    }\r\n    function reset() {\r\n        started = false;\r\n        finished = false;\r\n        quoted = false;\r\n        quote = '';\r\n        buffer = '';\r\n    }\r\n    function config() {\r\n        return collectionMode === CollectionMode.key ? parserConfig.key : parserConfig.value;\r\n    }\r\n    function isTerminator(char) {\r\n        return config().terminator === char;\r\n    }\r\n    function isStartQuote(char) {\r\n        return Object.keys(config().quotes).some((val) => char === val);\r\n    }\r\n    function isEndQuote(char) {\r\n        return quoted && char === config().quotes[quote];\r\n    }\r\n    function push(char) {\r\n        buffer += char;\r\n    }\r\n    function collect() {\r\n        if (!quoted) {\r\n            buffer = buffer.trim();\r\n        }\r\n        switch (collectionMode) {\r\n            case CollectionMode.key:\r\n                currentKey = buffer.toLowerCase();\r\n                collectionMode = CollectionMode.value;\r\n                break;\r\n            case CollectionMode.value:\r\n                collectionMode = CollectionMode.key;\r\n                parsed[currentKey] = buffer;\r\n                currentKey = '';\r\n                break;\r\n        }\r\n        reset();\r\n    }\r\n    while (pointer < connectionString.length) {\r\n        const current = connectionString.charAt(pointer);\r\n        if (!finished) {\r\n            if (!started) {\r\n                if (current.trim()) {\r\n                    start();\r\n                    if (isStartQuote(current)) {\r\n                        quoted = true;\r\n                        quote = current;\r\n                    }\r\n                    else {\r\n                        push(current);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (quoted && isEndQuote(current)) {\r\n                    const next = connectionString.charAt(pointer + 1);\r\n                    if (current === next) {\r\n                        push(current);\r\n                        pointer++;\r\n                    }\r\n                    else {\r\n                        finish();\r\n                    }\r\n                }\r\n                else if (!quoted && isTerminator(current)) {\r\n                    const next = connectionString.charAt(pointer + 1);\r\n                    if (current === next) {\r\n                        push(current);\r\n                        pointer++;\r\n                    }\r\n                    else {\r\n                        collect();\r\n                    }\r\n                }\r\n                else {\r\n                    push(current);\r\n                }\r\n            }\r\n        }\r\n        else if (isTerminator(current)) {\r\n            collect();\r\n        }\r\n        else if (current.trim()) {\r\n            throw new Error('Malformed connection string');\r\n        }\r\n        pointer++;\r\n    }\r\n    if (quoted && !finished) {\r\n        throw new Error('Connection string terminated unexpectedly');\r\n    }\r\n    else {\r\n        collect();\r\n    }\r\n    return parsed;\r\n}\r\nexports.default = connectionStringParser;\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar debug = require('debug')('mssql:base');\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar _require2 = require('stream'),\n    Readable = _require2.Readable;\n\nvar _require3 = require('../utils'),\n    IDS = _require3.IDS,\n    objectHasProperty = _require3.objectHasProperty;\n\nvar globalConnection = require('../global-connection');\n\nvar _require4 = require('../error'),\n    RequestError = _require4.RequestError,\n    ConnectionError = _require4.ConnectionError;\n\nvar _require5 = require('../datatypes'),\n    TYPES = _require5.TYPES;\n\nvar shared = require('../shared');\n/**\r\n * Class Request.\r\n *\r\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\r\n * @property {*} parameters Collection of input and output parameters.\r\n * @property {Boolean} canceled `true` if request was canceled.\r\n *\r\n * @fires Request#recordset\r\n * @fires Request#row\r\n * @fires Request#done\r\n * @fires Request#error\r\n */\n\n\nvar Request = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Request, _EventEmitter);\n\n  var _super = _createSuper(Request);\n\n  /**\r\n   * Create new Request.\r\n   *\r\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\r\n   */\n  function Request(parent) {\n    var _this;\n\n    _classCallCheck(this, Request);\n\n    _this = _super.call(this);\n    IDS.add(_assertThisInitialized(_this), 'Request');\n    debug('request(%d): created', IDS.get(_assertThisInitialized(_this)));\n    _this.canceled = false;\n    _this._paused = false;\n    _this.parent = parent || globalConnection.pool;\n    _this.parameters = {};\n    _this.stream = null;\n    _this.arrayRowMode = null;\n    return _this;\n  }\n\n  _createClass(Request, [{\n    key: \"paused\",\n    get: function get() {\n      return this._paused;\n    }\n    /**\r\n     * Generate sql string and set imput parameters from tagged template string.\r\n     *\r\n     * @param {Template literal} template\r\n     * @return {String}\r\n     */\n\n  }, {\n    key: \"template\",\n    value: function template() {\n      var values = Array.prototype.slice.call(arguments);\n      var strings = values.shift();\n      return this._template(strings, values);\n    }\n    /**\r\n     * Fetch request from tagged template string.\r\n     *\r\n     * @private\r\n     * @param {Array} strings\r\n     * @param {Array} values\r\n     * @param {String} [method] If provided, method is automatically called with serialized command on this object.\r\n     * @return {Request}\r\n     */\n\n  }, {\n    key: \"_template\",\n    value: function _template(strings, values, method) {\n      var command = [strings[0]];\n\n      for (var index = 0; index < values.length; index++) {\n        var value = values[index]; // if value is an array, prepare each items as it's own comma separated parameter\n\n        if (Array.isArray(value)) {\n          for (var parameterIndex = 0; parameterIndex < value.length; parameterIndex++) {\n            this.input(\"param\".concat(index + 1, \"_\").concat(parameterIndex), value[parameterIndex]);\n            command.push(\"@param\".concat(index + 1, \"_\").concat(parameterIndex));\n\n            if (parameterIndex < value.length - 1) {\n              command.push(', ');\n            }\n          }\n\n          command.push(strings[index + 1]);\n        } else {\n          this.input(\"param\".concat(index + 1), value);\n          command.push(\"@param\".concat(index + 1), strings[index + 1]);\n        }\n      }\n\n      if (method) {\n        return this[method](command.join(''));\n      } else {\n        return command.join('');\n      }\n    }\n    /**\r\n     * Add an input parameter to the request.\r\n     *\r\n     * @param {String} name Name of the input parameter without @ char.\r\n     * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n     * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n     * @return {Request}\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(name, type, value) {\n      if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n        throw new RequestError(\"SQL injection warning for param '\".concat(name, \"'\"), 'EINJECT');\n      }\n\n      if (arguments.length < 2) {\n        throw new RequestError('Invalid number of arguments. At least 2 arguments expected.', 'EARGS');\n      } else if (arguments.length === 2) {\n        value = type;\n        type = shared.getTypeByValue(value);\n      } // support for custom data types\n\n\n      if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf();\n      if (value === undefined) value = null; // undefined to null\n\n      if (typeof value === 'number' && isNaN(value)) value = null; // NaN to null\n\n      if (type instanceof Function) type = type();\n\n      if (objectHasProperty(this.parameters, name)) {\n        throw new RequestError(\"The parameter name \".concat(name, \" has already been declared. Parameter names must be unique\"), 'EDUPEPARAM');\n      }\n\n      this.parameters[name] = {\n        name: name,\n        type: type.type,\n        io: 1,\n        value: value,\n        length: type.length,\n        scale: type.scale,\n        precision: type.precision,\n        tvpType: type.tvpType\n      };\n      return this;\n    }\n    /**\r\n     * Replace an input parameter on the request.\r\n     *\r\n     * @param {String} name Name of the input parameter without @ char.\r\n     * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n     * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n     * @return {Request}\r\n     */\n\n  }, {\n    key: \"replaceInput\",\n    value: function replaceInput(name, type, value) {\n      delete this.parameters[name];\n      return this.input(name, type, value);\n    }\n    /**\r\n     * Add an output parameter to the request.\r\n     *\r\n     * @param {String} name Name of the output parameter without @ char.\r\n     * @param {*} type SQL data type of output parameter.\r\n     * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\r\n     * @return {Request}\r\n     */\n\n  }, {\n    key: \"output\",\n    value: function output(name, type, value) {\n      if (!type) {\n        type = TYPES.NVarChar;\n      }\n\n      if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n        throw new RequestError(\"SQL injection warning for param '\".concat(name, \"'\"), 'EINJECT');\n      }\n\n      if (type === TYPES.Text || type === TYPES.NText || type === TYPES.Image) {\n        throw new RequestError('Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.', 'EDEPRECATED');\n      } // support for custom data types\n\n\n      if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf();\n      if (value === undefined) value = null; // undefined to null\n\n      if (typeof value === 'number' && isNaN(value)) value = null; // NaN to null\n\n      if (type instanceof Function) type = type();\n\n      if (objectHasProperty(this.parameters, name)) {\n        throw new RequestError(\"The parameter name \".concat(name, \" has already been declared. Parameter names must be unique\"), 'EDUPEPARAM');\n      }\n\n      this.parameters[name] = {\n        name: name,\n        type: type.type,\n        io: 2,\n        value: value,\n        length: type.length,\n        scale: type.scale,\n        precision: type.precision\n      };\n      return this;\n    }\n    /**\r\n     * Replace an output parameter on the request.\r\n     *\r\n     * @param {String} name Name of the output parameter without @ char.\r\n     * @param {*} type SQL data type of output parameter.\r\n     * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\r\n     * @return {Request}\r\n     */\n\n  }, {\n    key: \"replaceOutput\",\n    value: function replaceOutput(name, type, value) {\n      delete this.parameters[name];\n      return this.output(name, type, value);\n    }\n    /**\r\n     * Execute the SQL batch.\r\n     *\r\n     * @param {String} batch T-SQL batch to be executed.\r\n     * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Request|Promise}\r\n     */\n\n  }, {\n    key: \"batch\",\n    value: function batch(_batch, callback) {\n      var _this2 = this;\n\n      if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n      if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n      this.rowsAffected = 0;\n\n      if (typeof callback === 'function') {\n        this._batch(_batch, function (err, recordsets, output, rowsAffected) {\n          if (_this2.stream) {\n            if (err) _this2.emit('error', err);\n            err = null;\n\n            _this2.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected\n            });\n          }\n\n          if (err) return callback(err);\n          callback(null, {\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected\n          });\n        });\n\n        return this;\n      } // Check is method was called as tagged template\n\n\n      if (typeof _batch === 'object') {\n        var values = Array.prototype.slice.call(arguments);\n        var strings = values.shift();\n        _batch = this._template(strings, values);\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this2._batch(_batch, function (err, recordsets, output, rowsAffected) {\n          if (_this2.stream) {\n            if (err) _this2.emit('error', err);\n            err = null;\n\n            _this2.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected\n            });\n          }\n\n          if (err) return reject(err);\n          resolve({\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected\n          });\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {String} batch\r\n     * @param {Request~requestCallback} callback\r\n     */\n\n  }, {\n    key: \"_batch\",\n    value: function _batch(batch, callback) {\n      if (!this.parent) {\n        return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n      }\n\n      if (!this.parent.connected) {\n        return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n      }\n\n      this.canceled = false;\n      setImmediate(callback);\n    }\n    /**\r\n     * Bulk load.\r\n     *\r\n     * @param {Table} table SQL table.\r\n     * @param {object} [options] Options to be passed to the underlying driver (tedious only).\r\n     * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Request|Promise}\r\n     */\n\n  }, {\n    key: \"bulk\",\n    value: function bulk(table, options, callback) {\n      var _this3 = this;\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      } else if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n      if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n\n      if (this.stream || typeof callback === 'function') {\n        this._bulk(table, options, function (err, rowsAffected) {\n          if (_this3.stream) {\n            if (err) _this3.emit('error', err);\n            return _this3.emit('done', {\n              rowsAffected: rowsAffected\n            });\n          }\n\n          if (err) return callback(err);\n          callback(null, {\n            rowsAffected: rowsAffected\n          });\n        });\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this3._bulk(table, options, function (err, rowsAffected) {\n          if (err) return reject(err);\n          resolve({\n            rowsAffected: rowsAffected\n          });\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {Table} table\r\n     * @param {object} options\r\n     * @param {Request~bulkCallback} callback\r\n     */\n\n  }, {\n    key: \"_bulk\",\n    value: function _bulk(table, options, callback) {\n      if (!this.parent) {\n        return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n      }\n\n      if (!this.parent.connected) {\n        return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n      }\n\n      this.canceled = false;\n      setImmediate(callback);\n    }\n    /**\r\n     * Wrap original request in a Readable stream that supports back pressure and return.\r\n     * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\r\n     *\r\n     * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\r\n     * @return {Stream}\r\n     */\n\n  }, {\n    key: \"toReadableStream\",\n    value: function toReadableStream() {\n      var _this4 = this;\n\n      var streamOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.stream = true;\n      this.pause();\n      var readableStream = new Readable(_objectSpread(_objectSpread({}, streamOptions), {}, {\n        objectMode: true,\n        read: function read()\n        /* size */\n        {\n          _this4.resume();\n        }\n      }));\n      this.on('row', function (row) {\n        if (!readableStream.push(row)) {\n          _this4.pause();\n        }\n      });\n      this.on('error', function (error) {\n        readableStream.emit('error', error);\n      });\n      this.on('done', function () {\n        readableStream.push(null);\n      });\n      return readableStream;\n    }\n    /**\r\n     * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\r\n     * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\r\n     *\r\n     * @param {Stream} stream Stream to pipe data into.\r\n     * @return {Stream}\r\n     */\n\n  }, {\n    key: \"pipe\",\n    value: function pipe(writableStream) {\n      var readableStream = this.toReadableStream();\n      return readableStream.pipe(writableStream);\n    }\n    /**\r\n     * Execute the SQL command.\r\n     *\r\n     * @param {String} command T-SQL command to be executed.\r\n     * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Request|Promise}\r\n     */\n\n  }, {\n    key: \"query\",\n    value: function query(command, callback) {\n      var _this5 = this;\n\n      if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n      if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n      this.rowsAffected = 0;\n\n      if (typeof callback === 'function') {\n        this._query(command, function (err, recordsets, output, rowsAffected, columns) {\n          if (_this5.stream) {\n            if (err) _this5.emit('error', err);\n            err = null;\n\n            _this5.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected\n            });\n          }\n\n          if (err) return callback(err);\n          var result = {\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected\n          };\n          if (_this5.arrayRowMode) result.columns = columns;\n          callback(null, result);\n        });\n\n        return this;\n      } // Check is method was called as tagged template\n\n\n      if (typeof command === 'object') {\n        var values = Array.prototype.slice.call(arguments);\n        var strings = values.shift();\n        command = this._template(strings, values);\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this5._query(command, function (err, recordsets, output, rowsAffected, columns) {\n          if (_this5.stream) {\n            if (err) _this5.emit('error', err);\n            err = null;\n\n            _this5.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected\n            });\n          }\n\n          if (err) return reject(err);\n          var result = {\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected\n          };\n          if (_this5.arrayRowMode) result.columns = columns;\n          resolve(result);\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {String} command\r\n     * @param {Request~bulkCallback} callback\r\n     */\n\n  }, {\n    key: \"_query\",\n    value: function _query(command, callback) {\n      if (!this.parent) {\n        return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n      }\n\n      if (!this.parent.connected) {\n        return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n      }\n\n      this.canceled = false;\n      setImmediate(callback);\n    }\n    /**\r\n     * Call a stored procedure.\r\n     *\r\n     * @param {String} procedure Name of the stored procedure to be executed.\r\n     * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Request|Promise}\r\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(command, callback) {\n      var _this6 = this;\n\n      if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n      if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n      this.rowsAffected = 0;\n\n      if (typeof callback === 'function') {\n        this._execute(command, function (err, recordsets, output, returnValue, rowsAffected, columns) {\n          if (_this6.stream) {\n            if (err) _this6.emit('error', err);\n            err = null;\n\n            _this6.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected,\n              returnValue: returnValue\n            });\n          }\n\n          if (err) return callback(err);\n          var result = {\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected,\n            returnValue: returnValue\n          };\n          if (_this6.arrayRowMode) result.columns = columns;\n          callback(null, result);\n        });\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this6._execute(command, function (err, recordsets, output, returnValue, rowsAffected, columns) {\n          if (_this6.stream) {\n            if (err) _this6.emit('error', err);\n            err = null;\n\n            _this6.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected,\n              returnValue: returnValue\n            });\n          }\n\n          if (err) return reject(err);\n          var result = {\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected,\n            returnValue: returnValue\n          };\n          if (_this6.arrayRowMode) result.columns = columns;\n          resolve(result);\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {String} procedure\r\n     * @param {Request~bulkCallback} callback\r\n     */\n\n  }, {\n    key: \"_execute\",\n    value: function _execute(procedure, callback) {\n      if (!this.parent) {\n        return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n      }\n\n      if (!this.parent.connected) {\n        return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n      }\n\n      this.canceled = false;\n      setImmediate(callback);\n    }\n    /**\r\n     * Cancel currently executed request.\r\n     *\r\n     * @return {Boolean}\r\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this._cancel();\n\n      return true;\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_cancel\",\n    value: function _cancel() {\n      this.canceled = true;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.stream) {\n        this._pause();\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_pause\",\n    value: function _pause() {\n      this._paused = true;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (this.stream) {\n        this._resume();\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_resume\",\n    value: function _resume() {\n      this._paused = false;\n    }\n  }, {\n    key: \"_setCurrentRequest\",\n    value: function _setCurrentRequest(request) {\n      this._currentRequest = request;\n\n      if (this._paused) {\n        this.pause();\n      }\n\n      return this;\n    }\n  }]);\n\n  return Request;\n}(EventEmitter);\n\nmodule.exports = Request;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/lib/base/request.js"],"names":["debug","require","EventEmitter","Readable","IDS","objectHasProperty","globalConnection","RequestError","ConnectionError","TYPES","shared","Request","parent","add","get","canceled","_paused","pool","parameters","stream","arrayRowMode","values","Array","prototype","slice","call","arguments","strings","shift","_template","method","command","index","length","value","isArray","parameterIndex","input","push","join","name","type","test","getTypeByValue","valueOf","Date","undefined","isNaN","Function","io","scale","precision","tvpType","NVarChar","Text","NText","Image","output","batch","callback","config","rowsAffected","_batch","err","recordsets","emit","recordset","Promise","resolve","reject","setImmediate","connected","table","options","_bulk","streamOptions","pause","readableStream","objectMode","read","resume","on","row","error","writableStream","toReadableStream","pipe","_query","columns","result","_execute","returnValue","procedure","_cancel","_pause","_resume","request","_currentRequest","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst debug = require('debug')('mssql:base')\r\nconst { EventEmitter } = require('events')\r\nconst { Readable } = require('stream')\r\nconst { IDS, objectHasProperty } = require('../utils')\r\nconst globalConnection = require('../global-connection')\r\nconst { RequestError, ConnectionError } = require('../error')\r\nconst { TYPES } = require('../datatypes')\r\nconst shared = require('../shared')\r\n\r\n/**\r\n * Class Request.\r\n *\r\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\r\n * @property {*} parameters Collection of input and output parameters.\r\n * @property {Boolean} canceled `true` if request was canceled.\r\n *\r\n * @fires Request#recordset\r\n * @fires Request#row\r\n * @fires Request#done\r\n * @fires Request#error\r\n */\r\n\r\nclass Request extends EventEmitter {\r\n  /**\r\n   * Create new Request.\r\n   *\r\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\r\n   */\r\n\r\n  constructor (parent) {\r\n    super()\r\n\r\n    IDS.add(this, 'Request')\r\n    debug('request(%d): created', IDS.get(this))\r\n\r\n    this.canceled = false\r\n    this._paused = false\r\n    this.parent = parent || globalConnection.pool\r\n    this.parameters = {}\r\n    this.stream = null\r\n    this.arrayRowMode = null\r\n  }\r\n\r\n  get paused () {\r\n    return this._paused\r\n  }\r\n\r\n  /**\r\n   * Generate sql string and set imput parameters from tagged template string.\r\n   *\r\n   * @param {Template literal} template\r\n   * @return {String}\r\n   */\r\n  template () {\r\n    const values = Array.prototype.slice.call(arguments)\r\n    const strings = values.shift()\r\n    return this._template(strings, values)\r\n  }\r\n\r\n  /**\r\n   * Fetch request from tagged template string.\r\n   *\r\n   * @private\r\n   * @param {Array} strings\r\n   * @param {Array} values\r\n   * @param {String} [method] If provided, method is automatically called with serialized command on this object.\r\n   * @return {Request}\r\n   */\r\n\r\n  _template (strings, values, method) {\r\n    const command = [strings[0]]\r\n\r\n    for (let index = 0; index < values.length; index++) {\r\n      const value = values[index]\r\n      // if value is an array, prepare each items as it's own comma separated parameter\r\n      if (Array.isArray(value)) {\r\n        for (let parameterIndex = 0; parameterIndex < value.length; parameterIndex++) {\r\n          this.input(`param${index + 1}_${parameterIndex}`, value[parameterIndex])\r\n          command.push(`@param${index + 1}_${parameterIndex}`)\r\n          if (parameterIndex < value.length - 1) {\r\n            command.push(', ')\r\n          }\r\n        }\r\n        command.push(strings[index + 1])\r\n      } else {\r\n        this.input(`param${index + 1}`, value)\r\n        command.push(`@param${index + 1}`, strings[index + 1])\r\n      }\r\n    }\r\n\r\n    if (method) {\r\n      return this[method](command.join(''))\r\n    } else {\r\n      return command.join('')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add an input parameter to the request.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n   * @return {Request}\r\n   */\r\n\r\n  input (name, type, value) {\r\n    if ((/(--| |\\/\\*|\\*\\/|')/).test(name)) {\r\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\r\n    }\r\n\r\n    if (arguments.length < 2) {\r\n      throw new RequestError('Invalid number of arguments. At least 2 arguments expected.', 'EARGS')\r\n    } else if (arguments.length === 2) {\r\n      value = type\r\n      type = shared.getTypeByValue(value)\r\n    }\r\n\r\n    // support for custom data types\r\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\r\n\r\n    if (value === undefined) value = null // undefined to null\r\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\r\n    if (type instanceof Function) type = type()\r\n\r\n    if (objectHasProperty(this.parameters, name)) {\r\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\r\n    }\r\n\r\n    this.parameters[name] = {\r\n      name,\r\n      type: type.type,\r\n      io: 1,\r\n      value,\r\n      length: type.length,\r\n      scale: type.scale,\r\n      precision: type.precision,\r\n      tvpType: type.tvpType\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Replace an input parameter on the request.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n   * @return {Request}\r\n   */\r\n\r\n  replaceInput (name, type, value) {\r\n    delete this.parameters[name]\r\n\r\n    return this.input(name, type, value)\r\n  }\r\n\r\n  /**\r\n   * Add an output parameter to the request.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\r\n   * @return {Request}\r\n   */\r\n\r\n  output (name, type, value) {\r\n    if (!type) { type = TYPES.NVarChar }\r\n\r\n    if ((/(--| |\\/\\*|\\*\\/|')/).test(name)) {\r\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\r\n    }\r\n\r\n    if ((type === TYPES.Text) || (type === TYPES.NText) || (type === TYPES.Image)) {\r\n      throw new RequestError('Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.', 'EDEPRECATED')\r\n    }\r\n\r\n    // support for custom data types\r\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\r\n\r\n    if (value === undefined) value = null // undefined to null\r\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\r\n    if (type instanceof Function) type = type()\r\n\r\n    if (objectHasProperty(this.parameters, name)) {\r\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\r\n    }\r\n\r\n    this.parameters[name] = {\r\n      name,\r\n      type: type.type,\r\n      io: 2,\r\n      value,\r\n      length: type.length,\r\n      scale: type.scale,\r\n      precision: type.precision\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Replace an output parameter on the request.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\r\n   * @return {Request}\r\n   */\r\n\r\n  replaceOutput (name, type, value) {\r\n    delete this.parameters[name]\r\n\r\n    return this.output(name, type, value)\r\n  }\r\n\r\n  /**\r\n   * Execute the SQL batch.\r\n   *\r\n   * @param {String} batch T-SQL batch to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  batch (batch, callback) {\r\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\r\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\r\n    this.rowsAffected = 0\r\n\r\n    if (typeof callback === 'function') {\r\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected\r\n          })\r\n        }\r\n\r\n        if (err) return callback(err)\r\n        callback(null, {\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected\r\n        })\r\n      })\r\n      return this\r\n    }\r\n\r\n    // Check is method was called as tagged template\r\n    if (typeof batch === 'object') {\r\n      const values = Array.prototype.slice.call(arguments)\r\n      const strings = values.shift()\r\n      batch = this._template(strings, values)\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected\r\n          })\r\n        }\r\n\r\n        if (err) return reject(err)\r\n        resolve({\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} batch\r\n   * @param {Request~requestCallback} callback\r\n   */\r\n\r\n  _batch (batch, callback) {\r\n    if (!this.parent) {\r\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\r\n    }\r\n\r\n    if (!this.parent.connected) {\r\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\r\n    }\r\n\r\n    this.canceled = false\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Bulk load.\r\n   *\r\n   * @param {Table} table SQL table.\r\n   * @param {object} [options] Options to be passed to the underlying driver (tedious only).\r\n   * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  bulk (table, options, callback) {\r\n    if (typeof options === 'function') {\r\n      callback = options\r\n      options = {}\r\n    } else if (typeof options === 'undefined') {\r\n      options = {}\r\n    }\r\n\r\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\r\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\r\n\r\n    if (this.stream || typeof callback === 'function') {\r\n      this._bulk(table, options, (err, rowsAffected) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          return this.emit('done', {\r\n            rowsAffected\r\n          })\r\n        }\r\n\r\n        if (err) return callback(err)\r\n        callback(null, {\r\n          rowsAffected\r\n        })\r\n      })\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._bulk(table, options, (err, rowsAffected) => {\r\n        if (err) return reject(err)\r\n        resolve({\r\n          rowsAffected\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Table} table\r\n   * @param {object} options\r\n   * @param {Request~bulkCallback} callback\r\n   */\r\n\r\n  _bulk (table, options, callback) {\r\n    if (!this.parent) {\r\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\r\n    }\r\n\r\n    if (!this.parent.connected) {\r\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\r\n    }\r\n\r\n    this.canceled = false\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Wrap original request in a Readable stream that supports back pressure and return.\r\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\r\n   *\r\n   * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\r\n   * @return {Stream}\r\n   */\r\n  toReadableStream (streamOptions = {}) {\r\n    this.stream = true\r\n    this.pause()\r\n    const readableStream = new Readable({\r\n      ...streamOptions,\r\n      objectMode: true,\r\n      read: (/* size */) => {\r\n        this.resume()\r\n      }\r\n    })\r\n    this.on('row', (row) => {\r\n      if (!readableStream.push(row)) {\r\n        this.pause()\r\n      }\r\n    })\r\n    this.on('error', (error) => {\r\n      readableStream.emit('error', error)\r\n    })\r\n    this.on('done', () => {\r\n      readableStream.push(null)\r\n    })\r\n    return readableStream\r\n  }\r\n\r\n  /**\r\n   * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\r\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\r\n   *\r\n   * @param {Stream} stream Stream to pipe data into.\r\n   * @return {Stream}\r\n   */\r\n  pipe (writableStream) {\r\n    const readableStream = this.toReadableStream()\r\n    return readableStream.pipe(writableStream)\r\n  }\r\n\r\n  /**\r\n   * Execute the SQL command.\r\n   *\r\n   * @param {String} command T-SQL command to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  query (command, callback) {\r\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\r\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\r\n    this.rowsAffected = 0\r\n\r\n    if (typeof callback === 'function') {\r\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected\r\n          })\r\n        }\r\n\r\n        if (err) return callback(err)\r\n        const result = {\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected\r\n        }\r\n        if (this.arrayRowMode) result.columns = columns\r\n        callback(null, result)\r\n      })\r\n      return this\r\n    }\r\n\r\n    // Check is method was called as tagged template\r\n    if (typeof command === 'object') {\r\n      const values = Array.prototype.slice.call(arguments)\r\n      const strings = values.shift()\r\n      command = this._template(strings, values)\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected\r\n          })\r\n        }\r\n\r\n        if (err) return reject(err)\r\n        const result = {\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected\r\n        }\r\n        if (this.arrayRowMode) result.columns = columns\r\n        resolve(result)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} command\r\n   * @param {Request~bulkCallback} callback\r\n   */\r\n\r\n  _query (command, callback) {\r\n    if (!this.parent) {\r\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\r\n    }\r\n\r\n    if (!this.parent.connected) {\r\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\r\n    }\r\n\r\n    this.canceled = false\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Call a stored procedure.\r\n   *\r\n   * @param {String} procedure Name of the stored procedure to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  execute (command, callback) {\r\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\r\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\r\n    this.rowsAffected = 0\r\n\r\n    if (typeof callback === 'function') {\r\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected,\r\n            returnValue\r\n          })\r\n        }\r\n\r\n        if (err) return callback(err)\r\n        const result = {\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected,\r\n          returnValue\r\n        }\r\n        if (this.arrayRowMode) result.columns = columns\r\n        callback(null, result)\r\n      })\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected,\r\n            returnValue\r\n          })\r\n        }\r\n\r\n        if (err) return reject(err)\r\n        const result = {\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected,\r\n          returnValue\r\n        }\r\n        if (this.arrayRowMode) result.columns = columns\r\n        resolve(result)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} procedure\r\n   * @param {Request~bulkCallback} callback\r\n   */\r\n\r\n  _execute (procedure, callback) {\r\n    if (!this.parent) {\r\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\r\n    }\r\n\r\n    if (!this.parent.connected) {\r\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\r\n    }\r\n\r\n    this.canceled = false\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Cancel currently executed request.\r\n   *\r\n   * @return {Boolean}\r\n   */\r\n\r\n  cancel () {\r\n    this._cancel()\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  _cancel () {\r\n    this.canceled = true\r\n  }\r\n\r\n  pause () {\r\n    if (this.stream) {\r\n      this._pause()\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  _pause () {\r\n    this._paused = true\r\n  }\r\n\r\n  resume () {\r\n    if (this.stream) {\r\n      this._resume()\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  _resume () {\r\n    this._paused = false\r\n  }\r\n\r\n  _setCurrentRequest (request) {\r\n    this._currentRequest = request\r\n    if (this._paused) {\r\n      this.pause()\r\n    }\r\n    return this\r\n  }\r\n}\r\n\r\nmodule.exports = Request\r\n"]},"metadata":{},"sourceType":"script"}
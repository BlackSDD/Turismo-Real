{"ast":null,"code":"'use strict';\n\nconst tds = require('tedious');\n\nconst debug = require('debug')('mssql:tedi');\n\nconst BaseConnectionPool = require('../base/connection-pool');\n\nconst {\n  IDS\n} = require('../utils');\n\nconst shared = require('../shared');\n\nconst ConnectionError = require('../error/connection-error');\n\nclass ConnectionPool extends BaseConnectionPool {\n  _poolCreate() {\n    return new shared.Promise((resolve, reject) => {\n      const resolveOnce = v => {\n        resolve(v);\n\n        resolve = reject = () => {};\n      };\n\n      const rejectOnce = e => {\n        reject(e);\n\n        resolve = reject = () => {};\n      };\n\n      const cfg = {\n        server: this.config.server,\n        options: Object.assign({\n          encrypt: typeof this.config.encrypt === 'boolean' ? this.config.encrypt : true,\n          trustServerCertificate: typeof this.config.trustServerCertificate === 'boolean' ? this.config.trustServerCertificate : false\n        }, this.config.options),\n        authentication: Object.assign({\n          type: this.config.domain !== undefined ? 'ntlm' : 'default',\n          options: {\n            userName: this.config.user,\n            password: this.config.password,\n            domain: this.config.domain\n          }\n        }, this.config.authentication)\n      };\n      cfg.options.database = this.config.database;\n      cfg.options.port = this.config.port;\n      cfg.options.connectTimeout = this.config.connectionTimeout || this.config.timeout || 15000;\n      cfg.options.requestTimeout = this.config.requestTimeout != null ? this.config.requestTimeout : 15000;\n      cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4';\n      cfg.options.rowCollectionOnDone = false;\n      cfg.options.rowCollectionOnRequestCompletion = false;\n      cfg.options.useColumnNames = false;\n      cfg.options.appName = cfg.options.appName || 'node-mssql'; // tedious always connect via tcp when port is specified\n\n      if (cfg.options.instanceName) delete cfg.options.port;\n      if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000;\n      if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0;\n      if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0;\n\n      if (this.config.debug) {\n        cfg.options.debug = {\n          packet: true,\n          token: true,\n          data: true,\n          payload: true\n        };\n      }\n\n      let tedious;\n\n      try {\n        tedious = new tds.Connection(cfg);\n      } catch (err) {\n        rejectOnce(err);\n        return;\n      }\n\n      tedious.connect(err => {\n        if (err) {\n          err = new ConnectionError(err);\n          return rejectOnce(err);\n        }\n\n        debug('connection(%d): established', IDS.get(tedious));\n        resolveOnce(tedious);\n      });\n      IDS.add(tedious, 'Connection');\n      debug('pool(%d): connection #%d created', IDS.get(this), IDS.get(tedious));\n      debug('connection(%d): establishing', IDS.get(tedious));\n      tedious.on('end', () => {\n        const err = new ConnectionError('The connection ended without ever completing the connection');\n        rejectOnce(err);\n      });\n      tedious.on('error', err => {\n        if (err.code === 'ESOCKET') {\n          tedious.hasError = true;\n        } else {\n          this.emit('error', err);\n        }\n\n        rejectOnce(err);\n      });\n\n      if (this.config.debug) {\n        tedious.on('debug', this.emit.bind(this, 'debug', tedious));\n      }\n\n      if (typeof this.config.beforeConnect === 'function') {\n        this.config.beforeConnect(tedious);\n      }\n    });\n  }\n\n  _poolValidate(tedious) {\n    if (tedious && !tedious.closed && !tedious.hasError) {\n      return !this.config.validateConnection || new shared.Promise(resolve => {\n        const req = new tds.Request('SELECT 1;', err => {\n          resolve(!err);\n        });\n        tedious.execSql(req);\n      });\n    }\n\n    return false;\n  }\n\n  _poolDestroy(tedious) {\n    return new shared.Promise((resolve, reject) => {\n      if (!tedious) {\n        resolve();\n        return;\n      }\n\n      debug('connection(%d): destroying', IDS.get(tedious));\n\n      if (tedious.closed) {\n        debug('connection(%d): already closed', IDS.get(tedious));\n        resolve();\n      } else {\n        tedious.once('end', () => {\n          debug('connection(%d): destroyed', IDS.get(tedious));\n          resolve();\n        });\n        tedious.close();\n      }\n    });\n  }\n\n}\n\nmodule.exports = ConnectionPool;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/lib/tedious/connection-pool.js"],"names":["tds","require","debug","BaseConnectionPool","IDS","shared","ConnectionError","ConnectionPool","_poolCreate","Promise","resolve","reject","resolveOnce","v","rejectOnce","e","cfg","server","config","options","Object","assign","encrypt","trustServerCertificate","authentication","type","domain","undefined","userName","user","password","database","port","connectTimeout","connectionTimeout","timeout","requestTimeout","tdsVersion","rowCollectionOnDone","rowCollectionOnRequestCompletion","useColumnNames","appName","instanceName","isNaN","Infinity","packet","token","data","payload","tedious","Connection","err","connect","get","add","on","code","hasError","emit","bind","beforeConnect","_poolValidate","closed","validateConnection","req","Request","execSql","_poolDestroy","once","close","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst tds = require('tedious')\r\nconst debug = require('debug')('mssql:tedi')\r\nconst BaseConnectionPool = require('../base/connection-pool')\r\nconst { IDS } = require('../utils')\r\nconst shared = require('../shared')\r\nconst ConnectionError = require('../error/connection-error')\r\n\r\nclass ConnectionPool extends BaseConnectionPool {\r\n  _poolCreate () {\r\n    return new shared.Promise((resolve, reject) => {\r\n      const resolveOnce = (v) => {\r\n        resolve(v)\r\n        resolve = reject = () => {}\r\n      }\r\n      const rejectOnce = (e) => {\r\n        reject(e)\r\n        resolve = reject = () => {}\r\n      }\r\n      const cfg = {\r\n        server: this.config.server,\r\n        options: Object.assign({\r\n          encrypt: typeof this.config.encrypt === 'boolean' ? this.config.encrypt : true,\r\n          trustServerCertificate: typeof this.config.trustServerCertificate === 'boolean' ? this.config.trustServerCertificate : false\r\n        }, this.config.options),\r\n        authentication: Object.assign({\r\n          type: this.config.domain !== undefined ? 'ntlm' : 'default',\r\n          options: {\r\n            userName: this.config.user,\r\n            password: this.config.password,\r\n            domain: this.config.domain\r\n          }\r\n        }, this.config.authentication)\r\n      }\r\n\r\n      cfg.options.database = this.config.database\r\n      cfg.options.port = this.config.port\r\n      cfg.options.connectTimeout = this.config.connectionTimeout || this.config.timeout || 15000\r\n      cfg.options.requestTimeout = this.config.requestTimeout != null ? this.config.requestTimeout : 15000\r\n      cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4'\r\n      cfg.options.rowCollectionOnDone = false\r\n      cfg.options.rowCollectionOnRequestCompletion = false\r\n      cfg.options.useColumnNames = false\r\n      cfg.options.appName = cfg.options.appName || 'node-mssql'\r\n\r\n      // tedious always connect via tcp when port is specified\r\n      if (cfg.options.instanceName) delete cfg.options.port\r\n\r\n      if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000\r\n      if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0\r\n      if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0\r\n\r\n      if (this.config.debug) {\r\n        cfg.options.debug = {\r\n          packet: true,\r\n          token: true,\r\n          data: true,\r\n          payload: true\r\n        }\r\n      }\r\n      let tedious\r\n      try {\r\n        tedious = new tds.Connection(cfg)\r\n      } catch (err) {\r\n        rejectOnce(err)\r\n        return\r\n      }\r\n      tedious.connect(err => {\r\n        if (err) {\r\n          err = new ConnectionError(err)\r\n          return rejectOnce(err)\r\n        }\r\n\r\n        debug('connection(%d): established', IDS.get(tedious))\r\n        resolveOnce(tedious)\r\n      })\r\n      IDS.add(tedious, 'Connection')\r\n      debug('pool(%d): connection #%d created', IDS.get(this), IDS.get(tedious))\r\n      debug('connection(%d): establishing', IDS.get(tedious))\r\n\r\n      tedious.on('end', () => {\r\n        const err = new ConnectionError('The connection ended without ever completing the connection')\r\n        rejectOnce(err)\r\n      })\r\n      tedious.on('error', err => {\r\n        if (err.code === 'ESOCKET') {\r\n          tedious.hasError = true\r\n        } else {\r\n          this.emit('error', err)\r\n        }\r\n        rejectOnce(err)\r\n      })\r\n\r\n      if (this.config.debug) {\r\n        tedious.on('debug', this.emit.bind(this, 'debug', tedious))\r\n      }\r\n      if (typeof this.config.beforeConnect === 'function') {\r\n        this.config.beforeConnect(tedious)\r\n      }\r\n    })\r\n  }\r\n\r\n  _poolValidate (tedious) {\r\n    if (tedious && !tedious.closed && !tedious.hasError) {\r\n      return !this.config.validateConnection || new shared.Promise((resolve) => {\r\n        const req = new tds.Request('SELECT 1;', (err) => {\r\n          resolve(!err)\r\n        })\r\n        tedious.execSql(req)\r\n      })\r\n    }\r\n    return false\r\n  }\r\n\r\n  _poolDestroy (tedious) {\r\n    return new shared.Promise((resolve, reject) => {\r\n      if (!tedious) {\r\n        resolve()\r\n        return\r\n      }\r\n      debug('connection(%d): destroying', IDS.get(tedious))\r\n\r\n      if (tedious.closed) {\r\n        debug('connection(%d): already closed', IDS.get(tedious))\r\n        resolve()\r\n      } else {\r\n        tedious.once('end', () => {\r\n          debug('connection(%d): destroyed', IDS.get(tedious))\r\n          resolve()\r\n        })\r\n\r\n        tedious.close()\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = ConnectionPool\r\n"]},"metadata":{},"sourceType":"script"}
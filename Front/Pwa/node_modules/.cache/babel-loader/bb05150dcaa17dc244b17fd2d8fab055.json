{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar tds = require('tedious');\n\nvar debug = require('debug')('mssql:tedi');\n\nvar BaseConnectionPool = require('../base/connection-pool');\n\nvar _require = require('../utils'),\n    IDS = _require.IDS;\n\nvar shared = require('../shared');\n\nvar ConnectionError = require('../error/connection-error');\n\nvar ConnectionPool = /*#__PURE__*/function (_BaseConnectionPool) {\n  _inherits(ConnectionPool, _BaseConnectionPool);\n\n  var _super = _createSuper(ConnectionPool);\n\n  function ConnectionPool() {\n    _classCallCheck(this, ConnectionPool);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ConnectionPool, [{\n    key: \"_poolCreate\",\n    value: function _poolCreate() {\n      var _this = this;\n\n      return new shared.Promise(function (resolve, reject) {\n        var resolveOnce = function resolveOnce(v) {\n          resolve(v);\n\n          resolve = reject = function reject() {};\n        };\n\n        var rejectOnce = function rejectOnce(e) {\n          reject(e);\n\n          resolve = reject = function reject() {};\n        };\n\n        var cfg = {\n          server: _this.config.server,\n          options: Object.assign({\n            encrypt: typeof _this.config.encrypt === 'boolean' ? _this.config.encrypt : true,\n            trustServerCertificate: typeof _this.config.trustServerCertificate === 'boolean' ? _this.config.trustServerCertificate : false\n          }, _this.config.options),\n          authentication: Object.assign({\n            type: _this.config.domain !== undefined ? 'ntlm' : 'default',\n            options: {\n              userName: _this.config.user,\n              password: _this.config.password,\n              domain: _this.config.domain\n            }\n          }, _this.config.authentication)\n        };\n        cfg.options.database = _this.config.database;\n        cfg.options.port = _this.config.port;\n        cfg.options.connectTimeout = _this.config.connectionTimeout || _this.config.timeout || 15000;\n        cfg.options.requestTimeout = _this.config.requestTimeout != null ? _this.config.requestTimeout : 15000;\n        cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4';\n        cfg.options.rowCollectionOnDone = false;\n        cfg.options.rowCollectionOnRequestCompletion = false;\n        cfg.options.useColumnNames = false;\n        cfg.options.appName = cfg.options.appName || 'node-mssql'; // tedious always connect via tcp when port is specified\n\n        if (cfg.options.instanceName) delete cfg.options.port;\n        if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000;\n        if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0;\n        if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0;\n\n        if (_this.config.debug) {\n          cfg.options.debug = {\n            packet: true,\n            token: true,\n            data: true,\n            payload: true\n          };\n        }\n\n        var tedious;\n\n        try {\n          tedious = new tds.Connection(cfg);\n        } catch (err) {\n          rejectOnce(err);\n          return;\n        }\n\n        tedious.connect(function (err) {\n          if (err) {\n            err = new ConnectionError(err);\n            return rejectOnce(err);\n          }\n\n          debug('connection(%d): established', IDS.get(tedious));\n          resolveOnce(tedious);\n        });\n        IDS.add(tedious, 'Connection');\n        debug('pool(%d): connection #%d created', IDS.get(_this), IDS.get(tedious));\n        debug('connection(%d): establishing', IDS.get(tedious));\n        tedious.on('end', function () {\n          var err = new ConnectionError('The connection ended without ever completing the connection');\n          rejectOnce(err);\n        });\n        tedious.on('error', function (err) {\n          if (err.code === 'ESOCKET') {\n            tedious.hasError = true;\n          } else {\n            _this.emit('error', err);\n          }\n\n          rejectOnce(err);\n        });\n\n        if (_this.config.debug) {\n          tedious.on('debug', _this.emit.bind(_this, 'debug', tedious));\n        }\n\n        if (typeof _this.config.beforeConnect === 'function') {\n          _this.config.beforeConnect(tedious);\n        }\n      });\n    }\n  }, {\n    key: \"_poolValidate\",\n    value: function _poolValidate(tedious) {\n      if (tedious && !tedious.closed && !tedious.hasError) {\n        return !this.config.validateConnection || new shared.Promise(function (resolve) {\n          var req = new tds.Request('SELECT 1;', function (err) {\n            resolve(!err);\n          });\n          tedious.execSql(req);\n        });\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_poolDestroy\",\n    value: function _poolDestroy(tedious) {\n      return new shared.Promise(function (resolve, reject) {\n        if (!tedious) {\n          resolve();\n          return;\n        }\n\n        debug('connection(%d): destroying', IDS.get(tedious));\n\n        if (tedious.closed) {\n          debug('connection(%d): already closed', IDS.get(tedious));\n          resolve();\n        } else {\n          tedious.once('end', function () {\n            debug('connection(%d): destroyed', IDS.get(tedious));\n            resolve();\n          });\n          tedious.close();\n        }\n      });\n    }\n  }]);\n\n  return ConnectionPool;\n}(BaseConnectionPool);\n\nmodule.exports = ConnectionPool;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/lib/tedious/connection-pool.js"],"names":["tds","require","debug","BaseConnectionPool","IDS","shared","ConnectionError","ConnectionPool","Promise","resolve","reject","resolveOnce","v","rejectOnce","e","cfg","server","config","options","Object","assign","encrypt","trustServerCertificate","authentication","type","domain","undefined","userName","user","password","database","port","connectTimeout","connectionTimeout","timeout","requestTimeout","tdsVersion","rowCollectionOnDone","rowCollectionOnRequestCompletion","useColumnNames","appName","instanceName","isNaN","Infinity","packet","token","data","payload","tedious","Connection","err","connect","get","add","on","code","hasError","emit","bind","beforeConnect","closed","validateConnection","req","Request","execSql","once","close","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst tds = require('tedious')\r\nconst debug = require('debug')('mssql:tedi')\r\nconst BaseConnectionPool = require('../base/connection-pool')\r\nconst { IDS } = require('../utils')\r\nconst shared = require('../shared')\r\nconst ConnectionError = require('../error/connection-error')\r\n\r\nclass ConnectionPool extends BaseConnectionPool {\r\n  _poolCreate () {\r\n    return new shared.Promise((resolve, reject) => {\r\n      const resolveOnce = (v) => {\r\n        resolve(v)\r\n        resolve = reject = () => {}\r\n      }\r\n      const rejectOnce = (e) => {\r\n        reject(e)\r\n        resolve = reject = () => {}\r\n      }\r\n      const cfg = {\r\n        server: this.config.server,\r\n        options: Object.assign({\r\n          encrypt: typeof this.config.encrypt === 'boolean' ? this.config.encrypt : true,\r\n          trustServerCertificate: typeof this.config.trustServerCertificate === 'boolean' ? this.config.trustServerCertificate : false\r\n        }, this.config.options),\r\n        authentication: Object.assign({\r\n          type: this.config.domain !== undefined ? 'ntlm' : 'default',\r\n          options: {\r\n            userName: this.config.user,\r\n            password: this.config.password,\r\n            domain: this.config.domain\r\n          }\r\n        }, this.config.authentication)\r\n      }\r\n\r\n      cfg.options.database = this.config.database\r\n      cfg.options.port = this.config.port\r\n      cfg.options.connectTimeout = this.config.connectionTimeout || this.config.timeout || 15000\r\n      cfg.options.requestTimeout = this.config.requestTimeout != null ? this.config.requestTimeout : 15000\r\n      cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4'\r\n      cfg.options.rowCollectionOnDone = false\r\n      cfg.options.rowCollectionOnRequestCompletion = false\r\n      cfg.options.useColumnNames = false\r\n      cfg.options.appName = cfg.options.appName || 'node-mssql'\r\n\r\n      // tedious always connect via tcp when port is specified\r\n      if (cfg.options.instanceName) delete cfg.options.port\r\n\r\n      if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000\r\n      if (cfg.options.requestTimeout === Infinity) cfg.options.requestTimeout = 0\r\n      if (cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0\r\n\r\n      if (this.config.debug) {\r\n        cfg.options.debug = {\r\n          packet: true,\r\n          token: true,\r\n          data: true,\r\n          payload: true\r\n        }\r\n      }\r\n      let tedious\r\n      try {\r\n        tedious = new tds.Connection(cfg)\r\n      } catch (err) {\r\n        rejectOnce(err)\r\n        return\r\n      }\r\n      tedious.connect(err => {\r\n        if (err) {\r\n          err = new ConnectionError(err)\r\n          return rejectOnce(err)\r\n        }\r\n\r\n        debug('connection(%d): established', IDS.get(tedious))\r\n        resolveOnce(tedious)\r\n      })\r\n      IDS.add(tedious, 'Connection')\r\n      debug('pool(%d): connection #%d created', IDS.get(this), IDS.get(tedious))\r\n      debug('connection(%d): establishing', IDS.get(tedious))\r\n\r\n      tedious.on('end', () => {\r\n        const err = new ConnectionError('The connection ended without ever completing the connection')\r\n        rejectOnce(err)\r\n      })\r\n      tedious.on('error', err => {\r\n        if (err.code === 'ESOCKET') {\r\n          tedious.hasError = true\r\n        } else {\r\n          this.emit('error', err)\r\n        }\r\n        rejectOnce(err)\r\n      })\r\n\r\n      if (this.config.debug) {\r\n        tedious.on('debug', this.emit.bind(this, 'debug', tedious))\r\n      }\r\n      if (typeof this.config.beforeConnect === 'function') {\r\n        this.config.beforeConnect(tedious)\r\n      }\r\n    })\r\n  }\r\n\r\n  _poolValidate (tedious) {\r\n    if (tedious && !tedious.closed && !tedious.hasError) {\r\n      return !this.config.validateConnection || new shared.Promise((resolve) => {\r\n        const req = new tds.Request('SELECT 1;', (err) => {\r\n          resolve(!err)\r\n        })\r\n        tedious.execSql(req)\r\n      })\r\n    }\r\n    return false\r\n  }\r\n\r\n  _poolDestroy (tedious) {\r\n    return new shared.Promise((resolve, reject) => {\r\n      if (!tedious) {\r\n        resolve()\r\n        return\r\n      }\r\n      debug('connection(%d): destroying', IDS.get(tedious))\r\n\r\n      if (tedious.closed) {\r\n        debug('connection(%d): already closed', IDS.get(tedious))\r\n        resolve()\r\n      } else {\r\n        tedious.once('end', () => {\r\n          debug('connection(%d): destroyed', IDS.get(tedious))\r\n          resolve()\r\n        })\r\n\r\n        tedious.close()\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = ConnectionPool\r\n"]},"metadata":{},"sourceType":"script"}
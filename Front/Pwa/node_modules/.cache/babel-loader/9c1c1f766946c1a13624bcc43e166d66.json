{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _assertThisInitialized = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _stream = require(\"stream\");\n\nvar _token = require(\"./token/token\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * @private\r\n */\n\n\nvar FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\n/**\r\n * @private\r\n */\n\nvar DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n/**\r\n * @private\r\n */\n\nvar rowTokenBuffer = Buffer.from([_token.TYPE.ROW]);\nvar textPointerAndTimestampBuffer = Buffer.from([// TextPointer length\n0x10, // TextPointer\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\nvar textPointerNullBuffer = Buffer.from([0x00]); // A transform that converts rows to packets.\n\nvar RowTransform = /*#__PURE__*/function (_stream$Transform) {\n  _inherits(RowTransform, _stream$Transform);\n\n  var _super = _createSuper(RowTransform);\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n  function RowTransform(bulkLoad) {\n    var _this;\n\n    _classCallCheck(this, RowTransform);\n\n    _this = _super.call(this, {\n      writableObjectMode: true\n    });\n    _this.columnMetadataWritten = void 0;\n    _this.bulkLoad = void 0;\n    _this.mainOptions = void 0;\n    _this.columns = void 0;\n    _this.bulkLoad = bulkLoad;\n    _this.mainOptions = bulkLoad.options;\n    _this.columns = bulkLoad.columns;\n    _this.columnMetadataWritten = false;\n    return _this;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _createClass(RowTransform, [{\n    key: \"_transform\",\n    value: function _transform(row, _encoding, callback) {\n      if (!this.columnMetadataWritten) {\n        this.push(this.bulkLoad.getColMetaData());\n        this.columnMetadataWritten = true;\n      }\n\n      this.push(rowTokenBuffer);\n\n      for (var i = 0; i < this.columns.length; i++) {\n        var c = this.columns[i];\n        var value = Array.isArray(row) ? row[i] : row[c.objName];\n\n        if (this.bulkLoad.options.validateBulkLoadParameters) {\n          try {\n            value = c.type.validate(value);\n          } catch (error) {\n            return callback(error);\n          }\n        }\n\n        var parameter = {\n          length: c.length,\n          scale: c.scale,\n          precision: c.precision,\n          value: value\n        };\n\n        if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\n          if (value == null) {\n            this.push(textPointerNullBuffer);\n            continue;\n          }\n\n          this.push(textPointerAndTimestampBuffer);\n        }\n\n        this.push(c.type.generateParameterLength(parameter, this.mainOptions));\n\n        var _iterator = _createForOfIteratorHelper(c.type.generateParameterData(parameter, this.mainOptions)),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var chunk = _step.value;\n            this.push(chunk);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      process.nextTick(callback);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_flush\",\n    value: function _flush(callback) {\n      this.push(this.bulkLoad.createDoneToken());\n      process.nextTick(callback);\n    }\n  }]);\n\n  return RowTransform;\n}(_stream.Transform);\n/**\r\n * A BulkLoad instance is used to perform a bulk insert.\r\n *\r\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\r\n *\r\n * Example of BulkLoad Usages:\r\n *\r\n * ```js\r\n * // optional BulkLoad options\r\n * const options = { keepNulls: true };\r\n *\r\n * // instantiate - provide the table where you'll be inserting to, options and a callback\r\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\r\n *   console.log('inserted %d rows', rowCount);\r\n * });\r\n *\r\n * // setup your columns - always indicate whether the column is nullable\r\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\r\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\r\n *\r\n * // execute\r\n * connection.execBulkLoad(bulkLoad, [\r\n *   { myInt: 7, myString: 'hello' },\r\n *   { myInt: 23, myString: 'world' }\r\n * ]);\r\n * ```\r\n */\n\n\nvar BulkLoad = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(BulkLoad, _events$EventEmitter);\n\n  var _super2 = _createSuper(BulkLoad);\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n  function BulkLoad(table, connectionOptions, _ref, callback) {\n    var _this2;\n\n    var _ref$checkConstraints = _ref.checkConstraints,\n        checkConstraints = _ref$checkConstraints === void 0 ? false : _ref$checkConstraints,\n        _ref$fireTriggers = _ref.fireTriggers,\n        fireTriggers = _ref$fireTriggers === void 0 ? false : _ref$fireTriggers,\n        _ref$keepNulls = _ref.keepNulls,\n        keepNulls = _ref$keepNulls === void 0 ? false : _ref$keepNulls,\n        _ref$lockTable = _ref.lockTable,\n        lockTable = _ref$lockTable === void 0 ? false : _ref$lockTable,\n        _ref$order = _ref.order,\n        order = _ref$order === void 0 ? {} : _ref$order;\n\n    _classCallCheck(this, BulkLoad);\n\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    if (typeof order !== 'object' || order === null) {\n      throw new TypeError('The \"options.order\" property must be of type object.');\n    }\n\n    for (var _i = 0, _Object$entries = Object.entries(order); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          column = _Object$entries$_i[0],\n          direction = _Object$entries$_i[1];\n\n      if (direction !== 'ASC' && direction !== 'DESC') {\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\n      }\n    }\n\n    _this2 = _super2.call(this);\n    _this2.error = void 0;\n    _this2.canceled = void 0;\n    _this2.executionStarted = void 0;\n    _this2.streamingMode = void 0;\n    _this2.table = void 0;\n    _this2.timeout = void 0;\n    _this2.options = void 0;\n    _this2.callback = void 0;\n    _this2.columns = void 0;\n    _this2.columnsByName = void 0;\n    _this2.firstRowWritten = void 0;\n    _this2.rowToPacketTransform = void 0;\n    _this2.bulkOptions = void 0;\n    _this2.connection = void 0;\n    _this2.rows = void 0;\n    _this2.rst = void 0;\n    _this2.rowCount = void 0;\n    _this2.error = undefined;\n    _this2.canceled = false;\n    _this2.executionStarted = false;\n    _this2.table = table;\n    _this2.options = connectionOptions;\n    _this2.callback = callback;\n    _this2.columns = [];\n    _this2.columnsByName = {};\n    _this2.firstRowWritten = false;\n    _this2.streamingMode = false;\n    _this2.rowToPacketTransform = new RowTransform(_assertThisInitialized(_this2)); // eslint-disable-line no-use-before-define\n\n    _this2.bulkOptions = {\n      checkConstraints: checkConstraints,\n      fireTriggers: fireTriggers,\n      keepNulls: keepNulls,\n      lockTable: lockTable,\n      order: order\n    };\n    return _this2;\n  }\n  /**\r\n   * Adds a column to the bulk load.\r\n   *\r\n   * The column definitions should match the table you are trying to insert into.\r\n   * Attempting to call addColumn after the first row has been added will throw an exception.\r\n   *\r\n   * ```js\r\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\r\n   * ```\r\n   *\r\n   * @param name The name of the column.\r\n   * @param type One of the supported `data types`.\r\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\r\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\r\n   * @param nullable Indicates whether the column accepts NULL values.\r\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\r\n   * @param precision For Numeric, Decimal.\r\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\r\n  */\n\n\n  _createClass(BulkLoad, [{\n    key: \"addColumn\",\n    value: function addColumn(name, type, _ref2) {\n      var _ref2$output = _ref2.output,\n          output = _ref2$output === void 0 ? false : _ref2$output,\n          length = _ref2.length,\n          precision = _ref2.precision,\n          scale = _ref2.scale,\n          _ref2$objName = _ref2.objName,\n          objName = _ref2$objName === void 0 ? name : _ref2$objName,\n          _ref2$nullable = _ref2.nullable,\n          nullable = _ref2$nullable === void 0 ? true : _ref2$nullable;\n\n      if (this.firstRowWritten) {\n        throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n      }\n\n      if (this.executionStarted) {\n        throw new Error('Columns cannot be added to bulk insert after execution has started.');\n      }\n\n      var column = {\n        type: type,\n        name: name,\n        value: null,\n        output: output,\n        length: length,\n        precision: precision,\n        scale: scale,\n        objName: objName,\n        nullable: nullable\n      };\n\n      if ((type.id & 0x30) === 0x20) {\n        if (column.length == null && type.resolveLength) {\n          column.length = type.resolveLength(column);\n        }\n      }\n\n      if (type.resolvePrecision && column.precision == null) {\n        column.precision = type.resolvePrecision(column);\n      }\n\n      if (type.resolveScale && column.scale == null) {\n        column.scale = type.resolveScale(column);\n      }\n\n      this.columns.push(column);\n      this.columnsByName[name] = column;\n    }\n    /**\r\n     * Adds a row to the bulk insert.\r\n     *\r\n     * ```js\r\n     * bulkLoad.addRow({ first_name: 'Bill', last_name: 'Gates' });\r\n     * ```\r\n     *\r\n     * @param row An object of key/value pairs representing column name (or objName) and value.\r\n     *\r\n     * @deprecated This method is deprecated. Instead of adding rows individually, you should pass\r\n     *   all row objects when calling [[Connection.execBulkLoad]]. This method will be removed in the future.\r\n     */\n\n  }, {\n    key: \"addRow\",\n    value: function addRow() {\n      var _this3 = this;\n\n      this.firstRowWritten = true;\n      var row;\n\n      for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {\n        input[_key] = arguments[_key];\n      }\n\n      if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\n        row = input;\n      } else {\n        row = input[0];\n      } // write each column\n\n\n      if (Array.isArray(row)) {\n        this.rowToPacketTransform.write(this.columns.map(function (column, i) {\n          var value = row[i];\n\n          if (_this3.options.validateBulkLoadParameters) {\n            value = column.type.validate(value);\n          }\n\n          return value;\n        }));\n      } else {\n        this.rowToPacketTransform.write(this.columns.map(function (column) {\n          var value = row[column.objName];\n\n          if (_this3.options.validateBulkLoadParameters) {\n            value = column.type.validate(value);\n          }\n\n          return value;\n        }));\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"getOptionsSql\",\n    value: function getOptionsSql() {\n      var addOptions = [];\n\n      if (this.bulkOptions.checkConstraints) {\n        addOptions.push('CHECK_CONSTRAINTS');\n      }\n\n      if (this.bulkOptions.fireTriggers) {\n        addOptions.push('FIRE_TRIGGERS');\n      }\n\n      if (this.bulkOptions.keepNulls) {\n        addOptions.push('KEEP_NULLS');\n      }\n\n      if (this.bulkOptions.lockTable) {\n        addOptions.push('TABLOCK');\n      }\n\n      if (this.bulkOptions.order) {\n        var orderColumns = [];\n\n        for (var _i2 = 0, _Object$entries2 = Object.entries(this.bulkOptions.order); _i2 < _Object$entries2.length; _i2++) {\n          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n              column = _Object$entries2$_i[0],\n              direction = _Object$entries2$_i[1];\n\n          orderColumns.push(\"\".concat(column, \" \").concat(direction));\n        }\n\n        if (orderColumns.length) {\n          addOptions.push(\"ORDER (\".concat(orderColumns.join(', '), \")\"));\n        }\n      }\n\n      if (addOptions.length > 0) {\n        return \" WITH (\".concat(addOptions.join(','), \")\");\n      } else {\n        return '';\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"getBulkInsertSql\",\n    value: function getBulkInsertSql() {\n      var sql = 'insert bulk ' + this.table + '(';\n\n      for (var i = 0, len = this.columns.length; i < len; i++) {\n        var c = this.columns[i];\n\n        if (i !== 0) {\n          sql += ', ';\n        }\n\n        sql += '[' + c.name + '] ' + c.type.declaration(c);\n      }\n\n      sql += ')';\n      sql += this.getOptionsSql();\n      return sql;\n    }\n    /**\r\n     * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\r\n     * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\r\n     *\r\n     * ```js\r\n     * var sql = bulkLoad.getTableCreationSql();\r\n     * ```\r\n     *\r\n     * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\r\n     * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\r\n     */\n\n  }, {\n    key: \"getTableCreationSql\",\n    value: function getTableCreationSql() {\n      var sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n      for (var i = 0, len = this.columns.length; i < len; i++) {\n        var c = this.columns[i];\n\n        if (i !== 0) {\n          sql += ',\\n';\n        }\n\n        sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n        if (c.nullable !== undefined) {\n          sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n        }\n      }\n\n      sql += '\\n)';\n      return sql;\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"getColMetaData\",\n    value: function getColMetaData() {\n      var tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n      tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n      tBuf.writeUInt16LE(this.columns.length);\n\n      for (var j = 0, len = this.columns.length; j < len; j++) {\n        var c = this.columns[j]; // UserType\n\n        if (this.options.tdsVersion < '7_2') {\n          tBuf.writeUInt16LE(0);\n        } else {\n          tBuf.writeUInt32LE(0);\n        } // Flags\n\n\n        var flags = FLAGS.updateableReadWrite;\n\n        if (c.nullable) {\n          flags |= FLAGS.nullable;\n        } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n          flags |= FLAGS.nullableUnknown;\n        }\n\n        tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n        tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // TableName\n\n        if (c.type.hasTableName) {\n          tBuf.writeUsVarchar(this.table, 'ucs2');\n        } // ColName\n\n\n        tBuf.writeBVarchar(c.name, 'ucs2');\n      }\n\n      return tBuf.data;\n    }\n    /**\r\n     * Sets a timeout for this bulk load.\r\n     *\r\n     * ```js\r\n     * bulkLoad.setTimeout(timeout);\r\n     * ```\r\n     *\r\n     * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\r\n     *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\r\n     */\n\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeout) {\n      this.timeout = timeout;\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"createDoneToken\",\n    value: function createDoneToken() {\n      // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n      var tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n      tBuf.writeUInt8(_token.TYPE.DONE);\n      var status = DONE_STATUS.FINAL;\n      tBuf.writeUInt16LE(status);\n      tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n      tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n      if (this.options.tdsVersion >= '7_2') {\n        tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n      }\n\n      return tBuf.data;\n    }\n    /**\r\n     * Switches the `BulkLoad` object into streaming mode and returns a\r\n     * [writable stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_streams)\r\n     * that can be used to send a large amount of rows to the server.\r\n     *\r\n     * ```js\r\n     * const bulkLoad = connection.newBulkLoad(...);\r\n     * bulkLoad.addColumn(...);\r\n     *\r\n     * const rowStream = bulkLoad.getRowStream();\r\n     *\r\n     * connection.execBulkLoad(bulkLoad);\r\n     * ```\r\n     *\r\n     * In streaming mode, [[addRow]] cannot be used. Instead all data rows must be written to the returned stream object.\r\n     * The stream implementation uses data flow control to prevent memory overload. [`stream.write()`](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_write_chunk_encoding_callback)\r\n     * returns `false` to indicate that data transfer should be paused.\r\n     *\r\n     * After that, the stream emits a ['drain' event](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_event_drain)\r\n     * when it is ready to resume data transfer.\r\n     *\r\n     * @deprecated\r\n     *   This method is deprecated. Instead of writing rows to the stream returned by this method,\r\n     *   you can pass any object that implements the `Iterable` or `AsyncIterable` interface (e.g. a `Readable`\r\n     *   stream or an `AsyncGenerator`) when calling [[Connection.execBulkLoad]]. This method will be removed in the future.\r\n     */\n\n  }, {\n    key: \"getRowStream\",\n    value: function getRowStream() {\n      if (this.firstRowWritten) {\n        throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\n      }\n\n      if (this.executionStarted) {\n        throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\n      }\n\n      this.streamingMode = true;\n      return this.rowToPacketTransform;\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.canceled) {\n        return;\n      }\n\n      this.canceled = true;\n      this.emit('cancel');\n    }\n  }]);\n\n  return BulkLoad;\n}(_events.EventEmitter);\n\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/bulk-load.js"],"names":["Object","defineProperty","exports","value","default","_events","require","_writableTrackingBuffer","_interopRequireDefault","_stream","_token","obj","__esModule","FLAGS","nullable","caseSen","updateableReadWrite","updateableUnknown","identity","computed","fixedLenCLRType","sparseColumnSet","hidden","key","nullableUnknown","DONE_STATUS","FINAL","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","rowTokenBuffer","Buffer","from","TYPE","ROW","textPointerAndTimestampBuffer","textPointerNullBuffer","RowTransform","bulkLoad","writableObjectMode","columnMetadataWritten","mainOptions","columns","options","row","_encoding","callback","push","getColMetaData","i","length","c","Array","isArray","objName","validateBulkLoadParameters","type","validate","error","parameter","scale","precision","name","generateParameterLength","generateParameterData","chunk","process","nextTick","createDoneToken","Transform","BulkLoad","table","connectionOptions","checkConstraints","fireTriggers","keepNulls","lockTable","order","TypeError","entries","column","direction","canceled","executionStarted","streamingMode","timeout","columnsByName","firstRowWritten","rowToPacketTransform","bulkOptions","connection","rows","rst","rowCount","undefined","output","Error","id","resolveLength","resolvePrecision","resolveScale","input","write","map","addOptions","orderColumns","join","sql","len","declaration","getOptionsSql","tBuf","writeUInt8","COLMETADATA","writeUInt16LE","j","tdsVersion","writeUInt32LE","flags","writeBuffer","generateTypeInfo","hasTableName","writeUsVarchar","writeBVarchar","data","DONE","status","emit","EventEmitter","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _events = require(\"events\");\r\n\r\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\r\n\r\nvar _stream = require(\"stream\");\r\n\r\nvar _token = require(\"./token/token\");\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * @private\r\n */\r\nconst FLAGS = {\r\n  nullable: 1 << 0,\r\n  caseSen: 1 << 1,\r\n  updateableReadWrite: 1 << 2,\r\n  updateableUnknown: 1 << 3,\r\n  identity: 1 << 4,\r\n  computed: 1 << 5,\r\n  // introduced in TDS 7.2\r\n  fixedLenCLRType: 1 << 8,\r\n  // introduced in TDS 7.2\r\n  sparseColumnSet: 1 << 10,\r\n  // introduced in TDS 7.3.B\r\n  hidden: 1 << 13,\r\n  // introduced in TDS 7.2\r\n  key: 1 << 14,\r\n  // introduced in TDS 7.2\r\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\r\n\r\n};\r\n/**\r\n * @private\r\n */\r\n\r\nconst DONE_STATUS = {\r\n  FINAL: 0x00,\r\n  MORE: 0x1,\r\n  ERROR: 0x2,\r\n  INXACT: 0x4,\r\n  COUNT: 0x10,\r\n  ATTN: 0x20,\r\n  SRVERROR: 0x100\r\n};\r\n/**\r\n * @private\r\n */\r\n\r\nconst rowTokenBuffer = Buffer.from([_token.TYPE.ROW]);\r\nconst textPointerAndTimestampBuffer = Buffer.from([// TextPointer length\r\n0x10, // TextPointer\r\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp\r\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\r\nconst textPointerNullBuffer = Buffer.from([0x00]); // A transform that converts rows to packets.\r\n\r\nclass RowTransform extends _stream.Transform {\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  constructor(bulkLoad) {\r\n    super({\r\n      writableObjectMode: true\r\n    });\r\n    this.columnMetadataWritten = void 0;\r\n    this.bulkLoad = void 0;\r\n    this.mainOptions = void 0;\r\n    this.columns = void 0;\r\n    this.bulkLoad = bulkLoad;\r\n    this.mainOptions = bulkLoad.options;\r\n    this.columns = bulkLoad.columns;\r\n    this.columnMetadataWritten = false;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  _transform(row, _encoding, callback) {\r\n    if (!this.columnMetadataWritten) {\r\n      this.push(this.bulkLoad.getColMetaData());\r\n      this.columnMetadataWritten = true;\r\n    }\r\n\r\n    this.push(rowTokenBuffer);\r\n\r\n    for (let i = 0; i < this.columns.length; i++) {\r\n      const c = this.columns[i];\r\n      let value = Array.isArray(row) ? row[i] : row[c.objName];\r\n\r\n      if (this.bulkLoad.options.validateBulkLoadParameters) {\r\n        try {\r\n          value = c.type.validate(value);\r\n        } catch (error) {\r\n          return callback(error);\r\n        }\r\n      }\r\n\r\n      const parameter = {\r\n        length: c.length,\r\n        scale: c.scale,\r\n        precision: c.precision,\r\n        value: value\r\n      };\r\n\r\n      if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\r\n        if (value == null) {\r\n          this.push(textPointerNullBuffer);\r\n          continue;\r\n        }\r\n\r\n        this.push(textPointerAndTimestampBuffer);\r\n      }\r\n\r\n      this.push(c.type.generateParameterLength(parameter, this.mainOptions));\r\n\r\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\r\n        this.push(chunk);\r\n      }\r\n    }\r\n\r\n    process.nextTick(callback);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  _flush(callback) {\r\n    this.push(this.bulkLoad.createDoneToken());\r\n    process.nextTick(callback);\r\n  }\r\n\r\n}\r\n/**\r\n * A BulkLoad instance is used to perform a bulk insert.\r\n *\r\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\r\n *\r\n * Example of BulkLoad Usages:\r\n *\r\n * ```js\r\n * // optional BulkLoad options\r\n * const options = { keepNulls: true };\r\n *\r\n * // instantiate - provide the table where you'll be inserting to, options and a callback\r\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\r\n *   console.log('inserted %d rows', rowCount);\r\n * });\r\n *\r\n * // setup your columns - always indicate whether the column is nullable\r\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\r\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\r\n *\r\n * // execute\r\n * connection.execBulkLoad(bulkLoad, [\r\n *   { myInt: 7, myString: 'hello' },\r\n *   { myInt: 23, myString: 'world' }\r\n * ]);\r\n * ```\r\n */\r\n\r\n\r\nclass BulkLoad extends _events.EventEmitter {\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  constructor(table, connectionOptions, {\r\n    checkConstraints = false,\r\n    fireTriggers = false,\r\n    keepNulls = false,\r\n    lockTable = false,\r\n    order = {}\r\n  }, callback) {\r\n    if (typeof checkConstraints !== 'boolean') {\r\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\r\n    }\r\n\r\n    if (typeof fireTriggers !== 'boolean') {\r\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\r\n    }\r\n\r\n    if (typeof keepNulls !== 'boolean') {\r\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\r\n    }\r\n\r\n    if (typeof lockTable !== 'boolean') {\r\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\r\n    }\r\n\r\n    if (typeof order !== 'object' || order === null) {\r\n      throw new TypeError('The \"options.order\" property must be of type object.');\r\n    }\r\n\r\n    for (const [column, direction] of Object.entries(order)) {\r\n      if (direction !== 'ASC' && direction !== 'DESC') {\r\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\r\n      }\r\n    }\r\n\r\n    super();\r\n    this.error = void 0;\r\n    this.canceled = void 0;\r\n    this.executionStarted = void 0;\r\n    this.streamingMode = void 0;\r\n    this.table = void 0;\r\n    this.timeout = void 0;\r\n    this.options = void 0;\r\n    this.callback = void 0;\r\n    this.columns = void 0;\r\n    this.columnsByName = void 0;\r\n    this.firstRowWritten = void 0;\r\n    this.rowToPacketTransform = void 0;\r\n    this.bulkOptions = void 0;\r\n    this.connection = void 0;\r\n    this.rows = void 0;\r\n    this.rst = void 0;\r\n    this.rowCount = void 0;\r\n    this.error = undefined;\r\n    this.canceled = false;\r\n    this.executionStarted = false;\r\n    this.table = table;\r\n    this.options = connectionOptions;\r\n    this.callback = callback;\r\n    this.columns = [];\r\n    this.columnsByName = {};\r\n    this.firstRowWritten = false;\r\n    this.streamingMode = false;\r\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\r\n\r\n    this.bulkOptions = {\r\n      checkConstraints,\r\n      fireTriggers,\r\n      keepNulls,\r\n      lockTable,\r\n      order\r\n    };\r\n  }\r\n  /**\r\n   * Adds a column to the bulk load.\r\n   *\r\n   * The column definitions should match the table you are trying to insert into.\r\n   * Attempting to call addColumn after the first row has been added will throw an exception.\r\n   *\r\n   * ```js\r\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\r\n   * ```\r\n   *\r\n   * @param name The name of the column.\r\n   * @param type One of the supported `data types`.\r\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\r\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\r\n   * @param nullable Indicates whether the column accepts NULL values.\r\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\r\n   * @param precision For Numeric, Decimal.\r\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\r\n  */\r\n\r\n\r\n  addColumn(name, type, {\r\n    output = false,\r\n    length,\r\n    precision,\r\n    scale,\r\n    objName = name,\r\n    nullable = true\r\n  }) {\r\n    if (this.firstRowWritten) {\r\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\r\n    }\r\n\r\n    if (this.executionStarted) {\r\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\r\n    }\r\n\r\n    const column = {\r\n      type: type,\r\n      name: name,\r\n      value: null,\r\n      output: output,\r\n      length: length,\r\n      precision: precision,\r\n      scale: scale,\r\n      objName: objName,\r\n      nullable: nullable\r\n    };\r\n\r\n    if ((type.id & 0x30) === 0x20) {\r\n      if (column.length == null && type.resolveLength) {\r\n        column.length = type.resolveLength(column);\r\n      }\r\n    }\r\n\r\n    if (type.resolvePrecision && column.precision == null) {\r\n      column.precision = type.resolvePrecision(column);\r\n    }\r\n\r\n    if (type.resolveScale && column.scale == null) {\r\n      column.scale = type.resolveScale(column);\r\n    }\r\n\r\n    this.columns.push(column);\r\n    this.columnsByName[name] = column;\r\n  }\r\n  /**\r\n   * Adds a row to the bulk insert.\r\n   *\r\n   * ```js\r\n   * bulkLoad.addRow({ first_name: 'Bill', last_name: 'Gates' });\r\n   * ```\r\n   *\r\n   * @param row An object of key/value pairs representing column name (or objName) and value.\r\n   *\r\n   * @deprecated This method is deprecated. Instead of adding rows individually, you should pass\r\n   *   all row objects when calling [[Connection.execBulkLoad]]. This method will be removed in the future.\r\n   */\r\n\r\n\r\n  addRow(...input) {\r\n    this.firstRowWritten = true;\r\n    let row;\r\n\r\n    if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\r\n      row = input;\r\n    } else {\r\n      row = input[0];\r\n    } // write each column\r\n\r\n\r\n    if (Array.isArray(row)) {\r\n      this.rowToPacketTransform.write(this.columns.map((column, i) => {\r\n        let value = row[i];\r\n\r\n        if (this.options.validateBulkLoadParameters) {\r\n          value = column.type.validate(value);\r\n        }\r\n\r\n        return value;\r\n      }));\r\n    } else {\r\n      this.rowToPacketTransform.write(this.columns.map(column => {\r\n        let value = row[column.objName];\r\n\r\n        if (this.options.validateBulkLoadParameters) {\r\n          value = column.type.validate(value);\r\n        }\r\n\r\n        return value;\r\n      }));\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getOptionsSql() {\r\n    const addOptions = [];\r\n\r\n    if (this.bulkOptions.checkConstraints) {\r\n      addOptions.push('CHECK_CONSTRAINTS');\r\n    }\r\n\r\n    if (this.bulkOptions.fireTriggers) {\r\n      addOptions.push('FIRE_TRIGGERS');\r\n    }\r\n\r\n    if (this.bulkOptions.keepNulls) {\r\n      addOptions.push('KEEP_NULLS');\r\n    }\r\n\r\n    if (this.bulkOptions.lockTable) {\r\n      addOptions.push('TABLOCK');\r\n    }\r\n\r\n    if (this.bulkOptions.order) {\r\n      const orderColumns = [];\r\n\r\n      for (const [column, direction] of Object.entries(this.bulkOptions.order)) {\r\n        orderColumns.push(`${column} ${direction}`);\r\n      }\r\n\r\n      if (orderColumns.length) {\r\n        addOptions.push(`ORDER (${orderColumns.join(', ')})`);\r\n      }\r\n    }\r\n\r\n    if (addOptions.length > 0) {\r\n      return ` WITH (${addOptions.join(',')})`;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getBulkInsertSql() {\r\n    let sql = 'insert bulk ' + this.table + '(';\r\n\r\n    for (let i = 0, len = this.columns.length; i < len; i++) {\r\n      const c = this.columns[i];\r\n\r\n      if (i !== 0) {\r\n        sql += ', ';\r\n      }\r\n\r\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\r\n    }\r\n\r\n    sql += ')';\r\n    sql += this.getOptionsSql();\r\n    return sql;\r\n  }\r\n  /**\r\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\r\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\r\n   *\r\n   * ```js\r\n   * var sql = bulkLoad.getTableCreationSql();\r\n   * ```\r\n   *\r\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\r\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\r\n   */\r\n\r\n\r\n  getTableCreationSql() {\r\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\r\n\r\n    for (let i = 0, len = this.columns.length; i < len; i++) {\r\n      const c = this.columns[i];\r\n\r\n      if (i !== 0) {\r\n        sql += ',\\n';\r\n      }\r\n\r\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\r\n\r\n      if (c.nullable !== undefined) {\r\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\r\n      }\r\n    }\r\n\r\n    sql += '\\n)';\r\n    return sql;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getColMetaData() {\r\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\r\n\r\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\r\n\r\n    tBuf.writeUInt16LE(this.columns.length);\r\n\r\n    for (let j = 0, len = this.columns.length; j < len; j++) {\r\n      const c = this.columns[j]; // UserType\r\n\r\n      if (this.options.tdsVersion < '7_2') {\r\n        tBuf.writeUInt16LE(0);\r\n      } else {\r\n        tBuf.writeUInt32LE(0);\r\n      } // Flags\r\n\r\n\r\n      let flags = FLAGS.updateableReadWrite;\r\n\r\n      if (c.nullable) {\r\n        flags |= FLAGS.nullable;\r\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\r\n        flags |= FLAGS.nullableUnknown;\r\n      }\r\n\r\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\r\n\r\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // TableName\r\n\r\n      if (c.type.hasTableName) {\r\n        tBuf.writeUsVarchar(this.table, 'ucs2');\r\n      } // ColName\r\n\r\n\r\n      tBuf.writeBVarchar(c.name, 'ucs2');\r\n    }\r\n\r\n    return tBuf.data;\r\n  }\r\n  /**\r\n   * Sets a timeout for this bulk load.\r\n   *\r\n   * ```js\r\n   * bulkLoad.setTimeout(timeout);\r\n   * ```\r\n   *\r\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\r\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\r\n   */\r\n\r\n\r\n  setTimeout(timeout) {\r\n    this.timeout = timeout;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createDoneToken() {\r\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\r\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\r\n    tBuf.writeUInt8(_token.TYPE.DONE);\r\n    const status = DONE_STATUS.FINAL;\r\n    tBuf.writeUInt16LE(status);\r\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\r\n\r\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\r\n\r\n    if (this.options.tdsVersion >= '7_2') {\r\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\r\n    }\r\n\r\n    return tBuf.data;\r\n  }\r\n  /**\r\n   * Switches the `BulkLoad` object into streaming mode and returns a\r\n   * [writable stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_streams)\r\n   * that can be used to send a large amount of rows to the server.\r\n   *\r\n   * ```js\r\n   * const bulkLoad = connection.newBulkLoad(...);\r\n   * bulkLoad.addColumn(...);\r\n   *\r\n   * const rowStream = bulkLoad.getRowStream();\r\n   *\r\n   * connection.execBulkLoad(bulkLoad);\r\n   * ```\r\n   *\r\n   * In streaming mode, [[addRow]] cannot be used. Instead all data rows must be written to the returned stream object.\r\n   * The stream implementation uses data flow control to prevent memory overload. [`stream.write()`](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_write_chunk_encoding_callback)\r\n   * returns `false` to indicate that data transfer should be paused.\r\n   *\r\n   * After that, the stream emits a ['drain' event](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_event_drain)\r\n   * when it is ready to resume data transfer.\r\n   *\r\n   * @deprecated\r\n   *   This method is deprecated. Instead of writing rows to the stream returned by this method,\r\n   *   you can pass any object that implements the `Iterable` or `AsyncIterable` interface (e.g. a `Readable`\r\n   *   stream or an `AsyncGenerator`) when calling [[Connection.execBulkLoad]]. This method will be removed in the future.\r\n   */\r\n\r\n\r\n  getRowStream() {\r\n    if (this.firstRowWritten) {\r\n      throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\r\n    }\r\n\r\n    if (this.executionStarted) {\r\n      throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\r\n    }\r\n\r\n    this.streamingMode = true;\r\n    return this.rowToPacketTransform;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  cancel() {\r\n    if (this.canceled) {\r\n      return;\r\n    }\r\n\r\n    this.canceled = true;\r\n    this.emit('cancel');\r\n  }\r\n\r\n}\r\n\r\nvar _default = BulkLoad;\r\nexports.default = _default;\r\nmodule.exports = BulkLoad;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _regeneratorRuntime = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar applicationTokenCredentialsBase_1 = require(\"./applicationTokenCredentialsBase\");\n\nvar authConstants_1 = require(\"../util/authConstants\");\n\nvar ApplicationTokenCredentials = /*#__PURE__*/function (_applicationTokenCred) {\n  _inherits(ApplicationTokenCredentials, _applicationTokenCred);\n\n  var _super = _createSuper(ApplicationTokenCredentials);\n\n  /**\r\n   * Creates a new ApplicationTokenCredentials object.\r\n   * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\r\n   * for detailed instructions on creating an Azure Active Directory application.\r\n   *\r\n   * @param clientId - The active directory application client id.\r\n   * @param domain - The domain or tenant id containing this application.\r\n   * @param secret - The authentication secret for the application.\r\n   * @param tokenAudience - The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\r\n   * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\r\n   * @param environment - The azure environment to authenticate with.\r\n   * @param tokenCache - The token cache. Default value is the MemoryCache object from adal.\r\n   */\n  function ApplicationTokenCredentials(clientId, domain, secret, tokenAudience, environment, tokenCache) {\n    var _this;\n\n    _classCallCheck(this, ApplicationTokenCredentials);\n\n    if (!secret || typeof secret.valueOf() !== \"string\") {\n      throw new Error(\"secret must be a non empty string.\");\n    }\n\n    _this = _super.call(this, clientId, domain, tokenAudience, environment, tokenCache);\n    _this.secret = secret;\n    return _this;\n  }\n  /**\r\n   * Tries to get the token from cache initially. If that is unsuccessfull then it tries to get the token from ADAL.\r\n   * @returns A promise that resolves to TokenResponse and rejects with an Error.\r\n   */\n\n\n  _createClass(ApplicationTokenCredentials, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var resource;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.getTokenFromCache();\n\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (!(_context.t0.message && _context.t0.message.startsWith(authConstants_1.AuthConstants.SDK_INTERNAL_ERROR))) {\n                  _context.next = 10;\n                  break;\n                }\n\n                throw _context.t0;\n\n              case 10:\n                resource = this.getActiveDirectoryResourceId();\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this2.authContext.acquireTokenWithClientCredentials(resource, _this2.clientId, _this2.secret, function (error, tokenResponse) {\n                    if (error) {\n                      return reject(error);\n                    }\n\n                    if (tokenResponse.error || tokenResponse.errorDescription) {\n                      return reject(tokenResponse);\n                    }\n\n                    return resolve(tokenResponse);\n                  });\n                }));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n    }\n  }]);\n\n  return ApplicationTokenCredentials;\n}(applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase);\n\nexports.ApplicationTokenCredentials = ApplicationTokenCredentials;","map":{"version":3,"sources":["../../../lib/credentials/applicationTokenCredentials.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,iCAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;AAEA,IAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;IAGa,2B;;;;;AAGX;;;;;;;;;;;;AAYG;AACH,uCACE,QADF,EAEE,MAFF,EAGE,MAHF,EAIE,aAJF,EAKE,WALF,EAME,UANF,EAMyB;AAAA;;AAAA;;AAEvB,QAAI,CAAC,MAAD,IAAW,OAAO,MAAM,CAAC,OAAP,EAAP,KAA4B,QAA3C,EAAqD;AACnD,YAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,8BAAM,QAAN,EAAgB,MAAhB,EAAwB,aAAxB,EAAuC,WAAvC,EAAoD,UAApD;AAEA,UAAK,MAAL,GAAc,MAAd;AAPuB;AAQxB;AAED;;;AAGG;;;;;WACU,oBAAQ;;;;;;;;;;;AAEV,uBAAM,KAAK,iBAAL,EAAN;;;;;;;;;sBAEH,YAAM,OAAN,IAAiB,YAAM,OAAN,CAAc,UAAd,CAAyB,eAAA,CAAA,aAAA,CAAc,kBAAvC,C;;;;;;;;AAGf,gBAAA,Q,GAAW,KAAK,4BAAL,E;iDACV,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,kBAAA,MAAI,CAAC,WAAL,CAAiB,iCAAjB,CACE,QADF,EAEE,MAAI,CAAC,QAFP,EAGE,MAAI,CAAC,MAHP,EAIE,UAAC,KAAD,EAAa,aAAb,EAA6D;AAC3D,wBAAI,KAAJ,EAAW;AACT,6BAAO,MAAM,CAAC,KAAD,CAAb;AACD;;AACD,wBAAI,aAAa,CAAC,KAAd,IAAuB,aAAa,CAAC,gBAAzC,EAA2D;AACzD,6BAAO,MAAM,CAAC,aAAD,CAAb;AACD;;AACD,2BAAO,OAAO,CAAC,aAAD,CAAd;AACD,mBAZH;AAcD,iBAfM,C;;;;;;;;;AAiBV;;;;EA7D8C,iCAAA,CAAA,+B;;AAAjD,OAAA,CAAA,2BAAA,GAAA,2BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst applicationTokenCredentialsBase_1 = require(\"./applicationTokenCredentialsBase\");\r\nconst authConstants_1 = require(\"../util/authConstants\");\r\nclass ApplicationTokenCredentials extends applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase {\r\n    /**\r\n     * Creates a new ApplicationTokenCredentials object.\r\n     * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\r\n     * for detailed instructions on creating an Azure Active Directory application.\r\n     *\r\n     * @param clientId - The active directory application client id.\r\n     * @param domain - The domain or tenant id containing this application.\r\n     * @param secret - The authentication secret for the application.\r\n     * @param tokenAudience - The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\r\n     * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\r\n     * @param environment - The azure environment to authenticate with.\r\n     * @param tokenCache - The token cache. Default value is the MemoryCache object from adal.\r\n     */\r\n    constructor(clientId, domain, secret, tokenAudience, environment, tokenCache) {\r\n        if (!secret || typeof secret.valueOf() !== \"string\") {\r\n            throw new Error(\"secret must be a non empty string.\");\r\n        }\r\n        super(clientId, domain, tokenAudience, environment, tokenCache);\r\n        this.secret = secret;\r\n    }\r\n    /**\r\n     * Tries to get the token from cache initially. If that is unsuccessfull then it tries to get the token from ADAL.\r\n     * @returns A promise that resolves to TokenResponse and rejects with an Error.\r\n     */\r\n    getToken() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                return yield this.getTokenFromCache();\r\n            }\r\n            catch (error) {\r\n                if (error.message && error.message.startsWith(authConstants_1.AuthConstants.SDK_INTERNAL_ERROR)) {\r\n                    throw error;\r\n                }\r\n                const resource = this.getActiveDirectoryResourceId();\r\n                return new Promise((resolve, reject) => {\r\n                    this.authContext.acquireTokenWithClientCredentials(resource, this.clientId, this.secret, (error, tokenResponse) => {\r\n                        if (error) {\r\n                            return reject(error);\r\n                        }\r\n                        if (tokenResponse.error || tokenResponse.errorDescription) {\r\n                            return reject(tokenResponse);\r\n                        }\r\n                        return resolve(tokenResponse);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.ApplicationTokenCredentials = ApplicationTokenCredentials;\r\n//# sourceMappingURL=applicationTokenCredentials.js.map"]},"metadata":{},"sourceType":"script"}
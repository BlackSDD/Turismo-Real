{"ast":null,"code":"'use strict';\n\nconst debug = require('debug')('mssql:base');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst {\n  Readable\n} = require('stream');\n\nconst {\n  IDS,\n  objectHasProperty\n} = require('../utils');\n\nconst globalConnection = require('../global-connection');\n\nconst {\n  RequestError,\n  ConnectionError\n} = require('../error');\n\nconst {\n  TYPES\n} = require('../datatypes');\n\nconst shared = require('../shared');\n/**\r\n * Class Request.\r\n *\r\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\r\n * @property {*} parameters Collection of input and output parameters.\r\n * @property {Boolean} canceled `true` if request was canceled.\r\n *\r\n * @fires Request#recordset\r\n * @fires Request#row\r\n * @fires Request#done\r\n * @fires Request#error\r\n */\n\n\nclass Request extends EventEmitter {\n  /**\r\n   * Create new Request.\r\n   *\r\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\r\n   */\n  constructor(parent) {\n    super();\n    IDS.add(this, 'Request');\n    debug('request(%d): created', IDS.get(this));\n    this.canceled = false;\n    this._paused = false;\n    this.parent = parent || globalConnection.pool;\n    this.parameters = {};\n    this.stream = null;\n    this.arrayRowMode = null;\n  }\n\n  get paused() {\n    return this._paused;\n  }\n  /**\r\n   * Generate sql string and set imput parameters from tagged template string.\r\n   *\r\n   * @param {Template literal} template\r\n   * @return {String}\r\n   */\n\n\n  template() {\n    const values = Array.prototype.slice.call(arguments);\n    const strings = values.shift();\n    return this._template(strings, values);\n  }\n  /**\r\n   * Fetch request from tagged template string.\r\n   *\r\n   * @private\r\n   * @param {Array} strings\r\n   * @param {Array} values\r\n   * @param {String} [method] If provided, method is automatically called with serialized command on this object.\r\n   * @return {Request}\r\n   */\n\n\n  _template(strings, values, method) {\n    const command = [strings[0]];\n\n    for (let index = 0; index < values.length; index++) {\n      const value = values[index]; // if value is an array, prepare each items as it's own comma separated parameter\n\n      if (Array.isArray(value)) {\n        for (let parameterIndex = 0; parameterIndex < value.length; parameterIndex++) {\n          this.input(`param${index + 1}_${parameterIndex}`, value[parameterIndex]);\n          command.push(`@param${index + 1}_${parameterIndex}`);\n\n          if (parameterIndex < value.length - 1) {\n            command.push(', ');\n          }\n        }\n\n        command.push(strings[index + 1]);\n      } else {\n        this.input(`param${index + 1}`, value);\n        command.push(`@param${index + 1}`, strings[index + 1]);\n      }\n    }\n\n    if (method) {\n      return this[method](command.join(''));\n    } else {\n      return command.join('');\n    }\n  }\n  /**\r\n   * Add an input parameter to the request.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n   * @return {Request}\r\n   */\n\n\n  input(name, type, value) {\n    if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT');\n    }\n\n    if (arguments.length < 2) {\n      throw new RequestError('Invalid number of arguments. At least 2 arguments expected.', 'EARGS');\n    } else if (arguments.length === 2) {\n      value = type;\n      type = shared.getTypeByValue(value);\n    } // support for custom data types\n\n\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf();\n    if (value === undefined) value = null; // undefined to null\n\n    if (typeof value === 'number' && isNaN(value)) value = null; // NaN to null\n\n    if (type instanceof Function) type = type();\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM');\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 1,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision,\n      tvpType: type.tvpType\n    };\n    return this;\n  }\n  /**\r\n   * Replace an input parameter on the request.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n   * @return {Request}\r\n   */\n\n\n  replaceInput(name, type, value) {\n    delete this.parameters[name];\n    return this.input(name, type, value);\n  }\n  /**\r\n   * Add an output parameter to the request.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\r\n   * @return {Request}\r\n   */\n\n\n  output(name, type, value) {\n    if (!type) {\n      type = TYPES.NVarChar;\n    }\n\n    if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT');\n    }\n\n    if (type === TYPES.Text || type === TYPES.NText || type === TYPES.Image) {\n      throw new RequestError('Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.', 'EDEPRECATED');\n    } // support for custom data types\n\n\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf();\n    if (value === undefined) value = null; // undefined to null\n\n    if (typeof value === 'number' && isNaN(value)) value = null; // NaN to null\n\n    if (type instanceof Function) type = type();\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM');\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 2,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision\n    };\n    return this;\n  }\n  /**\r\n   * Replace an output parameter on the request.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\r\n   * @return {Request}\r\n   */\n\n\n  replaceOutput(name, type, value) {\n    delete this.parameters[name];\n    return this.output(name, type, value);\n  }\n  /**\r\n   * Execute the SQL batch.\r\n   *\r\n   * @param {String} batch T-SQL batch to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\n\n\n  batch(batch, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n    this.rowsAffected = 0;\n\n    if (typeof callback === 'function') {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected\n          });\n        }\n\n        if (err) return callback(err);\n        callback(null, {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        });\n      });\n\n      return this;\n    } // Check is method was called as tagged template\n\n\n    if (typeof batch === 'object') {\n      const values = Array.prototype.slice.call(arguments);\n      const strings = values.shift();\n      batch = this._template(strings, values);\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected\n          });\n        }\n\n        if (err) return reject(err);\n        resolve({\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        });\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {String} batch\r\n   * @param {Request~requestCallback} callback\r\n   */\n\n\n  _batch(batch, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n    }\n\n    this.canceled = false;\n    setImmediate(callback);\n  }\n  /**\r\n   * Bulk load.\r\n   *\r\n   * @param {Table} table SQL table.\r\n   * @param {object} [options] Options to be passed to the underlying driver (tedious only).\r\n   * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\n\n\n  bulk(table, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else if (typeof options === 'undefined') {\n      options = {};\n    }\n\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n\n    if (this.stream || typeof callback === 'function') {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          return this.emit('done', {\n            rowsAffected\n          });\n        }\n\n        if (err) return callback(err);\n        callback(null, {\n          rowsAffected\n        });\n      });\n\n      return this;\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (err) return reject(err);\n        resolve({\n          rowsAffected\n        });\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {Table} table\r\n   * @param {object} options\r\n   * @param {Request~bulkCallback} callback\r\n   */\n\n\n  _bulk(table, options, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n    }\n\n    this.canceled = false;\n    setImmediate(callback);\n  }\n  /**\r\n   * Wrap original request in a Readable stream that supports back pressure and return.\r\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\r\n   *\r\n   * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\r\n   * @return {Stream}\r\n   */\n\n\n  toReadableStream(streamOptions = {}) {\n    this.stream = true;\n    this.pause();\n    const readableStream = new Readable({ ...streamOptions,\n      objectMode: true,\n      read: () =>\n      /* size */\n      {\n        this.resume();\n      }\n    });\n    this.on('row', row => {\n      if (!readableStream.push(row)) {\n        this.pause();\n      }\n    });\n    this.on('error', error => {\n      readableStream.emit('error', error);\n    });\n    this.on('done', () => {\n      readableStream.push(null);\n    });\n    return readableStream;\n  }\n  /**\r\n   * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\r\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\r\n   *\r\n   * @param {Stream} stream Stream to pipe data into.\r\n   * @return {Stream}\r\n   */\n\n\n  pipe(writableStream) {\n    const readableStream = this.toReadableStream();\n    return readableStream.pipe(writableStream);\n  }\n  /**\r\n   * Execute the SQL command.\r\n   *\r\n   * @param {String} command T-SQL command to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\n\n\n  query(command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n    this.rowsAffected = 0;\n\n    if (typeof callback === 'function') {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected\n          });\n        }\n\n        if (err) return callback(err);\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        };\n        if (this.arrayRowMode) result.columns = columns;\n        callback(null, result);\n      });\n\n      return this;\n    } // Check is method was called as tagged template\n\n\n    if (typeof command === 'object') {\n      const values = Array.prototype.slice.call(arguments);\n      const strings = values.shift();\n      command = this._template(strings, values);\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected\n          });\n        }\n\n        if (err) return reject(err);\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        };\n        if (this.arrayRowMode) result.columns = columns;\n        resolve(result);\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {String} command\r\n   * @param {Request~bulkCallback} callback\r\n   */\n\n\n  _query(command, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n    }\n\n    this.canceled = false;\n    setImmediate(callback);\n  }\n  /**\r\n   * Call a stored procedure.\r\n   *\r\n   * @param {String} procedure Name of the stored procedure to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\n\n\n  execute(command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n    this.rowsAffected = 0;\n\n    if (typeof callback === 'function') {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          });\n        }\n\n        if (err) return callback(err);\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        };\n        if (this.arrayRowMode) result.columns = columns;\n        callback(null, result);\n      });\n\n      return this;\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          });\n        }\n\n        if (err) return reject(err);\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        };\n        if (this.arrayRowMode) result.columns = columns;\n        resolve(result);\n      });\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {String} procedure\r\n   * @param {Request~bulkCallback} callback\r\n   */\n\n\n  _execute(procedure, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n    }\n\n    this.canceled = false;\n    setImmediate(callback);\n  }\n  /**\r\n   * Cancel currently executed request.\r\n   *\r\n   * @return {Boolean}\r\n   */\n\n\n  cancel() {\n    this._cancel();\n\n    return true;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _cancel() {\n    this.canceled = true;\n  }\n\n  pause() {\n    if (this.stream) {\n      this._pause();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  _pause() {\n    this._paused = true;\n  }\n\n  resume() {\n    if (this.stream) {\n      this._resume();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  _resume() {\n    this._paused = false;\n  }\n\n  _setCurrentRequest(request) {\n    this._currentRequest = request;\n\n    if (this._paused) {\n      this.pause();\n    }\n\n    return this;\n  }\n\n}\n\nmodule.exports = Request;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/lib/base/request.js"],"names":["debug","require","EventEmitter","Readable","IDS","objectHasProperty","globalConnection","RequestError","ConnectionError","TYPES","shared","Request","constructor","parent","add","get","canceled","_paused","pool","parameters","stream","arrayRowMode","paused","template","values","Array","prototype","slice","call","arguments","strings","shift","_template","method","command","index","length","value","isArray","parameterIndex","input","push","join","name","type","test","getTypeByValue","valueOf","Date","undefined","isNaN","Function","io","scale","precision","tvpType","replaceInput","output","NVarChar","Text","NText","Image","replaceOutput","batch","callback","config","rowsAffected","_batch","err","recordsets","emit","recordset","Promise","resolve","reject","setImmediate","connected","bulk","table","options","_bulk","toReadableStream","streamOptions","pause","readableStream","objectMode","read","resume","on","row","error","pipe","writableStream","query","_query","columns","result","execute","_execute","returnValue","procedure","cancel","_cancel","_pause","_resume","_setCurrentRequest","request","_currentRequest","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst debug = require('debug')('mssql:base')\r\nconst { EventEmitter } = require('events')\r\nconst { Readable } = require('stream')\r\nconst { IDS, objectHasProperty } = require('../utils')\r\nconst globalConnection = require('../global-connection')\r\nconst { RequestError, ConnectionError } = require('../error')\r\nconst { TYPES } = require('../datatypes')\r\nconst shared = require('../shared')\r\n\r\n/**\r\n * Class Request.\r\n *\r\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\r\n * @property {*} parameters Collection of input and output parameters.\r\n * @property {Boolean} canceled `true` if request was canceled.\r\n *\r\n * @fires Request#recordset\r\n * @fires Request#row\r\n * @fires Request#done\r\n * @fires Request#error\r\n */\r\n\r\nclass Request extends EventEmitter {\r\n  /**\r\n   * Create new Request.\r\n   *\r\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\r\n   */\r\n\r\n  constructor (parent) {\r\n    super()\r\n\r\n    IDS.add(this, 'Request')\r\n    debug('request(%d): created', IDS.get(this))\r\n\r\n    this.canceled = false\r\n    this._paused = false\r\n    this.parent = parent || globalConnection.pool\r\n    this.parameters = {}\r\n    this.stream = null\r\n    this.arrayRowMode = null\r\n  }\r\n\r\n  get paused () {\r\n    return this._paused\r\n  }\r\n\r\n  /**\r\n   * Generate sql string and set imput parameters from tagged template string.\r\n   *\r\n   * @param {Template literal} template\r\n   * @return {String}\r\n   */\r\n  template () {\r\n    const values = Array.prototype.slice.call(arguments)\r\n    const strings = values.shift()\r\n    return this._template(strings, values)\r\n  }\r\n\r\n  /**\r\n   * Fetch request from tagged template string.\r\n   *\r\n   * @private\r\n   * @param {Array} strings\r\n   * @param {Array} values\r\n   * @param {String} [method] If provided, method is automatically called with serialized command on this object.\r\n   * @return {Request}\r\n   */\r\n\r\n  _template (strings, values, method) {\r\n    const command = [strings[0]]\r\n\r\n    for (let index = 0; index < values.length; index++) {\r\n      const value = values[index]\r\n      // if value is an array, prepare each items as it's own comma separated parameter\r\n      if (Array.isArray(value)) {\r\n        for (let parameterIndex = 0; parameterIndex < value.length; parameterIndex++) {\r\n          this.input(`param${index + 1}_${parameterIndex}`, value[parameterIndex])\r\n          command.push(`@param${index + 1}_${parameterIndex}`)\r\n          if (parameterIndex < value.length - 1) {\r\n            command.push(', ')\r\n          }\r\n        }\r\n        command.push(strings[index + 1])\r\n      } else {\r\n        this.input(`param${index + 1}`, value)\r\n        command.push(`@param${index + 1}`, strings[index + 1])\r\n      }\r\n    }\r\n\r\n    if (method) {\r\n      return this[method](command.join(''))\r\n    } else {\r\n      return command.join('')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add an input parameter to the request.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n   * @return {Request}\r\n   */\r\n\r\n  input (name, type, value) {\r\n    if ((/(--| |\\/\\*|\\*\\/|')/).test(name)) {\r\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\r\n    }\r\n\r\n    if (arguments.length < 2) {\r\n      throw new RequestError('Invalid number of arguments. At least 2 arguments expected.', 'EARGS')\r\n    } else if (arguments.length === 2) {\r\n      value = type\r\n      type = shared.getTypeByValue(value)\r\n    }\r\n\r\n    // support for custom data types\r\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\r\n\r\n    if (value === undefined) value = null // undefined to null\r\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\r\n    if (type instanceof Function) type = type()\r\n\r\n    if (objectHasProperty(this.parameters, name)) {\r\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\r\n    }\r\n\r\n    this.parameters[name] = {\r\n      name,\r\n      type: type.type,\r\n      io: 1,\r\n      value,\r\n      length: type.length,\r\n      scale: type.scale,\r\n      precision: type.precision,\r\n      tvpType: type.tvpType\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Replace an input parameter on the request.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n   * @return {Request}\r\n   */\r\n\r\n  replaceInput (name, type, value) {\r\n    delete this.parameters[name]\r\n\r\n    return this.input(name, type, value)\r\n  }\r\n\r\n  /**\r\n   * Add an output parameter to the request.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\r\n   * @return {Request}\r\n   */\r\n\r\n  output (name, type, value) {\r\n    if (!type) { type = TYPES.NVarChar }\r\n\r\n    if ((/(--| |\\/\\*|\\*\\/|')/).test(name)) {\r\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\r\n    }\r\n\r\n    if ((type === TYPES.Text) || (type === TYPES.NText) || (type === TYPES.Image)) {\r\n      throw new RequestError('Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.', 'EDEPRECATED')\r\n    }\r\n\r\n    // support for custom data types\r\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\r\n\r\n    if (value === undefined) value = null // undefined to null\r\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\r\n    if (type instanceof Function) type = type()\r\n\r\n    if (objectHasProperty(this.parameters, name)) {\r\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\r\n    }\r\n\r\n    this.parameters[name] = {\r\n      name,\r\n      type: type.type,\r\n      io: 2,\r\n      value,\r\n      length: type.length,\r\n      scale: type.scale,\r\n      precision: type.precision\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Replace an output parameter on the request.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\r\n   * @return {Request}\r\n   */\r\n\r\n  replaceOutput (name, type, value) {\r\n    delete this.parameters[name]\r\n\r\n    return this.output(name, type, value)\r\n  }\r\n\r\n  /**\r\n   * Execute the SQL batch.\r\n   *\r\n   * @param {String} batch T-SQL batch to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  batch (batch, callback) {\r\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\r\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\r\n    this.rowsAffected = 0\r\n\r\n    if (typeof callback === 'function') {\r\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected\r\n          })\r\n        }\r\n\r\n        if (err) return callback(err)\r\n        callback(null, {\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected\r\n        })\r\n      })\r\n      return this\r\n    }\r\n\r\n    // Check is method was called as tagged template\r\n    if (typeof batch === 'object') {\r\n      const values = Array.prototype.slice.call(arguments)\r\n      const strings = values.shift()\r\n      batch = this._template(strings, values)\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected\r\n          })\r\n        }\r\n\r\n        if (err) return reject(err)\r\n        resolve({\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} batch\r\n   * @param {Request~requestCallback} callback\r\n   */\r\n\r\n  _batch (batch, callback) {\r\n    if (!this.parent) {\r\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\r\n    }\r\n\r\n    if (!this.parent.connected) {\r\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\r\n    }\r\n\r\n    this.canceled = false\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Bulk load.\r\n   *\r\n   * @param {Table} table SQL table.\r\n   * @param {object} [options] Options to be passed to the underlying driver (tedious only).\r\n   * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  bulk (table, options, callback) {\r\n    if (typeof options === 'function') {\r\n      callback = options\r\n      options = {}\r\n    } else if (typeof options === 'undefined') {\r\n      options = {}\r\n    }\r\n\r\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\r\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\r\n\r\n    if (this.stream || typeof callback === 'function') {\r\n      this._bulk(table, options, (err, rowsAffected) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          return this.emit('done', {\r\n            rowsAffected\r\n          })\r\n        }\r\n\r\n        if (err) return callback(err)\r\n        callback(null, {\r\n          rowsAffected\r\n        })\r\n      })\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._bulk(table, options, (err, rowsAffected) => {\r\n        if (err) return reject(err)\r\n        resolve({\r\n          rowsAffected\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Table} table\r\n   * @param {object} options\r\n   * @param {Request~bulkCallback} callback\r\n   */\r\n\r\n  _bulk (table, options, callback) {\r\n    if (!this.parent) {\r\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\r\n    }\r\n\r\n    if (!this.parent.connected) {\r\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\r\n    }\r\n\r\n    this.canceled = false\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Wrap original request in a Readable stream that supports back pressure and return.\r\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\r\n   *\r\n   * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\r\n   * @return {Stream}\r\n   */\r\n  toReadableStream (streamOptions = {}) {\r\n    this.stream = true\r\n    this.pause()\r\n    const readableStream = new Readable({\r\n      ...streamOptions,\r\n      objectMode: true,\r\n      read: (/* size */) => {\r\n        this.resume()\r\n      }\r\n    })\r\n    this.on('row', (row) => {\r\n      if (!readableStream.push(row)) {\r\n        this.pause()\r\n      }\r\n    })\r\n    this.on('error', (error) => {\r\n      readableStream.emit('error', error)\r\n    })\r\n    this.on('done', () => {\r\n      readableStream.push(null)\r\n    })\r\n    return readableStream\r\n  }\r\n\r\n  /**\r\n   * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\r\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\r\n   *\r\n   * @param {Stream} stream Stream to pipe data into.\r\n   * @return {Stream}\r\n   */\r\n  pipe (writableStream) {\r\n    const readableStream = this.toReadableStream()\r\n    return readableStream.pipe(writableStream)\r\n  }\r\n\r\n  /**\r\n   * Execute the SQL command.\r\n   *\r\n   * @param {String} command T-SQL command to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  query (command, callback) {\r\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\r\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\r\n    this.rowsAffected = 0\r\n\r\n    if (typeof callback === 'function') {\r\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected\r\n          })\r\n        }\r\n\r\n        if (err) return callback(err)\r\n        const result = {\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected\r\n        }\r\n        if (this.arrayRowMode) result.columns = columns\r\n        callback(null, result)\r\n      })\r\n      return this\r\n    }\r\n\r\n    // Check is method was called as tagged template\r\n    if (typeof command === 'object') {\r\n      const values = Array.prototype.slice.call(arguments)\r\n      const strings = values.shift()\r\n      command = this._template(strings, values)\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected\r\n          })\r\n        }\r\n\r\n        if (err) return reject(err)\r\n        const result = {\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected\r\n        }\r\n        if (this.arrayRowMode) result.columns = columns\r\n        resolve(result)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} command\r\n   * @param {Request~bulkCallback} callback\r\n   */\r\n\r\n  _query (command, callback) {\r\n    if (!this.parent) {\r\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\r\n    }\r\n\r\n    if (!this.parent.connected) {\r\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\r\n    }\r\n\r\n    this.canceled = false\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Call a stored procedure.\r\n   *\r\n   * @param {String} procedure Name of the stored procedure to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  execute (command, callback) {\r\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\r\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\r\n    this.rowsAffected = 0\r\n\r\n    if (typeof callback === 'function') {\r\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected,\r\n            returnValue\r\n          })\r\n        }\r\n\r\n        if (err) return callback(err)\r\n        const result = {\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected,\r\n          returnValue\r\n        }\r\n        if (this.arrayRowMode) result.columns = columns\r\n        callback(null, result)\r\n      })\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\r\n        if (this.stream) {\r\n          if (err) this.emit('error', err)\r\n          err = null\r\n\r\n          this.emit('done', {\r\n            output,\r\n            rowsAffected,\r\n            returnValue\r\n          })\r\n        }\r\n\r\n        if (err) return reject(err)\r\n        const result = {\r\n          recordsets,\r\n          recordset: recordsets && recordsets[0],\r\n          output,\r\n          rowsAffected,\r\n          returnValue\r\n        }\r\n        if (this.arrayRowMode) result.columns = columns\r\n        resolve(result)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} procedure\r\n   * @param {Request~bulkCallback} callback\r\n   */\r\n\r\n  _execute (procedure, callback) {\r\n    if (!this.parent) {\r\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\r\n    }\r\n\r\n    if (!this.parent.connected) {\r\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\r\n    }\r\n\r\n    this.canceled = false\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Cancel currently executed request.\r\n   *\r\n   * @return {Boolean}\r\n   */\r\n\r\n  cancel () {\r\n    this._cancel()\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  _cancel () {\r\n    this.canceled = true\r\n  }\r\n\r\n  pause () {\r\n    if (this.stream) {\r\n      this._pause()\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  _pause () {\r\n    this._paused = true\r\n  }\r\n\r\n  resume () {\r\n    if (this.stream) {\r\n      this._resume()\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  _resume () {\r\n    this._paused = false\r\n  }\r\n\r\n  _setCurrentRequest (request) {\r\n    this._currentRequest = request\r\n    if (this._paused) {\r\n      this.pause()\r\n    }\r\n    return this\r\n  }\r\n}\r\n\r\nmodule.exports = Request\r\n"]},"metadata":{},"sourceType":"script"}
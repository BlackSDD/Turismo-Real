{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _constants = _interopRequireDefault(require(\"constants\"));\n\nvar _tls = require(\"tls\");\n\nvar _stream = require(\"stream\");\n\nvar _msRestNodeauth = require(\"@azure/ms-rest-nodeauth\");\n\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\n\nvar _debug = _interopRequireDefault(require(\"./debug\"));\n\nvar _events = require(\"events\");\n\nvar _instanceLookup = require(\"./instance-lookup\");\n\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\n\nvar _packet = require(\"./packet\");\n\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\n\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\n\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\n\nvar _request = _interopRequireDefault(require(\"./request\"));\n\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\n\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\n\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\n\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\n\nvar _transaction = require(\"./transaction\");\n\nvar _errors = require(\"./errors\");\n\nvar _connector = require(\"./connector\");\n\nvar _library = require(\"./library\");\n\nvar _tdsVersions = require(\"./tds-versions\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _ntlm = require(\"./ntlm\");\n\nvar _depd = _interopRequireDefault(require(\"depd\"));\n\nvar _adalNode = require(\"adal-node\");\n\nvar _nodeAbortController = _interopRequireDefault(require(\"node-abort-controller\"));\n\nvar _dataType = require(\"./data-type\");\n\nvar _bulkLoadPayload = require(\"./bulk-load-payload\");\n\nvar _package = require(\"../package.json\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nconst deprecate = (0, _depd.default)('tedious');\n/**\r\n * @private\r\n */\n\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\r\n * @private\r\n */\n\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\r\n * @private\r\n */\n\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\r\n * @private\r\n */\n\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\r\n * @private\r\n */\n\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\r\n * @private\r\n */\n\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\r\n * @private\r\n */\n\nconst DEFAULT_TEXTSIZE = 2147483647;\n/**\r\n * @private\r\n */\n\nconst DEFAULT_DATEFIRST = 7;\n/**\r\n * @private\r\n */\n\nconst DEFAULT_PORT = 1433;\n/**\r\n * @private\r\n */\n\nconst DEFAULT_TDS_VERSION = '7_4';\n/**\r\n * @private\r\n */\n\nconst DEFAULT_LANGUAGE = 'us_english';\n/**\r\n * @private\r\n */\n\nconst DEFAULT_DATEFORMAT = 'mdy';\n/**\r\n * @private\r\n */\n\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n/**\r\n * A [[Connection]] instance represents a single connection to a database server.\r\n *\r\n * ```js\r\n * var Connection = require('tedious').Connection;\r\n * var config = {\r\n *  \"authentication\": {\r\n *    ...,\r\n *    \"options\": {...}\r\n *  },\r\n *  \"options\": {...}\r\n * };\r\n * var connection = new Connection(config);\r\n * ```\r\n *\r\n * Only one request at a time may be executed on a connection. Once a [[Request]]\r\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\r\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\r\n * [[Request]]'s completion callback is called.\r\n */\n\nclass Connection extends _events.EventEmitter {\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * Note: be aware of the different options field:\r\n   * 1. config.authentication.options\r\n   * 2. config.options\r\n   *\r\n   * ```js\r\n   * const { Connection } = require('tedious');\r\n   *\r\n   * const config = {\r\n   *  \"authentication\": {\r\n   *    ...,\r\n   *    \"options\": {...}\r\n   *  },\r\n   *  \"options\": {...}\r\n   * };\r\n   *\r\n   * const connection = new Connection(config);\r\n   * ```\r\n   *\r\n   * @param config\r\n   */\n  constructor(config) {\n    super();\n    this.fedAuthRequired = void 0;\n    this.fedAuthInfoToken = void 0;\n    this.config = void 0;\n    this.secureContext = void 0;\n    this.inTransaction = void 0;\n    this.transactionDescriptors = void 0;\n    this.transactionDepth = void 0;\n    this.isSqlBatch = void 0;\n    this.curTransientRetryCount = void 0;\n    this.transientErrorLookup = void 0;\n    this.closed = void 0;\n    this.loggedIn = void 0;\n    this.loginError = void 0;\n    this.debug = void 0;\n    this.ntlmpacket = void 0;\n    this.ntlmpacketBuffer = void 0;\n    this.routingData = void 0;\n    this.messageIo = void 0;\n    this.state = void 0;\n    this.resetConnectionOnNextRequest = void 0;\n    this.attentionReceived = void 0;\n    this.request = void 0;\n    this.procReturnStatusValue = void 0;\n    this.socket = void 0;\n    this.messageBuffer = void 0;\n    this.connectTimer = void 0;\n    this.cancelTimer = void 0;\n    this.requestTimer = void 0;\n    this.retryTimer = void 0;\n    this._cancelAfterRequestSent = void 0;\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    this.fedAuthRequired = false;\n    this.fedAuthInfoToken = undefined;\n    let authentication;\n\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        if (options.msiSecret !== undefined && typeof options.msiSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiSecret\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint,\n            msiSecret: options.msiSecret\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,\n        // Units: miliseconds\n        columnEncryptionSetting: false,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        encryptionKeyStoreProviders: undefined,\n        instanceName: undefined,\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        serverName: undefined,\n        serverSupportsColumnEncryption: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustedServerNameAE: undefined,\n        trustServerCertificate: true,\n        useColumnNames: false,\n        useUTC: true,\n        validateBulkLoadParameters: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n\n        this.config.options.encrypt = config.options.encrypt;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.isolationLevel, 'config.options.isolationLevel');\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        if (config.options.textsize > 2147483647) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\n        } else if (config.options.textsize < -1) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\n        }\n\n        this.config.options.textsize = config.options.textsize | 0;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.validateBulkLoadParameters !== undefined) {\n        if (typeof config.options.validateBulkLoadParameters !== 'boolean') {\n          throw new TypeError('The \"config.options.validateBulkLoadParameters\" property must be of type boolean.');\n        }\n\n        if (config.options.validateBulkLoadParameters === false) {\n          deprecate('Setting the \"config.options.validateBulkLoadParameters\" to `false` is deprecated and will no longer work in the next major version of `tedious`. Set the value to `true` and update your use of BulkLoad functionality to silence this message.');\n        }\n\n        this.config.options.validateBulkLoadParameters = config.options.validateBulkLoadParameters;\n      }\n\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n\n        this.config.options.workstationId = config.options.workstationId;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    let credentialsDetails = this.config.options.cryptoCredentialsDetails;\n\n    if (credentialsDetails.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      credentialsDetails = Object.create(credentialsDetails, {\n        secureOptions: {\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    this.secureContext = (0, _tls.createSecureContext)(credentialsDetails);\n    this.debug = this.createDebug();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.loggedIn = false;\n    this.messageBuffer = Buffer.alloc(0);\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\n    this.state = this.STATE.INITIALIZED;\n\n    this._cancelAfterRequestSent = () => {\n      this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\n      this.transitionTo(this.STATE.SENT_ATTENTION);\n      this.createCancelTimer();\n    };\n  }\n\n  connect(connectListener) {\n    if (this.state !== this.STATE.INITIALIZED) {\n      throw new _errors.ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n    }\n\n    if (connectListener) {\n      const onConnect = err => {\n        this.removeListener('error', onError);\n        connectListener(err);\n      };\n\n      const onError = err => {\n        this.removeListener('connect', onConnect);\n        connectListener(err);\n      };\n\n      this.once('connect', onConnect);\n      this.once('error', onError);\n    }\n\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n  /**\r\n   * The server has reported that the charset has changed.\r\n   */\n\n\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  emit(event, ...args) {\n    return super.emit(event, ...args);\n  }\n  /**\r\n   * Closes the connection to the database.\r\n   *\r\n   * The [[Event_end]] will be emitted once the connection has been closed.\r\n   */\n\n\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  initialiseConnection() {\n    const signal = this.createConnectTimer();\n\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal);\n    } else {\n      return new _instanceLookup.InstanceLookup().instanceLookup({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName,\n        timeout: this.config.options.connectTimeout,\n        signal: signal\n      }, (err, port) => {\n        if (err) {\n          if (err.name === 'AbortError') {\n            return;\n          }\n\n          this.emit('connect', (0, _errors.ConnectionError)(err.message, 'EINSTLOOKUP'));\n        } else {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal);\n        }\n      });\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  cleanupConnection(cleanupType) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n\n      const request = this.request;\n\n      if (request) {\n        const err = (0, _errors.RequestError)('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n\n      this.closed = true;\n      this.loggedIn = false;\n      this.loginError = undefined;\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  createDebug() {\n    const debug = new _debug.default(this.config.options.debug);\n    debug.on('debug', message => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  createTokenStreamParser(message) {\n    const tokenStreamParser = new _tokenStreamParser.Parser(message, this.debug, this.config.options);\n    tokenStreamParser.on('infoMessage', token => {\n      this.emit('infoMessage', token);\n    });\n    tokenStreamParser.on('sspichallenge', token => {\n      if (token.ntlmpacket) {\n        this.ntlmpacket = token.ntlmpacket;\n        this.ntlmpacketBuffer = token.ntlmpacketBuffer;\n      }\n\n      this.emit('sspichallenge', token);\n    });\n    tokenStreamParser.on('errorMessage', token => {\n      this.emit('errorMessage', token);\n\n      if (this.loggedIn) {\n        const request = this.request;\n\n        if (request) {\n          if (!request.canceled) {\n            const error = new _errors.RequestError(token.message, 'EREQUEST');\n            error.number = token.number;\n            error.state = token.state;\n            error.class = token.class;\n            error.serverName = token.serverName;\n            error.procName = token.procName;\n            error.lineNumber = token.lineNumber;\n            request.error = error;\n          }\n        }\n      } else {\n        const error = (0, _errors.ConnectionError)(token.message, 'ELOGIN');\n        const isLoginErrorTransient = this.transientErrorLookup.isTransientError(token.number);\n\n        if (isLoginErrorTransient && this.curTransientRetryCount !== this.config.options.maxRetriesOnTransientErrors) {\n          error.isTransient = true;\n        }\n\n        this.loginError = error;\n      }\n    });\n    tokenStreamParser.on('databaseChange', token => {\n      this.emit('databaseChange', token.newValue);\n    });\n    tokenStreamParser.on('languageChange', token => {\n      this.emit('languageChange', token.newValue);\n    });\n    tokenStreamParser.on('charsetChange', token => {\n      this.emit('charsetChange', token.newValue);\n    });\n    tokenStreamParser.on('fedAuthInfo', token => {\n      this.dispatchEvent('fedAuthInfo', token);\n    });\n    tokenStreamParser.on('featureExtAck', token => {\n      this.dispatchEvent('featureExtAck', token);\n    });\n    tokenStreamParser.on('loginack', token => {\n      if (!token.tdsVersion) {\n        // unsupported TDS version\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unknown TDS version.', 'ETDS');\n        this.loggedIn = false;\n        return;\n      }\n\n      if (!token.interface) {\n        // unsupported interface\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n        this.loggedIn = false;\n        return;\n      } // use negotiated version\n\n\n      this.config.options.tdsVersion = token.tdsVersion;\n      this.loggedIn = true;\n    });\n    tokenStreamParser.on('routingChange', token => {\n      // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\n      const [server] = token.newValue.server.split('\\\\');\n      this.routingData = {\n        server,\n        port: token.newValue.port\n      };\n    });\n    tokenStreamParser.on('packetSizeChange', token => {\n      this.messageIo.packetSize(token.newValue);\n    }); // A new top-level transaction was started. This is not fired\n    // for nested transactions.\n\n    tokenStreamParser.on('beginTransaction', token => {\n      this.transactionDescriptors.push(token.newValue);\n      this.inTransaction = true;\n    }); // A top-level transaction was committed. This is not fired\n    // for nested transactions.\n\n    tokenStreamParser.on('commitTransaction', () => {\n      this.transactionDescriptors.length = 1;\n      this.inTransaction = false;\n    }); // A top-level transaction was rolled back. This is not fired\n    // for nested transactions. This is also fired if a batch\n    // aborting error happened that caused a rollback.\n\n    tokenStreamParser.on('rollbackTransaction', () => {\n      this.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n      this.inTransaction = false;\n      this.emit('rollbackTransaction');\n    });\n    tokenStreamParser.on('columnMetadata', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          if (this.config.options.useColumnNames) {\n            const columns = {};\n\n            for (let j = 0, len = token.columns.length; j < len; j++) {\n              const col = token.columns[j];\n\n              if (columns[col.colName] == null) {\n                columns[col.colName] = col;\n              }\n            }\n\n            request.emit('columnMetadata', columns);\n          } else {\n            request.emit('columnMetadata', token.columns);\n          }\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('order', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('order', token.orderColumns);\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('row', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          if (this.config.options.rowCollectionOnRequestCompletion) {\n            request.rows.push(token.columns);\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst.push(token.columns);\n          }\n\n          if (!request.canceled) {\n            request.emit('row', token.columns);\n          }\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('returnStatus', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          // Keep value for passing in 'doneProc' event.\n          this.procReturnStatusValue = token.value;\n        }\n      }\n    });\n    tokenStreamParser.on('returnValue', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('returnValue', token.paramName, token.value, token.metadata);\n        }\n      }\n    });\n    tokenStreamParser.on('doneProc', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('doneProc', token.rowCount, token.more, this.procReturnStatusValue, request.rst);\n          this.procReturnStatusValue = undefined;\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('doneInProc', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('doneInProc', token.rowCount, token.more, request.rst);\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('done', token => {\n      const request = this.request;\n\n      if (request) {\n        if (token.attention) {\n          this.dispatchEvent('attention');\n        }\n\n        if (!request.canceled) {\n          if (token.sqlError && !request.error) {\n            // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n            request.error = (0, _errors.RequestError)('An unknown error has occurred.', 'UNKNOWN');\n          }\n\n          request.emit('done', token.rowCount, token.more, request.rst);\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('resetConnection', () => {\n      this.emit('resetConnection');\n    });\n    return tokenStreamParser;\n  }\n\n  connectOnPort(port, multiSubnetFailover, signal) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n    new _connector.Connector(connectOpts, signal, multiSubnetFailover).execute((err, socket) => {\n      if (err) {\n        if (err.name === 'AbortError') {\n          return;\n        }\n\n        return this.socketError(err);\n      }\n\n      socket = socket;\n      socket.on('error', error => {\n        this.socketError(error);\n      });\n      socket.on('close', () => {\n        this.socketClose();\n      });\n      socket.on('end', () => {\n        this.socketEnd();\n      });\n      socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n      this.messageIo = new _messageIo.default(socket, this.config.options.packetSize, this.debug);\n      this.messageIo.on('data', message => {\n        this.dispatchEvent('message', message);\n      });\n      this.messageIo.on('secure', cleartext => {\n        this.emit('secure', cleartext);\n      });\n      this.messageIo.on('error', error => {\n        this.socketError(error);\n      });\n      this.socket = socket;\n      this.socketConnect();\n    });\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  createConnectTimer() {\n    const controller = new _nodeAbortController.default();\n    this.connectTimer = setTimeout(() => {\n      controller.abort();\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n    return controller.signal;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n\n    const request = this.request;\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  connectTimeout() {\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request;\n    request.cancel();\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = (0, _errors.RequestError)(message, 'ETIMEOUT');\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  transitionTo(newState) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  getEventHandler(eventName) {\n    const handler = this.state.events[eventName];\n\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n\n    return handler;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  dispatchEvent(eventName, ...args) {\n    const handler = this.state.events[eventName];\n\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  socketError(error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', (0, _errors.ConnectionError)(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', (0, _errors.ConnectionError)(message, 'ESOCKET'));\n    }\n\n    this.dispatchEvent('socketError', error);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  socketConnect() {\n    this.closed = false;\n    this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n    this.dispatchEvent('socketConnect');\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  socketEnd() {\n    this.debug.log('socket ended');\n\n    if (this.state !== this.STATE.FINAL) {\n      const error = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  sendPreLogin() {\n    var _$exec;\n\n    const [, major, minor, build] = (_$exec = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(_package.version)) !== null && _$exec !== void 0 ? _$exec : ['0.0.0', '0', '0', '0'];\n    const payload = new _preloginPayload.default({\n      encrypt: this.config.options.encrypt,\n      version: {\n        major: Number(major),\n        minor: Number(minor),\n        build: Number(build),\n        subbuild: 0\n      }\n    });\n    this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  emptyMessageBuffer() {\n    this.messageBuffer = Buffer.alloc(0);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  addToMessageBuffer(data) {\n    this.messageBuffer = Buffer.concat([this.messageBuffer, data]);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  sendLogin7Packet() {\n    const payload = new _login7Payload.default({\n      tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n    const {\n      authentication\n    } = this.config;\n\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n\n      case 'ntlm':\n        payload.sspi = (0, _ntlm.createNTLMRequest)({\n          domain: authentication.options.domain\n        });\n        break;\n\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n\n    payload.hostname = this.config.options.workstationId || _os.default.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = _library.name;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n    this.routingData = undefined;\n    this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  sendFedAuthTokenMessage(token) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\n\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  sendInitialSql() {\n    const payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n    const message = new _message.default({\n      type: _packet.TYPE.SQL_BATCH\n    });\n    this.messageIo.outgoingMessageStream.write(message);\n\n    _stream.Readable.from(payload).pipe(message);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  getInitialSql() {\n    const options = [];\n\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\n      options.push('set concat_null_yields_null off');\n    }\n\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n\n    return options.join('\\n');\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n  /**\r\n   * Execute the SQL batch represented by [[Request]].\r\n   * There is no param support, and unlike [[Request.execSql]],\r\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\r\n   *\r\n   * In almost all cases, [[Request.execSql]] will be a better choice.\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   */\n\n\n  execSqlBatch(request) {\n    this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\r\n   *  Execute the SQL represented by [[Request]].\r\n   *\r\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\r\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\r\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\r\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\r\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\r\n   *\r\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\r\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\r\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   */\n\n\n  execSql(request) {\n    try {\n      request.validateParameters();\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'statement',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    if (request.parameters.length) {\n      parameters.push({\n        type: _dataType.TYPES.NVarChar,\n        name: 'params',\n        value: request.makeParamsParameter(request.parameters),\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      parameters.push(...request.parameters);\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_executesql', parameters, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\r\n   * Creates a new BulkLoad instance.\r\n   *\r\n   * @param table The name of the table to bulk-insert into.\r\n   * @param options A set of bulk load options.\r\n   */\n\n\n  newBulkLoad(table, callbackOrOptions, callback) {\n    let options;\n\n    if (callback === undefined) {\n      callback = callbackOrOptions;\n      options = {};\n    } else {\n      options = callbackOrOptions;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n\n    return new _bulkLoad.default(table, this.config.options, options, callback);\n  }\n  /**\r\n   * Execute a [[BulkLoad]].\r\n   *\r\n   * ```js\r\n   * // We want to perform a bulk load into a table with the following format:\r\n   * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\r\n   *\r\n   * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\r\n   *   // ...\r\n   * });\r\n   *\r\n   * // First, we need to specify the columns that we want to write to,\r\n   * // and their definitions. These definitions must match the actual table,\r\n   * // otherwise the bulk load will fail.\r\n   * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\r\n   * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\r\n   * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\r\n   *\r\n   * // Now, we can specify each row to be written.\r\n   * //\r\n   * // Note that these rows are held in memory until the\r\n   * // bulk load was performed, so if you need to write a large\r\n   * // number of rows (e.g. by reading from a CSV file),\r\n   * // using a streaming bulk load is advisable to keep memory usage low.\r\n   * bulkLoad.addRow({ 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') });\r\n   * bulkLoad.addRow({ 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') });\r\n   *\r\n   * connection.execBulkLoad(bulkLoad);\r\n   * ```\r\n   *\r\n   * @param bulkLoad A previously created [[BulkLoad]].\r\n   *\r\n   * @deprecated Adding rows to a [[BulkLoad]] via [[BulkLoad.addRow]] or [[BulkLoad.getRowStream]]\r\n   *   is deprecated and will be removed in the future. You should migrate to calling [[Connection.execBulkLoad]]\r\n   *   with a `Iterable` or `AsyncIterable` as the second argument instead.\r\n   */\n\n\n  execBulkLoad(bulkLoad, rows) {\n    bulkLoad.executionStarted = true;\n\n    if (rows) {\n      if (bulkLoad.streamingMode) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\n      }\n\n      if (bulkLoad.firstRowWritten) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\n      }\n\n      const rowStream = _stream.Readable.from(rows); // Destroy the packet transform if an error happens in the row stream,\n      // e.g. if an error is thrown from within a generator or stream.\n\n\n      rowStream.on('error', err => {\n        bulkLoad.rowToPacketTransform.destroy(err);\n      }); // Destroy the row stream if an error happens in the packet transform,\n      // e.g. if the bulk load is cancelled.\n\n      bulkLoad.rowToPacketTransform.on('error', err => {\n        rowStream.destroy(err);\n      });\n      rowStream.pipe(bulkLoad.rowToPacketTransform);\n    } else if (!bulkLoad.streamingMode) {\n      // If the bulkload was not put into streaming mode by the user,\n      // we end the rowToPacketTransform here for them.\n      //\n      // If it was put into streaming mode, it's the user's responsibility\n      // to end the stream.\n      bulkLoad.rowToPacketTransform.end();\n    }\n\n    const onCancel = () => {\n      request.cancel();\n    };\n\n    const payload = new _bulkLoadPayload.BulkLoadPayload(bulkLoad);\n    const request = new _request.default(bulkLoad.getBulkInsertSql(), error => {\n      bulkLoad.removeListener('cancel', onCancel);\n\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n\n      this.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD, payload);\n    });\n    bulkLoad.once('cancel', onCancel);\n    this.execSqlBatch(request);\n  }\n  /**\r\n   * Prepare the SQL represented by the request.\r\n   *\r\n   * The request can then be used in subsequent calls to\r\n   * [[execute]] and [[unprepare]]\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   *   Parameters only require a name and type. Parameter values are ignored.\r\n   */\n\n\n  prepare(request) {\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      value: undefined,\n      output: true,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'params',\n      value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'stmt',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    request.preparing = true; // TODO: We need to clean up this event handler, otherwise this leaks memory\n\n    request.on('returnValue', (name, value) => {\n      if (name === 'handle') {\n        request.handle = value;\n      } else {\n        request.error = (0, _errors.RequestError)(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_prepare', parameters, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\r\n   * Release the SQL Server resources associated with a previously prepared request.\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   *   Parameters only require a name and type.\r\n   *   Parameter values are ignored.\r\n   */\n\n\n  unprepare(request) {\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: true,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_unprepare', parameters, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\r\n   * Execute previously prepared SQL, using the supplied parameters.\r\n   *\r\n   * @param request A previously prepared [[Request]].\r\n   * @param parameters  An object whose names correspond to the names of\r\n   *   parameters that were added to the [[Request]] before it was prepared.\r\n   *   The object's values are passed as the parameters' values when the\r\n   *   request is executed.\r\n   */\n\n\n  execute(request, parameters) {\n    const executeParameters = [];\n    executeParameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: true,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    try {\n      for (let i = 0, len = request.parameters.length; i < len; i++) {\n        const parameter = request.parameters[i];\n        executeParameters.push({ ...parameter,\n          value: parameter.type.validate(parameters ? parameters[parameter.name] : null)\n        });\n      }\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_execute', executeParameters, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\r\n   * Call a stored procedure represented by [[Request]].\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   */\n\n\n  callProcedure(request) {\n    try {\n      request.validateParameters();\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request.sqlTextOrProcedure, request.parameters, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\r\n   * Start a transaction.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\r\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\r\n   *   is present.\r\n   * @param isolationLevel The isolation level that the transaction is to be run with.\r\n   *\r\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\r\n   *   * `READ_UNCOMMITTED`\r\n   *   * `READ_COMMITTED`\r\n   *   * `REPEATABLE_READ`\r\n   *   * `SERIALIZABLE`\r\n   *   * `SNAPSHOT`\r\n   *\r\n   *   Optional, and defaults to the Connection's isolation level.\r\n   */\n\n\n  beginTransaction(callback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    (0, _transaction.assertValidIsolationLevel)(isolationLevel, 'isolationLevel');\n    const transaction = new _transaction.Transaction(name, isolationLevel);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, err => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * There should be an active transaction - that is, [[beginTransaction]]\r\n   * should have been previously called.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\r\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\r\n   */\n\n\n  commitTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n  /**\r\n   * Rollback a transaction.\r\n   *\r\n   * There should be an active transaction - that is, [[beginTransaction]]\r\n   * should have been previously called.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\r\n   *   Optional, and defaults to an empty string.\r\n   *   Required when `isolationLevel` is present.\r\n   */\n\n\n  rollbackTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n  /**\r\n   * Set a savepoint within a transaction.\r\n   *\r\n   * There should be an active transaction - that is, [[beginTransaction]]\r\n   * should have been previously called.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\\\r\n   *   Optional, and defaults to an empty string.\r\n   *   Required when `isolationLevel` is present.\r\n   */\n\n\n  saveTransaction(callback, name) {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n  /**\r\n   * Run the given callback after starting a transaction, and commit or\r\n   * rollback the transaction afterwards.\r\n   *\r\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\r\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\r\n   * use of database transactions and automatically handle transaction nesting.\r\n   *\r\n   * @param cb\r\n   * @param isolationLevel\r\n   *   The isolation level that the transaction is to be run with.\r\n   *\r\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\r\n   *   * `READ_UNCOMMITTED`\r\n   *   * `READ_COMMITTED`\r\n   *   * `REPEATABLE_READ`\r\n   *   * `SERIALIZABLE`\r\n   *   * `SNAPSHOT`\r\n   *\r\n   *   Optional, and defaults to the Connection's isolation level.\r\n   */\n\n\n  transaction(cb, isolationLevel) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n\n    const useSavepoint = this.inTransaction;\n\n    const name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\n\n    const txDone = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction(txErr => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n\n        done(null, ...args);\n      } else {\n        this.commitTransaction(txErr => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n\n    if (useSavepoint) {\n      return this.saveTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n\n        if (isolationLevel) {\n          return this.execSqlBatch(new _request.default('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), err => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  makeRequest(request, packetType, payload) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback((0, _errors.RequestError)(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === _packet.TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n\n      this.request = request;\n      request.connection = this;\n      request.rowCount = 0;\n      request.rows = [];\n      request.rst = [];\n\n      const onCancel = () => {\n        payloadStream.unpipe(message); // set the ignore bit and end the message.\n\n        message.ignore = true;\n        message.end();\n\n        if (request instanceof _request.default && request.paused) {\n          // resume the request if it was paused so we can read the remaining tokens\n          request.resume();\n        }\n      };\n\n      request.once('cancel', onCancel);\n      this.createRequestTimer();\n      const message = new _message.default({\n        type: packetType,\n        resetConnection: this.resetConnectionOnNextRequest\n      });\n      this.messageIo.outgoingMessageStream.write(message);\n      this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n      message.once('finish', () => {\n        request.removeListener('cancel', onCancel);\n        request.once('cancel', this._cancelAfterRequestSent);\n        this.resetConnectionOnNextRequest = false;\n        this.debug.payload(function () {\n          return payload.toString('  ');\n        });\n      });\n\n      const payloadStream = _stream.Readable.from(payload);\n\n      payloadStream.once('error', error => {\n        var _request$error;\n\n        payloadStream.unpipe(message); // Only set a request error if no error was set yet.\n\n        (_request$error = request.error) !== null && _request$error !== void 0 ? _request$error : request.error = error;\n        payloadStream.unpipe(message);\n        message.ignore = true;\n        message.end();\n      });\n      payloadStream.pipe(message);\n    }\n  }\n  /**\r\n   * Cancel currently executed request.\r\n   */\n\n\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n\n    if (this.request.canceled) {\n      return false;\n    }\n\n    this.request.cancel();\n    return true;\n  }\n  /**\r\n   * Reset the connection to its initial state.\r\n   * Can be useful for connection pool implementations.\r\n   *\r\n   * @param callback\r\n   */\n\n\n  reset(callback) {\n    const request = new _request.default(this.getInitialSql(), err => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  getIsolationLevelText(isolationLevel) {\n    switch (isolationLevel) {\n      case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n\n      case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n\n      case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n\n      case _transaction.ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n\n      default:\n        return 'read committed';\n    }\n  }\n\n}\n\nvar _default = Connection;\nexports.default = _default;\nmodule.exports = Connection;\nconst authenticationCache = new _adalNode.MemoryCache();\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function () {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      socketConnect: function () {\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function () {\n      this.emptyMessageBuffer();\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      message: function (message) {\n        message.on('data', data => {\n          this.addToMessageBuffer(data);\n        });\n        message.once('end', () => {\n          const preloginPayload = new _preloginPayload.default(this.messageBuffer);\n          this.debug.payload(function () {\n            return preloginPayload.toString('  ');\n          });\n\n          if (preloginPayload.fedAuthRequired === 1) {\n            this.fedAuthRequired = true;\n          }\n\n          if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n            var _this$routingData$ser, _this$routingData;\n\n            if (!this.config.options.encrypt) {\n              this.emit('connect', (0, _errors.ConnectionError)(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n              return this.close();\n            }\n\n            this.messageIo.startTls(this.secureContext, (_this$routingData$ser = (_this$routingData = this.routingData) === null || _this$routingData === void 0 ? void 0 : _this$routingData.server) !== null && _this$routingData$ser !== void 0 ? _this$routingData$ser : this.config.server, this.config.options.trustServerCertificate);\n            this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n          } else {\n            this.sendLogin7Packet();\n            const {\n              authentication\n            } = this.config;\n\n            if (authentication.type === 'ntlm') {\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n            } else {\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            }\n          }\n        });\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function () {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function () {},\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function () {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function () {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function () {},\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function () {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      message: function (message) {\n        message.on('data', data => {\n          this.messageIo.tlsHandshakeData(data);\n        });\n        message.once('end', () => {\n          if (this.messageIo.tlsNegotiationComplete) {\n            this.sendLogin7Packet();\n            const {\n              authentication\n            } = this.config;\n\n            if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n            } else if (authentication.type === 'ntlm') {\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n            } else {\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            }\n          }\n        });\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      featureExtAck: function (token) {\n        const {\n          authentication\n        } = this.config;\n\n        if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n          if (token.fedAuth === undefined) {\n            this.loginError = (0, _errors.ConnectionError)('Did not receive Active Directory authentication acknowledgement');\n            this.loggedIn = false;\n          } else if (token.fedAuth.length !== 0) {\n            this.loginError = (0, _errors.ConnectionError)(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n            this.loggedIn = false;\n          }\n        } else if (token.fedAuth === undefined) {\n          this.loginError = (0, _errors.ConnectionError)('Received acknowledgement for unknown feature');\n          this.loggedIn = false;\n        } else {\n          this.loginError = (0, _errors.ConnectionError)('Did not request Active Directory authentication, but received the acknowledgment');\n          this.loggedIn = false;\n        }\n      },\n      message: function (message) {\n        const tokenStreamParser = this.createTokenStreamParser(message);\n        tokenStreamParser.once('end', () => {\n          if (this.loggedIn) {\n            if (this.routingData) {\n              this.transitionTo(this.STATE.REROUTING);\n            } else {\n              this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (this.loginError) {\n            if (this.loginError.isTransient) {\n              this.debug.log('Initiating retry on transient error');\n              this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              this.emit('connect', this.loginError);\n              this.transitionTo(this.STATE.FINAL);\n            }\n          } else {\n            this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n            this.transitionTo(this.STATE.FINAL);\n          }\n        });\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      message: function (message) {\n        const tokenStreamParser = this.createTokenStreamParser(message);\n        tokenStreamParser.once('end', () => {\n          if (this.ntlmpacket) {\n            const authentication = this.config.authentication;\n            const payload = new _ntlmPayload.default({\n              domain: authentication.options.domain,\n              userName: authentication.options.userName,\n              password: authentication.options.password,\n              ntlmpacket: this.ntlmpacket\n            });\n            this.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\n            this.debug.payload(function () {\n              return payload.toString('  ');\n            });\n            this.ntlmpacket = undefined;\n          } else if (this.loggedIn) {\n            if (this.routingData) {\n              this.transitionTo(this.STATE.REROUTING);\n            } else {\n              this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (this.loginError) {\n            if (this.loginError.isTransient) {\n              this.debug.log('Initiating retry on transient error');\n              this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              this.emit('connect', this.loginError);\n              this.transitionTo(this.STATE.FINAL);\n            }\n          } else {\n            this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n            this.transitionTo(this.STATE.FINAL);\n          }\n        });\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      fedAuthInfo: function (token) {\n        this.fedAuthInfoToken = token;\n      },\n      message: function (message) {\n        const tokenStreamParser = this.createTokenStreamParser(message);\n        tokenStreamParser.once('end', () => {\n          if (this.loggedIn) {\n            if (this.routingData) {\n              this.transitionTo(this.STATE.REROUTING);\n            } else {\n              this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n\n            return;\n          }\n\n          const fedAuthInfoToken = this.fedAuthInfoToken;\n\n          if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n            const authentication = this.config.authentication;\n\n            const getToken = callback => {\n              const getTokenFromCredentials = (err, credentials) => {\n                if (err) {\n                  return callback(err);\n                }\n\n                credentials.getToken().then(tokenResponse => {\n                  callback(null, tokenResponse.accessToken);\n                }, callback);\n              };\n\n              if (authentication.type === 'azure-active-directory-password') {\n                var _authentication$optio;\n\n                const credentials = new _msRestNodeauth.UserTokenCredentials('7f98cb04-cd1e-40df-9140-3bf7e2cea4db', (_authentication$optio = authentication.options.domain) !== null && _authentication$optio !== void 0 ? _authentication$optio : 'common', authentication.options.userName, authentication.options.password, fedAuthInfoToken.spn, undefined, // environment\n                authenticationCache);\n                getTokenFromCredentials(undefined, credentials);\n              } else if (authentication.type === 'azure-active-directory-msi-vm') {\n                (0, _msRestNodeauth.loginWithVmMSI)({\n                  clientId: authentication.options.clientId,\n                  msiEndpoint: authentication.options.msiEndpoint,\n                  resource: fedAuthInfoToken.spn\n                }, getTokenFromCredentials);\n              } else if (authentication.type === 'azure-active-directory-msi-app-service') {\n                (0, _msRestNodeauth.loginWithAppServiceMSI)({\n                  msiEndpoint: authentication.options.msiEndpoint,\n                  msiSecret: authentication.options.msiSecret,\n                  resource: fedAuthInfoToken.spn,\n                  clientId: authentication.options.clientId\n                }, getTokenFromCredentials);\n              } else if (authentication.type === 'azure-active-directory-service-principal-secret') {\n                const credentials = new _msRestNodeauth.ApplicationTokenCredentials(authentication.options.clientId, authentication.options.tenantId, // domain\n                authentication.options.clientSecret, fedAuthInfoToken.spn, undefined, // environment\n                authenticationCache);\n                getTokenFromCredentials(undefined, credentials);\n              }\n            };\n\n            getToken((err, token) => {\n              if (err) {\n                this.loginError = (0, _errors.ConnectionError)('Security token could not be authenticated or authorized.', 'EFEDAUTH');\n                this.emit('connect', this.loginError);\n                this.transitionTo(this.STATE.FINAL);\n                return;\n              }\n\n              this.sendFedAuthTokenMessage(token);\n            });\n          } else if (this.loginError) {\n            if (this.loginError.isTransient) {\n              this.debug.log('Initiating retry on transient error');\n              this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              this.emit('connect', this.loginError);\n              this.transitionTo(this.STATE.FINAL);\n            }\n          } else {\n            this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n            this.transitionTo(this.STATE.FINAL);\n          }\n        });\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function () {\n      this.sendInitialSql();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      message: function (message) {\n        const tokenStreamParser = this.createTokenStreamParser(message);\n        tokenStreamParser.once('end', () => {\n          this.transitionTo(this.STATE.LOGGED_IN);\n          this.processedInitialSql();\n        });\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    exit: function (nextState) {\n      this.clearRequestTimer();\n    },\n    events: {\n      socketError: function (err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      message: function (message) {\n        var _this$request2, _this$request9; // request timer is stopped on first data package\n\n\n        this.clearRequestTimer();\n        const tokenStreamParser = this.createTokenStreamParser(message);\n\n        const onResume = () => {\n          tokenStreamParser.resume();\n        };\n\n        const onPause = () => {\n          var _this$request;\n\n          tokenStreamParser.pause();\n          (_this$request = this.request) === null || _this$request === void 0 ? void 0 : _this$request.once('resume', onResume);\n        };\n\n        (_this$request2 = this.request) === null || _this$request2 === void 0 ? void 0 : _this$request2.on('pause', onPause);\n\n        if (this.request instanceof _request.default && this.request.paused) {\n          onPause();\n        }\n\n        const onCancel = () => {\n          var _this$request3, _this$request4;\n\n          tokenStreamParser.removeListener('end', onEndOfMessage);\n\n          if (this.request instanceof _request.default && this.request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            this.request.resume();\n          }\n\n          (_this$request3 = this.request) === null || _this$request3 === void 0 ? void 0 : _this$request3.removeListener('pause', onPause);\n          (_this$request4 = this.request) === null || _this$request4 === void 0 ? void 0 : _this$request4.removeListener('resume', onResume);\n        };\n\n        const onEndOfMessage = () => {\n          var _this$request5, _this$request6, _this$request7, _this$request8;\n\n          (_this$request5 = this.request) === null || _this$request5 === void 0 ? void 0 : _this$request5.removeListener('cancel', this._cancelAfterRequestSent);\n          (_this$request6 = this.request) === null || _this$request6 === void 0 ? void 0 : _this$request6.removeListener('cancel', onCancel);\n          (_this$request7 = this.request) === null || _this$request7 === void 0 ? void 0 : _this$request7.removeListener('pause', onPause);\n          (_this$request8 = this.request) === null || _this$request8 === void 0 ? void 0 : _this$request8.removeListener('resume', onResume);\n          this.transitionTo(this.STATE.LOGGED_IN);\n          const sqlRequest = this.request;\n          this.request = undefined;\n\n          if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n            this.inTransaction = false;\n          }\n\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n        };\n\n        tokenStreamParser.once('end', onEndOfMessage);\n        (_this$request9 = this.request) === null || _this$request9 === void 0 ? void 0 : _this$request9.once('cancel', onCancel);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function () {\n      this.attentionReceived = false;\n    },\n    events: {\n      socketError: function (err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      attention: function () {\n        this.attentionReceived = true;\n      },\n      message: function (message) {\n        const tokenStreamParser = this.createTokenStreamParser(message);\n        tokenStreamParser.once('end', () => {\n          // 3.2.5.7 Sent Attention State\n          // Discard any data contained in the response, until we receive the attention response\n          if (this.attentionReceived) {\n            this.attentionReceived = false;\n            this.clearCancelTimer();\n            const sqlRequest = this.request;\n            this.request = undefined;\n            this.transitionTo(this.STATE.LOGGED_IN);\n\n            if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n              sqlRequest.callback(sqlRequest.error);\n            } else {\n              sqlRequest.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n            }\n          }\n        });\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function () {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      loginFailed: function () {// Do nothing. The connection was probably closed by the client code.\n      },\n      connectTimeout: function () {// Do nothing, as the timer should be cleaned up.\n      },\n      message: function () {// Do nothing\n      },\n      socketError: function () {// Do nothing\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/connection.js"],"names":["Object","defineProperty","exports","value","default","_crypto","_interopRequireDefault","require","_os","_constants","_tls","_stream","_msRestNodeauth","_bulkLoad","_debug","_events","_instanceLookup","_transientErrorLookup","_packet","_preloginPayload","_login7Payload","_ntlmPayload","_request","_rpcrequestPayload","_sqlbatchPayload","_messageIo","_tokenStreamParser","_transaction","_errors","_connector","_library","_tdsVersions","_message","_ntlm","_depd","_adalNode","_nodeAbortController","_dataType","_bulkLoadPayload","_package","obj","__esModule","deprecate","KEEP_ALIVE_INITIAL_DELAY","DEFAULT_CONNECT_TIMEOUT","DEFAULT_CLIENT_REQUEST_TIMEOUT","DEFAULT_CANCEL_TIMEOUT","DEFAULT_CONNECT_RETRY_INTERVAL","DEFAULT_PACKET_SIZE","DEFAULT_TEXTSIZE","DEFAULT_DATEFIRST","DEFAULT_PORT","DEFAULT_TDS_VERSION","DEFAULT_LANGUAGE","DEFAULT_DATEFORMAT","CLEANUP_TYPE","NORMAL","REDIRECT","RETRY","Connection","EventEmitter","constructor","config","fedAuthRequired","fedAuthInfoToken","secureContext","inTransaction","transactionDescriptors","transactionDepth","isSqlBatch","curTransientRetryCount","transientErrorLookup","closed","loggedIn","loginError","debug","ntlmpacket","ntlmpacketBuffer","routingData","messageIo","state","resetConnectionOnNextRequest","attentionReceived","request","procReturnStatusValue","socket","messageBuffer","connectTimer","cancelTimer","requestTimer","retryTimer","_cancelAfterRequestSent","TypeError","server","undefined","authentication","type","options","domain","userName","password","toUpperCase","token","clientId","msiEndpoint","msiSecret","clientSecret","tenantId","abortTransactionOnError","appName","camelCaseColumns","cancelTimeout","columnEncryptionKeyCacheTTL","columnEncryptionSetting","columnNameReplacer","connectionRetryInterval","connectTimeout","connectionIsolationLevel","ISOLATION_LEVEL","READ_COMMITTED","cryptoCredentialsDetails","database","datefirst","dateFormat","data","packet","payload","enableAnsiNull","enableAnsiNullDefault","enableAnsiPadding","enableAnsiWarnings","enableArithAbort","enableConcatNullYieldsNull","enableCursorCloseOnCommit","enableImplicitTransactions","enableNumericRoundabort","enableQuotedIdentifier","encrypt","fallbackToDefaultDb","encryptionKeyStoreProviders","instanceName","isolationLevel","language","localAddress","maxRetriesOnTransientErrors","multiSubnetFailover","packetSize","port","readOnlyIntent","requestTimeout","rowCollectionOnDone","rowCollectionOnRequestCompletion","serverName","serverSupportsColumnEncryption","tdsVersion","textsize","trustedServerNameAE","trustServerCertificate","useColumnNames","useUTC","validateBulkLoadParameters","workstationId","lowerCaseGuids","Error","assertValidIsolationLevel","RangeError","credentialsDetails","secureOptions","create","SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","createSecureContext","createDebug","Buffer","from","alloc","TransientErrorLookup","STATE","INITIALIZED","sendMessage","TYPE","ATTENTION","transitionTo","SENT_ATTENTION","createCancelTimer","connect","connectListener","ConnectionError","name","onConnect","err","removeListener","onError","once","CONNECTING","on","event","listener","emit","args","close","FINAL","initialiseConnection","signal","createConnectTimer","connectOnPort","InstanceLookup","instanceLookup","timeout","message","cleanupConnection","cleanupType","clearConnectTimer","clearRequestTimer","clearRetryTimer","closeConnection","process","nextTick","RequestError","callback","createTokenStreamParser","tokenStreamParser","Parser","canceled","error","number","class","procName","lineNumber","isLoginErrorTransient","isTransientError","isTransient","newValue","dispatchEvent","interface","split","push","length","columns","j","len","col","colName","orderColumns","rows","rst","paramName","metadata","rowCount","more","attention","sqlError","connectOpts","host","Connector","execute","socketError","socketClose","socketEnd","setKeepAlive","cleartext","socketConnect","destroy","controller","setTimeout","abort","clearCancelTimer","createRequestTimer","createRetryTimer","retryTimeout","log","cancel","clearTimeout","newState","exit","call","enter","apply","getEventHandler","eventName","handler","events","SENT_TLSSSLNEGOTIATION","code","REROUTING","TRANSIENT_FAILURE_RETRY","sendPreLogin","_$exec","major","minor","build","exec","version","Number","subbuild","PRELOGIN","toString","emptyMessageBuffer","addToMessageBuffer","concat","sendLogin7Packet","versions","clientProgVer","clientPid","pid","connectionId","clientTimeZone","Date","getTimezoneOffset","clientLcid","fedAuth","echo","workflow","fedAuthToken","sspi","createNTLMRequest","hostname","libraryName","initDbFatal","LOGIN7","toBuffer","sendFedAuthTokenMessage","accessTokenLen","byteLength","offset","writeUInt32LE","write","FEDAUTH_TOKEN","SENT_LOGIN7_WITH_STANDARD_LOGIN","sendInitialSql","getInitialSql","currentTransactionDescriptor","SQL_BATCH","outgoingMessageStream","Readable","pipe","getIsolationLevelText","join","processedInitialSql","execSqlBatch","makeRequest","sqlTextOrProcedure","execSql","validateParameters","parameters","TYPES","NVarChar","output","precision","scale","makeParamsParameter","RPC_REQUEST","newBulkLoad","table","callbackOrOptions","execBulkLoad","bulkLoad","executionStarted","streamingMode","firstRowWritten","rowStream","rowToPacketTransform","end","onCancel","BulkLoadPayload","getBulkInsertSql","BULK_LOAD","prepare","Int","preparing","handle","unprepare","executeParameters","i","parameter","validate","callProcedure","beginTransaction","transaction","Transaction","isolationLevelToTSQL","TRANSACTION_MANAGER","beginPayload","commitTransaction","commitPayload","rollbackTransaction","rollbackPayload","saveTransaction","savePayload","cb","useSavepoint","randomBytes","txDone","done","LOGGED_IN","txErr","packetType","connection","payloadStream","unpipe","ignore","paused","resume","resetConnection","SENT_CLIENT_REQUEST","_request$error","reset","READ_UNCOMMITTED","REPEATABLE_READ","SERIALIZABLE","SNAPSHOT","_default","module","authenticationCache","MemoryCache","prototype","SENT_PRELOGIN","preloginPayload","encryptionString","_this$routingData$ser","_this$routingData","startTls","SENT_LOGIN7_WITH_NTLM","reconnect","retry","tlsHandshakeData","tlsNegotiationComplete","SENT_LOGIN7_WITH_FEDAUTH","featureExtAck","LOGGED_IN_SENDING_INITIAL_SQL","NTLMAUTH_PKT","fedAuthInfo","stsurl","spn","getToken","getTokenFromCredentials","credentials","then","tokenResponse","accessToken","_authentication$optio","UserTokenCredentials","loginWithVmMSI","resource","loginWithAppServiceMSI","ApplicationTokenCredentials","nextState","sqlRequest","_this$request2","_this$request9","onResume","onPause","_this$request","pause","_this$request3","_this$request4","onEndOfMessage","_this$request5","_this$request6","_this$request7","_this$request8","loginFailed"],"mappings":"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AMC,mBAAmB,GAAG,IAAI,IAAhC;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAG,UAAzB;AACA;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAG,CAA1B;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG,IAArB;AACA;AACA;AACA;;AAEA,MAAMC,mBAAmB,GAAG,KAA5B;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAG,YAAzB;AACA;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAG,KAA3B;AAEA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CADW;AAEnBC,EAAAA,QAAQ,EAAE,CAFS;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,SAAyB5C,OAAO,CAAC6C,YAAjC,CAA8C;AAC5C;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB;AACA,SAAKC,eAAL,GAAuB,KAAK,CAA5B;AACA,SAAKC,gBAAL,GAAwB,KAAK,CAA7B;AACA,SAAKF,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKG,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKC,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKC,sBAAL,GAA8B,KAAK,CAAnC;AACA,SAAKC,gBAAL,GAAwB,KAAK,CAA7B;AACA,SAAKC,UAAL,GAAkB,KAAK,CAAvB;AACA,SAAKC,sBAAL,GAA8B,KAAK,CAAnC;AACA,SAAKC,oBAAL,GAA4B,KAAK,CAAjC;AACA,SAAKC,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKC,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKC,UAAL,GAAkB,KAAK,CAAvB;AACA,SAAKC,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKC,UAAL,GAAkB,KAAK,CAAvB;AACA,SAAKC,gBAAL,GAAwB,KAAK,CAA7B;AACA,SAAKC,WAAL,GAAmB,KAAK,CAAxB;AACA,SAAKC,SAAL,GAAiB,KAAK,CAAtB;AACA,SAAKC,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKC,4BAAL,GAAoC,KAAK,CAAzC;AACA,SAAKC,iBAAL,GAAyB,KAAK,CAA9B;AACA,SAAKC,OAAL,GAAe,KAAK,CAApB;AACA,SAAKC,qBAAL,GAA6B,KAAK,CAAlC;AACA,SAAKC,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKC,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKC,YAAL,GAAoB,KAAK,CAAzB;AACA,SAAKC,WAAL,GAAmB,KAAK,CAAxB;AACA,SAAKC,YAAL,GAAoB,KAAK,CAAzB;AACA,SAAKC,UAAL,GAAkB,KAAK,CAAvB;AACA,SAAKC,uBAAL,GAA+B,KAAK,CAApC;;AAEA,QAAI,OAAO7B,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,IAA7C,EAAmD;AACjD,YAAM,IAAI8B,SAAJ,CAAc,+DAAd,CAAN;AACD;;AAED,QAAI,OAAO9B,MAAM,CAAC+B,MAAd,KAAyB,QAA7B,EAAuC;AACrC,YAAM,IAAID,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,SAAK7B,eAAL,GAAuB,KAAvB;AACA,SAAKC,gBAAL,GAAwB8B,SAAxB;AACA,QAAIC,cAAJ;;AAEA,QAAIjC,MAAM,CAACiC,cAAP,KAA0BD,SAA9B,EAAyC;AACvC,UAAI,OAAOhC,MAAM,CAACiC,cAAd,KAAiC,QAAjC,IAA6CjC,MAAM,CAACiC,cAAP,KAA0B,IAA3E,EAAiF;AAC/E,cAAM,IAAIH,SAAJ,CAAc,8DAAd,CAAN;AACD;;AAED,YAAMI,IAAI,GAAGlC,MAAM,CAACiC,cAAP,CAAsBC,IAAnC;AACA,YAAMC,OAAO,GAAGnC,MAAM,CAACiC,cAAP,CAAsBE,OAAtB,KAAkCH,SAAlC,GAA8C,EAA9C,GAAmDhC,MAAM,CAACiC,cAAP,CAAsBE,OAAzF;;AAEA,UAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,cAAM,IAAIJ,SAAJ,CAAc,mEAAd,CAAN;AACD;;AAED,UAAII,IAAI,KAAK,SAAT,IAAsBA,IAAI,KAAK,MAA/B,IAAyCA,IAAI,KAAK,iCAAlD,IAAuFA,IAAI,KAAK,qCAAhG,IAAyIA,IAAI,KAAK,+BAAlJ,IAAqLA,IAAI,KAAK,wCAA9L,IAA0OA,IAAI,KAAK,iDAAvP,EAA0S;AACxS,cAAM,IAAIJ,SAAJ,CAAc,gQAAd,CAAN;AACD;;AAED,UAAI,OAAOK,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACnD,cAAM,IAAIL,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,UAAII,IAAI,KAAK,MAAb,EAAqB;AACnB,YAAI,OAAOC,OAAO,CAACC,MAAf,KAA0B,QAA9B,EAAwC;AACtC,gBAAM,IAAIN,SAAJ,CAAc,6EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACE,QAAR,KAAqBL,SAArB,IAAkC,OAAOG,OAAO,CAACE,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIP,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACG,QAAR,KAAqBN,SAArB,IAAkC,OAAOG,OAAO,CAACG,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIR,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,MADS;AAEfC,UAAAA,OAAO,EAAE;AACPE,YAAAA,QAAQ,EAAEF,OAAO,CAACE,QADX;AAEPC,YAAAA,QAAQ,EAAEH,OAAO,CAACG,QAFX;AAGPF,YAAAA,MAAM,EAAED,OAAO,CAACC,MAAR,IAAkBD,OAAO,CAACC,MAAR,CAAeG,WAAf;AAHnB;AAFM,SAAjB;AAQD,OArBD,MAqBO,IAAIL,IAAI,KAAK,iCAAb,EAAgD;AACrD,YAAIC,OAAO,CAACE,QAAR,KAAqBL,SAArB,IAAkC,OAAOG,OAAO,CAACE,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIP,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACG,QAAR,KAAqBN,SAArB,IAAkC,OAAOG,OAAO,CAACG,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIR,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,iCADS;AAEfC,UAAAA,OAAO,EAAE;AACPE,YAAAA,QAAQ,EAAEF,OAAO,CAACE,QADX;AAEPC,YAAAA,QAAQ,EAAEH,OAAO,CAACG,QAFX;AAGPF,YAAAA,MAAM,EAAED,OAAO,CAACC;AAHT;AAFM,SAAjB;AAQD,OAjBM,MAiBA,IAAIF,IAAI,KAAK,qCAAb,EAAoD;AACzD,YAAI,OAAOC,OAAO,CAACK,KAAf,KAAyB,QAA7B,EAAuC;AACrC,gBAAM,IAAIV,SAAJ,CAAc,4EAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,qCADS;AAEfC,UAAAA,OAAO,EAAE;AACPK,YAAAA,KAAK,EAAEL,OAAO,CAACK;AADR;AAFM,SAAjB;AAMD,OAXM,MAWA,IAAIN,IAAI,KAAK,+BAAb,EAA8C;AACnD,YAAIC,OAAO,CAACM,QAAR,KAAqBT,SAArB,IAAkC,OAAOG,OAAO,CAACM,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIX,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACO,WAAR,KAAwBV,SAAxB,IAAqC,OAAOG,OAAO,CAACO,WAAf,KAA+B,QAAxE,EAAkF;AAChF,gBAAM,IAAIZ,SAAJ,CAAc,kFAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,+BADS;AAEfC,UAAAA,OAAO,EAAE;AACPM,YAAAA,QAAQ,EAAEN,OAAO,CAACM,QADX;AAEPC,YAAAA,WAAW,EAAEP,OAAO,CAACO;AAFd;AAFM,SAAjB;AAOD,OAhBM,MAgBA,IAAIR,IAAI,KAAK,wCAAb,EAAuD;AAC5D,YAAIC,OAAO,CAACM,QAAR,KAAqBT,SAArB,IAAkC,OAAOG,OAAO,CAACM,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIX,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACO,WAAR,KAAwBV,SAAxB,IAAqC,OAAOG,OAAO,CAACO,WAAf,KAA+B,QAAxE,EAAkF;AAChF,gBAAM,IAAIZ,SAAJ,CAAc,kFAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACQ,SAAR,KAAsBX,SAAtB,IAAmC,OAAOG,OAAO,CAACQ,SAAf,KAA6B,QAApE,EAA8E;AAC5E,gBAAM,IAAIb,SAAJ,CAAc,gFAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,wCADS;AAEfC,UAAAA,OAAO,EAAE;AACPM,YAAAA,QAAQ,EAAEN,OAAO,CAACM,QADX;AAEPC,YAAAA,WAAW,EAAEP,OAAO,CAACO,WAFd;AAGPC,YAAAA,SAAS,EAAER,OAAO,CAACQ;AAHZ;AAFM,SAAjB;AAQD,OArBM,MAqBA,IAAIT,IAAI,KAAK,iDAAb,EAAgE;AACrE,YAAI,OAAOC,OAAO,CAACM,QAAf,KAA4B,QAAhC,EAA0C;AACxC,gBAAM,IAAIX,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAI,OAAOK,OAAO,CAACS,YAAf,KAAgC,QAApC,EAA8C;AAC5C,gBAAM,IAAId,SAAJ,CAAc,mFAAd,CAAN;AACD;;AAED,YAAI,OAAOK,OAAO,CAACU,QAAf,KAA4B,QAAhC,EAA0C;AACxC,gBAAM,IAAIf,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,iDADS;AAEfC,UAAAA,OAAO,EAAE;AACPM,YAAAA,QAAQ,EAAEN,OAAO,CAACM,QADX;AAEPG,YAAAA,YAAY,EAAET,OAAO,CAACS,YAFf;AAGPC,YAAAA,QAAQ,EAAEV,OAAO,CAACU;AAHX;AAFM,SAAjB;AAQD,OArBM,MAqBA;AACL,YAAIV,OAAO,CAACE,QAAR,KAAqBL,SAArB,IAAkC,OAAOG,OAAO,CAACE,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIP,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACG,QAAR,KAAqBN,SAArB,IAAkC,OAAOG,OAAO,CAACG,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIR,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,SADS;AAEfC,UAAAA,OAAO,EAAE;AACPE,YAAAA,QAAQ,EAAEF,OAAO,CAACE,QADX;AAEPC,YAAAA,QAAQ,EAAEH,OAAO,CAACG;AAFX;AAFM,SAAjB;AAOD;AACF,KAhJD,MAgJO;AACLL,MAAAA,cAAc,GAAG;AACfC,QAAAA,IAAI,EAAE,SADS;AAEfC,QAAAA,OAAO,EAAE;AACPE,UAAAA,QAAQ,EAAEL,SADH;AAEPM,UAAAA,QAAQ,EAAEN;AAFH;AAFM,OAAjB;AAOD;;AAED,SAAKhC,MAAL,GAAc;AACZ+B,MAAAA,MAAM,EAAE/B,MAAM,CAAC+B,MADH;AAEZE,MAAAA,cAAc,EAAEA,cAFJ;AAGZE,MAAAA,OAAO,EAAE;AACPW,QAAAA,uBAAuB,EAAE,KADlB;AAEPC,QAAAA,OAAO,EAAEf,SAFF;AAGPgB,QAAAA,gBAAgB,EAAE,KAHX;AAIPC,QAAAA,aAAa,EAAEjE,sBAJR;AAKPkE,QAAAA,2BAA2B,EAAE,IAAI,EAAJ,GAAS,EAAT,GAAc,IALpC;AAMP;AACAC,QAAAA,uBAAuB,EAAE,KAPlB;AAQPC,QAAAA,kBAAkB,EAAEpB,SARb;AASPqB,QAAAA,uBAAuB,EAAEpE,8BATlB;AAUPqE,QAAAA,cAAc,EAAExE,uBAVT;AAWPyE,QAAAA,wBAAwB,EAAE1F,YAAY,CAAC2F,eAAb,CAA6BC,cAXhD;AAYPC,QAAAA,wBAAwB,EAAE,EAZnB;AAaPC,QAAAA,QAAQ,EAAE3B,SAbH;AAcP4B,QAAAA,SAAS,EAAExE,iBAdJ;AAePyE,QAAAA,UAAU,EAAErE,kBAfL;AAgBPqB,QAAAA,KAAK,EAAE;AACLiD,UAAAA,IAAI,EAAE,KADD;AAELC,UAAAA,MAAM,EAAE,KAFH;AAGLC,UAAAA,OAAO,EAAE,KAHJ;AAILxB,UAAAA,KAAK,EAAE;AAJF,SAhBA;AAsBPyB,QAAAA,cAAc,EAAE,IAtBT;AAuBPC,QAAAA,qBAAqB,EAAE,IAvBhB;AAwBPC,QAAAA,iBAAiB,EAAE,IAxBZ;AAyBPC,QAAAA,kBAAkB,EAAE,IAzBb;AA0BPC,QAAAA,gBAAgB,EAAE,IA1BX;AA2BPC,QAAAA,0BAA0B,EAAE,IA3BrB;AA4BPC,QAAAA,yBAAyB,EAAE,IA5BpB;AA6BPC,QAAAA,0BAA0B,EAAE,KA7BrB;AA8BPC,QAAAA,uBAAuB,EAAE,KA9BlB;AA+BPC,QAAAA,sBAAsB,EAAE,IA/BjB;AAgCPC,QAAAA,OAAO,EAAE,IAhCF;AAiCPC,QAAAA,mBAAmB,EAAE,KAjCd;AAkCPC,QAAAA,2BAA2B,EAAE7C,SAlCtB;AAmCP8C,QAAAA,YAAY,EAAE9C,SAnCP;AAoCP+C,QAAAA,cAAc,EAAElH,YAAY,CAAC2F,eAAb,CAA6BC,cApCtC;AAqCPuB,QAAAA,QAAQ,EAAEzF,gBArCH;AAsCP0F,QAAAA,YAAY,EAAEjD,SAtCP;AAuCPkD,QAAAA,2BAA2B,EAAE,CAvCtB;AAwCPC,QAAAA,mBAAmB,EAAE,KAxCd;AAyCPC,QAAAA,UAAU,EAAElG,mBAzCL;AA0CPmG,QAAAA,IAAI,EAAEhG,YA1CC;AA2CPiG,QAAAA,cAAc,EAAE,KA3CT;AA4CPC,QAAAA,cAAc,EAAExG,8BA5CT;AA6CPyG,QAAAA,mBAAmB,EAAE,KA7Cd;AA8CPC,QAAAA,gCAAgC,EAAE,KA9C3B;AA+CPC,QAAAA,UAAU,EAAE1D,SA/CL;AAgDP2D,QAAAA,8BAA8B,EAAE,KAhDzB;AAiDPC,QAAAA,UAAU,EAAEtG,mBAjDL;AAkDPuG,QAAAA,QAAQ,EAAE1G,gBAlDH;AAmDP2G,QAAAA,mBAAmB,EAAE9D,SAnDd;AAoDP+D,QAAAA,sBAAsB,EAAE,IApDjB;AAqDPC,QAAAA,cAAc,EAAE,KArDT;AAsDPC,QAAAA,MAAM,EAAE,IAtDD;AAuDPC,QAAAA,0BAA0B,EAAE,IAvDrB;AAwDPC,QAAAA,aAAa,EAAEnE,SAxDR;AAyDPoE,QAAAA,cAAc,EAAE;AAzDT;AAHG,KAAd;;AAgEA,QAAIpG,MAAM,CAACmC,OAAX,EAAoB;AAClB,UAAInC,MAAM,CAACmC,OAAP,CAAekD,IAAf,IAAuBrF,MAAM,CAACmC,OAAP,CAAe2C,YAA1C,EAAwD;AACtD,cAAM,IAAIuB,KAAJ,CAAU,uDAAuDrG,MAAM,CAACmC,OAAP,CAAekD,IAAtE,GAA6E,OAA7E,GAAuFrF,MAAM,CAACmC,OAAP,CAAe2C,YAAtG,GAAqH,WAA/H,CAAN;AACD;;AAED,UAAI9E,MAAM,CAACmC,OAAP,CAAeW,uBAAf,KAA2Cd,SAA/C,EAA0D;AACxD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeW,uBAAtB,KAAkD,SAAlD,IAA+D9C,MAAM,CAACmC,OAAP,CAAeW,uBAAf,KAA2C,IAA9G,EAAoH;AAClH,gBAAM,IAAIhB,SAAJ,CAAc,uFAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBW,uBAApB,GAA8C9C,MAAM,CAACmC,OAAP,CAAeW,uBAA7D;AACD;;AAED,UAAI9C,MAAM,CAACmC,OAAP,CAAeY,OAAf,KAA2Bf,SAA/B,EAA0C;AACxC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeY,OAAtB,KAAkC,QAAtC,EAAgD;AAC9C,gBAAM,IAAIjB,SAAJ,CAAc,+DAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBY,OAApB,GAA8B/C,MAAM,CAACmC,OAAP,CAAeY,OAA7C;AACD;;AAED,UAAI/C,MAAM,CAACmC,OAAP,CAAea,gBAAf,KAAoChB,SAAxC,EAAmD;AACjD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAea,gBAAtB,KAA2C,SAA/C,EAA0D;AACxD,gBAAM,IAAIlB,SAAJ,CAAc,yEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBa,gBAApB,GAAuChD,MAAM,CAACmC,OAAP,CAAea,gBAAtD;AACD;;AAED,UAAIhD,MAAM,CAACmC,OAAP,CAAec,aAAf,KAAiCjB,SAArC,EAAgD;AAC9C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAec,aAAtB,KAAwC,QAA5C,EAAsD;AACpD,gBAAM,IAAInB,SAAJ,CAAc,qEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBc,aAApB,GAAoCjD,MAAM,CAACmC,OAAP,CAAec,aAAnD;AACD;;AAED,UAAIjD,MAAM,CAACmC,OAAP,CAAeiB,kBAAnB,EAAuC;AACrC,YAAI,OAAOpD,MAAM,CAACmC,OAAP,CAAeiB,kBAAtB,KAA6C,UAAjD,EAA6D;AAC3D,gBAAM,IAAItB,SAAJ,CAAc,uEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBiB,kBAApB,GAAyCpD,MAAM,CAACmC,OAAP,CAAeiB,kBAAxD;AACD;;AAED,UAAIpD,MAAM,CAACmC,OAAP,CAAemB,cAAf,KAAkCtB,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAemB,cAAtB,KAAyC,QAA7C,EAAuD;AACrD,gBAAM,IAAIxB,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBmB,cAApB,GAAqCtD,MAAM,CAACmC,OAAP,CAAemB,cAApD;AACD;;AAED,UAAItD,MAAM,CAACmC,OAAP,CAAeoB,wBAAf,KAA4CvB,SAAhD,EAA2D;AACzD,SAAC,GAAGnE,YAAY,CAACyI,yBAAjB,EAA4CtG,MAAM,CAACmC,OAAP,CAAeoB,wBAA3D,EAAqF,yCAArF;AACA,aAAKvD,MAAL,CAAYmC,OAAZ,CAAoBoB,wBAApB,GAA+CvD,MAAM,CAACmC,OAAP,CAAeoB,wBAA9D;AACD;;AAED,UAAIvD,MAAM,CAACmC,OAAP,CAAemB,cAAf,KAAkCtB,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAemB,cAAtB,KAAyC,QAA7C,EAAuD;AACrD,gBAAM,IAAIxB,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBmB,cAApB,GAAqCtD,MAAM,CAACmC,OAAP,CAAemB,cAApD;AACD;;AAED,UAAItD,MAAM,CAACmC,OAAP,CAAeuB,wBAAf,KAA4C1B,SAAhD,EAA2D;AACzD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeuB,wBAAtB,KAAmD,QAAnD,IAA+D1D,MAAM,CAACmC,OAAP,CAAeuB,wBAAf,KAA4C,IAA/G,EAAqH;AACnH,gBAAM,IAAI5B,SAAJ,CAAc,gFAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBuB,wBAApB,GAA+C1D,MAAM,CAACmC,OAAP,CAAeuB,wBAA9D;AACD;;AAED,UAAI1D,MAAM,CAACmC,OAAP,CAAewB,QAAf,KAA4B3B,SAAhC,EAA2C;AACzC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAewB,QAAtB,KAAmC,QAAvC,EAAiD;AAC/C,gBAAM,IAAI7B,SAAJ,CAAc,gEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBwB,QAApB,GAA+B3D,MAAM,CAACmC,OAAP,CAAewB,QAA9C;AACD;;AAED,UAAI3D,MAAM,CAACmC,OAAP,CAAeyB,SAAf,KAA6B5B,SAAjC,EAA4C;AAC1C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeyB,SAAtB,KAAoC,QAApC,IAAgD5D,MAAM,CAACmC,OAAP,CAAeyB,SAAf,KAA6B,IAAjF,EAAuF;AACrF,gBAAM,IAAI9B,SAAJ,CAAc,iEAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAeyB,SAAf,KAA6B,IAA7B,KAAsC5D,MAAM,CAACmC,OAAP,CAAeyB,SAAf,GAA2B,CAA3B,IAAgC5D,MAAM,CAACmC,OAAP,CAAeyB,SAAf,GAA2B,CAAjG,CAAJ,EAAyG;AACvG,gBAAM,IAAI2C,UAAJ,CAAe,+DAAf,CAAN;AACD;;AAED,aAAKvG,MAAL,CAAYmC,OAAZ,CAAoByB,SAApB,GAAgC5D,MAAM,CAACmC,OAAP,CAAeyB,SAA/C;AACD;;AAED,UAAI5D,MAAM,CAACmC,OAAP,CAAe0B,UAAf,KAA8B7B,SAAlC,EAA6C;AAC3C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe0B,UAAtB,KAAqC,QAArC,IAAiD7D,MAAM,CAACmC,OAAP,CAAe0B,UAAf,KAA8B,IAAnF,EAAyF;AACvF,gBAAM,IAAI/B,SAAJ,CAAc,0EAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB0B,UAApB,GAAiC7D,MAAM,CAACmC,OAAP,CAAe0B,UAAhD;AACD;;AAED,UAAI7D,MAAM,CAACmC,OAAP,CAAetB,KAAnB,EAA0B;AACxB,YAAIb,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBiD,IAArB,KAA8B9B,SAAlC,EAA6C;AAC3C,cAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBiD,IAA5B,KAAqC,SAAzC,EAAoD;AAClD,kBAAM,IAAIhC,SAAJ,CAAc,mEAAd,CAAN;AACD;;AAED,eAAK9B,MAAL,CAAYmC,OAAZ,CAAoBtB,KAApB,CAA0BiD,IAA1B,GAAiC9D,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBiD,IAAtD;AACD;;AAED,YAAI9D,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBkD,MAArB,KAAgC/B,SAApC,EAA+C;AAC7C,cAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBkD,MAA5B,KAAuC,SAA3C,EAAsD;AACpD,kBAAM,IAAIjC,SAAJ,CAAc,qEAAd,CAAN;AACD;;AAED,eAAK9B,MAAL,CAAYmC,OAAZ,CAAoBtB,KAApB,CAA0BkD,MAA1B,GAAmC/D,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBkD,MAAxD;AACD;;AAED,YAAI/D,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBmD,OAArB,KAAiChC,SAArC,EAAgD;AAC9C,cAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBmD,OAA5B,KAAwC,SAA5C,EAAuD;AACrD,kBAAM,IAAIlC,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,eAAK9B,MAAL,CAAYmC,OAAZ,CAAoBtB,KAApB,CAA0BmD,OAA1B,GAAoChE,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBmD,OAAzD;AACD;;AAED,YAAIhE,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqB2B,KAArB,KAA+BR,SAAnC,EAA8C;AAC5C,cAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqB2B,KAA5B,KAAsC,SAA1C,EAAqD;AACnD,kBAAM,IAAIV,SAAJ,CAAc,oEAAd,CAAN;AACD;;AAED,eAAK9B,MAAL,CAAYmC,OAAZ,CAAoBtB,KAApB,CAA0B2B,KAA1B,GAAkCxC,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqB2B,KAAvD;AACD;AACF;;AAED,UAAIxC,MAAM,CAACmC,OAAP,CAAe8B,cAAf,KAAkCjC,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe8B,cAAtB,KAAyC,SAAzC,IAAsDjE,MAAM,CAACmC,OAAP,CAAe8B,cAAf,KAAkC,IAA5F,EAAkG;AAChG,gBAAM,IAAInC,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB8B,cAApB,GAAqCjE,MAAM,CAACmC,OAAP,CAAe8B,cAApD;AACD;;AAED,UAAIjE,MAAM,CAACmC,OAAP,CAAe+B,qBAAf,KAAyClC,SAA7C,EAAwD;AACtD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe+B,qBAAtB,KAAgD,SAAhD,IAA6DlE,MAAM,CAACmC,OAAP,CAAe+B,qBAAf,KAAyC,IAA1G,EAAgH;AAC9G,gBAAM,IAAIpC,SAAJ,CAAc,sFAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB+B,qBAApB,GAA4ClE,MAAM,CAACmC,OAAP,CAAe+B,qBAA3D;AACD;;AAED,UAAIlE,MAAM,CAACmC,OAAP,CAAegC,iBAAf,KAAqCnC,SAAzC,EAAoD;AAClD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAegC,iBAAtB,KAA4C,SAA5C,IAAyDnE,MAAM,CAACmC,OAAP,CAAegC,iBAAf,KAAqC,IAAlG,EAAwG;AACtG,gBAAM,IAAIrC,SAAJ,CAAc,kFAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBgC,iBAApB,GAAwCnE,MAAM,CAACmC,OAAP,CAAegC,iBAAvD;AACD;;AAED,UAAInE,MAAM,CAACmC,OAAP,CAAeiC,kBAAf,KAAsCpC,SAA1C,EAAqD;AACnD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeiC,kBAAtB,KAA6C,SAA7C,IAA0DpE,MAAM,CAACmC,OAAP,CAAeiC,kBAAf,KAAsC,IAApG,EAA0G;AACxG,gBAAM,IAAItC,SAAJ,CAAc,mFAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBiC,kBAApB,GAAyCpE,MAAM,CAACmC,OAAP,CAAeiC,kBAAxD;AACD;;AAED,UAAIpE,MAAM,CAACmC,OAAP,CAAekC,gBAAf,KAAoCrC,SAAxC,EAAmD;AACjD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAekC,gBAAtB,KAA2C,SAA3C,IAAwDrE,MAAM,CAACmC,OAAP,CAAekC,gBAAf,KAAoC,IAAhG,EAAsG;AACpG,gBAAM,IAAIvC,SAAJ,CAAc,iFAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBkC,gBAApB,GAAuCrE,MAAM,CAACmC,OAAP,CAAekC,gBAAtD;AACD;;AAED,UAAIrE,MAAM,CAACmC,OAAP,CAAemC,0BAAf,KAA8CtC,SAAlD,EAA6D;AAC3D,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAemC,0BAAtB,KAAqD,SAArD,IAAkEtE,MAAM,CAACmC,OAAP,CAAemC,0BAAf,KAA8C,IAApH,EAA0H;AACxH,gBAAM,IAAIxC,SAAJ,CAAc,2FAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBmC,0BAApB,GAAiDtE,MAAM,CAACmC,OAAP,CAAemC,0BAAhE;AACD;;AAED,UAAItE,MAAM,CAACmC,OAAP,CAAeoC,yBAAf,KAA6CvC,SAAjD,EAA4D;AAC1D,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeoC,yBAAtB,KAAoD,SAApD,IAAiEvE,MAAM,CAACmC,OAAP,CAAeoC,yBAAf,KAA6C,IAAlH,EAAwH;AACtH,gBAAM,IAAIzC,SAAJ,CAAc,0FAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBoC,yBAApB,GAAgDvE,MAAM,CAACmC,OAAP,CAAeoC,yBAA/D;AACD;;AAED,UAAIvE,MAAM,CAACmC,OAAP,CAAeqC,0BAAf,KAA8CxC,SAAlD,EAA6D;AAC3D,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeqC,0BAAtB,KAAqD,SAArD,IAAkExE,MAAM,CAACmC,OAAP,CAAeqC,0BAAf,KAA8C,IAApH,EAA0H;AACxH,gBAAM,IAAI1C,SAAJ,CAAc,2FAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBqC,0BAApB,GAAiDxE,MAAM,CAACmC,OAAP,CAAeqC,0BAAhE;AACD;;AAED,UAAIxE,MAAM,CAACmC,OAAP,CAAesC,uBAAf,KAA2CzC,SAA/C,EAA0D;AACxD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAesC,uBAAtB,KAAkD,SAAlD,IAA+DzE,MAAM,CAACmC,OAAP,CAAesC,uBAAf,KAA2C,IAA9G,EAAoH;AAClH,gBAAM,IAAI3C,SAAJ,CAAc,wFAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBsC,uBAApB,GAA8CzE,MAAM,CAACmC,OAAP,CAAesC,uBAA7D;AACD;;AAED,UAAIzE,MAAM,CAACmC,OAAP,CAAeuC,sBAAf,KAA0C1C,SAA9C,EAAyD;AACvD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeuC,sBAAtB,KAAiD,SAAjD,IAA8D1E,MAAM,CAACmC,OAAP,CAAeuC,sBAAf,KAA0C,IAA5G,EAAkH;AAChH,gBAAM,IAAI5C,SAAJ,CAAc,uFAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBuC,sBAApB,GAA6C1E,MAAM,CAACmC,OAAP,CAAeuC,sBAA5D;AACD;;AAED,UAAI1E,MAAM,CAACmC,OAAP,CAAewC,OAAf,KAA2B3C,SAA/B,EAA0C;AACxC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAewC,OAAtB,KAAkC,SAAtC,EAAiD;AAC/C,gBAAM,IAAI7C,SAAJ,CAAc,gEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBwC,OAApB,GAA8B3E,MAAM,CAACmC,OAAP,CAAewC,OAA7C;AACD;;AAED,UAAI3E,MAAM,CAACmC,OAAP,CAAeyC,mBAAf,KAAuC5C,SAA3C,EAAsD;AACpD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeyC,mBAAtB,KAA8C,SAAlD,EAA6D;AAC3D,gBAAM,IAAI9C,SAAJ,CAAc,4EAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoByC,mBAApB,GAA0C5E,MAAM,CAACmC,OAAP,CAAeyC,mBAAzD;AACD;;AAED,UAAI5E,MAAM,CAACmC,OAAP,CAAe2C,YAAf,KAAgC9C,SAApC,EAA+C;AAC7C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe2C,YAAtB,KAAuC,QAA3C,EAAqD;AACnD,gBAAM,IAAIhD,SAAJ,CAAc,oEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB2C,YAApB,GAAmC9E,MAAM,CAACmC,OAAP,CAAe2C,YAAlD;AACA,aAAK9E,MAAL,CAAYmC,OAAZ,CAAoBkD,IAApB,GAA2BrD,SAA3B;AACD;;AAED,UAAIhC,MAAM,CAACmC,OAAP,CAAe4C,cAAf,KAAkC/C,SAAtC,EAAiD;AAC/C,SAAC,GAAGnE,YAAY,CAACyI,yBAAjB,EAA4CtG,MAAM,CAACmC,OAAP,CAAe4C,cAA3D,EAA2E,+BAA3E;AACA,aAAK/E,MAAL,CAAYmC,OAAZ,CAAoB4C,cAApB,GAAqC/E,MAAM,CAACmC,OAAP,CAAe4C,cAApD;AACD;;AAED,UAAI/E,MAAM,CAACmC,OAAP,CAAe6C,QAAf,KAA4BhD,SAAhC,EAA2C;AACzC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe6C,QAAtB,KAAmC,QAAnC,IAA+ChF,MAAM,CAACmC,OAAP,CAAe6C,QAAf,KAA4B,IAA/E,EAAqF;AACnF,gBAAM,IAAIlD,SAAJ,CAAc,wEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB6C,QAApB,GAA+BhF,MAAM,CAACmC,OAAP,CAAe6C,QAA9C;AACD;;AAED,UAAIhF,MAAM,CAACmC,OAAP,CAAe8C,YAAf,KAAgCjD,SAApC,EAA+C;AAC7C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe8C,YAAtB,KAAuC,QAA3C,EAAqD;AACnD,gBAAM,IAAInD,SAAJ,CAAc,oEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB8C,YAApB,GAAmCjF,MAAM,CAACmC,OAAP,CAAe8C,YAAlD;AACD;;AAED,UAAIjF,MAAM,CAACmC,OAAP,CAAegD,mBAAf,KAAuCnD,SAA3C,EAAsD;AACpD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAegD,mBAAtB,KAA8C,SAAlD,EAA6D;AAC3D,gBAAM,IAAIrD,SAAJ,CAAc,4EAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBgD,mBAApB,GAA0CnF,MAAM,CAACmC,OAAP,CAAegD,mBAAzD;AACD;;AAED,UAAInF,MAAM,CAACmC,OAAP,CAAeiD,UAAf,KAA8BpD,SAAlC,EAA6C;AAC3C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeiD,UAAtB,KAAqC,QAAzC,EAAmD;AACjD,gBAAM,IAAItD,SAAJ,CAAc,kEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBiD,UAApB,GAAiCpF,MAAM,CAACmC,OAAP,CAAeiD,UAAhD;AACD;;AAED,UAAIpF,MAAM,CAACmC,OAAP,CAAekD,IAAf,KAAwBrD,SAA5B,EAAuC;AACrC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAekD,IAAtB,KAA+B,QAAnC,EAA6C;AAC3C,gBAAM,IAAIvD,SAAJ,CAAc,4DAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAekD,IAAf,IAAuB,CAAvB,IAA4BrF,MAAM,CAACmC,OAAP,CAAekD,IAAf,IAAuB,KAAvD,EAA8D;AAC5D,gBAAM,IAAIkB,UAAJ,CAAe,4DAAf,CAAN;AACD;;AAED,aAAKvG,MAAL,CAAYmC,OAAZ,CAAoBkD,IAApB,GAA2BrF,MAAM,CAACmC,OAAP,CAAekD,IAA1C;AACA,aAAKrF,MAAL,CAAYmC,OAAZ,CAAoB2C,YAApB,GAAmC9C,SAAnC;AACD;;AAED,UAAIhC,MAAM,CAACmC,OAAP,CAAemD,cAAf,KAAkCtD,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAemD,cAAtB,KAAyC,SAA7C,EAAwD;AACtD,gBAAM,IAAIxD,SAAJ,CAAc,uEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBmD,cAApB,GAAqCtF,MAAM,CAACmC,OAAP,CAAemD,cAApD;AACD;;AAED,UAAItF,MAAM,CAACmC,OAAP,CAAeoD,cAAf,KAAkCvD,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeoD,cAAtB,KAAyC,QAA7C,EAAuD;AACrD,gBAAM,IAAIzD,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBoD,cAApB,GAAqCvF,MAAM,CAACmC,OAAP,CAAeoD,cAApD;AACD;;AAED,UAAIvF,MAAM,CAACmC,OAAP,CAAe+C,2BAAf,KAA+ClD,SAAnD,EAA8D;AAC5D,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe+C,2BAAtB,KAAsD,QAA1D,EAAoE;AAClE,gBAAM,IAAIpD,SAAJ,CAAc,mFAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAe+C,2BAAf,GAA6C,CAAjD,EAAoD;AAClD,gBAAM,IAAIpD,SAAJ,CAAc,4FAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB+C,2BAApB,GAAkDlF,MAAM,CAACmC,OAAP,CAAe+C,2BAAjE;AACD;;AAED,UAAIlF,MAAM,CAACmC,OAAP,CAAekB,uBAAf,KAA2CrB,SAA/C,EAA0D;AACxD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAekB,uBAAtB,KAAkD,QAAtD,EAAgE;AAC9D,gBAAM,IAAIvB,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAekB,uBAAf,IAA0C,CAA9C,EAAiD;AAC/C,gBAAM,IAAIvB,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBkB,uBAApB,GAA8CrD,MAAM,CAACmC,OAAP,CAAekB,uBAA7D;AACD;;AAED,UAAIrD,MAAM,CAACmC,OAAP,CAAeqD,mBAAf,KAAuCxD,SAA3C,EAAsD;AACpD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeqD,mBAAtB,KAA8C,SAAlD,EAA6D;AAC3D,gBAAM,IAAI1D,SAAJ,CAAc,4EAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBqD,mBAApB,GAA0CxF,MAAM,CAACmC,OAAP,CAAeqD,mBAAzD;AACD;;AAED,UAAIxF,MAAM,CAACmC,OAAP,CAAesD,gCAAf,KAAoDzD,SAAxD,EAAmE;AACjE,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAesD,gCAAtB,KAA2D,SAA/D,EAA0E;AACxE,gBAAM,IAAI3D,SAAJ,CAAc,yFAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBsD,gCAApB,GAAuDzF,MAAM,CAACmC,OAAP,CAAesD,gCAAtE;AACD;;AAED,UAAIzF,MAAM,CAACmC,OAAP,CAAeyD,UAAf,KAA8B5D,SAAlC,EAA6C;AAC3C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeyD,UAAtB,KAAqC,QAAzC,EAAmD;AACjD,gBAAM,IAAI9D,SAAJ,CAAc,kEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC5F,MAAM,CAACmC,OAAP,CAAeyD,UAAhD;AACD;;AAED,UAAI5F,MAAM,CAACmC,OAAP,CAAe0D,QAAf,KAA4B7D,SAAhC,EAA2C;AACzC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe0D,QAAtB,KAAmC,QAAnC,IAA+C7F,MAAM,CAACmC,OAAP,CAAe0D,QAAf,KAA4B,IAA/E,EAAqF;AACnF,gBAAM,IAAI/D,SAAJ,CAAc,wEAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAe0D,QAAf,GAA0B,UAA9B,EAA0C;AACxC,gBAAM,IAAI/D,SAAJ,CAAc,kEAAd,CAAN;AACD,SAFD,MAEO,IAAI9B,MAAM,CAACmC,OAAP,CAAe0D,QAAf,GAA0B,CAAC,CAA/B,EAAkC;AACvC,gBAAM,IAAI/D,SAAJ,CAAc,0DAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB0D,QAApB,GAA+B7F,MAAM,CAACmC,OAAP,CAAe0D,QAAf,GAA0B,CAAzD;AACD;;AAED,UAAI7F,MAAM,CAACmC,OAAP,CAAe4D,sBAAf,KAA0C/D,SAA9C,EAAyD;AACvD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe4D,sBAAtB,KAAiD,SAArD,EAAgE;AAC9D,gBAAM,IAAIjE,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB4D,sBAApB,GAA6C/F,MAAM,CAACmC,OAAP,CAAe4D,sBAA5D;AACD;;AAED,UAAI/F,MAAM,CAACmC,OAAP,CAAe6D,cAAf,KAAkChE,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe6D,cAAtB,KAAyC,SAA7C,EAAwD;AACtD,gBAAM,IAAIlE,SAAJ,CAAc,uEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB6D,cAApB,GAAqChG,MAAM,CAACmC,OAAP,CAAe6D,cAApD;AACD;;AAED,UAAIhG,MAAM,CAACmC,OAAP,CAAe8D,MAAf,KAA0BjE,SAA9B,EAAyC;AACvC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe8D,MAAtB,KAAiC,SAArC,EAAgD;AAC9C,gBAAM,IAAInE,SAAJ,CAAc,+DAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoB8D,MAApB,GAA6BjG,MAAM,CAACmC,OAAP,CAAe8D,MAA5C;AACD;;AAED,UAAIjG,MAAM,CAACmC,OAAP,CAAe+D,0BAAf,KAA8ClE,SAAlD,EAA6D;AAC3D,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe+D,0BAAtB,KAAqD,SAAzD,EAAoE;AAClE,gBAAM,IAAIpE,SAAJ,CAAc,mFAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAe+D,0BAAf,KAA8C,KAAlD,EAAyD;AACvDtH,UAAAA,SAAS,CAAC,iPAAD,CAAT;AACD;;AAED,aAAKoB,MAAL,CAAYmC,OAAZ,CAAoB+D,0BAApB,GAAiDlG,MAAM,CAACmC,OAAP,CAAe+D,0BAAhE;AACD;;AAED,UAAIlG,MAAM,CAACmC,OAAP,CAAegE,aAAf,KAAiCnE,SAArC,EAAgD;AAC9C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAegE,aAAtB,KAAwC,QAA5C,EAAsD;AACpD,gBAAM,IAAIrE,SAAJ,CAAc,qEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBgE,aAApB,GAAoCnG,MAAM,CAACmC,OAAP,CAAegE,aAAnD;AACD;;AAED,UAAInG,MAAM,CAACmC,OAAP,CAAeiE,cAAf,KAAkCpE,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeiE,cAAtB,KAAyC,SAA7C,EAAwD;AACtD,gBAAM,IAAItE,SAAJ,CAAc,uEAAd,CAAN;AACD;;AAED,aAAK9B,MAAL,CAAYmC,OAAZ,CAAoBiE,cAApB,GAAqCpG,MAAM,CAACmC,OAAP,CAAeiE,cAApD;AACD;AACF;;AAED,QAAII,kBAAkB,GAAG,KAAKxG,MAAL,CAAYmC,OAAZ,CAAoBuB,wBAA7C;;AAEA,QAAI8C,kBAAkB,CAACC,aAAnB,KAAqCzE,SAAzC,EAAoD;AAClD;AACA;AACA;AACA;AACA;AACAwE,MAAAA,kBAAkB,GAAGtK,MAAM,CAACwK,MAAP,CAAcF,kBAAd,EAAkC;AACrDC,QAAAA,aAAa,EAAE;AACbpK,UAAAA,KAAK,EAAEM,UAAU,CAACL,OAAX,CAAmBqK;AADb;AADsC,OAAlC,CAArB;AAKD;;AAED,SAAKxG,aAAL,GAAqB,CAAC,GAAGvD,IAAI,CAACgK,mBAAT,EAA8BJ,kBAA9B,CAArB;AACA,SAAK3F,KAAL,GAAa,KAAKgG,WAAL,EAAb;AACA,SAAKzG,aAAL,GAAqB,KAArB;AACA,SAAKC,sBAAL,GAA8B,CAACyG,MAAM,CAACC,IAAP,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAZ,CAAD,CAA9B,CA/rBkB,CA+rBqD;AACvE;AACA;AACA;AACA;;AAEA,SAAKzG,gBAAL,GAAwB,CAAxB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKG,MAAL,GAAc,KAAd;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKa,aAAL,GAAqBsF,MAAM,CAACE,KAAP,CAAa,CAAb,CAArB;AACA,SAAKxG,sBAAL,GAA8B,CAA9B;AACA,SAAKC,oBAAL,GAA4B,IAAItD,qBAAqB,CAAC8J,oBAA1B,EAA5B;AACA,SAAK/F,KAAL,GAAa,KAAKgG,KAAL,CAAWC,WAAxB;;AAEA,SAAKtF,uBAAL,GAA+B,MAAM;AACnC,WAAKZ,SAAL,CAAemG,WAAf,CAA2BhK,OAAO,CAACiK,IAAR,CAAaC,SAAxC;AACA,WAAKC,YAAL,CAAkB,KAAKL,KAAL,CAAWM,cAA7B;AACA,WAAKC,iBAAL;AACD,KAJD;AAKD;;AAEDC,EAAAA,OAAO,CAACC,eAAD,EAAkB;AACvB,QAAI,KAAKzG,KAAL,KAAe,KAAKgG,KAAL,CAAWC,WAA9B,EAA2C;AACzC,YAAM,IAAIrJ,OAAO,CAAC8J,eAAZ,CAA4B,sDAAsD,KAAK1G,KAAL,CAAW2G,IAAjE,GAAwE,UAApG,CAAN;AACD;;AAED,QAAIF,eAAJ,EAAqB;AACnB,YAAMG,SAAS,GAAGC,GAAG,IAAI;AACvB,aAAKC,cAAL,CAAoB,OAApB,EAA6BC,OAA7B;AACAN,QAAAA,eAAe,CAACI,GAAD,CAAf;AACD,OAHD;;AAKA,YAAME,OAAO,GAAGF,GAAG,IAAI;AACrB,aAAKC,cAAL,CAAoB,SAApB,EAA+BF,SAA/B;AACAH,QAAAA,eAAe,CAACI,GAAD,CAAf;AACD,OAHD;;AAKA,WAAKG,IAAL,CAAU,SAAV,EAAqBJ,SAArB;AACA,WAAKI,IAAL,CAAU,OAAV,EAAmBD,OAAnB;AACD;;AAED,SAAKV,YAAL,CAAkB,KAAKL,KAAL,CAAWiB,UAA7B;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,EAAE,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAClB,WAAO,MAAMF,EAAN,CAASC,KAAT,EAAgBC,QAAhB,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,IAAI,CAACF,KAAD,EAAQ,GAAGG,IAAX,EAAiB;AACnB,WAAO,MAAMD,IAAN,CAAWF,KAAX,EAAkB,GAAGG,IAArB,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEC,EAAAA,KAAK,GAAG;AACN,SAAKlB,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,oBAAoB,GAAG;AACrB,UAAMC,MAAM,GAAG,KAAKC,kBAAL,EAAf;;AAEA,QAAI,KAAK7I,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAxB,EAA8B;AAC5B,aAAO,KAAKyD,aAAL,CAAmB,KAAK9I,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAvC,EAA6C,KAAKrF,MAAL,CAAYmC,OAAZ,CAAoBgD,mBAAjE,EAAsFyD,MAAtF,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAI1L,eAAe,CAAC6L,cAApB,GAAqCC,cAArC,CAAoD;AACzDjH,QAAAA,MAAM,EAAE,KAAK/B,MAAL,CAAY+B,MADqC;AAEzD+C,QAAAA,YAAY,EAAE,KAAK9E,MAAL,CAAYmC,OAAZ,CAAoB2C,YAFuB;AAGzDmE,QAAAA,OAAO,EAAE,KAAKjJ,MAAL,CAAYmC,OAAZ,CAAoBmB,cAH4B;AAIzDsF,QAAAA,MAAM,EAAEA;AAJiD,OAApD,EAKJ,CAACb,GAAD,EAAM1C,IAAN,KAAe;AAChB,YAAI0C,GAAJ,EAAS;AACP,cAAIA,GAAG,CAACF,IAAJ,KAAa,YAAjB,EAA+B;AAC7B;AACD;;AAED,eAAKU,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAGzK,OAAO,CAAC8J,eAAZ,EAA6BG,GAAG,CAACmB,OAAjC,EAA0C,aAA1C,CAArB;AACD,SAND,MAMO;AACL,eAAKJ,aAAL,CAAmBzD,IAAnB,EAAyB,KAAKrF,MAAL,CAAYmC,OAAZ,CAAoBgD,mBAA7C,EAAkEyD,MAAlE;AACD;AACF,OAfM,CAAP;AAgBD;AACF;AACD;AACF;AACA;;;AAGEO,EAAAA,iBAAiB,CAACC,WAAD,EAAc;AAC7B,QAAI,CAAC,KAAK1I,MAAV,EAAkB;AAChB,WAAK2I,iBAAL;AACA,WAAKC,iBAAL;AACA,WAAKC,eAAL;AACA,WAAKC,eAAL;;AAEA,UAAIJ,WAAW,KAAK3J,YAAY,CAACE,QAAjC,EAA2C;AACzC,aAAK4I,IAAL,CAAU,WAAV;AACD,OAFD,MAEO,IAAIa,WAAW,KAAK3J,YAAY,CAACG,KAAjC,EAAwC;AAC7C6J,QAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACrB,eAAKnB,IAAL,CAAU,KAAV;AACD,SAFD;AAGD;;AAED,YAAMlH,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAIA,OAAJ,EAAa;AACX,cAAM0G,GAAG,GAAG,CAAC,GAAGjK,OAAO,CAAC6L,YAAZ,EAA0B,6CAA1B,EAAyE,QAAzE,CAAZ;AACAtI,QAAAA,OAAO,CAACuI,QAAR,CAAiB7B,GAAjB;AACA,aAAK1G,OAAL,GAAeW,SAAf;AACD;;AAED,WAAKtB,MAAL,GAAc,IAAd;AACA,WAAKC,QAAL,GAAgB,KAAhB;AACA,WAAKC,UAAL,GAAkBoB,SAAlB;AACD;AACF;AACD;AACF;AACA;;;AAGE6E,EAAAA,WAAW,GAAG;AACZ,UAAMhG,KAAK,GAAG,IAAI7D,MAAM,CAACV,OAAX,CAAmB,KAAK0D,MAAL,CAAYmC,OAAZ,CAAoBtB,KAAvC,CAAd;AACAA,IAAAA,KAAK,CAACuH,EAAN,CAAS,OAAT,EAAkBc,OAAO,IAAI;AAC3B,WAAKX,IAAL,CAAU,OAAV,EAAmBW,OAAnB;AACD,KAFD;AAGA,WAAOrI,KAAP;AACD;AACD;AACF;AACA;;;AAGEgJ,EAAAA,uBAAuB,CAACX,OAAD,EAAU;AAC/B,UAAMY,iBAAiB,GAAG,IAAIlM,kBAAkB,CAACmM,MAAvB,CAA8Bb,OAA9B,EAAuC,KAAKrI,KAA5C,EAAmD,KAAKb,MAAL,CAAYmC,OAA/D,CAA1B;AACA2H,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,aAArB,EAAoC5F,KAAK,IAAI;AAC3C,WAAK+F,IAAL,CAAU,aAAV,EAAyB/F,KAAzB;AACD,KAFD;AAGAsH,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,eAArB,EAAsC5F,KAAK,IAAI;AAC7C,UAAIA,KAAK,CAAC1B,UAAV,EAAsB;AACpB,aAAKA,UAAL,GAAkB0B,KAAK,CAAC1B,UAAxB;AACA,aAAKC,gBAAL,GAAwByB,KAAK,CAACzB,gBAA9B;AACD;;AAED,WAAKwH,IAAL,CAAU,eAAV,EAA2B/F,KAA3B;AACD,KAPD;AAQAsH,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,cAArB,EAAqC5F,KAAK,IAAI;AAC5C,WAAK+F,IAAL,CAAU,cAAV,EAA0B/F,KAA1B;;AAEA,UAAI,KAAK7B,QAAT,EAAmB;AACjB,cAAMU,OAAO,GAAG,KAAKA,OAArB;;AAEA,YAAIA,OAAJ,EAAa;AACX,cAAI,CAACA,OAAO,CAAC2I,QAAb,EAAuB;AACrB,kBAAMC,KAAK,GAAG,IAAInM,OAAO,CAAC6L,YAAZ,CAAyBnH,KAAK,CAAC0G,OAA/B,EAAwC,UAAxC,CAAd;AACAe,YAAAA,KAAK,CAACC,MAAN,GAAe1H,KAAK,CAAC0H,MAArB;AACAD,YAAAA,KAAK,CAAC/I,KAAN,GAAcsB,KAAK,CAACtB,KAApB;AACA+I,YAAAA,KAAK,CAACE,KAAN,GAAc3H,KAAK,CAAC2H,KAApB;AACAF,YAAAA,KAAK,CAACvE,UAAN,GAAmBlD,KAAK,CAACkD,UAAzB;AACAuE,YAAAA,KAAK,CAACG,QAAN,GAAiB5H,KAAK,CAAC4H,QAAvB;AACAH,YAAAA,KAAK,CAACI,UAAN,GAAmB7H,KAAK,CAAC6H,UAAzB;AACAhJ,YAAAA,OAAO,CAAC4I,KAAR,GAAgBA,KAAhB;AACD;AACF;AACF,OAfD,MAeO;AACL,cAAMA,KAAK,GAAG,CAAC,GAAGnM,OAAO,CAAC8J,eAAZ,EAA6BpF,KAAK,CAAC0G,OAAnC,EAA4C,QAA5C,CAAd;AACA,cAAMoB,qBAAqB,GAAG,KAAK7J,oBAAL,CAA0B8J,gBAA1B,CAA2C/H,KAAK,CAAC0H,MAAjD,CAA9B;;AAEA,YAAII,qBAAqB,IAAI,KAAK9J,sBAAL,KAAgC,KAAKR,MAAL,CAAYmC,OAAZ,CAAoB+C,2BAAjF,EAA8G;AAC5G+E,UAAAA,KAAK,CAACO,WAAN,GAAoB,IAApB;AACD;;AAED,aAAK5J,UAAL,GAAkBqJ,KAAlB;AACD;AACF,KA5BD;AA6BAH,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,gBAArB,EAAuC5F,KAAK,IAAI;AAC9C,WAAK+F,IAAL,CAAU,gBAAV,EAA4B/F,KAAK,CAACiI,QAAlC;AACD,KAFD;AAGAX,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,gBAArB,EAAuC5F,KAAK,IAAI;AAC9C,WAAK+F,IAAL,CAAU,gBAAV,EAA4B/F,KAAK,CAACiI,QAAlC;AACD,KAFD;AAGAX,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,eAArB,EAAsC5F,KAAK,IAAI;AAC7C,WAAK+F,IAAL,CAAU,eAAV,EAA2B/F,KAAK,CAACiI,QAAjC;AACD,KAFD;AAGAX,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,aAArB,EAAoC5F,KAAK,IAAI;AAC3C,WAAKkI,aAAL,CAAmB,aAAnB,EAAkClI,KAAlC;AACD,KAFD;AAGAsH,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,eAArB,EAAsC5F,KAAK,IAAI;AAC7C,WAAKkI,aAAL,CAAmB,eAAnB,EAAoClI,KAApC;AACD,KAFD;AAGAsH,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,UAArB,EAAiC5F,KAAK,IAAI;AACxC,UAAI,CAACA,KAAK,CAACoD,UAAX,EAAuB;AACrB;AACA,aAAKhF,UAAL,GAAkB,CAAC,GAAG9C,OAAO,CAAC8J,eAAZ,EAA6B,4CAA7B,EAA2E,MAA3E,CAAlB;AACA,aAAKjH,QAAL,GAAgB,KAAhB;AACA;AACD;;AAED,UAAI,CAAC6B,KAAK,CAACmI,SAAX,EAAsB;AACpB;AACA,aAAK/J,UAAL,GAAkB,CAAC,GAAG9C,OAAO,CAAC8J,eAAZ,EAA6B,8CAA7B,EAA6E,mBAA7E,CAAlB;AACA,aAAKjH,QAAL,GAAgB,KAAhB;AACA;AACD,OAbuC,CAatC;;;AAGF,WAAKX,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiCpD,KAAK,CAACoD,UAAvC;AACA,WAAKjF,QAAL,GAAgB,IAAhB;AACD,KAlBD;AAmBAmJ,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,eAArB,EAAsC5F,KAAK,IAAI;AAC7C;AACA,YAAM,CAACT,MAAD,IAAWS,KAAK,CAACiI,QAAN,CAAe1I,MAAf,CAAsB6I,KAAtB,CAA4B,IAA5B,CAAjB;AACA,WAAK5J,WAAL,GAAmB;AACjBe,QAAAA,MADiB;AAEjBsD,QAAAA,IAAI,EAAE7C,KAAK,CAACiI,QAAN,CAAepF;AAFJ,OAAnB;AAID,KAPD;AAQAyE,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,kBAArB,EAAyC5F,KAAK,IAAI;AAChD,WAAKvB,SAAL,CAAemE,UAAf,CAA0B5C,KAAK,CAACiI,QAAhC;AACD,KAFD,EApF+B,CAsF3B;AACJ;;AAEAX,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,kBAArB,EAAyC5F,KAAK,IAAI;AAChD,WAAKnC,sBAAL,CAA4BwK,IAA5B,CAAiCrI,KAAK,CAACiI,QAAvC;AACA,WAAKrK,aAAL,GAAqB,IAArB;AACD,KAHD,EAzF+B,CA4F3B;AACJ;;AAEA0J,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,mBAArB,EAA0C,MAAM;AAC9C,WAAK/H,sBAAL,CAA4ByK,MAA5B,GAAqC,CAArC;AACA,WAAK1K,aAAL,GAAqB,KAArB;AACD,KAHD,EA/F+B,CAkG3B;AACJ;AACA;;AAEA0J,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,qBAArB,EAA4C,MAAM;AAChD,WAAK/H,sBAAL,CAA4ByK,MAA5B,GAAqC,CAArC,CADgD,CACR;;AAExC,WAAK1K,aAAL,GAAqB,KAArB;AACA,WAAKmI,IAAL,CAAU,qBAAV;AACD,KALD;AAMAuB,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,gBAArB,EAAuC5F,KAAK,IAAI;AAC9C,YAAMnB,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAIA,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAAC2I,QAAb,EAAuB;AACrB,cAAI,KAAKhK,MAAL,CAAYmC,OAAZ,CAAoB6D,cAAxB,EAAwC;AACtC,kBAAM+E,OAAO,GAAG,EAAhB;;AAEA,iBAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGzI,KAAK,CAACuI,OAAN,CAAcD,MAApC,EAA4CE,CAAC,GAAGC,GAAhD,EAAqDD,CAAC,EAAtD,EAA0D;AACxD,oBAAME,GAAG,GAAG1I,KAAK,CAACuI,OAAN,CAAcC,CAAd,CAAZ;;AAEA,kBAAID,OAAO,CAACG,GAAG,CAACC,OAAL,CAAP,IAAwB,IAA5B,EAAkC;AAChCJ,gBAAAA,OAAO,CAACG,GAAG,CAACC,OAAL,CAAP,GAAuBD,GAAvB;AACD;AACF;;AAED7J,YAAAA,OAAO,CAACkH,IAAR,CAAa,gBAAb,EAA+BwC,OAA/B;AACD,WAZD,MAYO;AACL1J,YAAAA,OAAO,CAACkH,IAAR,CAAa,gBAAb,EAA+B/F,KAAK,CAACuI,OAArC;AACD;AACF;AACF,OAlBD,MAkBO;AACL,aAAKxC,IAAL,CAAU,OAAV,EAAmB,IAAIlC,KAAJ,CAAU,6DAAV,CAAnB;AACA,aAAKoC,KAAL;AACD;AACF,KAzBD;AA0BAqB,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,OAArB,EAA8B5F,KAAK,IAAI;AACrC,YAAMnB,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAIA,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAAC2I,QAAb,EAAuB;AACrB3I,UAAAA,OAAO,CAACkH,IAAR,CAAa,OAAb,EAAsB/F,KAAK,CAAC4I,YAA5B;AACD;AACF,OAJD,MAIO;AACL,aAAK7C,IAAL,CAAU,OAAV,EAAmB,IAAIlC,KAAJ,CAAU,oDAAV,CAAnB;AACA,aAAKoC,KAAL;AACD;AACF,KAXD;AAYAqB,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,KAArB,EAA4B5F,KAAK,IAAI;AACnC,YAAMnB,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAIA,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAAC2I,QAAb,EAAuB;AACrB,cAAI,KAAKhK,MAAL,CAAYmC,OAAZ,CAAoBsD,gCAAxB,EAA0D;AACxDpE,YAAAA,OAAO,CAACgK,IAAR,CAAaR,IAAb,CAAkBrI,KAAK,CAACuI,OAAxB;AACD;;AAED,cAAI,KAAK/K,MAAL,CAAYmC,OAAZ,CAAoBqD,mBAAxB,EAA6C;AAC3CnE,YAAAA,OAAO,CAACiK,GAAR,CAAYT,IAAZ,CAAiBrI,KAAK,CAACuI,OAAvB;AACD;;AAED,cAAI,CAAC1J,OAAO,CAAC2I,QAAb,EAAuB;AACrB3I,YAAAA,OAAO,CAACkH,IAAR,CAAa,KAAb,EAAoB/F,KAAK,CAACuI,OAA1B;AACD;AACF;AACF,OAdD,MAcO;AACL,aAAKxC,IAAL,CAAU,OAAV,EAAmB,IAAIlC,KAAJ,CAAU,kDAAV,CAAnB;AACA,aAAKoC,KAAL;AACD;AACF,KArBD;AAsBAqB,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,cAArB,EAAqC5F,KAAK,IAAI;AAC5C,YAAMnB,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAIA,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAAC2I,QAAb,EAAuB;AACrB;AACA,eAAK1I,qBAAL,GAA6BkB,KAAK,CAACnG,KAAnC;AACD;AACF;AACF,KATD;AAUAyN,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,aAArB,EAAoC5F,KAAK,IAAI;AAC3C,YAAMnB,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAIA,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAAC2I,QAAb,EAAuB;AACrB3I,UAAAA,OAAO,CAACkH,IAAR,CAAa,aAAb,EAA4B/F,KAAK,CAAC+I,SAAlC,EAA6C/I,KAAK,CAACnG,KAAnD,EAA0DmG,KAAK,CAACgJ,QAAhE;AACD;AACF;AACF,KARD;AASA1B,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,UAArB,EAAiC5F,KAAK,IAAI;AACxC,YAAMnB,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAIA,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAAC2I,QAAb,EAAuB;AACrB3I,UAAAA,OAAO,CAACkH,IAAR,CAAa,UAAb,EAAyB/F,KAAK,CAACiJ,QAA/B,EAAyCjJ,KAAK,CAACkJ,IAA/C,EAAqD,KAAKpK,qBAA1D,EAAiFD,OAAO,CAACiK,GAAzF;AACA,eAAKhK,qBAAL,GAA6BU,SAA7B;;AAEA,cAAIQ,KAAK,CAACiJ,QAAN,KAAmBzJ,SAAvB,EAAkC;AAChCX,YAAAA,OAAO,CAACoK,QAAR,IAAoBjJ,KAAK,CAACiJ,QAA1B;AACD;;AAED,cAAI,KAAKzL,MAAL,CAAYmC,OAAZ,CAAoBqD,mBAAxB,EAA6C;AAC3CnE,YAAAA,OAAO,CAACiK,GAAR,GAAc,EAAd;AACD;AACF;AACF;AACF,KAjBD;AAkBAxB,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,YAArB,EAAmC5F,KAAK,IAAI;AAC1C,YAAMnB,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAIA,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAAC2I,QAAb,EAAuB;AACrB3I,UAAAA,OAAO,CAACkH,IAAR,CAAa,YAAb,EAA2B/F,KAAK,CAACiJ,QAAjC,EAA2CjJ,KAAK,CAACkJ,IAAjD,EAAuDrK,OAAO,CAACiK,GAA/D;;AAEA,cAAI9I,KAAK,CAACiJ,QAAN,KAAmBzJ,SAAvB,EAAkC;AAChCX,YAAAA,OAAO,CAACoK,QAAR,IAAoBjJ,KAAK,CAACiJ,QAA1B;AACD;;AAED,cAAI,KAAKzL,MAAL,CAAYmC,OAAZ,CAAoBqD,mBAAxB,EAA6C;AAC3CnE,YAAAA,OAAO,CAACiK,GAAR,GAAc,EAAd;AACD;AACF;AACF;AACF,KAhBD;AAiBAxB,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,MAArB,EAA6B5F,KAAK,IAAI;AACpC,YAAMnB,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAIA,OAAJ,EAAa;AACX,YAAImB,KAAK,CAACmJ,SAAV,EAAqB;AACnB,eAAKjB,aAAL,CAAmB,WAAnB;AACD;;AAED,YAAI,CAACrJ,OAAO,CAAC2I,QAAb,EAAuB;AACrB,cAAIxH,KAAK,CAACoJ,QAAN,IAAkB,CAACvK,OAAO,CAAC4I,KAA/B,EAAsC;AACpC;AACA5I,YAAAA,OAAO,CAAC4I,KAAR,GAAgB,CAAC,GAAGnM,OAAO,CAAC6L,YAAZ,EAA0B,gCAA1B,EAA4D,SAA5D,CAAhB;AACD;;AAEDtI,UAAAA,OAAO,CAACkH,IAAR,CAAa,MAAb,EAAqB/F,KAAK,CAACiJ,QAA3B,EAAqCjJ,KAAK,CAACkJ,IAA3C,EAAiDrK,OAAO,CAACiK,GAAzD;;AAEA,cAAI9I,KAAK,CAACiJ,QAAN,KAAmBzJ,SAAvB,EAAkC;AAChCX,YAAAA,OAAO,CAACoK,QAAR,IAAoBjJ,KAAK,CAACiJ,QAA1B;AACD;;AAED,cAAI,KAAKzL,MAAL,CAAYmC,OAAZ,CAAoBqD,mBAAxB,EAA6C;AAC3CnE,YAAAA,OAAO,CAACiK,GAAR,GAAc,EAAd;AACD;AACF;AACF;AACF,KAzBD;AA0BAxB,IAAAA,iBAAiB,CAAC1B,EAAlB,CAAqB,iBAArB,EAAwC,MAAM;AAC5C,WAAKG,IAAL,CAAU,iBAAV;AACD,KAFD;AAGA,WAAOuB,iBAAP;AACD;;AAEDhB,EAAAA,aAAa,CAACzD,IAAD,EAAOF,mBAAP,EAA4ByD,MAA5B,EAAoC;AAC/C,UAAMiD,WAAW,GAAG;AAClBC,MAAAA,IAAI,EAAE,KAAK9K,WAAL,GAAmB,KAAKA,WAAL,CAAiBe,MAApC,GAA6C,KAAK/B,MAAL,CAAY+B,MAD7C;AAElBsD,MAAAA,IAAI,EAAE,KAAKrE,WAAL,GAAmB,KAAKA,WAAL,CAAiBqE,IAApC,GAA2CA,IAF/B;AAGlBJ,MAAAA,YAAY,EAAE,KAAKjF,MAAL,CAAYmC,OAAZ,CAAoB8C;AAHhB,KAApB;AAKA,QAAIlH,UAAU,CAACgO,SAAf,CAAyBF,WAAzB,EAAsCjD,MAAtC,EAA8CzD,mBAA9C,EAAmE6G,OAAnE,CAA2E,CAACjE,GAAD,EAAMxG,MAAN,KAAiB;AAC1F,UAAIwG,GAAJ,EAAS;AACP,YAAIA,GAAG,CAACF,IAAJ,KAAa,YAAjB,EAA+B;AAC7B;AACD;;AAED,eAAO,KAAKoE,WAAL,CAAiBlE,GAAjB,CAAP;AACD;;AAEDxG,MAAAA,MAAM,GAAGA,MAAT;AACAA,MAAAA,MAAM,CAAC6G,EAAP,CAAU,OAAV,EAAmB6B,KAAK,IAAI;AAC1B,aAAKgC,WAAL,CAAiBhC,KAAjB;AACD,OAFD;AAGA1I,MAAAA,MAAM,CAAC6G,EAAP,CAAU,OAAV,EAAmB,MAAM;AACvB,aAAK8D,WAAL;AACD,OAFD;AAGA3K,MAAAA,MAAM,CAAC6G,EAAP,CAAU,KAAV,EAAiB,MAAM;AACrB,aAAK+D,SAAL;AACD,OAFD;AAGA5K,MAAAA,MAAM,CAAC6K,YAAP,CAAoB,IAApB,EAA0BvN,wBAA1B;AACA,WAAKoC,SAAL,GAAiB,IAAItD,UAAU,CAACrB,OAAf,CAAuBiF,MAAvB,EAA+B,KAAKvB,MAAL,CAAYmC,OAAZ,CAAoBiD,UAAnD,EAA+D,KAAKvE,KAApE,CAAjB;AACA,WAAKI,SAAL,CAAemH,EAAf,CAAkB,MAAlB,EAA0Bc,OAAO,IAAI;AACnC,aAAKwB,aAAL,CAAmB,SAAnB,EAA8BxB,OAA9B;AACD,OAFD;AAGA,WAAKjI,SAAL,CAAemH,EAAf,CAAkB,QAAlB,EAA4BiE,SAAS,IAAI;AACvC,aAAK9D,IAAL,CAAU,QAAV,EAAoB8D,SAApB;AACD,OAFD;AAGA,WAAKpL,SAAL,CAAemH,EAAf,CAAkB,OAAlB,EAA2B6B,KAAK,IAAI;AAClC,aAAKgC,WAAL,CAAiBhC,KAAjB;AACD,OAFD;AAGA,WAAK1I,MAAL,GAAcA,MAAd;AACA,WAAK+K,aAAL;AACD,KAhCD;AAiCD;AACD;AACF;AACA;;;AAGE9C,EAAAA,eAAe,GAAG;AAChB,QAAI,KAAKjI,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYgL,OAAZ;AACD;AACF;AACD;AACF;AACA;;;AAGE1D,EAAAA,kBAAkB,GAAG;AACnB,UAAM2D,UAAU,GAAG,IAAIlO,oBAAoB,CAAChC,OAAzB,EAAnB;AACA,SAAKmF,YAAL,GAAoBgL,UAAU,CAAC,MAAM;AACnCD,MAAAA,UAAU,CAACE,KAAX;AACA,WAAKpJ,cAAL;AACD,KAH6B,EAG3B,KAAKtD,MAAL,CAAYmC,OAAZ,CAAoBmB,cAHO,CAA9B;AAIA,WAAOkJ,UAAU,CAAC5D,MAAlB;AACD;AACD;AACF;AACA;;;AAGEnB,EAAAA,iBAAiB,GAAG;AAClB,SAAKkF,gBAAL;AACA,UAAM1D,OAAO,GAAG,KAAKjJ,MAAL,CAAYmC,OAAZ,CAAoBc,aAApC;;AAEA,QAAIgG,OAAO,GAAG,CAAd,EAAiB;AACf,WAAKvH,WAAL,GAAmB+K,UAAU,CAAC,MAAM;AAClC,aAAKxJ,aAAL;AACD,OAF4B,EAE1BgG,OAF0B,CAA7B;AAGD;AACF;AACD;AACF;AACA;;;AAGE2D,EAAAA,kBAAkB,GAAG;AACnB,SAAKtD,iBAAL,GADmB,CACO;;AAE1B,UAAMjI,OAAO,GAAG,KAAKA,OAArB;AACA,UAAM4H,OAAO,GAAG5H,OAAO,CAAC4H,OAAR,KAAoBjH,SAApB,GAAgCX,OAAO,CAAC4H,OAAxC,GAAkD,KAAKjJ,MAAL,CAAYmC,OAAZ,CAAoBoD,cAAtF;;AAEA,QAAI0D,OAAJ,EAAa;AACX,WAAKtH,YAAL,GAAoB8K,UAAU,CAAC,MAAM;AACnC,aAAKlH,cAAL;AACD,OAF6B,EAE3B0D,OAF2B,CAA9B;AAGD;AACF;AACD;AACF;AACA;;;AAGE4D,EAAAA,gBAAgB,GAAG;AACjB,SAAKtD,eAAL;AACA,SAAK3H,UAAL,GAAkB6K,UAAU,CAAC,MAAM;AACjC,WAAKK,YAAL;AACD,KAF2B,EAEzB,KAAK9M,MAAL,CAAYmC,OAAZ,CAAoBkB,uBAFK,CAA5B;AAGD;AACD;AACF;AACA;;;AAGEC,EAAAA,cAAc,GAAG;AACf,UAAM4F,OAAO,GAAI,wBAAuB,KAAKlJ,MAAL,CAAY+B,MAAO,GAAE,KAAK/B,MAAL,CAAYmC,OAAZ,CAAoBkD,IAApB,GAA4B,IAAG,KAAKrF,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAK,EAAxD,GAA6D,KAAI,KAAKrF,MAAL,CAAYmC,OAAZ,CAAoB2C,YAAa,EAAE,OAAM,KAAK9E,MAAL,CAAYmC,OAAZ,CAAoBmB,cAAe,IAA1M;AACA,SAAKzC,KAAL,CAAWkM,GAAX,CAAe7D,OAAf;AACA,SAAKX,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAGzK,OAAO,CAAC8J,eAAZ,EAA6BsB,OAA7B,EAAsC,UAAtC,CAArB;AACA,SAAKzH,YAAL,GAAoBO,SAApB;AACA,SAAK0I,aAAL,CAAmB,gBAAnB;AACD;AACD;AACF;AACA;;;AAGEzH,EAAAA,aAAa,GAAG;AACd,UAAMiG,OAAO,GAAI,+BAA8B,KAAKlJ,MAAL,CAAYmC,OAAZ,CAAoBc,aAAc,IAAjF;AACA,SAAKpC,KAAL,CAAWkM,GAAX,CAAe7D,OAAf;AACA,SAAKwB,aAAL,CAAmB,aAAnB,EAAkC,CAAC,GAAG5M,OAAO,CAAC8J,eAAZ,EAA6BsB,OAA7B,EAAsC,UAAtC,CAAlC;AACD;AACD;AACF;AACA;;;AAGE3D,EAAAA,cAAc,GAAG;AACf,SAAK5D,YAAL,GAAoBK,SAApB;AACA,UAAMX,OAAO,GAAG,KAAKA,OAArB;AACAA,IAAAA,OAAO,CAAC2L,MAAR;AACA,UAAM/D,OAAO,GAAG5H,OAAO,CAAC4H,OAAR,KAAoBjH,SAApB,GAAgCX,OAAO,CAAC4H,OAAxC,GAAkD,KAAKjJ,MAAL,CAAYmC,OAAZ,CAAoBoD,cAAtF;AACA,UAAM2D,OAAO,GAAG,4CAA4CD,OAA5C,GAAsD,IAAtE;AACA5H,IAAAA,OAAO,CAAC4I,KAAR,GAAgB,CAAC,GAAGnM,OAAO,CAAC6L,YAAZ,EAA0BT,OAA1B,EAAmC,UAAnC,CAAhB;AACD;AACD;AACF;AACA;;;AAGE4D,EAAAA,YAAY,GAAG;AACb,SAAKlL,UAAL,GAAkBI,SAAlB;AACA,SAAKuG,IAAL,CAAU,OAAV;AACA,SAAKhB,YAAL,CAAkB,KAAKL,KAAL,CAAWiB,UAA7B;AACD;AACD;AACF;AACA;;;AAGEkB,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAK5H,YAAT,EAAuB;AACrBwL,MAAAA,YAAY,CAAC,KAAKxL,YAAN,CAAZ;AACD;AACF;AACD;AACF;AACA;;;AAGEkL,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKjL,WAAT,EAAsB;AACpBuL,MAAAA,YAAY,CAAC,KAAKvL,WAAN,CAAZ;AACD;AACF;AACD;AACF;AACA;;;AAGE4H,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAK3H,YAAT,EAAuB;AACrBsL,MAAAA,YAAY,CAAC,KAAKtL,YAAN,CAAZ;AACA,WAAKA,YAAL,GAAoBK,SAApB;AACD;AACF;AACD;AACF;AACA;;;AAGEuH,EAAAA,eAAe,GAAG;AAChB,QAAI,KAAK3H,UAAT,EAAqB;AACnBqL,MAAAA,YAAY,CAAC,KAAKrL,UAAN,CAAZ;AACA,WAAKA,UAAL,GAAkBI,SAAlB;AACD;AACF;AACD;AACF;AACA;;;AAGEuF,EAAAA,YAAY,CAAC2F,QAAD,EAAW;AACrB,QAAI,KAAKhM,KAAL,KAAegM,QAAnB,EAA6B;AAC3B,WAAKrM,KAAL,CAAWkM,GAAX,CAAe,sBAAsBG,QAAQ,CAACrF,IAA9C;AACA;AACD;;AAED,QAAI,KAAK3G,KAAL,IAAc,KAAKA,KAAL,CAAWiM,IAA7B,EAAmC;AACjC,WAAKjM,KAAL,CAAWiM,IAAX,CAAgBC,IAAhB,CAAqB,IAArB,EAA2BF,QAA3B;AACD;;AAED,SAAKrM,KAAL,CAAWkM,GAAX,CAAe,oBAAoB,KAAK7L,KAAL,GAAa,KAAKA,KAAL,CAAW2G,IAAxB,GAA+B,WAAnD,IAAkE,MAAlE,GAA2EqF,QAAQ,CAACrF,IAAnG;AACA,SAAK3G,KAAL,GAAagM,QAAb;;AAEA,QAAI,KAAKhM,KAAL,CAAWmM,KAAf,EAAsB;AACpB,WAAKnM,KAAL,CAAWmM,KAAX,CAAiBC,KAAjB,CAAuB,IAAvB;AACD;AACF;AACD;AACF;AACA;;;AAGEC,EAAAA,eAAe,CAACC,SAAD,EAAY;AACzB,UAAMC,OAAO,GAAG,KAAKvM,KAAL,CAAWwM,MAAX,CAAkBF,SAAlB,CAAhB;;AAEA,QAAI,CAACC,OAAL,EAAc;AACZ,YAAM,IAAIpH,KAAJ,CAAW,aAAYmH,SAAU,eAAc,KAAKtM,KAAL,CAAW2G,IAAK,GAA/D,CAAN;AACD;;AAED,WAAO4F,OAAP;AACD;AACD;AACF;AACA;;;AAGE/C,EAAAA,aAAa,CAAC8C,SAAD,EAAY,GAAGhF,IAAf,EAAqB;AAChC,UAAMiF,OAAO,GAAG,KAAKvM,KAAL,CAAWwM,MAAX,CAAkBF,SAAlB,CAAhB;;AAEA,QAAIC,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACH,KAAR,CAAc,IAAd,EAAoB9E,IAApB;AACD,KAFD,MAEO;AACL,WAAKD,IAAL,CAAU,OAAV,EAAmB,IAAIlC,KAAJ,CAAW,aAAYmH,SAAU,eAAc,KAAKtM,KAAL,CAAW2G,IAAK,GAA/D,CAAnB;AACA,WAAKY,KAAL;AACD;AACF;AACD;AACF;AACA;;;AAGEwD,EAAAA,WAAW,CAAChC,KAAD,EAAQ;AACjB,QAAI,KAAK/I,KAAL,KAAe,KAAKgG,KAAL,CAAWiB,UAA1B,IAAwC,KAAKjH,KAAL,KAAe,KAAKgG,KAAL,CAAWyG,sBAAtE,EAA8F;AAC5F,YAAMzE,OAAO,GAAI,wBAAuB,KAAKlJ,MAAL,CAAY+B,MAAO,IAAG,KAAK/B,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAK,MAAK4E,KAAK,CAACf,OAAQ,EAA1G;AACA,WAAKrI,KAAL,CAAWkM,GAAX,CAAe7D,OAAf;AACA,WAAKX,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAGzK,OAAO,CAAC8J,eAAZ,EAA6BsB,OAA7B,EAAsC,SAAtC,CAArB;AACD,KAJD,MAIO;AACL,YAAMA,OAAO,GAAI,qBAAoBe,KAAK,CAACf,OAAQ,EAAnD;AACA,WAAKrI,KAAL,CAAWkM,GAAX,CAAe7D,OAAf;AACA,WAAKX,IAAL,CAAU,OAAV,EAAmB,CAAC,GAAGzK,OAAO,CAAC8J,eAAZ,EAA6BsB,OAA7B,EAAsC,SAAtC,CAAnB;AACD;;AAED,SAAKwB,aAAL,CAAmB,aAAnB,EAAkCT,KAAlC;AACD;AACD;AACF;AACA;;;AAGEqC,EAAAA,aAAa,GAAG;AACd,SAAK5L,MAAL,GAAc,KAAd;AACA,SAAKG,KAAL,CAAWkM,GAAX,CAAe,kBAAkB,KAAK/M,MAAL,CAAY+B,MAA9B,GAAuC,GAAvC,GAA6C,KAAK/B,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAhF;AACA,SAAKqF,aAAL,CAAmB,eAAnB;AACD;AACD;AACF;AACA;;;AAGEyB,EAAAA,SAAS,GAAG;AACV,SAAKtL,KAAL,CAAWkM,GAAX,CAAe,cAAf;;AAEA,QAAI,KAAK7L,KAAL,KAAe,KAAKgG,KAAL,CAAWwB,KAA9B,EAAqC;AACnC,YAAMuB,KAAK,GAAG,IAAI5D,KAAJ,CAAU,gBAAV,CAAd;AACA4D,MAAAA,KAAK,CAAC2D,IAAN,GAAa,YAAb;AACA,WAAK3B,WAAL,CAAiBhC,KAAjB;AACD;AACF;AACD;AACF;AACA;;;AAGEiC,EAAAA,WAAW,GAAG;AACZ,SAAKrL,KAAL,CAAWkM,GAAX,CAAe,mBAAmB,KAAK/M,MAAL,CAAY+B,MAA/B,GAAwC,GAAxC,GAA8C,KAAK/B,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAlE,GAAyE,SAAxF;;AAEA,QAAI,KAAKnE,KAAL,KAAe,KAAKgG,KAAL,CAAW2G,SAA9B,EAAyC;AACvC,WAAKhN,KAAL,CAAWkM,GAAX,CAAe,kBAAkB,KAAK/L,WAAL,CAAiBe,MAAnC,GAA4C,GAA5C,GAAkD,KAAKf,WAAL,CAAiBqE,IAAlF;AACA,WAAKqF,aAAL,CAAmB,WAAnB;AACD,KAHD,MAGO,IAAI,KAAKxJ,KAAL,KAAe,KAAKgG,KAAL,CAAW4G,uBAA9B,EAAuD;AAC5D,YAAM/L,MAAM,GAAG,KAAKf,WAAL,GAAmB,KAAKA,WAAL,CAAiBe,MAApC,GAA6C,KAAK/B,MAAL,CAAY+B,MAAxE;AACA,YAAMsD,IAAI,GAAG,KAAKrE,WAAL,GAAmB,KAAKA,WAAL,CAAiBqE,IAApC,GAA2C,KAAKrF,MAAL,CAAYmC,OAAZ,CAAoBkD,IAA5E;AACA,WAAKxE,KAAL,CAAWkM,GAAX,CAAe,iDAAiDhL,MAAjD,GAA0D,GAA1D,GAAgEsD,IAA/E;AACA,WAAKqF,aAAL,CAAmB,OAAnB;AACD,KALM,MAKA;AACL,WAAKnD,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD;AACF;AACD;AACF;AACA;;;AAGEqF,EAAAA,YAAY,GAAG;AACb,QAAIC,MAAJ;;AAEA,UAAM,GAAGC,KAAH,EAAUC,KAAV,EAAiBC,KAAjB,IAA0B,CAACH,MAAM,GAAG,uBAAuBI,IAAvB,CAA4B3P,QAAQ,CAAC4P,OAArC,CAAV,MAA6D,IAA7D,IAAqEL,MAAM,KAAK,KAAK,CAArF,GAAyFA,MAAzF,GAAkG,CAAC,OAAD,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,CAAlI;AACA,UAAMhK,OAAO,GAAG,IAAI3G,gBAAgB,CAACf,OAArB,CAA6B;AAC3CqI,MAAAA,OAAO,EAAE,KAAK3E,MAAL,CAAYmC,OAAZ,CAAoBwC,OADc;AAE3C0J,MAAAA,OAAO,EAAE;AACPJ,QAAAA,KAAK,EAAEK,MAAM,CAACL,KAAD,CADN;AAEPC,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAD,CAFN;AAGPC,QAAAA,KAAK,EAAEG,MAAM,CAACH,KAAD,CAHN;AAIPI,QAAAA,QAAQ,EAAE;AAJH;AAFkC,KAA7B,CAAhB;AASA,SAAKtN,SAAL,CAAemG,WAAf,CAA2BhK,OAAO,CAACiK,IAAR,CAAamH,QAAxC,EAAkDxK,OAAO,CAACF,IAA1D;AACA,SAAKjD,KAAL,CAAWmD,OAAX,CAAmB,YAAY;AAC7B,aAAOA,OAAO,CAACyK,QAAR,CAAiB,IAAjB,CAAP;AACD,KAFD;AAGD;AACD;AACF;AACA;;;AAGEC,EAAAA,kBAAkB,GAAG;AACnB,SAAKlN,aAAL,GAAqBsF,MAAM,CAACE,KAAP,CAAa,CAAb,CAArB;AACD;AACD;AACF;AACA;;;AAGE2H,EAAAA,kBAAkB,CAAC7K,IAAD,EAAO;AACvB,SAAKtC,aAAL,GAAqBsF,MAAM,CAAC8H,MAAP,CAAc,CAAC,KAAKpN,aAAN,EAAqBsC,IAArB,CAAd,CAArB;AACD;AACD;AACF;AACA;;;AAGE+K,EAAAA,gBAAgB,GAAG;AACjB,UAAM7K,OAAO,GAAG,IAAI1G,cAAc,CAAChB,OAAnB,CAA2B;AACzCsJ,MAAAA,UAAU,EAAE3H,YAAY,CAAC6Q,QAAb,CAAsB,KAAK9O,MAAL,CAAYmC,OAAZ,CAAoByD,UAA1C,CAD6B;AAEzCR,MAAAA,UAAU,EAAE,KAAKpF,MAAL,CAAYmC,OAAZ,CAAoBiD,UAFS;AAGzC2J,MAAAA,aAAa,EAAE,CAH0B;AAIzCC,MAAAA,SAAS,EAAEvF,OAAO,CAACwF,GAJsB;AAKzCC,MAAAA,YAAY,EAAE,CAL2B;AAMzCC,MAAAA,cAAc,EAAE,IAAIC,IAAJ,GAAWC,iBAAX,EANyB;AAOzCC,MAAAA,UAAU,EAAE;AAP6B,KAA3B,CAAhB;AASA,UAAM;AACJrN,MAAAA;AADI,QAEF,KAAKjC,MAFT;;AAIA,YAAQiC,cAAc,CAACC,IAAvB;AACE,WAAK,iCAAL;AACE8B,QAAAA,OAAO,CAACuL,OAAR,GAAkB;AAChBrN,UAAAA,IAAI,EAAE,MADU;AAEhBsN,UAAAA,IAAI,EAAE,KAAKvP,eAFK;AAGhBwP,UAAAA,QAAQ,EAAE;AAHM,SAAlB;AAKA;;AAEF,WAAK,qCAAL;AACEzL,QAAAA,OAAO,CAACuL,OAAR,GAAkB;AAChBrN,UAAAA,IAAI,EAAE,eADU;AAEhBsN,UAAAA,IAAI,EAAE,KAAKvP,eAFK;AAGhByP,UAAAA,YAAY,EAAEzN,cAAc,CAACE,OAAf,CAAuBK;AAHrB,SAAlB;AAKA;;AAEF,WAAK,+BAAL;AACA,WAAK,wCAAL;AACA,WAAK,iDAAL;AACEwB,QAAAA,OAAO,CAACuL,OAAR,GAAkB;AAChBrN,UAAAA,IAAI,EAAE,MADU;AAEhBsN,UAAAA,IAAI,EAAE,KAAKvP,eAFK;AAGhBwP,UAAAA,QAAQ,EAAE;AAHM,SAAlB;AAKA;;AAEF,WAAK,MAAL;AACEzL,QAAAA,OAAO,CAAC2L,IAAR,GAAe,CAAC,GAAGxR,KAAK,CAACyR,iBAAV,EAA6B;AAC1CxN,UAAAA,MAAM,EAAEH,cAAc,CAACE,OAAf,CAAuBC;AADW,SAA7B,CAAf;AAGA;;AAEF;AACE4B,QAAAA,OAAO,CAAC3B,QAAR,GAAmBJ,cAAc,CAACE,OAAf,CAAuBE,QAA1C;AACA2B,QAAAA,OAAO,CAAC1B,QAAR,GAAmBL,cAAc,CAACE,OAAf,CAAuBG,QAA1C;AAnCJ;;AAsCA0B,IAAAA,OAAO,CAAC6L,QAAR,GAAmB,KAAK7P,MAAL,CAAYmC,OAAZ,CAAoBgE,aAApB,IAAqCzJ,GAAG,CAACJ,OAAJ,CAAYuT,QAAZ,EAAxD;AACA7L,IAAAA,OAAO,CAAC0B,UAAR,GAAqB,KAAK1E,WAAL,GAAmB,KAAKA,WAAL,CAAiBe,MAApC,GAA6C,KAAK/B,MAAL,CAAY+B,MAA9E;AACAiC,IAAAA,OAAO,CAACjB,OAAR,GAAkB,KAAK/C,MAAL,CAAYmC,OAAZ,CAAoBY,OAApB,IAA+B,SAAjD;AACAiB,IAAAA,OAAO,CAAC8L,WAAR,GAAsB9R,QAAQ,CAAC6J,IAA/B;AACA7D,IAAAA,OAAO,CAACgB,QAAR,GAAmB,KAAKhF,MAAL,CAAYmC,OAAZ,CAAoB6C,QAAvC;AACAhB,IAAAA,OAAO,CAACL,QAAR,GAAmB,KAAK3D,MAAL,CAAYmC,OAAZ,CAAoBwB,QAAvC;AACAK,IAAAA,OAAO,CAACvB,QAAR,GAAmBqE,MAAM,CAACC,IAAP,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAZ,CAAnB;AACA/C,IAAAA,OAAO,CAACsB,cAAR,GAAyB,KAAKtF,MAAL,CAAYmC,OAAZ,CAAoBmD,cAA7C;AACAtB,IAAAA,OAAO,CAAC+L,WAAR,GAAsB,CAAC,KAAK/P,MAAL,CAAYmC,OAAZ,CAAoByC,mBAA3C;AACA,SAAK5D,WAAL,GAAmBgB,SAAnB;AACA,SAAKf,SAAL,CAAemG,WAAf,CAA2BhK,OAAO,CAACiK,IAAR,CAAa2I,MAAxC,EAAgDhM,OAAO,CAACiM,QAAR,EAAhD;AACA,SAAKpP,KAAL,CAAWmD,OAAX,CAAmB,YAAY;AAC7B,aAAOA,OAAO,CAACyK,QAAR,CAAiB,IAAjB,CAAP;AACD,KAFD;AAGD;AACD;AACF;AACA;;;AAGEyB,EAAAA,uBAAuB,CAAC1N,KAAD,EAAQ;AAC7B,UAAM2N,cAAc,GAAGrJ,MAAM,CAACsJ,UAAP,CAAkB5N,KAAlB,EAAyB,MAAzB,CAAvB;AACA,UAAMsB,IAAI,GAAGgD,MAAM,CAACE,KAAP,CAAa,IAAImJ,cAAjB,CAAb;AACA,QAAIE,MAAM,GAAG,CAAb;AACAA,IAAAA,MAAM,GAAGvM,IAAI,CAACwM,aAAL,CAAmBH,cAAc,GAAG,CAApC,EAAuCE,MAAvC,CAAT;AACAA,IAAAA,MAAM,GAAGvM,IAAI,CAACwM,aAAL,CAAmBH,cAAnB,EAAmCE,MAAnC,CAAT;AACAvM,IAAAA,IAAI,CAACyM,KAAL,CAAW/N,KAAX,EAAkB6N,MAAlB,EAA0B,MAA1B;AACA,SAAKpP,SAAL,CAAemG,WAAf,CAA2BhK,OAAO,CAACiK,IAAR,CAAamJ,aAAxC,EAAuD1M,IAAvD,EAP6B,CAOiC;;AAE9D,SAAKyD,YAAL,CAAkB,KAAKL,KAAL,CAAWuJ,+BAA7B;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,cAAc,GAAG;AACf,UAAM1M,OAAO,GAAG,IAAItG,gBAAgB,CAACpB,OAArB,CAA6B,KAAKqU,aAAL,EAA7B,EAAmD,KAAKC,4BAAL,EAAnD,EAAwF,KAAK5Q,MAAL,CAAYmC,OAApG,CAAhB;AACA,UAAM+G,OAAO,GAAG,IAAIhL,QAAQ,CAAC5B,OAAb,CAAqB;AACnC4F,MAAAA,IAAI,EAAE9E,OAAO,CAACiK,IAAR,CAAawJ;AADgB,KAArB,CAAhB;AAGA,SAAK5P,SAAL,CAAe6P,qBAAf,CAAqCP,KAArC,CAA2CrH,OAA3C;;AAEArM,IAAAA,OAAO,CAACkU,QAAR,CAAiBhK,IAAjB,CAAsB/C,OAAtB,EAA+BgN,IAA/B,CAAoC9H,OAApC;AACD;AACD;AACF;AACA;;;AAGEyH,EAAAA,aAAa,GAAG;AACd,UAAMxO,OAAO,GAAG,EAAhB;;AAEA,QAAI,KAAKnC,MAAL,CAAYmC,OAAZ,CAAoB8B,cAApB,KAAuC,IAA3C,EAAiD;AAC/C9B,MAAAA,OAAO,CAAC0I,IAAR,CAAa,mBAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoB8B,cAApB,KAAuC,KAA3C,EAAkD;AACvD9B,MAAAA,OAAO,CAAC0I,IAAR,CAAa,oBAAb;AACD;;AAED,QAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoB+B,qBAApB,KAA8C,IAAlD,EAAwD;AACtD/B,MAAAA,OAAO,CAAC0I,IAAR,CAAa,0BAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoB+B,qBAApB,KAA8C,KAAlD,EAAyD;AAC9D/B,MAAAA,OAAO,CAAC0I,IAAR,CAAa,2BAAb;AACD;;AAED,QAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBgC,iBAApB,KAA0C,IAA9C,EAAoD;AAClDhC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,qBAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBgC,iBAApB,KAA0C,KAA9C,EAAqD;AAC1DhC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,sBAAb;AACD;;AAED,QAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBiC,kBAApB,KAA2C,IAA/C,EAAqD;AACnDjC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,sBAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBiC,kBAApB,KAA2C,KAA/C,EAAsD;AAC3DjC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,uBAAb;AACD;;AAED,QAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBkC,gBAApB,KAAyC,IAA7C,EAAmD;AACjDlC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,mBAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBkC,gBAApB,KAAyC,KAA7C,EAAoD;AACzDlC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,oBAAb;AACD;;AAED,QAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBmC,0BAApB,KAAmD,IAAvD,EAA6D;AAC3DnC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,gCAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBmC,0BAApB,KAAmD,KAAvD,EAA8D;AACnEnC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,iCAAb;AACD;;AAED,QAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBoC,yBAApB,KAAkD,IAAtD,EAA4D;AAC1DpC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,+BAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBoC,yBAApB,KAAkD,KAAtD,EAA6D;AAClEpC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,gCAAb;AACD;;AAED,QAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoByB,SAApB,KAAkC,IAAtC,EAA4C;AAC1CzB,MAAAA,OAAO,CAAC0I,IAAR,CAAc,iBAAgB,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoByB,SAAU,EAA5D;AACD;;AAED,QAAI,KAAK5D,MAAL,CAAYmC,OAAZ,CAAoB0B,UAApB,KAAmC,IAAvC,EAA6C;AAC3C1B,MAAAA,OAAO,CAAC0I,IAAR,CAAc,kBAAiB,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoB0B,UAAW,EAA9D;AACD;;AAED,QAAI,KAAK7D,MAAL,CAAYmC,OAAZ,CAAoBqC,0BAApB,KAAmD,IAAvD,EAA6D;AAC3DrC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,8BAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBqC,0BAApB,KAAmD,KAAvD,EAA8D;AACnErC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,+BAAb;AACD;;AAED,QAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoB6C,QAApB,KAAiC,IAArC,EAA2C;AACzC7C,MAAAA,OAAO,CAAC0I,IAAR,CAAc,gBAAe,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoB6C,QAAS,EAA1D;AACD;;AAED,QAAI,KAAKhF,MAAL,CAAYmC,OAAZ,CAAoBsC,uBAApB,KAAgD,IAApD,EAA0D;AACxDtC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,2BAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBsC,uBAApB,KAAgD,KAApD,EAA2D;AAChEtC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,4BAAb;AACD;;AAED,QAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBuC,sBAApB,KAA+C,IAAnD,EAAyD;AACvDvC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,0BAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBuC,sBAApB,KAA+C,KAAnD,EAA0D;AAC/DvC,MAAAA,OAAO,CAAC0I,IAAR,CAAa,2BAAb;AACD;;AAED,QAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoB0D,QAApB,KAAiC,IAArC,EAA2C;AACzC1D,MAAAA,OAAO,CAAC0I,IAAR,CAAc,gBAAe,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoB0D,QAAS,EAA1D;AACD;;AAED,QAAI,KAAK7F,MAAL,CAAYmC,OAAZ,CAAoBoB,wBAApB,KAAiD,IAArD,EAA2D;AACzDpB,MAAAA,OAAO,CAAC0I,IAAR,CAAc,mCAAkC,KAAKoG,qBAAL,CAA2B,KAAKjR,MAAL,CAAYmC,OAAZ,CAAoBoB,wBAA/C,CAAyE,EAAzH;AACD;;AAED,QAAI,KAAKvD,MAAL,CAAYmC,OAAZ,CAAoBW,uBAApB,KAAgD,IAApD,EAA0D;AACxDX,MAAAA,OAAO,CAAC0I,IAAR,CAAa,mBAAb;AACD,KAFD,MAEO,IAAI,KAAK7K,MAAL,CAAYmC,OAAZ,CAAoBW,uBAApB,KAAgD,KAApD,EAA2D;AAChEX,MAAAA,OAAO,CAAC0I,IAAR,CAAa,oBAAb;AACD;;AAED,WAAO1I,OAAO,CAAC+O,IAAR,CAAa,IAAb,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,mBAAmB,GAAG;AACpB,SAAK9H,iBAAL;AACA,SAAKd,IAAL,CAAU,SAAV;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE6I,EAAAA,YAAY,CAAC/P,OAAD,EAAU;AACpB,SAAKgQ,WAAL,CAAiBhQ,OAAjB,EAA0BjE,OAAO,CAACiK,IAAR,CAAawJ,SAAvC,EAAkD,IAAInT,gBAAgB,CAACpB,OAArB,CAA6B+E,OAAO,CAACiQ,kBAArC,EAAyD,KAAKV,4BAAL,EAAzD,EAA8F,KAAK5Q,MAAL,CAAYmC,OAA1G,CAAlD;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEoP,EAAAA,OAAO,CAAClQ,OAAD,EAAU;AACf,QAAI;AACFA,MAAAA,OAAO,CAACmQ,kBAAR;AACD,KAFD,CAEE,OAAOvH,KAAP,EAAc;AACd5I,MAAAA,OAAO,CAAC4I,KAAR,GAAgBA,KAAhB;AACAR,MAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACrB,aAAK7I,KAAL,CAAWkM,GAAX,CAAe9C,KAAK,CAACf,OAArB;AACA7H,QAAAA,OAAO,CAACuI,QAAR,CAAiBK,KAAjB;AACD,OAHD;AAIA;AACD;;AAED,UAAMwH,UAAU,GAAG,EAAnB;AACAA,IAAAA,UAAU,CAAC5G,IAAX,CAAgB;AACd3I,MAAAA,IAAI,EAAE3D,SAAS,CAACmT,KAAV,CAAgBC,QADR;AAEd9J,MAAAA,IAAI,EAAE,WAFQ;AAGdxL,MAAAA,KAAK,EAAEgF,OAAO,CAACiQ,kBAHD;AAIdM,MAAAA,MAAM,EAAE,KAJM;AAKd9G,MAAAA,MAAM,EAAE9I,SALM;AAMd6P,MAAAA,SAAS,EAAE7P,SANG;AAOd8P,MAAAA,KAAK,EAAE9P;AAPO,KAAhB;;AAUA,QAAIX,OAAO,CAACoQ,UAAR,CAAmB3G,MAAvB,EAA+B;AAC7B2G,MAAAA,UAAU,CAAC5G,IAAX,CAAgB;AACd3I,QAAAA,IAAI,EAAE3D,SAAS,CAACmT,KAAV,CAAgBC,QADR;AAEd9J,QAAAA,IAAI,EAAE,QAFQ;AAGdxL,QAAAA,KAAK,EAAEgF,OAAO,CAAC0Q,mBAAR,CAA4B1Q,OAAO,CAACoQ,UAApC,CAHO;AAIdG,QAAAA,MAAM,EAAE,KAJM;AAKd9G,QAAAA,MAAM,EAAE9I,SALM;AAMd6P,QAAAA,SAAS,EAAE7P,SANG;AAOd8P,QAAAA,KAAK,EAAE9P;AAPO,OAAhB;AASAyP,MAAAA,UAAU,CAAC5G,IAAX,CAAgB,GAAGxJ,OAAO,CAACoQ,UAA3B;AACD;;AAED,SAAKJ,WAAL,CAAiBhQ,OAAjB,EAA0BjE,OAAO,CAACiK,IAAR,CAAa2K,WAAvC,EAAoD,IAAIvU,kBAAkB,CAACnB,OAAvB,CAA+B,eAA/B,EAAgDmV,UAAhD,EAA4D,KAAKb,4BAAL,EAA5D,EAAiG,KAAK5Q,MAAL,CAAYmC,OAA7G,CAApD;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGE8P,EAAAA,WAAW,CAACC,KAAD,EAAQC,iBAAR,EAA2BvI,QAA3B,EAAqC;AAC9C,QAAIzH,OAAJ;;AAEA,QAAIyH,QAAQ,KAAK5H,SAAjB,EAA4B;AAC1B4H,MAAAA,QAAQ,GAAGuI,iBAAX;AACAhQ,MAAAA,OAAO,GAAG,EAAV;AACD,KAHD,MAGO;AACLA,MAAAA,OAAO,GAAGgQ,iBAAV;AACD;;AAED,QAAI,OAAOhQ,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,YAAM,IAAIL,SAAJ,CAAc,sCAAd,CAAN;AACD;;AAED,WAAO,IAAI/E,SAAS,CAACT,OAAd,CAAsB4V,KAAtB,EAA6B,KAAKlS,MAAL,CAAYmC,OAAzC,EAAkDA,OAAlD,EAA2DyH,QAA3D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEwI,EAAAA,YAAY,CAACC,QAAD,EAAWhH,IAAX,EAAiB;AAC3BgH,IAAAA,QAAQ,CAACC,gBAAT,GAA4B,IAA5B;;AAEA,QAAIjH,IAAJ,EAAU;AACR,UAAIgH,QAAQ,CAACE,aAAb,EAA4B;AAC1B,cAAM,IAAIlM,KAAJ,CAAU,yFAAV,CAAN;AACD;;AAED,UAAIgM,QAAQ,CAACG,eAAb,EAA8B;AAC5B,cAAM,IAAInM,KAAJ,CAAU,8FAAV,CAAN;AACD;;AAED,YAAMoM,SAAS,GAAG5V,OAAO,CAACkU,QAAR,CAAiBhK,IAAjB,CAAsBsE,IAAtB,CAAlB,CATQ,CASuC;AAC/C;;;AAGAoH,MAAAA,SAAS,CAACrK,EAAV,CAAa,OAAb,EAAsBL,GAAG,IAAI;AAC3BsK,QAAAA,QAAQ,CAACK,oBAAT,CAA8BnG,OAA9B,CAAsCxE,GAAtC;AACD,OAFD,EAbQ,CAeJ;AACJ;;AAEAsK,MAAAA,QAAQ,CAACK,oBAAT,CAA8BtK,EAA9B,CAAiC,OAAjC,EAA0CL,GAAG,IAAI;AAC/C0K,QAAAA,SAAS,CAAClG,OAAV,CAAkBxE,GAAlB;AACD,OAFD;AAGA0K,MAAAA,SAAS,CAACzB,IAAV,CAAeqB,QAAQ,CAACK,oBAAxB;AACD,KAtBD,MAsBO,IAAI,CAACL,QAAQ,CAACE,aAAd,EAA6B;AAClC;AACA;AACA;AACA;AACA;AACAF,MAAAA,QAAQ,CAACK,oBAAT,CAA8BC,GAA9B;AACD;;AAED,UAAMC,QAAQ,GAAG,MAAM;AACrBvR,MAAAA,OAAO,CAAC2L,MAAR;AACD,KAFD;;AAIA,UAAMhJ,OAAO,GAAG,IAAIxF,gBAAgB,CAACqU,eAArB,CAAqCR,QAArC,CAAhB;AACA,UAAMhR,OAAO,GAAG,IAAI7D,QAAQ,CAAClB,OAAb,CAAqB+V,QAAQ,CAACS,gBAAT,EAArB,EAAkD7I,KAAK,IAAI;AACzEoI,MAAAA,QAAQ,CAACrK,cAAT,CAAwB,QAAxB,EAAkC4K,QAAlC;;AAEA,UAAI3I,KAAJ,EAAW;AACT,YAAIA,KAAK,CAAC2D,IAAN,KAAe,SAAnB,EAA8B;AAC5B3D,UAAAA,KAAK,CAACf,OAAN,IAAiB,8HAAjB;AACD;;AAEDmJ,QAAAA,QAAQ,CAACpI,KAAT,GAAiBA,KAAjB;AACAoI,QAAAA,QAAQ,CAACzI,QAAT,CAAkBK,KAAlB;AACA;AACD;;AAED,WAAKoH,WAAL,CAAiBgB,QAAjB,EAA2BjV,OAAO,CAACiK,IAAR,CAAa0L,SAAxC,EAAmD/O,OAAnD;AACD,KAde,CAAhB;AAeAqO,IAAAA,QAAQ,CAACnK,IAAT,CAAc,QAAd,EAAwB0K,QAAxB;AACA,SAAKxB,YAAL,CAAkB/P,OAAlB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE2R,EAAAA,OAAO,CAAC3R,OAAD,EAAU;AACf,UAAMoQ,UAAU,GAAG,EAAnB;AACAA,IAAAA,UAAU,CAAC5G,IAAX,CAAgB;AACd3I,MAAAA,IAAI,EAAE3D,SAAS,CAACmT,KAAV,CAAgBuB,GADR;AAEdpL,MAAAA,IAAI,EAAE,QAFQ;AAGdxL,MAAAA,KAAK,EAAE2F,SAHO;AAId4P,MAAAA,MAAM,EAAE,IAJM;AAKd9G,MAAAA,MAAM,EAAE9I,SALM;AAMd6P,MAAAA,SAAS,EAAE7P,SANG;AAOd8P,MAAAA,KAAK,EAAE9P;AAPO,KAAhB;AASAyP,IAAAA,UAAU,CAAC5G,IAAX,CAAgB;AACd3I,MAAAA,IAAI,EAAE3D,SAAS,CAACmT,KAAV,CAAgBC,QADR;AAEd9J,MAAAA,IAAI,EAAE,QAFQ;AAGdxL,MAAAA,KAAK,EAAEgF,OAAO,CAACoQ,UAAR,CAAmB3G,MAAnB,GAA4BzJ,OAAO,CAAC0Q,mBAAR,CAA4B1Q,OAAO,CAACoQ,UAApC,CAA5B,GAA8E,IAHvE;AAIdG,MAAAA,MAAM,EAAE,KAJM;AAKd9G,MAAAA,MAAM,EAAE9I,SALM;AAMd6P,MAAAA,SAAS,EAAE7P,SANG;AAOd8P,MAAAA,KAAK,EAAE9P;AAPO,KAAhB;AASAyP,IAAAA,UAAU,CAAC5G,IAAX,CAAgB;AACd3I,MAAAA,IAAI,EAAE3D,SAAS,CAACmT,KAAV,CAAgBC,QADR;AAEd9J,MAAAA,IAAI,EAAE,MAFQ;AAGdxL,MAAAA,KAAK,EAAEgF,OAAO,CAACiQ,kBAHD;AAIdM,MAAAA,MAAM,EAAE,KAJM;AAKd9G,MAAAA,MAAM,EAAE9I,SALM;AAMd6P,MAAAA,SAAS,EAAE7P,SANG;AAOd8P,MAAAA,KAAK,EAAE9P;AAPO,KAAhB;AASAX,IAAAA,OAAO,CAAC6R,SAAR,GAAoB,IAApB,CA7Be,CA6BW;;AAE1B7R,IAAAA,OAAO,CAAC+G,EAAR,CAAW,aAAX,EAA0B,CAACP,IAAD,EAAOxL,KAAP,KAAiB;AACzC,UAAIwL,IAAI,KAAK,QAAb,EAAuB;AACrBxG,QAAAA,OAAO,CAAC8R,MAAR,GAAiB9W,KAAjB;AACD,OAFD,MAEO;AACLgF,QAAAA,OAAO,CAAC4I,KAAR,GAAgB,CAAC,GAAGnM,OAAO,CAAC6L,YAAZ,EAA2B,yCAAwC9B,IAAK,kBAAxE,CAAhB;AACD;AACF,KAND;AAOA,SAAKwJ,WAAL,CAAiBhQ,OAAjB,EAA0BjE,OAAO,CAACiK,IAAR,CAAa2K,WAAvC,EAAoD,IAAIvU,kBAAkB,CAACnB,OAAvB,CAA+B,YAA/B,EAA6CmV,UAA7C,EAAyD,KAAKb,4BAAL,EAAzD,EAA8F,KAAK5Q,MAAL,CAAYmC,OAA1G,CAApD;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGEiR,EAAAA,SAAS,CAAC/R,OAAD,EAAU;AACjB,UAAMoQ,UAAU,GAAG,EAAnB;AACAA,IAAAA,UAAU,CAAC5G,IAAX,CAAgB;AACd3I,MAAAA,IAAI,EAAE3D,SAAS,CAACmT,KAAV,CAAgBuB,GADR;AAEdpL,MAAAA,IAAI,EAAE,QAFQ;AAGd;AACAxL,MAAAA,KAAK,EAAEgF,OAAO,CAAC8R,MAJD;AAKdvB,MAAAA,MAAM,EAAE,IALM;AAMd9G,MAAAA,MAAM,EAAE9I,SANM;AAOd6P,MAAAA,SAAS,EAAE7P,SAPG;AAQd8P,MAAAA,KAAK,EAAE9P;AARO,KAAhB;AAUA,SAAKqP,WAAL,CAAiBhQ,OAAjB,EAA0BjE,OAAO,CAACiK,IAAR,CAAa2K,WAAvC,EAAoD,IAAIvU,kBAAkB,CAACnB,OAAvB,CAA+B,cAA/B,EAA+CmV,UAA/C,EAA2D,KAAKb,4BAAL,EAA3D,EAAgG,KAAK5Q,MAAL,CAAYmC,OAA5G,CAApD;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE6J,EAAAA,OAAO,CAAC3K,OAAD,EAAUoQ,UAAV,EAAsB;AAC3B,UAAM4B,iBAAiB,GAAG,EAA1B;AACAA,IAAAA,iBAAiB,CAACxI,IAAlB,CAAuB;AACrB3I,MAAAA,IAAI,EAAE3D,SAAS,CAACmT,KAAV,CAAgBuB,GADD;AAErBpL,MAAAA,IAAI,EAAE,QAFe;AAGrB;AACAxL,MAAAA,KAAK,EAAEgF,OAAO,CAAC8R,MAJM;AAKrBvB,MAAAA,MAAM,EAAE,IALa;AAMrB9G,MAAAA,MAAM,EAAE9I,SANa;AAOrB6P,MAAAA,SAAS,EAAE7P,SAPU;AAQrB8P,MAAAA,KAAK,EAAE9P;AARc,KAAvB;;AAWA,QAAI;AACF,WAAK,IAAIsR,CAAC,GAAG,CAAR,EAAWrI,GAAG,GAAG5J,OAAO,CAACoQ,UAAR,CAAmB3G,MAAzC,EAAiDwI,CAAC,GAAGrI,GAArD,EAA0DqI,CAAC,EAA3D,EAA+D;AAC7D,cAAMC,SAAS,GAAGlS,OAAO,CAACoQ,UAAR,CAAmB6B,CAAnB,CAAlB;AACAD,QAAAA,iBAAiB,CAACxI,IAAlB,CAAuB,EAAE,GAAG0I,SAAL;AACrBlX,UAAAA,KAAK,EAAEkX,SAAS,CAACrR,IAAV,CAAesR,QAAf,CAAwB/B,UAAU,GAAGA,UAAU,CAAC8B,SAAS,CAAC1L,IAAX,CAAb,GAAgC,IAAlE;AADc,SAAvB;AAGD;AACF,KAPD,CAOE,OAAOoC,KAAP,EAAc;AACd5I,MAAAA,OAAO,CAAC4I,KAAR,GAAgBA,KAAhB;AACAR,MAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACrB,aAAK7I,KAAL,CAAWkM,GAAX,CAAe9C,KAAK,CAACf,OAArB;AACA7H,QAAAA,OAAO,CAACuI,QAAR,CAAiBK,KAAjB;AACD,OAHD;AAIA;AACD;;AAED,SAAKoH,WAAL,CAAiBhQ,OAAjB,EAA0BjE,OAAO,CAACiK,IAAR,CAAa2K,WAAvC,EAAoD,IAAIvU,kBAAkB,CAACnB,OAAvB,CAA+B,YAA/B,EAA6C+W,iBAA7C,EAAgE,KAAKzC,4BAAL,EAAhE,EAAqG,KAAK5Q,MAAL,CAAYmC,OAAjH,CAApD;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEsR,EAAAA,aAAa,CAACpS,OAAD,EAAU;AACrB,QAAI;AACFA,MAAAA,OAAO,CAACmQ,kBAAR;AACD,KAFD,CAEE,OAAOvH,KAAP,EAAc;AACd5I,MAAAA,OAAO,CAAC4I,KAAR,GAAgBA,KAAhB;AACAR,MAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACrB,aAAK7I,KAAL,CAAWkM,GAAX,CAAe9C,KAAK,CAACf,OAArB;AACA7H,QAAAA,OAAO,CAACuI,QAAR,CAAiBK,KAAjB;AACD,OAHD;AAIA;AACD;;AAED,SAAKoH,WAAL,CAAiBhQ,OAAjB,EAA0BjE,OAAO,CAACiK,IAAR,CAAa2K,WAAvC,EAAoD,IAAIvU,kBAAkB,CAACnB,OAAvB,CAA+B+E,OAAO,CAACiQ,kBAAvC,EAA2DjQ,OAAO,CAACoQ,UAAnE,EAA+E,KAAKb,4BAAL,EAA/E,EAAoH,KAAK5Q,MAAL,CAAYmC,OAAhI,CAApD;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEuR,EAAAA,gBAAgB,CAAC9J,QAAD,EAAW/B,IAAI,GAAG,EAAlB,EAAsB9C,cAAc,GAAG,KAAK/E,MAAL,CAAYmC,OAAZ,CAAoB4C,cAA3D,EAA2E;AACzF,KAAC,GAAGlH,YAAY,CAACyI,yBAAjB,EAA4CvB,cAA5C,EAA4D,gBAA5D;AACA,UAAM4O,WAAW,GAAG,IAAI9V,YAAY,CAAC+V,WAAjB,CAA6B/L,IAA7B,EAAmC9C,cAAnC,CAApB;;AAEA,QAAI,KAAK/E,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,aAAO,KAAKwL,YAAL,CAAkB,IAAI5T,QAAQ,CAAClB,OAAb,CAAqB,qCAAqCqX,WAAW,CAACE,oBAAZ,EAArC,GAA0E,cAA1E,GAA2FF,WAAW,CAAC9L,IAA5H,EAAkIE,GAAG,IAAI;AAChK,aAAKzH,gBAAL;;AAEA,YAAI,KAAKA,gBAAL,KAA0B,CAA9B,EAAiC;AAC/B,eAAKF,aAAL,GAAqB,IAArB;AACD;;AAEDwJ,QAAAA,QAAQ,CAAC7B,GAAD,CAAR;AACD,OARwB,CAAlB,CAAP;AASD;;AAED,UAAM1G,OAAO,GAAG,IAAI7D,QAAQ,CAAClB,OAAb,CAAqB0F,SAArB,EAAgC+F,GAAG,IAAI;AACrD,aAAO6B,QAAQ,CAAC7B,GAAD,EAAM,KAAK6I,4BAAL,EAAN,CAAf;AACD,KAFe,CAAhB;AAGA,WAAO,KAAKS,WAAL,CAAiBhQ,OAAjB,EAA0BjE,OAAO,CAACiK,IAAR,CAAayM,mBAAvC,EAA4DH,WAAW,CAACI,YAAZ,CAAyB,KAAKnD,4BAAL,EAAzB,CAA5D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEoD,EAAAA,iBAAiB,CAACpK,QAAD,EAAW/B,IAAI,GAAG,EAAlB,EAAsB;AACrC,UAAM8L,WAAW,GAAG,IAAI9V,YAAY,CAAC+V,WAAjB,CAA6B/L,IAA7B,CAApB;;AAEA,QAAI,KAAK7H,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,aAAO,KAAKwL,YAAL,CAAkB,IAAI5T,QAAQ,CAAClB,OAAb,CAAqB,iBAAiBqX,WAAW,CAAC9L,IAAlD,EAAwDE,GAAG,IAAI;AACtF,aAAKzH,gBAAL;;AAEA,YAAI,KAAKA,gBAAL,KAA0B,CAA9B,EAAiC;AAC/B,eAAKF,aAAL,GAAqB,KAArB;AACD;;AAEDwJ,QAAAA,QAAQ,CAAC7B,GAAD,CAAR;AACD,OARwB,CAAlB,CAAP;AASD;;AAED,UAAM1G,OAAO,GAAG,IAAI7D,QAAQ,CAAClB,OAAb,CAAqB0F,SAArB,EAAgC4H,QAAhC,CAAhB;AACA,WAAO,KAAKyH,WAAL,CAAiBhQ,OAAjB,EAA0BjE,OAAO,CAACiK,IAAR,CAAayM,mBAAvC,EAA4DH,WAAW,CAACM,aAAZ,CAA0B,KAAKrD,4BAAL,EAA1B,CAA5D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEsD,EAAAA,mBAAmB,CAACtK,QAAD,EAAW/B,IAAI,GAAG,EAAlB,EAAsB;AACvC,UAAM8L,WAAW,GAAG,IAAI9V,YAAY,CAAC+V,WAAjB,CAA6B/L,IAA7B,CAApB;;AAEA,QAAI,KAAK7H,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,aAAO,KAAKwL,YAAL,CAAkB,IAAI5T,QAAQ,CAAClB,OAAb,CAAqB,mBAAmBqX,WAAW,CAAC9L,IAApD,EAA0DE,GAAG,IAAI;AACxF,aAAKzH,gBAAL;;AAEA,YAAI,KAAKA,gBAAL,KAA0B,CAA9B,EAAiC;AAC/B,eAAKF,aAAL,GAAqB,KAArB;AACD;;AAEDwJ,QAAAA,QAAQ,CAAC7B,GAAD,CAAR;AACD,OARwB,CAAlB,CAAP;AASD;;AAED,UAAM1G,OAAO,GAAG,IAAI7D,QAAQ,CAAClB,OAAb,CAAqB0F,SAArB,EAAgC4H,QAAhC,CAAhB;AACA,WAAO,KAAKyH,WAAL,CAAiBhQ,OAAjB,EAA0BjE,OAAO,CAACiK,IAAR,CAAayM,mBAAvC,EAA4DH,WAAW,CAACQ,eAAZ,CAA4B,KAAKvD,4BAAL,EAA5B,CAA5D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEwD,EAAAA,eAAe,CAACxK,QAAD,EAAW/B,IAAX,EAAiB;AAC9B,UAAM8L,WAAW,GAAG,IAAI9V,YAAY,CAAC+V,WAAjB,CAA6B/L,IAA7B,CAApB;;AAEA,QAAI,KAAK7H,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,aAAO,KAAKwL,YAAL,CAAkB,IAAI5T,QAAQ,CAAClB,OAAb,CAAqB,eAAeqX,WAAW,CAAC9L,IAAhD,EAAsDE,GAAG,IAAI;AACpF,aAAKzH,gBAAL;AACAsJ,QAAAA,QAAQ,CAAC7B,GAAD,CAAR;AACD,OAHwB,CAAlB,CAAP;AAID;;AAED,UAAM1G,OAAO,GAAG,IAAI7D,QAAQ,CAAClB,OAAb,CAAqB0F,SAArB,EAAgC4H,QAAhC,CAAhB;AACA,WAAO,KAAKyH,WAAL,CAAiBhQ,OAAjB,EAA0BjE,OAAO,CAACiK,IAAR,CAAayM,mBAAvC,EAA4DH,WAAW,CAACU,WAAZ,CAAwB,KAAKzD,4BAAL,EAAxB,CAA5D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE+C,EAAAA,WAAW,CAACW,EAAD,EAAKvP,cAAL,EAAqB;AAC9B,QAAI,OAAOuP,EAAP,KAAc,UAAlB,EAA8B;AAC5B,YAAM,IAAIxS,SAAJ,CAAc,yBAAd,CAAN;AACD;;AAED,UAAMyS,YAAY,GAAG,KAAKnU,aAA1B;;AAEA,UAAMyH,IAAI,GAAG,cAActL,OAAO,CAACD,OAAR,CAAgBkY,WAAhB,CAA4B,EAA5B,EAAgC/F,QAAhC,CAAyC,KAAzC,CAA3B;;AAEA,UAAMgG,MAAM,GAAG,CAAC1M,GAAD,EAAM2M,IAAN,EAAY,GAAGlM,IAAf,KAAwB;AACrC,UAAIT,GAAJ,EAAS;AACP,YAAI,KAAK3H,aAAL,IAAsB,KAAKc,KAAL,KAAe,KAAKgG,KAAL,CAAWyN,SAApD,EAA+D;AAC7D,eAAKT,mBAAL,CAAyBU,KAAK,IAAI;AAChCF,YAAAA,IAAI,CAACE,KAAK,IAAI7M,GAAV,EAAe,GAAGS,IAAlB,CAAJ;AACD,WAFD,EAEGX,IAFH;AAGD,SAJD,MAIO;AACL6M,UAAAA,IAAI,CAAC3M,GAAD,EAAM,GAAGS,IAAT,CAAJ;AACD;AACF,OARD,MAQO,IAAI+L,YAAJ,EAAkB;AACvB,YAAI,KAAKvU,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,eAAKtF,gBAAL;AACD;;AAEDoU,QAAAA,IAAI,CAAC,IAAD,EAAO,GAAGlM,IAAV,CAAJ;AACD,OANM,MAMA;AACL,aAAKwL,iBAAL,CAAuBY,KAAK,IAAI;AAC9BF,UAAAA,IAAI,CAACE,KAAD,EAAQ,GAAGpM,IAAX,CAAJ;AACD,SAFD,EAEGX,IAFH;AAGD;AACF,KApBD;;AAsBA,QAAI0M,YAAJ,EAAkB;AAChB,aAAO,KAAKH,eAAL,CAAqBrM,GAAG,IAAI;AACjC,YAAIA,GAAJ,EAAS;AACP,iBAAOuM,EAAE,CAACvM,GAAD,CAAT;AACD;;AAED,YAAIhD,cAAJ,EAAoB;AAClB,iBAAO,KAAKqM,YAAL,CAAkB,IAAI5T,QAAQ,CAAClB,OAAb,CAAqB,qCAAqC,KAAK2U,qBAAL,CAA2BlM,cAA3B,CAA1D,EAAsGgD,GAAG,IAAI;AACpI,mBAAOuM,EAAE,CAACvM,GAAD,EAAM0M,MAAN,CAAT;AACD,WAFwB,CAAlB,CAAP;AAGD,SAJD,MAIO;AACL,iBAAOH,EAAE,CAAC,IAAD,EAAOG,MAAP,CAAT;AACD;AACF,OAZM,EAYJ5M,IAZI,CAAP;AAaD,KAdD,MAcO;AACL,aAAO,KAAK6L,gBAAL,CAAsB3L,GAAG,IAAI;AAClC,YAAIA,GAAJ,EAAS;AACP,iBAAOuM,EAAE,CAACvM,GAAD,CAAT;AACD;;AAED,eAAOuM,EAAE,CAAC,IAAD,EAAOG,MAAP,CAAT;AACD,OANM,EAMJ5M,IANI,EAME9C,cANF,CAAP;AAOD;AACF;AACD;AACF;AACA;;;AAGEsM,EAAAA,WAAW,CAAChQ,OAAD,EAAUwT,UAAV,EAAsB7Q,OAAtB,EAA+B;AACxC,QAAI,KAAK9C,KAAL,KAAe,KAAKgG,KAAL,CAAWyN,SAA9B,EAAyC;AACvC,YAAMzL,OAAO,GAAG,sCAAsC,KAAKhC,KAAL,CAAWyN,SAAX,CAAqB9M,IAA3D,GAAkE,kBAAlE,GAAuF,KAAK3G,KAAL,CAAW2G,IAAlG,GAAyG,QAAzH;AACA,WAAKhH,KAAL,CAAWkM,GAAX,CAAe7D,OAAf;AACA7H,MAAAA,OAAO,CAACuI,QAAR,CAAiB,CAAC,GAAG9L,OAAO,CAAC6L,YAAZ,EAA0BT,OAA1B,EAAmC,eAAnC,CAAjB;AACD,KAJD,MAIO,IAAI7H,OAAO,CAAC2I,QAAZ,EAAsB;AAC3BP,MAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACrBrI,QAAAA,OAAO,CAACuI,QAAR,CAAiB,CAAC,GAAG9L,OAAO,CAAC6L,YAAZ,EAA0B,WAA1B,EAAuC,SAAvC,CAAjB;AACD,OAFD;AAGD,KAJM,MAIA;AACL,UAAIkL,UAAU,KAAKzX,OAAO,CAACiK,IAAR,CAAawJ,SAAhC,EAA2C;AACzC,aAAKtQ,UAAL,GAAkB,IAAlB;AACD,OAFD,MAEO;AACL,aAAKA,UAAL,GAAkB,KAAlB;AACD;;AAED,WAAKc,OAAL,GAAeA,OAAf;AACAA,MAAAA,OAAO,CAACyT,UAAR,GAAqB,IAArB;AACAzT,MAAAA,OAAO,CAACoK,QAAR,GAAmB,CAAnB;AACApK,MAAAA,OAAO,CAACgK,IAAR,GAAe,EAAf;AACAhK,MAAAA,OAAO,CAACiK,GAAR,GAAc,EAAd;;AAEA,YAAMsH,QAAQ,GAAG,MAAM;AACrBmC,QAAAA,aAAa,CAACC,MAAd,CAAqB9L,OAArB,EADqB,CACU;;AAE/BA,QAAAA,OAAO,CAAC+L,MAAR,GAAiB,IAAjB;AACA/L,QAAAA,OAAO,CAACyJ,GAAR;;AAEA,YAAItR,OAAO,YAAY7D,QAAQ,CAAClB,OAA5B,IAAuC+E,OAAO,CAAC6T,MAAnD,EAA2D;AACzD;AACA7T,UAAAA,OAAO,CAAC8T,MAAR;AACD;AACF,OAVD;;AAYA9T,MAAAA,OAAO,CAAC6G,IAAR,CAAa,QAAb,EAAuB0K,QAAvB;AACA,WAAKhG,kBAAL;AACA,YAAM1D,OAAO,GAAG,IAAIhL,QAAQ,CAAC5B,OAAb,CAAqB;AACnC4F,QAAAA,IAAI,EAAE2S,UAD6B;AAEnCO,QAAAA,eAAe,EAAE,KAAKjU;AAFa,OAArB,CAAhB;AAIA,WAAKF,SAAL,CAAe6P,qBAAf,CAAqCP,KAArC,CAA2CrH,OAA3C;AACA,WAAK3B,YAAL,CAAkB,KAAKL,KAAL,CAAWmO,mBAA7B;AACAnM,MAAAA,OAAO,CAAChB,IAAR,CAAa,QAAb,EAAuB,MAAM;AAC3B7G,QAAAA,OAAO,CAAC2G,cAAR,CAAuB,QAAvB,EAAiC4K,QAAjC;AACAvR,QAAAA,OAAO,CAAC6G,IAAR,CAAa,QAAb,EAAuB,KAAKrG,uBAA5B;AACA,aAAKV,4BAAL,GAAoC,KAApC;AACA,aAAKN,KAAL,CAAWmD,OAAX,CAAmB,YAAY;AAC7B,iBAAOA,OAAO,CAACyK,QAAR,CAAiB,IAAjB,CAAP;AACD,SAFD;AAGD,OAPD;;AASA,YAAMsG,aAAa,GAAGlY,OAAO,CAACkU,QAAR,CAAiBhK,IAAjB,CAAsB/C,OAAtB,CAAtB;;AAEA+Q,MAAAA,aAAa,CAAC7M,IAAd,CAAmB,OAAnB,EAA4B+B,KAAK,IAAI;AACnC,YAAIqL,cAAJ;;AAEAP,QAAAA,aAAa,CAACC,MAAd,CAAqB9L,OAArB,EAHmC,CAGJ;;AAE/B,SAACoM,cAAc,GAAGjU,OAAO,CAAC4I,KAA1B,MAAqC,IAArC,IAA6CqL,cAAc,KAAK,KAAK,CAArE,GAAyEA,cAAzE,GAA0FjU,OAAO,CAAC4I,KAAR,GAAgBA,KAA1G;AACA8K,QAAAA,aAAa,CAACC,MAAd,CAAqB9L,OAArB;AACAA,QAAAA,OAAO,CAAC+L,MAAR,GAAiB,IAAjB;AACA/L,QAAAA,OAAO,CAACyJ,GAAR;AACD,OATD;AAUAoC,MAAAA,aAAa,CAAC/D,IAAd,CAAmB9H,OAAnB;AACD;AACF;AACD;AACF;AACA;;;AAGE8D,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAK3L,OAAV,EAAmB;AACjB,aAAO,KAAP;AACD;;AAED,QAAI,KAAKA,OAAL,CAAa2I,QAAjB,EAA2B;AACzB,aAAO,KAAP;AACD;;AAED,SAAK3I,OAAL,CAAa2L,MAAb;AACA,WAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGEuI,EAAAA,KAAK,CAAC3L,QAAD,EAAW;AACd,UAAMvI,OAAO,GAAG,IAAI7D,QAAQ,CAAClB,OAAb,CAAqB,KAAKqU,aAAL,EAArB,EAA2C5I,GAAG,IAAI;AAChE,UAAI,KAAK/H,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,aAAKxF,aAAL,GAAqB,KAArB;AACD;;AAEDwJ,MAAAA,QAAQ,CAAC7B,GAAD,CAAR;AACD,KANe,CAAhB;AAOA,SAAK5G,4BAAL,GAAoC,IAApC;AACA,SAAKiQ,YAAL,CAAkB/P,OAAlB;AACD;AACD;AACF;AACA;;;AAGEuP,EAAAA,4BAA4B,GAAG;AAC7B,WAAO,KAAKvQ,sBAAL,CAA4B,KAAKA,sBAAL,CAA4ByK,MAA5B,GAAqC,CAAjE,CAAP;AACD;AACD;AACF;AACA;;;AAGEmG,EAAAA,qBAAqB,CAAClM,cAAD,EAAiB;AACpC,YAAQA,cAAR;AACE,WAAKlH,YAAY,CAAC2F,eAAb,CAA6BgS,gBAAlC;AACE,eAAO,kBAAP;;AAEF,WAAK3X,YAAY,CAAC2F,eAAb,CAA6BiS,eAAlC;AACE,eAAO,iBAAP;;AAEF,WAAK5X,YAAY,CAAC2F,eAAb,CAA6BkS,YAAlC;AACE,eAAO,cAAP;;AAEF,WAAK7X,YAAY,CAAC2F,eAAb,CAA6BmS,QAAlC;AACE,eAAO,UAAP;;AAEF;AACE,eAAO,gBAAP;AAdJ;AAgBD;;AAp6E2C;;AAw6E9C,IAAIC,QAAQ,GAAG/V,UAAf;AACAzD,OAAO,CAACE,OAAR,GAAkBsZ,QAAlB;AACAC,MAAM,CAACzZ,OAAP,GAAiByD,UAAjB;AACA,MAAMiW,mBAAmB,GAAG,IAAIzX,SAAS,CAAC0X,WAAd,EAA5B;AACAlW,UAAU,CAACmW,SAAX,CAAqB9O,KAArB,GAA6B;AAC3BC,EAAAA,WAAW,EAAE;AACXU,IAAAA,IAAI,EAAE,aADK;AAEX6F,IAAAA,MAAM,EAAE;AAFG,GADc;AAK3BvF,EAAAA,UAAU,EAAE;AACVN,IAAAA,IAAI,EAAE,YADI;AAEVwF,IAAAA,KAAK,EAAE,YAAY;AACjB,WAAK1E,oBAAL;AACD,KAJS;AAKV+E,IAAAA,MAAM,EAAE;AACNzB,MAAAA,WAAW,EAAE,YAAY;AACvB,aAAK1E,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAHK;AAINpF,MAAAA,cAAc,EAAE,YAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OANK;AAON4D,MAAAA,aAAa,EAAE,YAAY;AACzB,aAAKyB,YAAL;AACA,aAAKxG,YAAL,CAAkB,KAAKL,KAAL,CAAW+O,aAA7B;AACD;AAVK;AALE,GALe;AAuB3BA,EAAAA,aAAa,EAAE;AACbpO,IAAAA,IAAI,EAAE,cADO;AAEbwF,IAAAA,KAAK,EAAE,YAAY;AACjB,WAAKqB,kBAAL;AACD,KAJY;AAKbhB,IAAAA,MAAM,EAAE;AACNzB,MAAAA,WAAW,EAAE,YAAY;AACvB,aAAK1E,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAHK;AAINpF,MAAAA,cAAc,EAAE,YAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OANK;AAONQ,MAAAA,OAAO,EAAE,UAAUA,OAAV,EAAmB;AAC1BA,QAAAA,OAAO,CAACd,EAAR,CAAW,MAAX,EAAmBtE,IAAI,IAAI;AACzB,eAAK6K,kBAAL,CAAwB7K,IAAxB;AACD,SAFD;AAGAoF,QAAAA,OAAO,CAAChB,IAAR,CAAa,KAAb,EAAoB,MAAM;AACxB,gBAAMgO,eAAe,GAAG,IAAI7Y,gBAAgB,CAACf,OAArB,CAA6B,KAAKkF,aAAlC,CAAxB;AACA,eAAKX,KAAL,CAAWmD,OAAX,CAAmB,YAAY;AAC7B,mBAAOkS,eAAe,CAACzH,QAAhB,CAAyB,IAAzB,CAAP;AACD,WAFD;;AAIA,cAAIyH,eAAe,CAACjW,eAAhB,KAAoC,CAAxC,EAA2C;AACzC,iBAAKA,eAAL,GAAuB,IAAvB;AACD;;AAED,cAAIiW,eAAe,CAACC,gBAAhB,KAAqC,IAArC,IAA6CD,eAAe,CAACC,gBAAhB,KAAqC,KAAtF,EAA6F;AAC3F,gBAAIC,qBAAJ,EAA2BC,iBAA3B;;AAEA,gBAAI,CAAC,KAAKrW,MAAL,CAAYmC,OAAZ,CAAoBwC,OAAzB,EAAkC;AAChC,mBAAK4D,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAGzK,OAAO,CAAC8J,eAAZ,EAA6B,kEAA7B,EAAiG,UAAjG,CAArB;AACA,qBAAO,KAAKa,KAAL,EAAP;AACD;;AAED,iBAAKxH,SAAL,CAAeqV,QAAf,CAAwB,KAAKnW,aAA7B,EAA4C,CAACiW,qBAAqB,GAAG,CAACC,iBAAiB,GAAG,KAAKrV,WAA1B,MAA2C,IAA3C,IAAmDqV,iBAAiB,KAAK,KAAK,CAA9E,GAAkF,KAAK,CAAvF,GAA2FA,iBAAiB,CAACtU,MAAtI,MAAkJ,IAAlJ,IAA0JqU,qBAAqB,KAAK,KAAK,CAAzL,GAA6LA,qBAA7L,GAAqN,KAAKpW,MAAL,CAAY+B,MAA7Q,EAAqR,KAAK/B,MAAL,CAAYmC,OAAZ,CAAoB4D,sBAAzS;AACA,iBAAKwB,YAAL,CAAkB,KAAKL,KAAL,CAAWyG,sBAA7B;AACD,WAVD,MAUO;AACL,iBAAKkB,gBAAL;AACA,kBAAM;AACJ5M,cAAAA;AADI,gBAEF,KAAKjC,MAFT;;AAIA,gBAAIiC,cAAc,CAACC,IAAf,KAAwB,MAA5B,EAAoC;AAClC,mBAAKqF,YAAL,CAAkB,KAAKL,KAAL,CAAWqP,qBAA7B;AACD,aAFD,MAEO;AACL,mBAAKhP,YAAL,CAAkB,KAAKL,KAAL,CAAWuJ,+BAA7B;AACD;AACF;AACF,SAhCD;AAiCD;AA5CK;AALK,GAvBY;AA2E3B5C,EAAAA,SAAS,EAAE;AACThG,IAAAA,IAAI,EAAE,WADG;AAETwF,IAAAA,KAAK,EAAE,YAAY;AACjB,WAAKlE,iBAAL,CAAuB1J,YAAY,CAACE,QAApC;AACD,KAJQ;AAKT+N,IAAAA,MAAM,EAAE;AACNxE,MAAAA,OAAO,EAAE,YAAY,CAAE,CADjB;AAEN+C,MAAAA,WAAW,EAAE,YAAY;AACvB,aAAK1E,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAJK;AAKNpF,MAAAA,cAAc,EAAE,YAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAPK;AAQN8N,MAAAA,SAAS,EAAE,YAAY;AACrB,aAAKjP,YAAL,CAAkB,KAAKL,KAAL,CAAWiB,UAA7B;AACD;AAVK;AALC,GA3EgB;AA6F3B2F,EAAAA,uBAAuB,EAAE;AACvBjG,IAAAA,IAAI,EAAE,yBADiB;AAEvBwF,IAAAA,KAAK,EAAE,YAAY;AACjB,WAAK7M,sBAAL;AACA,WAAK2I,iBAAL,CAAuB1J,YAAY,CAACG,KAApC;AACD,KALsB;AAMvB8N,IAAAA,MAAM,EAAE;AACNxE,MAAAA,OAAO,EAAE,YAAY,CAAE,CADjB;AAEN+C,MAAAA,WAAW,EAAE,YAAY;AACvB,aAAK1E,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAJK;AAKNpF,MAAAA,cAAc,EAAE,YAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAPK;AAQN+N,MAAAA,KAAK,EAAE,YAAY;AACjB,aAAK5J,gBAAL;AACD;AAVK;AANe,GA7FE;AAgH3Bc,EAAAA,sBAAsB,EAAE;AACtB9F,IAAAA,IAAI,EAAE,uBADgB;AAEtB6F,IAAAA,MAAM,EAAE;AACNzB,MAAAA,WAAW,EAAE,YAAY;AACvB,aAAK1E,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAHK;AAINpF,MAAAA,cAAc,EAAE,YAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OANK;AAONQ,MAAAA,OAAO,EAAE,UAAUA,OAAV,EAAmB;AAC1BA,QAAAA,OAAO,CAACd,EAAR,CAAW,MAAX,EAAmBtE,IAAI,IAAI;AACzB,eAAK7C,SAAL,CAAeyV,gBAAf,CAAgC5S,IAAhC;AACD,SAFD;AAGAoF,QAAAA,OAAO,CAAChB,IAAR,CAAa,KAAb,EAAoB,MAAM;AACxB,cAAI,KAAKjH,SAAL,CAAe0V,sBAAnB,EAA2C;AACzC,iBAAK9H,gBAAL;AACA,kBAAM;AACJ5M,cAAAA;AADI,gBAEF,KAAKjC,MAFT;;AAIA,gBAAIiC,cAAc,CAACC,IAAf,KAAwB,iCAAxB,IAA6DD,cAAc,CAACC,IAAf,KAAwB,+BAArF,IAAwHD,cAAc,CAACC,IAAf,KAAwB,wCAAhJ,IAA4LD,cAAc,CAACC,IAAf,KAAwB,iDAAxN,EAA2Q;AACzQ,mBAAKqF,YAAL,CAAkB,KAAKL,KAAL,CAAW0P,wBAA7B;AACD,aAFD,MAEO,IAAI3U,cAAc,CAACC,IAAf,KAAwB,MAA5B,EAAoC;AACzC,mBAAKqF,YAAL,CAAkB,KAAKL,KAAL,CAAWqP,qBAA7B;AACD,aAFM,MAEA;AACL,mBAAKhP,YAAL,CAAkB,KAAKL,KAAL,CAAWuJ,+BAA7B;AACD;AACF;AACF,SAfD;AAgBD;AA3BK;AAFc,GAhHG;AAgJ3BA,EAAAA,+BAA+B,EAAE;AAC/B5I,IAAAA,IAAI,EAAE,6BADyB;AAE/B6F,IAAAA,MAAM,EAAE;AACNzB,MAAAA,WAAW,EAAE,YAAY;AACvB,aAAK1E,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAHK;AAINpF,MAAAA,cAAc,EAAE,YAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OANK;AAONmO,MAAAA,aAAa,EAAE,UAAUrU,KAAV,EAAiB;AAC9B,cAAM;AACJP,UAAAA;AADI,YAEF,KAAKjC,MAFT;;AAIA,YAAIiC,cAAc,CAACC,IAAf,KAAwB,iCAAxB,IAA6DD,cAAc,CAACC,IAAf,KAAwB,qCAArF,IAA8HD,cAAc,CAACC,IAAf,KAAwB,+BAAtJ,IAAyLD,cAAc,CAACC,IAAf,KAAwB,wCAAjN,IAA6PD,cAAc,CAACC,IAAf,KAAwB,iDAAzR,EAA4U;AAC1U,cAAIM,KAAK,CAAC+M,OAAN,KAAkBvN,SAAtB,EAAiC;AAC/B,iBAAKpB,UAAL,GAAkB,CAAC,GAAG9C,OAAO,CAAC8J,eAAZ,EAA6B,iEAA7B,CAAlB;AACA,iBAAKjH,QAAL,GAAgB,KAAhB;AACD,WAHD,MAGO,IAAI6B,KAAK,CAAC+M,OAAN,CAAczE,MAAd,KAAyB,CAA7B,EAAgC;AACrC,iBAAKlK,UAAL,GAAkB,CAAC,GAAG9C,OAAO,CAAC8J,eAAZ,EAA8B,sDAAqD3F,cAAc,CAACC,IAAK,4CAAvG,CAAlB;AACA,iBAAKvB,QAAL,GAAgB,KAAhB;AACD;AACF,SARD,MAQO,IAAI6B,KAAK,CAAC+M,OAAN,KAAkBvN,SAAtB,EAAiC;AACtC,eAAKpB,UAAL,GAAkB,CAAC,GAAG9C,OAAO,CAAC8J,eAAZ,EAA6B,8CAA7B,CAAlB;AACA,eAAKjH,QAAL,GAAgB,KAAhB;AACD,SAHM,MAGA;AACL,eAAKC,UAAL,GAAkB,CAAC,GAAG9C,OAAO,CAAC8J,eAAZ,EAA6B,kFAA7B,CAAlB;AACA,eAAKjH,QAAL,GAAgB,KAAhB;AACD;AACF,OA3BK;AA4BNuI,MAAAA,OAAO,EAAE,UAAUA,OAAV,EAAmB;AAC1B,cAAMY,iBAAiB,GAAG,KAAKD,uBAAL,CAA6BX,OAA7B,CAA1B;AACAY,QAAAA,iBAAiB,CAAC5B,IAAlB,CAAuB,KAAvB,EAA8B,MAAM;AAClC,cAAI,KAAKvH,QAAT,EAAmB;AACjB,gBAAI,KAAKK,WAAT,EAAsB;AACpB,mBAAKuG,YAAL,CAAkB,KAAKL,KAAL,CAAW2G,SAA7B;AACD,aAFD,MAEO;AACL,mBAAKtG,YAAL,CAAkB,KAAKL,KAAL,CAAW4P,6BAA7B;AACD;AACF,WAND,MAMO,IAAI,KAAKlW,UAAT,EAAqB;AAC1B,gBAAI,KAAKA,UAAL,CAAgB4J,WAApB,EAAiC;AAC/B,mBAAK3J,KAAL,CAAWkM,GAAX,CAAe,qCAAf;AACA,mBAAKxF,YAAL,CAAkB,KAAKL,KAAL,CAAW4G,uBAA7B;AACD,aAHD,MAGO;AACL,mBAAKvF,IAAL,CAAU,SAAV,EAAqB,KAAK3H,UAA1B;AACA,mBAAK2G,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD;AACF,WARM,MAQA;AACL,iBAAKH,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAGzK,OAAO,CAAC8J,eAAZ,EAA6B,eAA7B,EAA8C,QAA9C,CAArB;AACA,iBAAKL,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD;AACF,SAnBD;AAoBD;AAlDK;AAFuB,GAhJN;AAuM3B6N,EAAAA,qBAAqB,EAAE;AACrB1O,IAAAA,IAAI,EAAE,yBADe;AAErB6F,IAAAA,MAAM,EAAE;AACNzB,MAAAA,WAAW,EAAE,YAAY;AACvB,aAAK1E,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAHK;AAINpF,MAAAA,cAAc,EAAE,YAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OANK;AAONQ,MAAAA,OAAO,EAAE,UAAUA,OAAV,EAAmB;AAC1B,cAAMY,iBAAiB,GAAG,KAAKD,uBAAL,CAA6BX,OAA7B,CAA1B;AACAY,QAAAA,iBAAiB,CAAC5B,IAAlB,CAAuB,KAAvB,EAA8B,MAAM;AAClC,cAAI,KAAKpH,UAAT,EAAqB;AACnB,kBAAMmB,cAAc,GAAG,KAAKjC,MAAL,CAAYiC,cAAnC;AACA,kBAAM+B,OAAO,GAAG,IAAIzG,YAAY,CAACjB,OAAjB,CAAyB;AACvC8F,cAAAA,MAAM,EAAEH,cAAc,CAACE,OAAf,CAAuBC,MADQ;AAEvCC,cAAAA,QAAQ,EAAEJ,cAAc,CAACE,OAAf,CAAuBE,QAFM;AAGvCC,cAAAA,QAAQ,EAAEL,cAAc,CAACE,OAAf,CAAuBG,QAHM;AAIvCxB,cAAAA,UAAU,EAAE,KAAKA;AAJsB,aAAzB,CAAhB;AAMA,iBAAKG,SAAL,CAAemG,WAAf,CAA2BhK,OAAO,CAACiK,IAAR,CAAa0P,YAAxC,EAAsD/S,OAAO,CAACF,IAA9D;AACA,iBAAKjD,KAAL,CAAWmD,OAAX,CAAmB,YAAY;AAC7B,qBAAOA,OAAO,CAACyK,QAAR,CAAiB,IAAjB,CAAP;AACD,aAFD;AAGA,iBAAK3N,UAAL,GAAkBkB,SAAlB;AACD,WAbD,MAaO,IAAI,KAAKrB,QAAT,EAAmB;AACxB,gBAAI,KAAKK,WAAT,EAAsB;AACpB,mBAAKuG,YAAL,CAAkB,KAAKL,KAAL,CAAW2G,SAA7B;AACD,aAFD,MAEO;AACL,mBAAKtG,YAAL,CAAkB,KAAKL,KAAL,CAAW4P,6BAA7B;AACD;AACF,WANM,MAMA,IAAI,KAAKlW,UAAT,EAAqB;AAC1B,gBAAI,KAAKA,UAAL,CAAgB4J,WAApB,EAAiC;AAC/B,mBAAK3J,KAAL,CAAWkM,GAAX,CAAe,qCAAf;AACA,mBAAKxF,YAAL,CAAkB,KAAKL,KAAL,CAAW4G,uBAA7B;AACD,aAHD,MAGO;AACL,mBAAKvF,IAAL,CAAU,SAAV,EAAqB,KAAK3H,UAA1B;AACA,mBAAK2G,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD;AACF,WARM,MAQA;AACL,iBAAKH,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAGzK,OAAO,CAAC8J,eAAZ,EAA6B,eAA7B,EAA8C,QAA9C,CAArB;AACA,iBAAKL,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD;AACF,SAhCD;AAiCD;AA1CK;AAFa,GAvMI;AAsP3BkO,EAAAA,wBAAwB,EAAE;AACxB/O,IAAAA,IAAI,EAAE,uBADkB;AAExB6F,IAAAA,MAAM,EAAE;AACNzB,MAAAA,WAAW,EAAE,YAAY;AACvB,aAAK1E,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAHK;AAINpF,MAAAA,cAAc,EAAE,YAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OANK;AAONsO,MAAAA,WAAW,EAAE,UAAUxU,KAAV,EAAiB;AAC5B,aAAKtC,gBAAL,GAAwBsC,KAAxB;AACD,OATK;AAUN0G,MAAAA,OAAO,EAAE,UAAUA,OAAV,EAAmB;AAC1B,cAAMY,iBAAiB,GAAG,KAAKD,uBAAL,CAA6BX,OAA7B,CAA1B;AACAY,QAAAA,iBAAiB,CAAC5B,IAAlB,CAAuB,KAAvB,EAA8B,MAAM;AAClC,cAAI,KAAKvH,QAAT,EAAmB;AACjB,gBAAI,KAAKK,WAAT,EAAsB;AACpB,mBAAKuG,YAAL,CAAkB,KAAKL,KAAL,CAAW2G,SAA7B;AACD,aAFD,MAEO;AACL,mBAAKtG,YAAL,CAAkB,KAAKL,KAAL,CAAW4P,6BAA7B;AACD;;AAED;AACD;;AAED,gBAAM5W,gBAAgB,GAAG,KAAKA,gBAA9B;;AAEA,cAAIA,gBAAgB,IAAIA,gBAAgB,CAAC+W,MAArC,IAA+C/W,gBAAgB,CAACgX,GAApE,EAAyE;AACvE,kBAAMjV,cAAc,GAAG,KAAKjC,MAAL,CAAYiC,cAAnC;;AAEA,kBAAMkV,QAAQ,GAAGvN,QAAQ,IAAI;AAC3B,oBAAMwN,uBAAuB,GAAG,CAACrP,GAAD,EAAMsP,WAAN,KAAsB;AACpD,oBAAItP,GAAJ,EAAS;AACP,yBAAO6B,QAAQ,CAAC7B,GAAD,CAAf;AACD;;AAEDsP,gBAAAA,WAAW,CAACF,QAAZ,GAAuBG,IAAvB,CAA4BC,aAAa,IAAI;AAC3C3N,kBAAAA,QAAQ,CAAC,IAAD,EAAO2N,aAAa,CAACC,WAArB,CAAR;AACD,iBAFD,EAEG5N,QAFH;AAGD,eARD;;AAUA,kBAAI3H,cAAc,CAACC,IAAf,KAAwB,iCAA5B,EAA+D;AAC7D,oBAAIuV,qBAAJ;;AAEA,sBAAMJ,WAAW,GAAG,IAAIva,eAAe,CAAC4a,oBAApB,CAAyC,sCAAzC,EAAiF,CAACD,qBAAqB,GAAGxV,cAAc,CAACE,OAAf,CAAuBC,MAAhD,MAA4D,IAA5D,IAAoEqV,qBAAqB,KAAK,KAAK,CAAnG,GAAuGA,qBAAvG,GAA+H,QAAhN,EAA0NxV,cAAc,CAACE,OAAf,CAAuBE,QAAjP,EAA2PJ,cAAc,CAACE,OAAf,CAAuBG,QAAlR,EAA4RpC,gBAAgB,CAACgX,GAA7S,EAAkTlV,SAAlT,EAA6T;AACjV8T,gBAAAA,mBADoB,CAApB;AAEAsB,gBAAAA,uBAAuB,CAACpV,SAAD,EAAYqV,WAAZ,CAAvB;AACD,eAND,MAMO,IAAIpV,cAAc,CAACC,IAAf,KAAwB,+BAA5B,EAA6D;AAClE,iBAAC,GAAGpF,eAAe,CAAC6a,cAApB,EAAoC;AAClClV,kBAAAA,QAAQ,EAAER,cAAc,CAACE,OAAf,CAAuBM,QADC;AAElCC,kBAAAA,WAAW,EAAET,cAAc,CAACE,OAAf,CAAuBO,WAFF;AAGlCkV,kBAAAA,QAAQ,EAAE1X,gBAAgB,CAACgX;AAHO,iBAApC,EAIGE,uBAJH;AAKD,eANM,MAMA,IAAInV,cAAc,CAACC,IAAf,KAAwB,wCAA5B,EAAsE;AAC3E,iBAAC,GAAGpF,eAAe,CAAC+a,sBAApB,EAA4C;AAC1CnV,kBAAAA,WAAW,EAAET,cAAc,CAACE,OAAf,CAAuBO,WADM;AAE1CC,kBAAAA,SAAS,EAAEV,cAAc,CAACE,OAAf,CAAuBQ,SAFQ;AAG1CiV,kBAAAA,QAAQ,EAAE1X,gBAAgB,CAACgX,GAHe;AAI1CzU,kBAAAA,QAAQ,EAAER,cAAc,CAACE,OAAf,CAAuBM;AAJS,iBAA5C,EAKG2U,uBALH;AAMD,eAPM,MAOA,IAAInV,cAAc,CAACC,IAAf,KAAwB,iDAA5B,EAA+E;AACpF,sBAAMmV,WAAW,GAAG,IAAIva,eAAe,CAACgb,2BAApB,CAAgD7V,cAAc,CAACE,OAAf,CAAuBM,QAAvE,EAAiFR,cAAc,CAACE,OAAf,CAAuBU,QAAxG,EAAkH;AACtIZ,gBAAAA,cAAc,CAACE,OAAf,CAAuBS,YADH,EACiB1C,gBAAgB,CAACgX,GADlC,EACuClV,SADvC,EACkD;AACtE8T,gBAAAA,mBAFoB,CAApB;AAGAsB,gBAAAA,uBAAuB,CAACpV,SAAD,EAAYqV,WAAZ,CAAvB;AACD;AACF,aApCD;;AAsCAF,YAAAA,QAAQ,CAAC,CAACpP,GAAD,EAAMvF,KAAN,KAAgB;AACvB,kBAAIuF,GAAJ,EAAS;AACP,qBAAKnH,UAAL,GAAkB,CAAC,GAAG9C,OAAO,CAAC8J,eAAZ,EAA6B,0DAA7B,EAAyF,UAAzF,CAAlB;AACA,qBAAKW,IAAL,CAAU,SAAV,EAAqB,KAAK3H,UAA1B;AACA,qBAAK2G,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACA;AACD;;AAED,mBAAKwH,uBAAL,CAA6B1N,KAA7B;AACD,aATO,CAAR;AAUD,WAnDD,MAmDO,IAAI,KAAK5B,UAAT,EAAqB;AAC1B,gBAAI,KAAKA,UAAL,CAAgB4J,WAApB,EAAiC;AAC/B,mBAAK3J,KAAL,CAAWkM,GAAX,CAAe,qCAAf;AACA,mBAAKxF,YAAL,CAAkB,KAAKL,KAAL,CAAW4G,uBAA7B;AACD,aAHD,MAGO;AACL,mBAAKvF,IAAL,CAAU,SAAV,EAAqB,KAAK3H,UAA1B;AACA,mBAAK2G,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD;AACF,WARM,MAQA;AACL,iBAAKH,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAGzK,OAAO,CAAC8J,eAAZ,EAA6B,eAA7B,EAA8C,QAA9C,CAArB;AACA,iBAAKL,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD;AACF,SA5ED;AA6ED;AAzFK;AAFgB,GAtPC;AAoV3BoO,EAAAA,6BAA6B,EAAE;AAC7BjP,IAAAA,IAAI,EAAE,2BADuB;AAE7BwF,IAAAA,KAAK,EAAE,YAAY;AACjB,WAAKqD,cAAL;AACD,KAJ4B;AAK7BhD,IAAAA,MAAM,EAAE;AACNzB,MAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,aAAK1E,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OAHK;AAINpF,MAAAA,cAAc,EAAE,YAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD,OANK;AAONQ,MAAAA,OAAO,EAAE,UAAUA,OAAV,EAAmB;AAC1B,cAAMY,iBAAiB,GAAG,KAAKD,uBAAL,CAA6BX,OAA7B,CAA1B;AACAY,QAAAA,iBAAiB,CAAC5B,IAAlB,CAAuB,KAAvB,EAA8B,MAAM;AAClC,eAAKX,YAAL,CAAkB,KAAKL,KAAL,CAAWyN,SAA7B;AACA,eAAKxD,mBAAL;AACD,SAHD;AAID;AAbK;AALqB,GApVJ;AAyW3BwD,EAAAA,SAAS,EAAE;AACT9M,IAAAA,IAAI,EAAE,UADG;AAET6F,IAAAA,MAAM,EAAE;AACNzB,MAAAA,WAAW,EAAE,YAAY;AACvB,aAAK1E,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACD;AAHK;AAFC,GAzWgB;AAiX3B2M,EAAAA,mBAAmB,EAAE;AACnBxN,IAAAA,IAAI,EAAE,mBADa;AAEnBsF,IAAAA,IAAI,EAAE,UAAU4K,SAAV,EAAqB;AACzB,WAAKzO,iBAAL;AACD,KAJkB;AAKnBoE,IAAAA,MAAM,EAAE;AACNzB,MAAAA,WAAW,EAAE,UAAUlE,GAAV,EAAe;AAC1B,cAAMiQ,UAAU,GAAG,KAAK3W,OAAxB;AACA,aAAKA,OAAL,GAAeW,SAAf;AACA,aAAKuF,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACAsP,QAAAA,UAAU,CAACpO,QAAX,CAAoB7B,GAApB;AACD,OANK;AAONmB,MAAAA,OAAO,EAAE,UAAUA,OAAV,EAAmB;AAC1B,YAAI+O,cAAJ,EAAoBC,cAApB,CAD0B,CAG1B;;;AACA,aAAK5O,iBAAL;AACA,cAAMQ,iBAAiB,GAAG,KAAKD,uBAAL,CAA6BX,OAA7B,CAA1B;;AAEA,cAAMiP,QAAQ,GAAG,MAAM;AACrBrO,UAAAA,iBAAiB,CAACqL,MAAlB;AACD,SAFD;;AAIA,cAAMiD,OAAO,GAAG,MAAM;AACpB,cAAIC,aAAJ;;AAEAvO,UAAAA,iBAAiB,CAACwO,KAAlB;AACA,WAACD,aAAa,GAAG,KAAKhX,OAAtB,MAAmC,IAAnC,IAA2CgX,aAAa,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,aAAa,CAACnQ,IAAd,CAAmB,QAAnB,EAA6BiQ,QAA7B,CAA/E;AACD,SALD;;AAOA,SAACF,cAAc,GAAG,KAAK5W,OAAvB,MAAoC,IAApC,IAA4C4W,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAAC7P,EAAf,CAAkB,OAAlB,EAA2BgQ,OAA3B,CAAjF;;AAEA,YAAI,KAAK/W,OAAL,YAAwB7D,QAAQ,CAAClB,OAAjC,IAA4C,KAAK+E,OAAL,CAAa6T,MAA7D,EAAqE;AACnEkD,UAAAA,OAAO;AACR;;AAED,cAAMxF,QAAQ,GAAG,MAAM;AACrB,cAAI2F,cAAJ,EAAoBC,cAApB;;AAEA1O,UAAAA,iBAAiB,CAAC9B,cAAlB,CAAiC,KAAjC,EAAwCyQ,cAAxC;;AAEA,cAAI,KAAKpX,OAAL,YAAwB7D,QAAQ,CAAClB,OAAjC,IAA4C,KAAK+E,OAAL,CAAa6T,MAA7D,EAAqE;AACnE;AACA,iBAAK7T,OAAL,CAAa8T,MAAb;AACD;;AAED,WAACoD,cAAc,GAAG,KAAKlX,OAAvB,MAAoC,IAApC,IAA4CkX,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAACvQ,cAAf,CAA8B,OAA9B,EAAuCoQ,OAAvC,CAAjF;AACA,WAACI,cAAc,GAAG,KAAKnX,OAAvB,MAAoC,IAApC,IAA4CmX,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAACxQ,cAAf,CAA8B,QAA9B,EAAwCmQ,QAAxC,CAAjF;AACD,SAZD;;AAcA,cAAMM,cAAc,GAAG,MAAM;AAC3B,cAAIC,cAAJ,EAAoBC,cAApB,EAAoCC,cAApC,EAAoDC,cAApD;;AAEA,WAACH,cAAc,GAAG,KAAKrX,OAAvB,MAAoC,IAApC,IAA4CqX,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAAC1Q,cAAf,CAA8B,QAA9B,EAAwC,KAAKnG,uBAA7C,CAAjF;AACA,WAAC8W,cAAc,GAAG,KAAKtX,OAAvB,MAAoC,IAApC,IAA4CsX,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAAC3Q,cAAf,CAA8B,QAA9B,EAAwC4K,QAAxC,CAAjF;AACA,WAACgG,cAAc,GAAG,KAAKvX,OAAvB,MAAoC,IAApC,IAA4CuX,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAAC5Q,cAAf,CAA8B,OAA9B,EAAuCoQ,OAAvC,CAAjF;AACA,WAACS,cAAc,GAAG,KAAKxX,OAAvB,MAAoC,IAApC,IAA4CwX,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAAC7Q,cAAf,CAA8B,QAA9B,EAAwCmQ,QAAxC,CAAjF;AACA,eAAK5Q,YAAL,CAAkB,KAAKL,KAAL,CAAWyN,SAA7B;AACA,gBAAMqD,UAAU,GAAG,KAAK3W,OAAxB;AACA,eAAKA,OAAL,GAAeW,SAAf;;AAEA,cAAI,KAAKhC,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAAjC,IAA0CoS,UAAU,CAAC/N,KAArD,IAA8D,KAAK1J,UAAvE,EAAmF;AACjF,iBAAKH,aAAL,GAAqB,KAArB;AACD;;AAED4X,UAAAA,UAAU,CAACpO,QAAX,CAAoBoO,UAAU,CAAC/N,KAA/B,EAAsC+N,UAAU,CAACvM,QAAjD,EAA2DuM,UAAU,CAAC3M,IAAtE;AACD,SAhBD;;AAkBAvB,QAAAA,iBAAiB,CAAC5B,IAAlB,CAAuB,KAAvB,EAA8BuQ,cAA9B;AACA,SAACP,cAAc,GAAG,KAAK7W,OAAvB,MAAoC,IAApC,IAA4C6W,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAAChQ,IAAf,CAAoB,QAApB,EAA8B0K,QAA9B,CAAjF;AACD;AAjEK;AALW,GAjXM;AA0b3BpL,EAAAA,cAAc,EAAE;AACdK,IAAAA,IAAI,EAAE,eADQ;AAEdwF,IAAAA,KAAK,EAAE,YAAY;AACjB,WAAKjM,iBAAL,GAAyB,KAAzB;AACD,KAJa;AAKdsM,IAAAA,MAAM,EAAE;AACNzB,MAAAA,WAAW,EAAE,UAAUlE,GAAV,EAAe;AAC1B,cAAMiQ,UAAU,GAAG,KAAK3W,OAAxB;AACA,aAAKA,OAAL,GAAeW,SAAf;AACA,aAAKuF,YAAL,CAAkB,KAAKL,KAAL,CAAWwB,KAA7B;AACAsP,QAAAA,UAAU,CAACpO,QAAX,CAAoB7B,GAApB;AACD,OANK;AAON4D,MAAAA,SAAS,EAAE,YAAY;AACrB,aAAKvK,iBAAL,GAAyB,IAAzB;AACD,OATK;AAUN8H,MAAAA,OAAO,EAAE,UAAUA,OAAV,EAAmB;AAC1B,cAAMY,iBAAiB,GAAG,KAAKD,uBAAL,CAA6BX,OAA7B,CAA1B;AACAY,QAAAA,iBAAiB,CAAC5B,IAAlB,CAAuB,KAAvB,EAA8B,MAAM;AAClC;AACA;AACA,cAAI,KAAK9G,iBAAT,EAA4B;AAC1B,iBAAKA,iBAAL,GAAyB,KAAzB;AACA,iBAAKuL,gBAAL;AACA,kBAAMqL,UAAU,GAAG,KAAK3W,OAAxB;AACA,iBAAKA,OAAL,GAAeW,SAAf;AACA,iBAAKuF,YAAL,CAAkB,KAAKL,KAAL,CAAWyN,SAA7B;;AAEA,gBAAIqD,UAAU,CAAC/N,KAAX,IAAoB+N,UAAU,CAAC/N,KAAX,YAA4BnM,OAAO,CAAC6L,YAAxD,IAAwEqO,UAAU,CAAC/N,KAAX,CAAiB2D,IAAjB,KAA0B,UAAtG,EAAkH;AAChHoK,cAAAA,UAAU,CAACpO,QAAX,CAAoBoO,UAAU,CAAC/N,KAA/B;AACD,aAFD,MAEO;AACL+N,cAAAA,UAAU,CAACpO,QAAX,CAAoB,CAAC,GAAG9L,OAAO,CAAC6L,YAAZ,EAA0B,WAA1B,EAAuC,SAAvC,CAApB;AACD;AACF;AACF,SAhBD;AAiBD;AA7BK;AALM,GA1bW;AA+d3BjB,EAAAA,KAAK,EAAE;AACLb,IAAAA,IAAI,EAAE,OADD;AAELwF,IAAAA,KAAK,EAAE,YAAY;AACjB,WAAKlE,iBAAL,CAAuB1J,YAAY,CAACC,MAApC;AACD,KAJI;AAKLgO,IAAAA,MAAM,EAAE;AACNoL,MAAAA,WAAW,EAAE,YAAY,CAAC;AACzB,OAFK;AAGNxV,MAAAA,cAAc,EAAE,YAAY,CAAC;AAC5B,OAJK;AAKN4F,MAAAA,OAAO,EAAE,YAAY,CAAC;AACrB,OANK;AAON+C,MAAAA,WAAW,EAAE,YAAY,CAAC;AACzB;AARK;AALH;AA/doB,CAA7B","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\r\n\r\nvar _os = _interopRequireDefault(require(\"os\"));\r\n\r\nvar _constants = _interopRequireDefault(require(\"constants\"));\r\n\r\nvar _tls = require(\"tls\");\r\n\r\nvar _stream = require(\"stream\");\r\n\r\nvar _msRestNodeauth = require(\"@azure/ms-rest-nodeauth\");\r\n\r\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\r\n\r\nvar _debug = _interopRequireDefault(require(\"./debug\"));\r\n\r\nvar _events = require(\"events\");\r\n\r\nvar _instanceLookup = require(\"./instance-lookup\");\r\n\r\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\r\n\r\nvar _packet = require(\"./packet\");\r\n\r\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\r\n\r\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\r\n\r\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\r\n\r\nvar _request = _interopRequireDefault(require(\"./request\"));\r\n\r\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\r\n\r\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\r\n\r\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\r\n\r\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\r\n\r\nvar _transaction = require(\"./transaction\");\r\n\r\nvar _errors = require(\"./errors\");\r\n\r\nvar _connector = require(\"./connector\");\r\n\r\nvar _library = require(\"./library\");\r\n\r\nvar _tdsVersions = require(\"./tds-versions\");\r\n\r\nvar _message = _interopRequireDefault(require(\"./message\"));\r\n\r\nvar _ntlm = require(\"./ntlm\");\r\n\r\nvar _depd = _interopRequireDefault(require(\"depd\"));\r\n\r\nvar _adalNode = require(\"adal-node\");\r\n\r\nvar _nodeAbortController = _interopRequireDefault(require(\"node-abort-controller\"));\r\n\r\nvar _dataType = require(\"./data-type\");\r\n\r\nvar _bulkLoadPayload = require(\"./bulk-load-payload\");\r\n\r\nvar _package = require(\"../package.json\");\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst deprecate = (0, _depd.default)('tedious');\r\n\r\n/**\r\n * @private\r\n */\r\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_TEXTSIZE = 2147483647;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_DATEFIRST = 7;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_PORT = 1433;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_TDS_VERSION = '7_4';\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_LANGUAGE = 'us_english';\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_DATEFORMAT = 'mdy';\r\n\r\n/**\r\n * @private\r\n */\r\nconst CLEANUP_TYPE = {\r\n  NORMAL: 0,\r\n  REDIRECT: 1,\r\n  RETRY: 2\r\n};\r\n\r\n/**\r\n * A [[Connection]] instance represents a single connection to a database server.\r\n *\r\n * ```js\r\n * var Connection = require('tedious').Connection;\r\n * var config = {\r\n *  \"authentication\": {\r\n *    ...,\r\n *    \"options\": {...}\r\n *  },\r\n *  \"options\": {...}\r\n * };\r\n * var connection = new Connection(config);\r\n * ```\r\n *\r\n * Only one request at a time may be executed on a connection. Once a [[Request]]\r\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\r\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\r\n * [[Request]]'s completion callback is called.\r\n */\r\nclass Connection extends _events.EventEmitter {\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * Note: be aware of the different options field:\r\n   * 1. config.authentication.options\r\n   * 2. config.options\r\n   *\r\n   * ```js\r\n   * const { Connection } = require('tedious');\r\n   *\r\n   * const config = {\r\n   *  \"authentication\": {\r\n   *    ...,\r\n   *    \"options\": {...}\r\n   *  },\r\n   *  \"options\": {...}\r\n   * };\r\n   *\r\n   * const connection = new Connection(config);\r\n   * ```\r\n   *\r\n   * @param config\r\n   */\r\n  constructor(config) {\r\n    super();\r\n    this.fedAuthRequired = void 0;\r\n    this.fedAuthInfoToken = void 0;\r\n    this.config = void 0;\r\n    this.secureContext = void 0;\r\n    this.inTransaction = void 0;\r\n    this.transactionDescriptors = void 0;\r\n    this.transactionDepth = void 0;\r\n    this.isSqlBatch = void 0;\r\n    this.curTransientRetryCount = void 0;\r\n    this.transientErrorLookup = void 0;\r\n    this.closed = void 0;\r\n    this.loggedIn = void 0;\r\n    this.loginError = void 0;\r\n    this.debug = void 0;\r\n    this.ntlmpacket = void 0;\r\n    this.ntlmpacketBuffer = void 0;\r\n    this.routingData = void 0;\r\n    this.messageIo = void 0;\r\n    this.state = void 0;\r\n    this.resetConnectionOnNextRequest = void 0;\r\n    this.attentionReceived = void 0;\r\n    this.request = void 0;\r\n    this.procReturnStatusValue = void 0;\r\n    this.socket = void 0;\r\n    this.messageBuffer = void 0;\r\n    this.connectTimer = void 0;\r\n    this.cancelTimer = void 0;\r\n    this.requestTimer = void 0;\r\n    this.retryTimer = void 0;\r\n    this._cancelAfterRequestSent = void 0;\r\n\r\n    if (typeof config !== 'object' || config === null) {\r\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\r\n    }\r\n\r\n    if (typeof config.server !== 'string') {\r\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\r\n    }\r\n\r\n    this.fedAuthRequired = false;\r\n    this.fedAuthInfoToken = undefined;\r\n    let authentication;\r\n\r\n    if (config.authentication !== undefined) {\r\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\r\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\r\n      }\r\n\r\n      const type = config.authentication.type;\r\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\r\n\r\n      if (typeof type !== 'string') {\r\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\r\n      }\r\n\r\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret') {\r\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\r\n      }\r\n\r\n      if (typeof options !== 'object' || options === null) {\r\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\r\n      }\r\n\r\n      if (type === 'ntlm') {\r\n        if (typeof options.domain !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\r\n        }\r\n\r\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\r\n        }\r\n\r\n        if (options.password !== undefined && typeof options.password !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'ntlm',\r\n          options: {\r\n            userName: options.userName,\r\n            password: options.password,\r\n            domain: options.domain && options.domain.toUpperCase()\r\n          }\r\n        };\r\n      } else if (type === 'azure-active-directory-password') {\r\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\r\n        }\r\n\r\n        if (options.password !== undefined && typeof options.password !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'azure-active-directory-password',\r\n          options: {\r\n            userName: options.userName,\r\n            password: options.password,\r\n            domain: options.domain\r\n          }\r\n        };\r\n      } else if (type === 'azure-active-directory-access-token') {\r\n        if (typeof options.token !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'azure-active-directory-access-token',\r\n          options: {\r\n            token: options.token\r\n          }\r\n        };\r\n      } else if (type === 'azure-active-directory-msi-vm') {\r\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\r\n        }\r\n\r\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'azure-active-directory-msi-vm',\r\n          options: {\r\n            clientId: options.clientId,\r\n            msiEndpoint: options.msiEndpoint\r\n          }\r\n        };\r\n      } else if (type === 'azure-active-directory-msi-app-service') {\r\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\r\n        }\r\n\r\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\r\n        }\r\n\r\n        if (options.msiSecret !== undefined && typeof options.msiSecret !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.msiSecret\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'azure-active-directory-msi-app-service',\r\n          options: {\r\n            clientId: options.clientId,\r\n            msiEndpoint: options.msiEndpoint,\r\n            msiSecret: options.msiSecret\r\n          }\r\n        };\r\n      } else if (type === 'azure-active-directory-service-principal-secret') {\r\n        if (typeof options.clientId !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\r\n        }\r\n\r\n        if (typeof options.clientSecret !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\r\n        }\r\n\r\n        if (typeof options.tenantId !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'azure-active-directory-service-principal-secret',\r\n          options: {\r\n            clientId: options.clientId,\r\n            clientSecret: options.clientSecret,\r\n            tenantId: options.tenantId\r\n          }\r\n        };\r\n      } else {\r\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\r\n        }\r\n\r\n        if (options.password !== undefined && typeof options.password !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'default',\r\n          options: {\r\n            userName: options.userName,\r\n            password: options.password\r\n          }\r\n        };\r\n      }\r\n    } else {\r\n      authentication = {\r\n        type: 'default',\r\n        options: {\r\n          userName: undefined,\r\n          password: undefined\r\n        }\r\n      };\r\n    }\r\n\r\n    this.config = {\r\n      server: config.server,\r\n      authentication: authentication,\r\n      options: {\r\n        abortTransactionOnError: false,\r\n        appName: undefined,\r\n        camelCaseColumns: false,\r\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\r\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,\r\n        // Units: miliseconds\r\n        columnEncryptionSetting: false,\r\n        columnNameReplacer: undefined,\r\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\r\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\r\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\r\n        cryptoCredentialsDetails: {},\r\n        database: undefined,\r\n        datefirst: DEFAULT_DATEFIRST,\r\n        dateFormat: DEFAULT_DATEFORMAT,\r\n        debug: {\r\n          data: false,\r\n          packet: false,\r\n          payload: false,\r\n          token: false\r\n        },\r\n        enableAnsiNull: true,\r\n        enableAnsiNullDefault: true,\r\n        enableAnsiPadding: true,\r\n        enableAnsiWarnings: true,\r\n        enableArithAbort: true,\r\n        enableConcatNullYieldsNull: true,\r\n        enableCursorCloseOnCommit: null,\r\n        enableImplicitTransactions: false,\r\n        enableNumericRoundabort: false,\r\n        enableQuotedIdentifier: true,\r\n        encrypt: true,\r\n        fallbackToDefaultDb: false,\r\n        encryptionKeyStoreProviders: undefined,\r\n        instanceName: undefined,\r\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\r\n        language: DEFAULT_LANGUAGE,\r\n        localAddress: undefined,\r\n        maxRetriesOnTransientErrors: 3,\r\n        multiSubnetFailover: false,\r\n        packetSize: DEFAULT_PACKET_SIZE,\r\n        port: DEFAULT_PORT,\r\n        readOnlyIntent: false,\r\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\r\n        rowCollectionOnDone: false,\r\n        rowCollectionOnRequestCompletion: false,\r\n        serverName: undefined,\r\n        serverSupportsColumnEncryption: false,\r\n        tdsVersion: DEFAULT_TDS_VERSION,\r\n        textsize: DEFAULT_TEXTSIZE,\r\n        trustedServerNameAE: undefined,\r\n        trustServerCertificate: true,\r\n        useColumnNames: false,\r\n        useUTC: true,\r\n        validateBulkLoadParameters: true,\r\n        workstationId: undefined,\r\n        lowerCaseGuids: false\r\n      }\r\n    };\r\n\r\n    if (config.options) {\r\n      if (config.options.port && config.options.instanceName) {\r\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\r\n      }\r\n\r\n      if (config.options.abortTransactionOnError !== undefined) {\r\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\r\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\r\n        }\r\n\r\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\r\n      }\r\n\r\n      if (config.options.appName !== undefined) {\r\n        if (typeof config.options.appName !== 'string') {\r\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.appName = config.options.appName;\r\n      }\r\n\r\n      if (config.options.camelCaseColumns !== undefined) {\r\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\r\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\r\n      }\r\n\r\n      if (config.options.cancelTimeout !== undefined) {\r\n        if (typeof config.options.cancelTimeout !== 'number') {\r\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\r\n        }\r\n\r\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\r\n      }\r\n\r\n      if (config.options.columnNameReplacer) {\r\n        if (typeof config.options.columnNameReplacer !== 'function') {\r\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\r\n        }\r\n\r\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\r\n      }\r\n\r\n      if (config.options.connectTimeout !== undefined) {\r\n        if (typeof config.options.connectTimeout !== 'number') {\r\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\r\n        }\r\n\r\n        this.config.options.connectTimeout = config.options.connectTimeout;\r\n      }\r\n\r\n      if (config.options.connectionIsolationLevel !== undefined) {\r\n        (0, _transaction.assertValidIsolationLevel)(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\r\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\r\n      }\r\n\r\n      if (config.options.connectTimeout !== undefined) {\r\n        if (typeof config.options.connectTimeout !== 'number') {\r\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\r\n        }\r\n\r\n        this.config.options.connectTimeout = config.options.connectTimeout;\r\n      }\r\n\r\n      if (config.options.cryptoCredentialsDetails !== undefined) {\r\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\r\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\r\n        }\r\n\r\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\r\n      }\r\n\r\n      if (config.options.database !== undefined) {\r\n        if (typeof config.options.database !== 'string') {\r\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.database = config.options.database;\r\n      }\r\n\r\n      if (config.options.datefirst !== undefined) {\r\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\r\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\r\n        }\r\n\r\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\r\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\r\n        }\r\n\r\n        this.config.options.datefirst = config.options.datefirst;\r\n      }\r\n\r\n      if (config.options.dateFormat !== undefined) {\r\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\r\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\r\n        }\r\n\r\n        this.config.options.dateFormat = config.options.dateFormat;\r\n      }\r\n\r\n      if (config.options.debug) {\r\n        if (config.options.debug.data !== undefined) {\r\n          if (typeof config.options.debug.data !== 'boolean') {\r\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\r\n          }\r\n\r\n          this.config.options.debug.data = config.options.debug.data;\r\n        }\r\n\r\n        if (config.options.debug.packet !== undefined) {\r\n          if (typeof config.options.debug.packet !== 'boolean') {\r\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\r\n          }\r\n\r\n          this.config.options.debug.packet = config.options.debug.packet;\r\n        }\r\n\r\n        if (config.options.debug.payload !== undefined) {\r\n          if (typeof config.options.debug.payload !== 'boolean') {\r\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\r\n          }\r\n\r\n          this.config.options.debug.payload = config.options.debug.payload;\r\n        }\r\n\r\n        if (config.options.debug.token !== undefined) {\r\n          if (typeof config.options.debug.token !== 'boolean') {\r\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\r\n          }\r\n\r\n          this.config.options.debug.token = config.options.debug.token;\r\n        }\r\n      }\r\n\r\n      if (config.options.enableAnsiNull !== undefined) {\r\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\r\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\r\n      }\r\n\r\n      if (config.options.enableAnsiNullDefault !== undefined) {\r\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\r\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\r\n      }\r\n\r\n      if (config.options.enableAnsiPadding !== undefined) {\r\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\r\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\r\n      }\r\n\r\n      if (config.options.enableAnsiWarnings !== undefined) {\r\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\r\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\r\n      }\r\n\r\n      if (config.options.enableArithAbort !== undefined) {\r\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\r\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\r\n      }\r\n\r\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\r\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\r\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\r\n      }\r\n\r\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\r\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\r\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\r\n      }\r\n\r\n      if (config.options.enableImplicitTransactions !== undefined) {\r\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\r\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\r\n      }\r\n\r\n      if (config.options.enableNumericRoundabort !== undefined) {\r\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\r\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\r\n      }\r\n\r\n      if (config.options.enableQuotedIdentifier !== undefined) {\r\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\r\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\r\n      }\r\n\r\n      if (config.options.encrypt !== undefined) {\r\n        if (typeof config.options.encrypt !== 'boolean') {\r\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.encrypt = config.options.encrypt;\r\n      }\r\n\r\n      if (config.options.fallbackToDefaultDb !== undefined) {\r\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\r\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\r\n      }\r\n\r\n      if (config.options.instanceName !== undefined) {\r\n        if (typeof config.options.instanceName !== 'string') {\r\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.instanceName = config.options.instanceName;\r\n        this.config.options.port = undefined;\r\n      }\r\n\r\n      if (config.options.isolationLevel !== undefined) {\r\n        (0, _transaction.assertValidIsolationLevel)(config.options.isolationLevel, 'config.options.isolationLevel');\r\n        this.config.options.isolationLevel = config.options.isolationLevel;\r\n      }\r\n\r\n      if (config.options.language !== undefined) {\r\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\r\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\r\n        }\r\n\r\n        this.config.options.language = config.options.language;\r\n      }\r\n\r\n      if (config.options.localAddress !== undefined) {\r\n        if (typeof config.options.localAddress !== 'string') {\r\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.localAddress = config.options.localAddress;\r\n      }\r\n\r\n      if (config.options.multiSubnetFailover !== undefined) {\r\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\r\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\r\n      }\r\n\r\n      if (config.options.packetSize !== undefined) {\r\n        if (typeof config.options.packetSize !== 'number') {\r\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\r\n        }\r\n\r\n        this.config.options.packetSize = config.options.packetSize;\r\n      }\r\n\r\n      if (config.options.port !== undefined) {\r\n        if (typeof config.options.port !== 'number') {\r\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\r\n        }\r\n\r\n        if (config.options.port <= 0 || config.options.port >= 65536) {\r\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\r\n        }\r\n\r\n        this.config.options.port = config.options.port;\r\n        this.config.options.instanceName = undefined;\r\n      }\r\n\r\n      if (config.options.readOnlyIntent !== undefined) {\r\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\r\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\r\n      }\r\n\r\n      if (config.options.requestTimeout !== undefined) {\r\n        if (typeof config.options.requestTimeout !== 'number') {\r\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\r\n        }\r\n\r\n        this.config.options.requestTimeout = config.options.requestTimeout;\r\n      }\r\n\r\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\r\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\r\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\r\n        }\r\n\r\n        if (config.options.maxRetriesOnTransientErrors < 0) {\r\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\r\n        }\r\n\r\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\r\n      }\r\n\r\n      if (config.options.connectionRetryInterval !== undefined) {\r\n        if (typeof config.options.connectionRetryInterval !== 'number') {\r\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\r\n        }\r\n\r\n        if (config.options.connectionRetryInterval <= 0) {\r\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\r\n        }\r\n\r\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\r\n      }\r\n\r\n      if (config.options.rowCollectionOnDone !== undefined) {\r\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\r\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\r\n      }\r\n\r\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\r\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\r\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\r\n      }\r\n\r\n      if (config.options.tdsVersion !== undefined) {\r\n        if (typeof config.options.tdsVersion !== 'string') {\r\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.tdsVersion = config.options.tdsVersion;\r\n      }\r\n\r\n      if (config.options.textsize !== undefined) {\r\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\r\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\r\n        }\r\n\r\n        if (config.options.textsize > 2147483647) {\r\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\r\n        } else if (config.options.textsize < -1) {\r\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\r\n        }\r\n\r\n        this.config.options.textsize = config.options.textsize | 0;\r\n      }\r\n\r\n      if (config.options.trustServerCertificate !== undefined) {\r\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\r\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\r\n      }\r\n\r\n      if (config.options.useColumnNames !== undefined) {\r\n        if (typeof config.options.useColumnNames !== 'boolean') {\r\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.useColumnNames = config.options.useColumnNames;\r\n      }\r\n\r\n      if (config.options.useUTC !== undefined) {\r\n        if (typeof config.options.useUTC !== 'boolean') {\r\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.useUTC = config.options.useUTC;\r\n      }\r\n\r\n      if (config.options.validateBulkLoadParameters !== undefined) {\r\n        if (typeof config.options.validateBulkLoadParameters !== 'boolean') {\r\n          throw new TypeError('The \"config.options.validateBulkLoadParameters\" property must be of type boolean.');\r\n        }\r\n\r\n        if (config.options.validateBulkLoadParameters === false) {\r\n          deprecate('Setting the \"config.options.validateBulkLoadParameters\" to `false` is deprecated and will no longer work in the next major version of `tedious`. Set the value to `true` and update your use of BulkLoad functionality to silence this message.');\r\n        }\r\n\r\n        this.config.options.validateBulkLoadParameters = config.options.validateBulkLoadParameters;\r\n      }\r\n\r\n      if (config.options.workstationId !== undefined) {\r\n        if (typeof config.options.workstationId !== 'string') {\r\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.workstationId = config.options.workstationId;\r\n      }\r\n\r\n      if (config.options.lowerCaseGuids !== undefined) {\r\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\r\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\r\n      }\r\n    }\r\n\r\n    let credentialsDetails = this.config.options.cryptoCredentialsDetails;\r\n\r\n    if (credentialsDetails.secureOptions === undefined) {\r\n      // If the caller has not specified their own `secureOptions`,\r\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\r\n      // Older SQL Server instances running on older Windows versions have\r\n      // trouble with the BEAST workaround in OpenSSL.\r\n      // As BEAST is a browser specific exploit, we can just disable this option here.\r\n      credentialsDetails = Object.create(credentialsDetails, {\r\n        secureOptions: {\r\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\r\n        }\r\n      });\r\n    }\r\n\r\n    this.secureContext = (0, _tls.createSecureContext)(credentialsDetails);\r\n    this.debug = this.createDebug();\r\n    this.inTransaction = false;\r\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\r\n    // events are utilized to maintain inTransaction property state which in\r\n    // turn is used in managing transactions. These events are only fired for\r\n    // TDS version 7.2 and beyond. The properties below are used to emulate\r\n    // equivalent behavior for TDS versions before 7.2.\r\n\r\n    this.transactionDepth = 0;\r\n    this.isSqlBatch = false;\r\n    this.closed = false;\r\n    this.loggedIn = false;\r\n    this.messageBuffer = Buffer.alloc(0);\r\n    this.curTransientRetryCount = 0;\r\n    this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\r\n    this.state = this.STATE.INITIALIZED;\r\n\r\n    this._cancelAfterRequestSent = () => {\r\n      this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\r\n      this.transitionTo(this.STATE.SENT_ATTENTION);\r\n      this.createCancelTimer();\r\n    };\r\n  }\r\n\r\n  connect(connectListener) {\r\n    if (this.state !== this.STATE.INITIALIZED) {\r\n      throw new _errors.ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\r\n    }\r\n\r\n    if (connectListener) {\r\n      const onConnect = err => {\r\n        this.removeListener('error', onError);\r\n        connectListener(err);\r\n      };\r\n\r\n      const onError = err => {\r\n        this.removeListener('connect', onConnect);\r\n        connectListener(err);\r\n      };\r\n\r\n      this.once('connect', onConnect);\r\n      this.once('error', onError);\r\n    }\r\n\r\n    this.transitionTo(this.STATE.CONNECTING);\r\n  }\r\n  /**\r\n   * The server has reported that the charset has changed.\r\n   */\r\n\r\n\r\n  on(event, listener) {\r\n    return super.on(event, listener);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  emit(event, ...args) {\r\n    return super.emit(event, ...args);\r\n  }\r\n  /**\r\n   * Closes the connection to the database.\r\n   *\r\n   * The [[Event_end]] will be emitted once the connection has been closed.\r\n   */\r\n\r\n\r\n  close() {\r\n    this.transitionTo(this.STATE.FINAL);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  initialiseConnection() {\r\n    const signal = this.createConnectTimer();\r\n\r\n    if (this.config.options.port) {\r\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal);\r\n    } else {\r\n      return new _instanceLookup.InstanceLookup().instanceLookup({\r\n        server: this.config.server,\r\n        instanceName: this.config.options.instanceName,\r\n        timeout: this.config.options.connectTimeout,\r\n        signal: signal\r\n      }, (err, port) => {\r\n        if (err) {\r\n          if (err.name === 'AbortError') {\r\n            return;\r\n          }\r\n\r\n          this.emit('connect', (0, _errors.ConnectionError)(err.message, 'EINSTLOOKUP'));\r\n        } else {\r\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  cleanupConnection(cleanupType) {\r\n    if (!this.closed) {\r\n      this.clearConnectTimer();\r\n      this.clearRequestTimer();\r\n      this.clearRetryTimer();\r\n      this.closeConnection();\r\n\r\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\r\n        this.emit('rerouting');\r\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\r\n        process.nextTick(() => {\r\n          this.emit('end');\r\n        });\r\n      }\r\n\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        const err = (0, _errors.RequestError)('Connection closed before request completed.', 'ECLOSE');\r\n        request.callback(err);\r\n        this.request = undefined;\r\n      }\r\n\r\n      this.closed = true;\r\n      this.loggedIn = false;\r\n      this.loginError = undefined;\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createDebug() {\r\n    const debug = new _debug.default(this.config.options.debug);\r\n    debug.on('debug', message => {\r\n      this.emit('debug', message);\r\n    });\r\n    return debug;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createTokenStreamParser(message) {\r\n    const tokenStreamParser = new _tokenStreamParser.Parser(message, this.debug, this.config.options);\r\n    tokenStreamParser.on('infoMessage', token => {\r\n      this.emit('infoMessage', token);\r\n    });\r\n    tokenStreamParser.on('sspichallenge', token => {\r\n      if (token.ntlmpacket) {\r\n        this.ntlmpacket = token.ntlmpacket;\r\n        this.ntlmpacketBuffer = token.ntlmpacketBuffer;\r\n      }\r\n\r\n      this.emit('sspichallenge', token);\r\n    });\r\n    tokenStreamParser.on('errorMessage', token => {\r\n      this.emit('errorMessage', token);\r\n\r\n      if (this.loggedIn) {\r\n        const request = this.request;\r\n\r\n        if (request) {\r\n          if (!request.canceled) {\r\n            const error = new _errors.RequestError(token.message, 'EREQUEST');\r\n            error.number = token.number;\r\n            error.state = token.state;\r\n            error.class = token.class;\r\n            error.serverName = token.serverName;\r\n            error.procName = token.procName;\r\n            error.lineNumber = token.lineNumber;\r\n            request.error = error;\r\n          }\r\n        }\r\n      } else {\r\n        const error = (0, _errors.ConnectionError)(token.message, 'ELOGIN');\r\n        const isLoginErrorTransient = this.transientErrorLookup.isTransientError(token.number);\r\n\r\n        if (isLoginErrorTransient && this.curTransientRetryCount !== this.config.options.maxRetriesOnTransientErrors) {\r\n          error.isTransient = true;\r\n        }\r\n\r\n        this.loginError = error;\r\n      }\r\n    });\r\n    tokenStreamParser.on('databaseChange', token => {\r\n      this.emit('databaseChange', token.newValue);\r\n    });\r\n    tokenStreamParser.on('languageChange', token => {\r\n      this.emit('languageChange', token.newValue);\r\n    });\r\n    tokenStreamParser.on('charsetChange', token => {\r\n      this.emit('charsetChange', token.newValue);\r\n    });\r\n    tokenStreamParser.on('fedAuthInfo', token => {\r\n      this.dispatchEvent('fedAuthInfo', token);\r\n    });\r\n    tokenStreamParser.on('featureExtAck', token => {\r\n      this.dispatchEvent('featureExtAck', token);\r\n    });\r\n    tokenStreamParser.on('loginack', token => {\r\n      if (!token.tdsVersion) {\r\n        // unsupported TDS version\r\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unknown TDS version.', 'ETDS');\r\n        this.loggedIn = false;\r\n        return;\r\n      }\r\n\r\n      if (!token.interface) {\r\n        // unsupported interface\r\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\r\n        this.loggedIn = false;\r\n        return;\r\n      } // use negotiated version\r\n\r\n\r\n      this.config.options.tdsVersion = token.tdsVersion;\r\n      this.loggedIn = true;\r\n    });\r\n    tokenStreamParser.on('routingChange', token => {\r\n      // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\r\n      const [server] = token.newValue.server.split('\\\\');\r\n      this.routingData = {\r\n        server,\r\n        port: token.newValue.port\r\n      };\r\n    });\r\n    tokenStreamParser.on('packetSizeChange', token => {\r\n      this.messageIo.packetSize(token.newValue);\r\n    }); // A new top-level transaction was started. This is not fired\r\n    // for nested transactions.\r\n\r\n    tokenStreamParser.on('beginTransaction', token => {\r\n      this.transactionDescriptors.push(token.newValue);\r\n      this.inTransaction = true;\r\n    }); // A top-level transaction was committed. This is not fired\r\n    // for nested transactions.\r\n\r\n    tokenStreamParser.on('commitTransaction', () => {\r\n      this.transactionDescriptors.length = 1;\r\n      this.inTransaction = false;\r\n    }); // A top-level transaction was rolled back. This is not fired\r\n    // for nested transactions. This is also fired if a batch\r\n    // aborting error happened that caused a rollback.\r\n\r\n    tokenStreamParser.on('rollbackTransaction', () => {\r\n      this.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\r\n\r\n      this.inTransaction = false;\r\n      this.emit('rollbackTransaction');\r\n    });\r\n    tokenStreamParser.on('columnMetadata', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          if (this.config.options.useColumnNames) {\r\n            const columns = {};\r\n\r\n            for (let j = 0, len = token.columns.length; j < len; j++) {\r\n              const col = token.columns[j];\r\n\r\n              if (columns[col.colName] == null) {\r\n                columns[col.colName] = col;\r\n              }\r\n            }\r\n\r\n            request.emit('columnMetadata', columns);\r\n          } else {\r\n            request.emit('columnMetadata', token.columns);\r\n          }\r\n        }\r\n      } else {\r\n        this.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\r\n        this.close();\r\n      }\r\n    });\r\n    tokenStreamParser.on('order', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          request.emit('order', token.orderColumns);\r\n        }\r\n      } else {\r\n        this.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\r\n        this.close();\r\n      }\r\n    });\r\n    tokenStreamParser.on('row', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          if (this.config.options.rowCollectionOnRequestCompletion) {\r\n            request.rows.push(token.columns);\r\n          }\r\n\r\n          if (this.config.options.rowCollectionOnDone) {\r\n            request.rst.push(token.columns);\r\n          }\r\n\r\n          if (!request.canceled) {\r\n            request.emit('row', token.columns);\r\n          }\r\n        }\r\n      } else {\r\n        this.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\r\n        this.close();\r\n      }\r\n    });\r\n    tokenStreamParser.on('returnStatus', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          // Keep value for passing in 'doneProc' event.\r\n          this.procReturnStatusValue = token.value;\r\n        }\r\n      }\r\n    });\r\n    tokenStreamParser.on('returnValue', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          request.emit('returnValue', token.paramName, token.value, token.metadata);\r\n        }\r\n      }\r\n    });\r\n    tokenStreamParser.on('doneProc', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          request.emit('doneProc', token.rowCount, token.more, this.procReturnStatusValue, request.rst);\r\n          this.procReturnStatusValue = undefined;\r\n\r\n          if (token.rowCount !== undefined) {\r\n            request.rowCount += token.rowCount;\r\n          }\r\n\r\n          if (this.config.options.rowCollectionOnDone) {\r\n            request.rst = [];\r\n          }\r\n        }\r\n      }\r\n    });\r\n    tokenStreamParser.on('doneInProc', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          request.emit('doneInProc', token.rowCount, token.more, request.rst);\r\n\r\n          if (token.rowCount !== undefined) {\r\n            request.rowCount += token.rowCount;\r\n          }\r\n\r\n          if (this.config.options.rowCollectionOnDone) {\r\n            request.rst = [];\r\n          }\r\n        }\r\n      }\r\n    });\r\n    tokenStreamParser.on('done', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (token.attention) {\r\n          this.dispatchEvent('attention');\r\n        }\r\n\r\n        if (!request.canceled) {\r\n          if (token.sqlError && !request.error) {\r\n            // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\r\n            request.error = (0, _errors.RequestError)('An unknown error has occurred.', 'UNKNOWN');\r\n          }\r\n\r\n          request.emit('done', token.rowCount, token.more, request.rst);\r\n\r\n          if (token.rowCount !== undefined) {\r\n            request.rowCount += token.rowCount;\r\n          }\r\n\r\n          if (this.config.options.rowCollectionOnDone) {\r\n            request.rst = [];\r\n          }\r\n        }\r\n      }\r\n    });\r\n    tokenStreamParser.on('resetConnection', () => {\r\n      this.emit('resetConnection');\r\n    });\r\n    return tokenStreamParser;\r\n  }\r\n\r\n  connectOnPort(port, multiSubnetFailover, signal) {\r\n    const connectOpts = {\r\n      host: this.routingData ? this.routingData.server : this.config.server,\r\n      port: this.routingData ? this.routingData.port : port,\r\n      localAddress: this.config.options.localAddress\r\n    };\r\n    new _connector.Connector(connectOpts, signal, multiSubnetFailover).execute((err, socket) => {\r\n      if (err) {\r\n        if (err.name === 'AbortError') {\r\n          return;\r\n        }\r\n\r\n        return this.socketError(err);\r\n      }\r\n\r\n      socket = socket;\r\n      socket.on('error', error => {\r\n        this.socketError(error);\r\n      });\r\n      socket.on('close', () => {\r\n        this.socketClose();\r\n      });\r\n      socket.on('end', () => {\r\n        this.socketEnd();\r\n      });\r\n      socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\r\n      this.messageIo = new _messageIo.default(socket, this.config.options.packetSize, this.debug);\r\n      this.messageIo.on('data', message => {\r\n        this.dispatchEvent('message', message);\r\n      });\r\n      this.messageIo.on('secure', cleartext => {\r\n        this.emit('secure', cleartext);\r\n      });\r\n      this.messageIo.on('error', error => {\r\n        this.socketError(error);\r\n      });\r\n      this.socket = socket;\r\n      this.socketConnect();\r\n    });\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  closeConnection() {\r\n    if (this.socket) {\r\n      this.socket.destroy();\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createConnectTimer() {\r\n    const controller = new _nodeAbortController.default();\r\n    this.connectTimer = setTimeout(() => {\r\n      controller.abort();\r\n      this.connectTimeout();\r\n    }, this.config.options.connectTimeout);\r\n    return controller.signal;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createCancelTimer() {\r\n    this.clearCancelTimer();\r\n    const timeout = this.config.options.cancelTimeout;\r\n\r\n    if (timeout > 0) {\r\n      this.cancelTimer = setTimeout(() => {\r\n        this.cancelTimeout();\r\n      }, timeout);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createRequestTimer() {\r\n    this.clearRequestTimer(); // release old timer, just to be safe\r\n\r\n    const request = this.request;\r\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\r\n\r\n    if (timeout) {\r\n      this.requestTimer = setTimeout(() => {\r\n        this.requestTimeout();\r\n      }, timeout);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createRetryTimer() {\r\n    this.clearRetryTimer();\r\n    this.retryTimer = setTimeout(() => {\r\n      this.retryTimeout();\r\n    }, this.config.options.connectionRetryInterval);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  connectTimeout() {\r\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\r\n    this.debug.log(message);\r\n    this.emit('connect', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\r\n    this.connectTimer = undefined;\r\n    this.dispatchEvent('connectTimeout');\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  cancelTimeout() {\r\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\r\n    this.debug.log(message);\r\n    this.dispatchEvent('socketError', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  requestTimeout() {\r\n    this.requestTimer = undefined;\r\n    const request = this.request;\r\n    request.cancel();\r\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\r\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\r\n    request.error = (0, _errors.RequestError)(message, 'ETIMEOUT');\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  retryTimeout() {\r\n    this.retryTimer = undefined;\r\n    this.emit('retry');\r\n    this.transitionTo(this.STATE.CONNECTING);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  clearConnectTimer() {\r\n    if (this.connectTimer) {\r\n      clearTimeout(this.connectTimer);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  clearCancelTimer() {\r\n    if (this.cancelTimer) {\r\n      clearTimeout(this.cancelTimer);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  clearRequestTimer() {\r\n    if (this.requestTimer) {\r\n      clearTimeout(this.requestTimer);\r\n      this.requestTimer = undefined;\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  clearRetryTimer() {\r\n    if (this.retryTimer) {\r\n      clearTimeout(this.retryTimer);\r\n      this.retryTimer = undefined;\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  transitionTo(newState) {\r\n    if (this.state === newState) {\r\n      this.debug.log('State is already ' + newState.name);\r\n      return;\r\n    }\r\n\r\n    if (this.state && this.state.exit) {\r\n      this.state.exit.call(this, newState);\r\n    }\r\n\r\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\r\n    this.state = newState;\r\n\r\n    if (this.state.enter) {\r\n      this.state.enter.apply(this);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getEventHandler(eventName) {\r\n    const handler = this.state.events[eventName];\r\n\r\n    if (!handler) {\r\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\r\n    }\r\n\r\n    return handler;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  dispatchEvent(eventName, ...args) {\r\n    const handler = this.state.events[eventName];\r\n\r\n    if (handler) {\r\n      handler.apply(this, args);\r\n    } else {\r\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\r\n      this.close();\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  socketError(error) {\r\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\r\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\r\n      this.debug.log(message);\r\n      this.emit('connect', (0, _errors.ConnectionError)(message, 'ESOCKET'));\r\n    } else {\r\n      const message = `Connection lost - ${error.message}`;\r\n      this.debug.log(message);\r\n      this.emit('error', (0, _errors.ConnectionError)(message, 'ESOCKET'));\r\n    }\r\n\r\n    this.dispatchEvent('socketError', error);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  socketConnect() {\r\n    this.closed = false;\r\n    this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\r\n    this.dispatchEvent('socketConnect');\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  socketEnd() {\r\n    this.debug.log('socket ended');\r\n\r\n    if (this.state !== this.STATE.FINAL) {\r\n      const error = new Error('socket hang up');\r\n      error.code = 'ECONNRESET';\r\n      this.socketError(error);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  socketClose() {\r\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\r\n\r\n    if (this.state === this.STATE.REROUTING) {\r\n      this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\r\n      this.dispatchEvent('reconnect');\r\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\r\n      const server = this.routingData ? this.routingData.server : this.config.server;\r\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\r\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\r\n      this.dispatchEvent('retry');\r\n    } else {\r\n      this.transitionTo(this.STATE.FINAL);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  sendPreLogin() {\r\n    var _$exec;\r\n\r\n    const [, major, minor, build] = (_$exec = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(_package.version)) !== null && _$exec !== void 0 ? _$exec : ['0.0.0', '0', '0', '0'];\r\n    const payload = new _preloginPayload.default({\r\n      encrypt: this.config.options.encrypt,\r\n      version: {\r\n        major: Number(major),\r\n        minor: Number(minor),\r\n        build: Number(build),\r\n        subbuild: 0\r\n      }\r\n    });\r\n    this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\r\n    this.debug.payload(function () {\r\n      return payload.toString('  ');\r\n    });\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  emptyMessageBuffer() {\r\n    this.messageBuffer = Buffer.alloc(0);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  addToMessageBuffer(data) {\r\n    this.messageBuffer = Buffer.concat([this.messageBuffer, data]);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  sendLogin7Packet() {\r\n    const payload = new _login7Payload.default({\r\n      tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\r\n      packetSize: this.config.options.packetSize,\r\n      clientProgVer: 0,\r\n      clientPid: process.pid,\r\n      connectionId: 0,\r\n      clientTimeZone: new Date().getTimezoneOffset(),\r\n      clientLcid: 0x00000409\r\n    });\r\n    const {\r\n      authentication\r\n    } = this.config;\r\n\r\n    switch (authentication.type) {\r\n      case 'azure-active-directory-password':\r\n        payload.fedAuth = {\r\n          type: 'ADAL',\r\n          echo: this.fedAuthRequired,\r\n          workflow: 'default'\r\n        };\r\n        break;\r\n\r\n      case 'azure-active-directory-access-token':\r\n        payload.fedAuth = {\r\n          type: 'SECURITYTOKEN',\r\n          echo: this.fedAuthRequired,\r\n          fedAuthToken: authentication.options.token\r\n        };\r\n        break;\r\n\r\n      case 'azure-active-directory-msi-vm':\r\n      case 'azure-active-directory-msi-app-service':\r\n      case 'azure-active-directory-service-principal-secret':\r\n        payload.fedAuth = {\r\n          type: 'ADAL',\r\n          echo: this.fedAuthRequired,\r\n          workflow: 'integrated'\r\n        };\r\n        break;\r\n\r\n      case 'ntlm':\r\n        payload.sspi = (0, _ntlm.createNTLMRequest)({\r\n          domain: authentication.options.domain\r\n        });\r\n        break;\r\n\r\n      default:\r\n        payload.userName = authentication.options.userName;\r\n        payload.password = authentication.options.password;\r\n    }\r\n\r\n    payload.hostname = this.config.options.workstationId || _os.default.hostname();\r\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\r\n    payload.appName = this.config.options.appName || 'Tedious';\r\n    payload.libraryName = _library.name;\r\n    payload.language = this.config.options.language;\r\n    payload.database = this.config.options.database;\r\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\r\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\r\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\r\n    this.routingData = undefined;\r\n    this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\r\n    this.debug.payload(function () {\r\n      return payload.toString('  ');\r\n    });\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  sendFedAuthTokenMessage(token) {\r\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\r\n    const data = Buffer.alloc(8 + accessTokenLen);\r\n    let offset = 0;\r\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\r\n    offset = data.writeUInt32LE(accessTokenLen, offset);\r\n    data.write(token, offset, 'ucs2');\r\n    this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\r\n\r\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  sendInitialSql() {\r\n    const payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\r\n    const message = new _message.default({\r\n      type: _packet.TYPE.SQL_BATCH\r\n    });\r\n    this.messageIo.outgoingMessageStream.write(message);\r\n\r\n    _stream.Readable.from(payload).pipe(message);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getInitialSql() {\r\n    const options = [];\r\n\r\n    if (this.config.options.enableAnsiNull === true) {\r\n      options.push('set ansi_nulls on');\r\n    } else if (this.config.options.enableAnsiNull === false) {\r\n      options.push('set ansi_nulls off');\r\n    }\r\n\r\n    if (this.config.options.enableAnsiNullDefault === true) {\r\n      options.push('set ansi_null_dflt_on on');\r\n    } else if (this.config.options.enableAnsiNullDefault === false) {\r\n      options.push('set ansi_null_dflt_on off');\r\n    }\r\n\r\n    if (this.config.options.enableAnsiPadding === true) {\r\n      options.push('set ansi_padding on');\r\n    } else if (this.config.options.enableAnsiPadding === false) {\r\n      options.push('set ansi_padding off');\r\n    }\r\n\r\n    if (this.config.options.enableAnsiWarnings === true) {\r\n      options.push('set ansi_warnings on');\r\n    } else if (this.config.options.enableAnsiWarnings === false) {\r\n      options.push('set ansi_warnings off');\r\n    }\r\n\r\n    if (this.config.options.enableArithAbort === true) {\r\n      options.push('set arithabort on');\r\n    } else if (this.config.options.enableArithAbort === false) {\r\n      options.push('set arithabort off');\r\n    }\r\n\r\n    if (this.config.options.enableConcatNullYieldsNull === true) {\r\n      options.push('set concat_null_yields_null on');\r\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\r\n      options.push('set concat_null_yields_null off');\r\n    }\r\n\r\n    if (this.config.options.enableCursorCloseOnCommit === true) {\r\n      options.push('set cursor_close_on_commit on');\r\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\r\n      options.push('set cursor_close_on_commit off');\r\n    }\r\n\r\n    if (this.config.options.datefirst !== null) {\r\n      options.push(`set datefirst ${this.config.options.datefirst}`);\r\n    }\r\n\r\n    if (this.config.options.dateFormat !== null) {\r\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\r\n    }\r\n\r\n    if (this.config.options.enableImplicitTransactions === true) {\r\n      options.push('set implicit_transactions on');\r\n    } else if (this.config.options.enableImplicitTransactions === false) {\r\n      options.push('set implicit_transactions off');\r\n    }\r\n\r\n    if (this.config.options.language !== null) {\r\n      options.push(`set language ${this.config.options.language}`);\r\n    }\r\n\r\n    if (this.config.options.enableNumericRoundabort === true) {\r\n      options.push('set numeric_roundabort on');\r\n    } else if (this.config.options.enableNumericRoundabort === false) {\r\n      options.push('set numeric_roundabort off');\r\n    }\r\n\r\n    if (this.config.options.enableQuotedIdentifier === true) {\r\n      options.push('set quoted_identifier on');\r\n    } else if (this.config.options.enableQuotedIdentifier === false) {\r\n      options.push('set quoted_identifier off');\r\n    }\r\n\r\n    if (this.config.options.textsize !== null) {\r\n      options.push(`set textsize ${this.config.options.textsize}`);\r\n    }\r\n\r\n    if (this.config.options.connectionIsolationLevel !== null) {\r\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\r\n    }\r\n\r\n    if (this.config.options.abortTransactionOnError === true) {\r\n      options.push('set xact_abort on');\r\n    } else if (this.config.options.abortTransactionOnError === false) {\r\n      options.push('set xact_abort off');\r\n    }\r\n\r\n    return options.join('\\n');\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  processedInitialSql() {\r\n    this.clearConnectTimer();\r\n    this.emit('connect');\r\n  }\r\n  /**\r\n   * Execute the SQL batch represented by [[Request]].\r\n   * There is no param support, and unlike [[Request.execSql]],\r\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\r\n   *\r\n   * In almost all cases, [[Request.execSql]] will be a better choice.\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   */\r\n\r\n\r\n  execSqlBatch(request) {\r\n    this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   *  Execute the SQL represented by [[Request]].\r\n   *\r\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\r\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\r\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\r\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\r\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\r\n   *\r\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\r\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\r\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   */\r\n\r\n\r\n  execSql(request) {\r\n    try {\r\n      request.validateParameters();\r\n    } catch (error) {\r\n      request.error = error;\r\n      process.nextTick(() => {\r\n        this.debug.log(error.message);\r\n        request.callback(error);\r\n      });\r\n      return;\r\n    }\r\n\r\n    const parameters = [];\r\n    parameters.push({\r\n      type: _dataType.TYPES.NVarChar,\r\n      name: 'statement',\r\n      value: request.sqlTextOrProcedure,\r\n      output: false,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n\r\n    if (request.parameters.length) {\r\n      parameters.push({\r\n        type: _dataType.TYPES.NVarChar,\r\n        name: 'params',\r\n        value: request.makeParamsParameter(request.parameters),\r\n        output: false,\r\n        length: undefined,\r\n        precision: undefined,\r\n        scale: undefined\r\n      });\r\n      parameters.push(...request.parameters);\r\n    }\r\n\r\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_executesql', parameters, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   * Creates a new BulkLoad instance.\r\n   *\r\n   * @param table The name of the table to bulk-insert into.\r\n   * @param options A set of bulk load options.\r\n   */\r\n\r\n\r\n  newBulkLoad(table, callbackOrOptions, callback) {\r\n    let options;\r\n\r\n    if (callback === undefined) {\r\n      callback = callbackOrOptions;\r\n      options = {};\r\n    } else {\r\n      options = callbackOrOptions;\r\n    }\r\n\r\n    if (typeof options !== 'object') {\r\n      throw new TypeError('\"options\" argument must be an object');\r\n    }\r\n\r\n    return new _bulkLoad.default(table, this.config.options, options, callback);\r\n  }\r\n  /**\r\n   * Execute a [[BulkLoad]].\r\n   *\r\n   * ```js\r\n   * // We want to perform a bulk load into a table with the following format:\r\n   * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\r\n   *\r\n   * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\r\n   *   // ...\r\n   * });\r\n   *\r\n   * // First, we need to specify the columns that we want to write to,\r\n   * // and their definitions. These definitions must match the actual table,\r\n   * // otherwise the bulk load will fail.\r\n   * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\r\n   * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\r\n   * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\r\n   *\r\n   * // Now, we can specify each row to be written.\r\n   * //\r\n   * // Note that these rows are held in memory until the\r\n   * // bulk load was performed, so if you need to write a large\r\n   * // number of rows (e.g. by reading from a CSV file),\r\n   * // using a streaming bulk load is advisable to keep memory usage low.\r\n   * bulkLoad.addRow({ 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') });\r\n   * bulkLoad.addRow({ 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') });\r\n   *\r\n   * connection.execBulkLoad(bulkLoad);\r\n   * ```\r\n   *\r\n   * @param bulkLoad A previously created [[BulkLoad]].\r\n   *\r\n   * @deprecated Adding rows to a [[BulkLoad]] via [[BulkLoad.addRow]] or [[BulkLoad.getRowStream]]\r\n   *   is deprecated and will be removed in the future. You should migrate to calling [[Connection.execBulkLoad]]\r\n   *   with a `Iterable` or `AsyncIterable` as the second argument instead.\r\n   */\r\n\r\n\r\n  execBulkLoad(bulkLoad, rows) {\r\n    bulkLoad.executionStarted = true;\r\n\r\n    if (rows) {\r\n      if (bulkLoad.streamingMode) {\r\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\r\n      }\r\n\r\n      if (bulkLoad.firstRowWritten) {\r\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\r\n      }\r\n\r\n      const rowStream = _stream.Readable.from(rows); // Destroy the packet transform if an error happens in the row stream,\r\n      // e.g. if an error is thrown from within a generator or stream.\r\n\r\n\r\n      rowStream.on('error', err => {\r\n        bulkLoad.rowToPacketTransform.destroy(err);\r\n      }); // Destroy the row stream if an error happens in the packet transform,\r\n      // e.g. if the bulk load is cancelled.\r\n\r\n      bulkLoad.rowToPacketTransform.on('error', err => {\r\n        rowStream.destroy(err);\r\n      });\r\n      rowStream.pipe(bulkLoad.rowToPacketTransform);\r\n    } else if (!bulkLoad.streamingMode) {\r\n      // If the bulkload was not put into streaming mode by the user,\r\n      // we end the rowToPacketTransform here for them.\r\n      //\r\n      // If it was put into streaming mode, it's the user's responsibility\r\n      // to end the stream.\r\n      bulkLoad.rowToPacketTransform.end();\r\n    }\r\n\r\n    const onCancel = () => {\r\n      request.cancel();\r\n    };\r\n\r\n    const payload = new _bulkLoadPayload.BulkLoadPayload(bulkLoad);\r\n    const request = new _request.default(bulkLoad.getBulkInsertSql(), error => {\r\n      bulkLoad.removeListener('cancel', onCancel);\r\n\r\n      if (error) {\r\n        if (error.code === 'UNKNOWN') {\r\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\r\n        }\r\n\r\n        bulkLoad.error = error;\r\n        bulkLoad.callback(error);\r\n        return;\r\n      }\r\n\r\n      this.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD, payload);\r\n    });\r\n    bulkLoad.once('cancel', onCancel);\r\n    this.execSqlBatch(request);\r\n  }\r\n  /**\r\n   * Prepare the SQL represented by the request.\r\n   *\r\n   * The request can then be used in subsequent calls to\r\n   * [[execute]] and [[unprepare]]\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   *   Parameters only require a name and type. Parameter values are ignored.\r\n   */\r\n\r\n\r\n  prepare(request) {\r\n    const parameters = [];\r\n    parameters.push({\r\n      type: _dataType.TYPES.Int,\r\n      name: 'handle',\r\n      value: undefined,\r\n      output: true,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n    parameters.push({\r\n      type: _dataType.TYPES.NVarChar,\r\n      name: 'params',\r\n      value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\r\n      output: false,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n    parameters.push({\r\n      type: _dataType.TYPES.NVarChar,\r\n      name: 'stmt',\r\n      value: request.sqlTextOrProcedure,\r\n      output: false,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n    request.preparing = true; // TODO: We need to clean up this event handler, otherwise this leaks memory\r\n\r\n    request.on('returnValue', (name, value) => {\r\n      if (name === 'handle') {\r\n        request.handle = value;\r\n      } else {\r\n        request.error = (0, _errors.RequestError)(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\r\n      }\r\n    });\r\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_prepare', parameters, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   * Release the SQL Server resources associated with a previously prepared request.\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   *   Parameters only require a name and type.\r\n   *   Parameter values are ignored.\r\n   */\r\n\r\n\r\n  unprepare(request) {\r\n    const parameters = [];\r\n    parameters.push({\r\n      type: _dataType.TYPES.Int,\r\n      name: 'handle',\r\n      // TODO: Abort if `request.handle` is not set\r\n      value: request.handle,\r\n      output: true,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_unprepare', parameters, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   * Execute previously prepared SQL, using the supplied parameters.\r\n   *\r\n   * @param request A previously prepared [[Request]].\r\n   * @param parameters  An object whose names correspond to the names of\r\n   *   parameters that were added to the [[Request]] before it was prepared.\r\n   *   The object's values are passed as the parameters' values when the\r\n   *   request is executed.\r\n   */\r\n\r\n\r\n  execute(request, parameters) {\r\n    const executeParameters = [];\r\n    executeParameters.push({\r\n      type: _dataType.TYPES.Int,\r\n      name: 'handle',\r\n      // TODO: Abort if `request.handle` is not set\r\n      value: request.handle,\r\n      output: true,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n\r\n    try {\r\n      for (let i = 0, len = request.parameters.length; i < len; i++) {\r\n        const parameter = request.parameters[i];\r\n        executeParameters.push({ ...parameter,\r\n          value: parameter.type.validate(parameters ? parameters[parameter.name] : null)\r\n        });\r\n      }\r\n    } catch (error) {\r\n      request.error = error;\r\n      process.nextTick(() => {\r\n        this.debug.log(error.message);\r\n        request.callback(error);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_execute', executeParameters, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   * Call a stored procedure represented by [[Request]].\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   */\r\n\r\n\r\n  callProcedure(request) {\r\n    try {\r\n      request.validateParameters();\r\n    } catch (error) {\r\n      request.error = error;\r\n      process.nextTick(() => {\r\n        this.debug.log(error.message);\r\n        request.callback(error);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request.sqlTextOrProcedure, request.parameters, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   * Start a transaction.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\r\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\r\n   *   is present.\r\n   * @param isolationLevel The isolation level that the transaction is to be run with.\r\n   *\r\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\r\n   *   * `READ_UNCOMMITTED`\r\n   *   * `READ_COMMITTED`\r\n   *   * `REPEATABLE_READ`\r\n   *   * `SERIALIZABLE`\r\n   *   * `SNAPSHOT`\r\n   *\r\n   *   Optional, and defaults to the Connection's isolation level.\r\n   */\r\n\r\n\r\n  beginTransaction(callback, name = '', isolationLevel = this.config.options.isolationLevel) {\r\n    (0, _transaction.assertValidIsolationLevel)(isolationLevel, 'isolationLevel');\r\n    const transaction = new _transaction.Transaction(name, isolationLevel);\r\n\r\n    if (this.config.options.tdsVersion < '7_2') {\r\n      return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, err => {\r\n        this.transactionDepth++;\r\n\r\n        if (this.transactionDepth === 1) {\r\n          this.inTransaction = true;\r\n        }\r\n\r\n        callback(err);\r\n      }));\r\n    }\r\n\r\n    const request = new _request.default(undefined, err => {\r\n      return callback(err, this.currentTransactionDescriptor());\r\n    });\r\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\r\n  }\r\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * There should be an active transaction - that is, [[beginTransaction]]\r\n   * should have been previously called.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\r\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\r\n   */\r\n\r\n\r\n  commitTransaction(callback, name = '') {\r\n    const transaction = new _transaction.Transaction(name);\r\n\r\n    if (this.config.options.tdsVersion < '7_2') {\r\n      return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, err => {\r\n        this.transactionDepth--;\r\n\r\n        if (this.transactionDepth === 0) {\r\n          this.inTransaction = false;\r\n        }\r\n\r\n        callback(err);\r\n      }));\r\n    }\r\n\r\n    const request = new _request.default(undefined, callback);\r\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\r\n  }\r\n  /**\r\n   * Rollback a transaction.\r\n   *\r\n   * There should be an active transaction - that is, [[beginTransaction]]\r\n   * should have been previously called.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\r\n   *   Optional, and defaults to an empty string.\r\n   *   Required when `isolationLevel` is present.\r\n   */\r\n\r\n\r\n  rollbackTransaction(callback, name = '') {\r\n    const transaction = new _transaction.Transaction(name);\r\n\r\n    if (this.config.options.tdsVersion < '7_2') {\r\n      return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, err => {\r\n        this.transactionDepth--;\r\n\r\n        if (this.transactionDepth === 0) {\r\n          this.inTransaction = false;\r\n        }\r\n\r\n        callback(err);\r\n      }));\r\n    }\r\n\r\n    const request = new _request.default(undefined, callback);\r\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\r\n  }\r\n  /**\r\n   * Set a savepoint within a transaction.\r\n   *\r\n   * There should be an active transaction - that is, [[beginTransaction]]\r\n   * should have been previously called.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\\\r\n   *   Optional, and defaults to an empty string.\r\n   *   Required when `isolationLevel` is present.\r\n   */\r\n\r\n\r\n  saveTransaction(callback, name) {\r\n    const transaction = new _transaction.Transaction(name);\r\n\r\n    if (this.config.options.tdsVersion < '7_2') {\r\n      return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, err => {\r\n        this.transactionDepth++;\r\n        callback(err);\r\n      }));\r\n    }\r\n\r\n    const request = new _request.default(undefined, callback);\r\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\r\n  }\r\n  /**\r\n   * Run the given callback after starting a transaction, and commit or\r\n   * rollback the transaction afterwards.\r\n   *\r\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\r\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\r\n   * use of database transactions and automatically handle transaction nesting.\r\n   *\r\n   * @param cb\r\n   * @param isolationLevel\r\n   *   The isolation level that the transaction is to be run with.\r\n   *\r\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\r\n   *   * `READ_UNCOMMITTED`\r\n   *   * `READ_COMMITTED`\r\n   *   * `REPEATABLE_READ`\r\n   *   * `SERIALIZABLE`\r\n   *   * `SNAPSHOT`\r\n   *\r\n   *   Optional, and defaults to the Connection's isolation level.\r\n   */\r\n\r\n\r\n  transaction(cb, isolationLevel) {\r\n    if (typeof cb !== 'function') {\r\n      throw new TypeError('`cb` must be a function');\r\n    }\r\n\r\n    const useSavepoint = this.inTransaction;\r\n\r\n    const name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\r\n\r\n    const txDone = (err, done, ...args) => {\r\n      if (err) {\r\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\r\n          this.rollbackTransaction(txErr => {\r\n            done(txErr || err, ...args);\r\n          }, name);\r\n        } else {\r\n          done(err, ...args);\r\n        }\r\n      } else if (useSavepoint) {\r\n        if (this.config.options.tdsVersion < '7_2') {\r\n          this.transactionDepth--;\r\n        }\r\n\r\n        done(null, ...args);\r\n      } else {\r\n        this.commitTransaction(txErr => {\r\n          done(txErr, ...args);\r\n        }, name);\r\n      }\r\n    };\r\n\r\n    if (useSavepoint) {\r\n      return this.saveTransaction(err => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n\r\n        if (isolationLevel) {\r\n          return this.execSqlBatch(new _request.default('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), err => {\r\n            return cb(err, txDone);\r\n          }));\r\n        } else {\r\n          return cb(null, txDone);\r\n        }\r\n      }, name);\r\n    } else {\r\n      return this.beginTransaction(err => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n\r\n        return cb(null, txDone);\r\n      }, name, isolationLevel);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  makeRequest(request, packetType, payload) {\r\n    if (this.state !== this.STATE.LOGGED_IN) {\r\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\r\n      this.debug.log(message);\r\n      request.callback((0, _errors.RequestError)(message, 'EINVALIDSTATE'));\r\n    } else if (request.canceled) {\r\n      process.nextTick(() => {\r\n        request.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\r\n      });\r\n    } else {\r\n      if (packetType === _packet.TYPE.SQL_BATCH) {\r\n        this.isSqlBatch = true;\r\n      } else {\r\n        this.isSqlBatch = false;\r\n      }\r\n\r\n      this.request = request;\r\n      request.connection = this;\r\n      request.rowCount = 0;\r\n      request.rows = [];\r\n      request.rst = [];\r\n\r\n      const onCancel = () => {\r\n        payloadStream.unpipe(message); // set the ignore bit and end the message.\r\n\r\n        message.ignore = true;\r\n        message.end();\r\n\r\n        if (request instanceof _request.default && request.paused) {\r\n          // resume the request if it was paused so we can read the remaining tokens\r\n          request.resume();\r\n        }\r\n      };\r\n\r\n      request.once('cancel', onCancel);\r\n      this.createRequestTimer();\r\n      const message = new _message.default({\r\n        type: packetType,\r\n        resetConnection: this.resetConnectionOnNextRequest\r\n      });\r\n      this.messageIo.outgoingMessageStream.write(message);\r\n      this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\r\n      message.once('finish', () => {\r\n        request.removeListener('cancel', onCancel);\r\n        request.once('cancel', this._cancelAfterRequestSent);\r\n        this.resetConnectionOnNextRequest = false;\r\n        this.debug.payload(function () {\r\n          return payload.toString('  ');\r\n        });\r\n      });\r\n\r\n      const payloadStream = _stream.Readable.from(payload);\r\n\r\n      payloadStream.once('error', error => {\r\n        var _request$error;\r\n\r\n        payloadStream.unpipe(message); // Only set a request error if no error was set yet.\r\n\r\n        (_request$error = request.error) !== null && _request$error !== void 0 ? _request$error : request.error = error;\r\n        payloadStream.unpipe(message);\r\n        message.ignore = true;\r\n        message.end();\r\n      });\r\n      payloadStream.pipe(message);\r\n    }\r\n  }\r\n  /**\r\n   * Cancel currently executed request.\r\n   */\r\n\r\n\r\n  cancel() {\r\n    if (!this.request) {\r\n      return false;\r\n    }\r\n\r\n    if (this.request.canceled) {\r\n      return false;\r\n    }\r\n\r\n    this.request.cancel();\r\n    return true;\r\n  }\r\n  /**\r\n   * Reset the connection to its initial state.\r\n   * Can be useful for connection pool implementations.\r\n   *\r\n   * @param callback\r\n   */\r\n\r\n\r\n  reset(callback) {\r\n    const request = new _request.default(this.getInitialSql(), err => {\r\n      if (this.config.options.tdsVersion < '7_2') {\r\n        this.inTransaction = false;\r\n      }\r\n\r\n      callback(err);\r\n    });\r\n    this.resetConnectionOnNextRequest = true;\r\n    this.execSqlBatch(request);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  currentTransactionDescriptor() {\r\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getIsolationLevelText(isolationLevel) {\r\n    switch (isolationLevel) {\r\n      case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\r\n        return 'read uncommitted';\r\n\r\n      case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\r\n        return 'repeatable read';\r\n\r\n      case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\r\n        return 'serializable';\r\n\r\n      case _transaction.ISOLATION_LEVEL.SNAPSHOT:\r\n        return 'snapshot';\r\n\r\n      default:\r\n        return 'read committed';\r\n    }\r\n  }\r\n\r\n}\r\n\r\nvar _default = Connection;\r\nexports.default = _default;\r\nmodule.exports = Connection;\r\nconst authenticationCache = new _adalNode.MemoryCache();\r\nConnection.prototype.STATE = {\r\n  INITIALIZED: {\r\n    name: 'Initialized',\r\n    events: {}\r\n  },\r\n  CONNECTING: {\r\n    name: 'Connecting',\r\n    enter: function () {\r\n      this.initialiseConnection();\r\n    },\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      socketConnect: function () {\r\n        this.sendPreLogin();\r\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\r\n      }\r\n    }\r\n  },\r\n  SENT_PRELOGIN: {\r\n    name: 'SentPrelogin',\r\n    enter: function () {\r\n      this.emptyMessageBuffer();\r\n    },\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      message: function (message) {\r\n        message.on('data', data => {\r\n          this.addToMessageBuffer(data);\r\n        });\r\n        message.once('end', () => {\r\n          const preloginPayload = new _preloginPayload.default(this.messageBuffer);\r\n          this.debug.payload(function () {\r\n            return preloginPayload.toString('  ');\r\n          });\r\n\r\n          if (preloginPayload.fedAuthRequired === 1) {\r\n            this.fedAuthRequired = true;\r\n          }\r\n\r\n          if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\r\n            var _this$routingData$ser, _this$routingData;\r\n\r\n            if (!this.config.options.encrypt) {\r\n              this.emit('connect', (0, _errors.ConnectionError)(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\r\n              return this.close();\r\n            }\r\n\r\n            this.messageIo.startTls(this.secureContext, (_this$routingData$ser = (_this$routingData = this.routingData) === null || _this$routingData === void 0 ? void 0 : _this$routingData.server) !== null && _this$routingData$ser !== void 0 ? _this$routingData$ser : this.config.server, this.config.options.trustServerCertificate);\r\n            this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\r\n          } else {\r\n            this.sendLogin7Packet();\r\n            const {\r\n              authentication\r\n            } = this.config;\r\n\r\n            if (authentication.type === 'ntlm') {\r\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\r\n            } else {\r\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  REROUTING: {\r\n    name: 'ReRouting',\r\n    enter: function () {\r\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\r\n    },\r\n    events: {\r\n      message: function () {},\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      reconnect: function () {\r\n        this.transitionTo(this.STATE.CONNECTING);\r\n      }\r\n    }\r\n  },\r\n  TRANSIENT_FAILURE_RETRY: {\r\n    name: 'TRANSIENT_FAILURE_RETRY',\r\n    enter: function () {\r\n      this.curTransientRetryCount++;\r\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\r\n    },\r\n    events: {\r\n      message: function () {},\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      retry: function () {\r\n        this.createRetryTimer();\r\n      }\r\n    }\r\n  },\r\n  SENT_TLSSSLNEGOTIATION: {\r\n    name: 'SentTLSSSLNegotiation',\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      message: function (message) {\r\n        message.on('data', data => {\r\n          this.messageIo.tlsHandshakeData(data);\r\n        });\r\n        message.once('end', () => {\r\n          if (this.messageIo.tlsNegotiationComplete) {\r\n            this.sendLogin7Packet();\r\n            const {\r\n              authentication\r\n            } = this.config;\r\n\r\n            if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\r\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\r\n            } else if (authentication.type === 'ntlm') {\r\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\r\n            } else {\r\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\r\n    name: 'SentLogin7WithStandardLogin',\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      featureExtAck: function (token) {\r\n        const {\r\n          authentication\r\n        } = this.config;\r\n\r\n        if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\r\n          if (token.fedAuth === undefined) {\r\n            this.loginError = (0, _errors.ConnectionError)('Did not receive Active Directory authentication acknowledgement');\r\n            this.loggedIn = false;\r\n          } else if (token.fedAuth.length !== 0) {\r\n            this.loginError = (0, _errors.ConnectionError)(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\r\n            this.loggedIn = false;\r\n          }\r\n        } else if (token.fedAuth === undefined) {\r\n          this.loginError = (0, _errors.ConnectionError)('Received acknowledgement for unknown feature');\r\n          this.loggedIn = false;\r\n        } else {\r\n          this.loginError = (0, _errors.ConnectionError)('Did not request Active Directory authentication, but received the acknowledgment');\r\n          this.loggedIn = false;\r\n        }\r\n      },\r\n      message: function (message) {\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n        tokenStreamParser.once('end', () => {\r\n          if (this.loggedIn) {\r\n            if (this.routingData) {\r\n              this.transitionTo(this.STATE.REROUTING);\r\n            } else {\r\n              this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\r\n            }\r\n          } else if (this.loginError) {\r\n            if (this.loginError.isTransient) {\r\n              this.debug.log('Initiating retry on transient error');\r\n              this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\r\n            } else {\r\n              this.emit('connect', this.loginError);\r\n              this.transitionTo(this.STATE.FINAL);\r\n            }\r\n          } else {\r\n            this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\r\n            this.transitionTo(this.STATE.FINAL);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  SENT_LOGIN7_WITH_NTLM: {\r\n    name: 'SentLogin7WithNTLMLogin',\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      message: function (message) {\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n        tokenStreamParser.once('end', () => {\r\n          if (this.ntlmpacket) {\r\n            const authentication = this.config.authentication;\r\n            const payload = new _ntlmPayload.default({\r\n              domain: authentication.options.domain,\r\n              userName: authentication.options.userName,\r\n              password: authentication.options.password,\r\n              ntlmpacket: this.ntlmpacket\r\n            });\r\n            this.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\r\n            this.debug.payload(function () {\r\n              return payload.toString('  ');\r\n            });\r\n            this.ntlmpacket = undefined;\r\n          } else if (this.loggedIn) {\r\n            if (this.routingData) {\r\n              this.transitionTo(this.STATE.REROUTING);\r\n            } else {\r\n              this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\r\n            }\r\n          } else if (this.loginError) {\r\n            if (this.loginError.isTransient) {\r\n              this.debug.log('Initiating retry on transient error');\r\n              this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\r\n            } else {\r\n              this.emit('connect', this.loginError);\r\n              this.transitionTo(this.STATE.FINAL);\r\n            }\r\n          } else {\r\n            this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\r\n            this.transitionTo(this.STATE.FINAL);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  SENT_LOGIN7_WITH_FEDAUTH: {\r\n    name: 'SentLogin7Withfedauth',\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      fedAuthInfo: function (token) {\r\n        this.fedAuthInfoToken = token;\r\n      },\r\n      message: function (message) {\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n        tokenStreamParser.once('end', () => {\r\n          if (this.loggedIn) {\r\n            if (this.routingData) {\r\n              this.transitionTo(this.STATE.REROUTING);\r\n            } else {\r\n              this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          const fedAuthInfoToken = this.fedAuthInfoToken;\r\n\r\n          if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\r\n            const authentication = this.config.authentication;\r\n\r\n            const getToken = callback => {\r\n              const getTokenFromCredentials = (err, credentials) => {\r\n                if (err) {\r\n                  return callback(err);\r\n                }\r\n\r\n                credentials.getToken().then(tokenResponse => {\r\n                  callback(null, tokenResponse.accessToken);\r\n                }, callback);\r\n              };\r\n\r\n              if (authentication.type === 'azure-active-directory-password') {\r\n                var _authentication$optio;\r\n\r\n                const credentials = new _msRestNodeauth.UserTokenCredentials('7f98cb04-cd1e-40df-9140-3bf7e2cea4db', (_authentication$optio = authentication.options.domain) !== null && _authentication$optio !== void 0 ? _authentication$optio : 'common', authentication.options.userName, authentication.options.password, fedAuthInfoToken.spn, undefined, // environment\r\n                authenticationCache);\r\n                getTokenFromCredentials(undefined, credentials);\r\n              } else if (authentication.type === 'azure-active-directory-msi-vm') {\r\n                (0, _msRestNodeauth.loginWithVmMSI)({\r\n                  clientId: authentication.options.clientId,\r\n                  msiEndpoint: authentication.options.msiEndpoint,\r\n                  resource: fedAuthInfoToken.spn\r\n                }, getTokenFromCredentials);\r\n              } else if (authentication.type === 'azure-active-directory-msi-app-service') {\r\n                (0, _msRestNodeauth.loginWithAppServiceMSI)({\r\n                  msiEndpoint: authentication.options.msiEndpoint,\r\n                  msiSecret: authentication.options.msiSecret,\r\n                  resource: fedAuthInfoToken.spn,\r\n                  clientId: authentication.options.clientId\r\n                }, getTokenFromCredentials);\r\n              } else if (authentication.type === 'azure-active-directory-service-principal-secret') {\r\n                const credentials = new _msRestNodeauth.ApplicationTokenCredentials(authentication.options.clientId, authentication.options.tenantId, // domain\r\n                authentication.options.clientSecret, fedAuthInfoToken.spn, undefined, // environment\r\n                authenticationCache);\r\n                getTokenFromCredentials(undefined, credentials);\r\n              }\r\n            };\r\n\r\n            getToken((err, token) => {\r\n              if (err) {\r\n                this.loginError = (0, _errors.ConnectionError)('Security token could not be authenticated or authorized.', 'EFEDAUTH');\r\n                this.emit('connect', this.loginError);\r\n                this.transitionTo(this.STATE.FINAL);\r\n                return;\r\n              }\r\n\r\n              this.sendFedAuthTokenMessage(token);\r\n            });\r\n          } else if (this.loginError) {\r\n            if (this.loginError.isTransient) {\r\n              this.debug.log('Initiating retry on transient error');\r\n              this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\r\n            } else {\r\n              this.emit('connect', this.loginError);\r\n              this.transitionTo(this.STATE.FINAL);\r\n            }\r\n          } else {\r\n            this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\r\n            this.transitionTo(this.STATE.FINAL);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  LOGGED_IN_SENDING_INITIAL_SQL: {\r\n    name: 'LoggedInSendingInitialSql',\r\n    enter: function () {\r\n      this.sendInitialSql();\r\n    },\r\n    events: {\r\n      socketError: function socketError() {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      message: function (message) {\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n        tokenStreamParser.once('end', () => {\r\n          this.transitionTo(this.STATE.LOGGED_IN);\r\n          this.processedInitialSql();\r\n        });\r\n      }\r\n    }\r\n  },\r\n  LOGGED_IN: {\r\n    name: 'LoggedIn',\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      }\r\n    }\r\n  },\r\n  SENT_CLIENT_REQUEST: {\r\n    name: 'SentClientRequest',\r\n    exit: function (nextState) {\r\n      this.clearRequestTimer();\r\n    },\r\n    events: {\r\n      socketError: function (err) {\r\n        const sqlRequest = this.request;\r\n        this.request = undefined;\r\n        this.transitionTo(this.STATE.FINAL);\r\n        sqlRequest.callback(err);\r\n      },\r\n      message: function (message) {\r\n        var _this$request2, _this$request9;\r\n\r\n        // request timer is stopped on first data package\r\n        this.clearRequestTimer();\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n\r\n        const onResume = () => {\r\n          tokenStreamParser.resume();\r\n        };\r\n\r\n        const onPause = () => {\r\n          var _this$request;\r\n\r\n          tokenStreamParser.pause();\r\n          (_this$request = this.request) === null || _this$request === void 0 ? void 0 : _this$request.once('resume', onResume);\r\n        };\r\n\r\n        (_this$request2 = this.request) === null || _this$request2 === void 0 ? void 0 : _this$request2.on('pause', onPause);\r\n\r\n        if (this.request instanceof _request.default && this.request.paused) {\r\n          onPause();\r\n        }\r\n\r\n        const onCancel = () => {\r\n          var _this$request3, _this$request4;\r\n\r\n          tokenStreamParser.removeListener('end', onEndOfMessage);\r\n\r\n          if (this.request instanceof _request.default && this.request.paused) {\r\n            // resume the request if it was paused so we can read the remaining tokens\r\n            this.request.resume();\r\n          }\r\n\r\n          (_this$request3 = this.request) === null || _this$request3 === void 0 ? void 0 : _this$request3.removeListener('pause', onPause);\r\n          (_this$request4 = this.request) === null || _this$request4 === void 0 ? void 0 : _this$request4.removeListener('resume', onResume);\r\n        };\r\n\r\n        const onEndOfMessage = () => {\r\n          var _this$request5, _this$request6, _this$request7, _this$request8;\r\n\r\n          (_this$request5 = this.request) === null || _this$request5 === void 0 ? void 0 : _this$request5.removeListener('cancel', this._cancelAfterRequestSent);\r\n          (_this$request6 = this.request) === null || _this$request6 === void 0 ? void 0 : _this$request6.removeListener('cancel', onCancel);\r\n          (_this$request7 = this.request) === null || _this$request7 === void 0 ? void 0 : _this$request7.removeListener('pause', onPause);\r\n          (_this$request8 = this.request) === null || _this$request8 === void 0 ? void 0 : _this$request8.removeListener('resume', onResume);\r\n          this.transitionTo(this.STATE.LOGGED_IN);\r\n          const sqlRequest = this.request;\r\n          this.request = undefined;\r\n\r\n          if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\r\n            this.inTransaction = false;\r\n          }\r\n\r\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\r\n        };\r\n\r\n        tokenStreamParser.once('end', onEndOfMessage);\r\n        (_this$request9 = this.request) === null || _this$request9 === void 0 ? void 0 : _this$request9.once('cancel', onCancel);\r\n      }\r\n    }\r\n  },\r\n  SENT_ATTENTION: {\r\n    name: 'SentAttention',\r\n    enter: function () {\r\n      this.attentionReceived = false;\r\n    },\r\n    events: {\r\n      socketError: function (err) {\r\n        const sqlRequest = this.request;\r\n        this.request = undefined;\r\n        this.transitionTo(this.STATE.FINAL);\r\n        sqlRequest.callback(err);\r\n      },\r\n      attention: function () {\r\n        this.attentionReceived = true;\r\n      },\r\n      message: function (message) {\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n        tokenStreamParser.once('end', () => {\r\n          // 3.2.5.7 Sent Attention State\r\n          // Discard any data contained in the response, until we receive the attention response\r\n          if (this.attentionReceived) {\r\n            this.attentionReceived = false;\r\n            this.clearCancelTimer();\r\n            const sqlRequest = this.request;\r\n            this.request = undefined;\r\n            this.transitionTo(this.STATE.LOGGED_IN);\r\n\r\n            if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\r\n              sqlRequest.callback(sqlRequest.error);\r\n            } else {\r\n              sqlRequest.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  FINAL: {\r\n    name: 'Final',\r\n    enter: function () {\r\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\r\n    },\r\n    events: {\r\n      loginFailed: function () {// Do nothing. The connection was probably closed by the client code.\r\n      },\r\n      connectTimeout: function () {// Do nothing, as the timer should be cleaned up.\r\n      },\r\n      message: function () {// Do nothing\r\n      },\r\n      socketError: function () {// Do nothing\r\n      }\r\n    }\r\n  }\r\n};"]},"metadata":{},"sourceType":"script"}
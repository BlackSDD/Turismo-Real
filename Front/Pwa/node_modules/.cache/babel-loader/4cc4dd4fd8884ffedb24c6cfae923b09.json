{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPacketComplete = isPacketComplete;\nexports.packetLength = packetLength;\nexports.Packet = exports.OFFSET = exports.TYPE = exports.HEADER_LENGTH = void 0;\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nconst HEADER_LENGTH = 8;\nexports.HEADER_LENGTH = HEADER_LENGTH;\nconst TYPE = {\n  SQL_BATCH: 0x01,\n  RPC_REQUEST: 0x03,\n  TABULAR_RESULT: 0x04,\n  ATTENTION: 0x06,\n  BULK_LOAD: 0x07,\n  TRANSACTION_MANAGER: 0x0E,\n  LOGIN7: 0x10,\n  NTLMAUTH_PKT: 0x11,\n  PRELOGIN: 0x12,\n  FEDAUTH_TOKEN: 0x08\n};\nexports.TYPE = TYPE;\nconst typeByValue = {};\n\nfor (const name in TYPE) {\n  typeByValue[TYPE[name]] = name;\n}\n\nconst STATUS = {\n  NORMAL: 0x00,\n  EOM: 0x01,\n  IGNORE: 0x02,\n  RESETCONNECTION: 0x08,\n  RESETCONNECTIONSKIPTRAN: 0x10\n};\nconst OFFSET = {\n  Type: 0,\n  Status: 1,\n  Length: 2,\n  SPID: 4,\n  PacketID: 6,\n  Window: 7\n};\nexports.OFFSET = OFFSET;\nconst DEFAULT_SPID = 0;\nconst DEFAULT_PACKETID = 1;\nconst DEFAULT_WINDOW = 0;\nconst NL = '\\n';\n\nclass Packet {\n  constructor(typeOrBuffer) {\n    this.buffer = void 0;\n\n    if (typeOrBuffer instanceof Buffer) {\n      this.buffer = typeOrBuffer;\n    } else {\n      const type = typeOrBuffer;\n      this.buffer = Buffer.alloc(HEADER_LENGTH, 0);\n      this.buffer.writeUInt8(type, OFFSET.Type);\n      this.buffer.writeUInt8(STATUS.NORMAL, OFFSET.Status);\n      this.buffer.writeUInt16BE(DEFAULT_SPID, OFFSET.SPID);\n      this.buffer.writeUInt8(DEFAULT_PACKETID, OFFSET.PacketID);\n      this.buffer.writeUInt8(DEFAULT_WINDOW, OFFSET.Window);\n      this.setLength();\n    }\n  }\n\n  setLength() {\n    this.buffer.writeUInt16BE(this.buffer.length, OFFSET.Length);\n  }\n\n  length() {\n    return this.buffer.readUInt16BE(OFFSET.Length);\n  }\n\n  resetConnection(reset) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n\n    if (reset) {\n      status |= STATUS.RESETCONNECTION;\n    } else {\n      status &= 0xFF - STATUS.RESETCONNECTION;\n    }\n\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n\n  last(last) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n\n    if (arguments.length > 0) {\n      if (last) {\n        status |= STATUS.EOM;\n      } else {\n        status &= 0xFF - STATUS.EOM;\n      }\n\n      this.buffer.writeUInt8(status, OFFSET.Status);\n    }\n\n    return this.isLast();\n  }\n\n  ignore(last) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n\n    if (last) {\n      status |= STATUS.IGNORE;\n    } else {\n      status &= 0xFF - STATUS.IGNORE;\n    }\n\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n\n  isLast() {\n    return !!(this.buffer.readUInt8(OFFSET.Status) & STATUS.EOM);\n  }\n\n  packetId(packetId) {\n    if (packetId) {\n      this.buffer.writeUInt8(packetId % 256, OFFSET.PacketID);\n    }\n\n    return this.buffer.readUInt8(OFFSET.PacketID);\n  }\n\n  addData(data) {\n    this.buffer = Buffer.concat([this.buffer, data]);\n    this.setLength();\n    return this;\n  }\n\n  data() {\n    return this.buffer.slice(HEADER_LENGTH);\n  }\n\n  type() {\n    return this.buffer.readUInt8(OFFSET.Type);\n  }\n\n  statusAsString() {\n    const status = this.buffer.readUInt8(OFFSET.Status);\n    const statuses = [];\n\n    for (const name in STATUS) {\n      const value = STATUS[name];\n\n      if (status & value) {\n        statuses.push(name);\n      } else {\n        statuses.push(undefined);\n      }\n    }\n\n    return statuses.join(' ').trim();\n  }\n\n  headerToString(indent = '') {\n    const text = (0, _sprintfJs.sprintf)('type:0x%02X(%s), status:0x%02X(%s), length:0x%04X, spid:0x%04X, packetId:0x%02X, window:0x%02X', this.buffer.readUInt8(OFFSET.Type), typeByValue[this.buffer.readUInt8(OFFSET.Type)], this.buffer.readUInt8(OFFSET.Status), this.statusAsString(), this.buffer.readUInt16BE(OFFSET.Length), this.buffer.readUInt16BE(OFFSET.SPID), this.buffer.readUInt8(OFFSET.PacketID), this.buffer.readUInt8(OFFSET.Window));\n    return indent + text;\n  }\n\n  dataToString(indent = '') {\n    const BYTES_PER_GROUP = 0x04;\n    const CHARS_PER_GROUP = 0x08;\n    const BYTES_PER_LINE = 0x20;\n    const data = this.data();\n    let dataDump = '';\n    let chars = '';\n\n    for (let offset = 0; offset < data.length; offset++) {\n      if (offset % BYTES_PER_LINE === 0) {\n        dataDump += indent;\n        dataDump += (0, _sprintfJs.sprintf)('%04X  ', offset);\n      }\n\n      if (data[offset] < 0x20 || data[offset] > 0x7E) {\n        chars += '.';\n\n        if ((offset + 1) % CHARS_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\n          chars += ' ';\n        }\n      } else {\n        chars += String.fromCharCode(data[offset]);\n      }\n\n      if (data[offset] != null) {\n        dataDump += (0, _sprintfJs.sprintf)('%02X', data[offset]);\n      }\n\n      if ((offset + 1) % BYTES_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\n        dataDump += ' ';\n      }\n\n      if ((offset + 1) % BYTES_PER_LINE === 0) {\n        dataDump += '  ' + chars;\n        chars = '';\n\n        if (offset < data.length - 1) {\n          dataDump += NL;\n        }\n      }\n    }\n\n    if (chars.length) {\n      dataDump += '  ' + chars;\n    }\n\n    return dataDump;\n  }\n\n  toString(indent = '') {\n    return this.headerToString(indent) + '\\n' + this.dataToString(indent + indent);\n  }\n\n  payloadString() {\n    return '';\n  }\n\n}\n\nexports.Packet = Packet;\n\nfunction isPacketComplete(potentialPacketBuffer) {\n  if (potentialPacketBuffer.length < HEADER_LENGTH) {\n    return false;\n  } else {\n    return potentialPacketBuffer.length >= potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n  }\n}\n\nfunction packetLength(potentialPacketBuffer) {\n  return potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n}","map":{"version":3,"sources":["B:/Duoc/Portafolio_de_titulo/Git/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/packet.js"],"names":["Object","defineProperty","exports","value","isPacketComplete","packetLength","Packet","OFFSET","TYPE","HEADER_LENGTH","_sprintfJs","require","SQL_BATCH","RPC_REQUEST","TABULAR_RESULT","ATTENTION","BULK_LOAD","TRANSACTION_MANAGER","LOGIN7","NTLMAUTH_PKT","PRELOGIN","FEDAUTH_TOKEN","typeByValue","name","STATUS","NORMAL","EOM","IGNORE","RESETCONNECTION","RESETCONNECTIONSKIPTRAN","Type","Status","Length","SPID","PacketID","Window","DEFAULT_SPID","DEFAULT_PACKETID","DEFAULT_WINDOW","NL","constructor","typeOrBuffer","buffer","Buffer","type","alloc","writeUInt8","writeUInt16BE","setLength","length","readUInt16BE","resetConnection","reset","status","readUInt8","last","arguments","isLast","ignore","packetId","addData","data","concat","slice","statusAsString","statuses","push","undefined","join","trim","headerToString","indent","text","sprintf","dataToString","BYTES_PER_GROUP","CHARS_PER_GROUP","BYTES_PER_LINE","dataDump","chars","offset","String","fromCharCode","toString","payloadString","potentialPacketBuffer"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.isPacketComplete = isPacketComplete;\r\nexports.packetLength = packetLength;\r\nexports.Packet = exports.OFFSET = exports.TYPE = exports.HEADER_LENGTH = void 0;\r\n\r\nvar _sprintfJs = require(\"sprintf-js\");\r\n\r\nconst HEADER_LENGTH = 8;\r\nexports.HEADER_LENGTH = HEADER_LENGTH;\r\nconst TYPE = {\r\n  SQL_BATCH: 0x01,\r\n  RPC_REQUEST: 0x03,\r\n  TABULAR_RESULT: 0x04,\r\n  ATTENTION: 0x06,\r\n  BULK_LOAD: 0x07,\r\n  TRANSACTION_MANAGER: 0x0E,\r\n  LOGIN7: 0x10,\r\n  NTLMAUTH_PKT: 0x11,\r\n  PRELOGIN: 0x12,\r\n  FEDAUTH_TOKEN: 0x08\r\n};\r\nexports.TYPE = TYPE;\r\nconst typeByValue = {};\r\n\r\nfor (const name in TYPE) {\r\n  typeByValue[TYPE[name]] = name;\r\n}\r\n\r\nconst STATUS = {\r\n  NORMAL: 0x00,\r\n  EOM: 0x01,\r\n  IGNORE: 0x02,\r\n  RESETCONNECTION: 0x08,\r\n  RESETCONNECTIONSKIPTRAN: 0x10\r\n};\r\nconst OFFSET = {\r\n  Type: 0,\r\n  Status: 1,\r\n  Length: 2,\r\n  SPID: 4,\r\n  PacketID: 6,\r\n  Window: 7\r\n};\r\nexports.OFFSET = OFFSET;\r\nconst DEFAULT_SPID = 0;\r\nconst DEFAULT_PACKETID = 1;\r\nconst DEFAULT_WINDOW = 0;\r\nconst NL = '\\n';\r\n\r\nclass Packet {\r\n  constructor(typeOrBuffer) {\r\n    this.buffer = void 0;\r\n\r\n    if (typeOrBuffer instanceof Buffer) {\r\n      this.buffer = typeOrBuffer;\r\n    } else {\r\n      const type = typeOrBuffer;\r\n      this.buffer = Buffer.alloc(HEADER_LENGTH, 0);\r\n      this.buffer.writeUInt8(type, OFFSET.Type);\r\n      this.buffer.writeUInt8(STATUS.NORMAL, OFFSET.Status);\r\n      this.buffer.writeUInt16BE(DEFAULT_SPID, OFFSET.SPID);\r\n      this.buffer.writeUInt8(DEFAULT_PACKETID, OFFSET.PacketID);\r\n      this.buffer.writeUInt8(DEFAULT_WINDOW, OFFSET.Window);\r\n      this.setLength();\r\n    }\r\n  }\r\n\r\n  setLength() {\r\n    this.buffer.writeUInt16BE(this.buffer.length, OFFSET.Length);\r\n  }\r\n\r\n  length() {\r\n    return this.buffer.readUInt16BE(OFFSET.Length);\r\n  }\r\n\r\n  resetConnection(reset) {\r\n    let status = this.buffer.readUInt8(OFFSET.Status);\r\n\r\n    if (reset) {\r\n      status |= STATUS.RESETCONNECTION;\r\n    } else {\r\n      status &= 0xFF - STATUS.RESETCONNECTION;\r\n    }\r\n\r\n    this.buffer.writeUInt8(status, OFFSET.Status);\r\n  }\r\n\r\n  last(last) {\r\n    let status = this.buffer.readUInt8(OFFSET.Status);\r\n\r\n    if (arguments.length > 0) {\r\n      if (last) {\r\n        status |= STATUS.EOM;\r\n      } else {\r\n        status &= 0xFF - STATUS.EOM;\r\n      }\r\n\r\n      this.buffer.writeUInt8(status, OFFSET.Status);\r\n    }\r\n\r\n    return this.isLast();\r\n  }\r\n\r\n  ignore(last) {\r\n    let status = this.buffer.readUInt8(OFFSET.Status);\r\n\r\n    if (last) {\r\n      status |= STATUS.IGNORE;\r\n    } else {\r\n      status &= 0xFF - STATUS.IGNORE;\r\n    }\r\n\r\n    this.buffer.writeUInt8(status, OFFSET.Status);\r\n  }\r\n\r\n  isLast() {\r\n    return !!(this.buffer.readUInt8(OFFSET.Status) & STATUS.EOM);\r\n  }\r\n\r\n  packetId(packetId) {\r\n    if (packetId) {\r\n      this.buffer.writeUInt8(packetId % 256, OFFSET.PacketID);\r\n    }\r\n\r\n    return this.buffer.readUInt8(OFFSET.PacketID);\r\n  }\r\n\r\n  addData(data) {\r\n    this.buffer = Buffer.concat([this.buffer, data]);\r\n    this.setLength();\r\n    return this;\r\n  }\r\n\r\n  data() {\r\n    return this.buffer.slice(HEADER_LENGTH);\r\n  }\r\n\r\n  type() {\r\n    return this.buffer.readUInt8(OFFSET.Type);\r\n  }\r\n\r\n  statusAsString() {\r\n    const status = this.buffer.readUInt8(OFFSET.Status);\r\n    const statuses = [];\r\n\r\n    for (const name in STATUS) {\r\n      const value = STATUS[name];\r\n\r\n      if (status & value) {\r\n        statuses.push(name);\r\n      } else {\r\n        statuses.push(undefined);\r\n      }\r\n    }\r\n\r\n    return statuses.join(' ').trim();\r\n  }\r\n\r\n  headerToString(indent = '') {\r\n    const text = (0, _sprintfJs.sprintf)('type:0x%02X(%s), status:0x%02X(%s), length:0x%04X, spid:0x%04X, packetId:0x%02X, window:0x%02X', this.buffer.readUInt8(OFFSET.Type), typeByValue[this.buffer.readUInt8(OFFSET.Type)], this.buffer.readUInt8(OFFSET.Status), this.statusAsString(), this.buffer.readUInt16BE(OFFSET.Length), this.buffer.readUInt16BE(OFFSET.SPID), this.buffer.readUInt8(OFFSET.PacketID), this.buffer.readUInt8(OFFSET.Window));\r\n    return indent + text;\r\n  }\r\n\r\n  dataToString(indent = '') {\r\n    const BYTES_PER_GROUP = 0x04;\r\n    const CHARS_PER_GROUP = 0x08;\r\n    const BYTES_PER_LINE = 0x20;\r\n    const data = this.data();\r\n    let dataDump = '';\r\n    let chars = '';\r\n\r\n    for (let offset = 0; offset < data.length; offset++) {\r\n      if (offset % BYTES_PER_LINE === 0) {\r\n        dataDump += indent;\r\n        dataDump += (0, _sprintfJs.sprintf)('%04X  ', offset);\r\n      }\r\n\r\n      if (data[offset] < 0x20 || data[offset] > 0x7E) {\r\n        chars += '.';\r\n\r\n        if ((offset + 1) % CHARS_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\r\n          chars += ' ';\r\n        }\r\n      } else {\r\n        chars += String.fromCharCode(data[offset]);\r\n      }\r\n\r\n      if (data[offset] != null) {\r\n        dataDump += (0, _sprintfJs.sprintf)('%02X', data[offset]);\r\n      }\r\n\r\n      if ((offset + 1) % BYTES_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\r\n        dataDump += ' ';\r\n      }\r\n\r\n      if ((offset + 1) % BYTES_PER_LINE === 0) {\r\n        dataDump += '  ' + chars;\r\n        chars = '';\r\n\r\n        if (offset < data.length - 1) {\r\n          dataDump += NL;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (chars.length) {\r\n      dataDump += '  ' + chars;\r\n    }\r\n\r\n    return dataDump;\r\n  }\r\n\r\n  toString(indent = '') {\r\n    return this.headerToString(indent) + '\\n' + this.dataToString(indent + indent);\r\n  }\r\n\r\n  payloadString() {\r\n    return '';\r\n  }\r\n\r\n}\r\n\r\nexports.Packet = Packet;\r\n\r\nfunction isPacketComplete(potentialPacketBuffer) {\r\n  if (potentialPacketBuffer.length < HEADER_LENGTH) {\r\n    return false;\r\n  } else {\r\n    return potentialPacketBuffer.length >= potentialPacketBuffer.readUInt16BE(OFFSET.Length);\r\n  }\r\n}\r\n\r\nfunction packetLength(potentialPacketBuffer) {\r\n  return potentialPacketBuffer.readUInt16BE(OFFSET.Length);\r\n}"]},"metadata":{},"sourceType":"script"}
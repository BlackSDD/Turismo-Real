{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\n\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n/**\r\n * Provides information about managed service identity token credentials in an App Service environment.\r\n */\n\n\nclass MSIAppServiceTokenCredentials extends msiTokenCredentials_1.MSITokenCredentials {\n  /**\r\n   * Creates an instance of MSIAppServiceTokenCredentials.\r\n   * @param options.msiEndpoint - The local URL from which your app can request tokens.\r\n   * Unless this property is specified, any of the two environment variables `IDENTITY_ENDPOINT` or `MSI_ENDPOINT` will be used as the default value.\r\n   * @param options.msiSecret - The secret used in communication between your code and the local MSI agent.\r\n   * Unless this property is specified, any of the two environment variables `IDENTITY_SECRET` or `MSI_SECRET` will be used as the default value.\r\n   * @param options.resource - The resource uri or token audience for which the token is needed.\r\n   * For e.g. it can be:\r\n   * - resource management endpoint \"https://management.azure.com/\" (default)\r\n   * - management endpoint \"https://management.core.windows.net/\"\r\n   * @param options.msiApiVersion - The api-version of the local MSI agent. Default value is \"2017-09-01\".\r\n   * @param options.clientId - The clientId of the managed identity you would like the token for. Required, if\r\n   * your app service has user-assigned managed identities.\r\n   */\n  constructor(options) {\n    if (!options) options = {};\n    super(options);\n    options.msiEndpoint = options.msiEndpoint || process.env[\"IDENTITY_ENDPOINT\"] || process.env[\"MSI_ENDPOINT\"];\n    options.msiSecret = options.msiSecret || process.env[\"IDENTITY_SECRET\"] || process.env[\"MSI_SECRET\"];\n\n    if (!options.msiEndpoint || options.msiEndpoint && typeof options.msiEndpoint.valueOf() !== \"string\") {\n      throw new Error('Either provide \"msiEndpoint\" as a property of the \"options\" object ' + 'or set the environment variable \"IDENTITY_ENDPOINT\" or \"MSI_ENDPOINT\" and it must be of type \"string\".');\n    }\n\n    if (!options.msiSecret || options.msiSecret && typeof options.msiSecret.valueOf() !== \"string\") {\n      throw new Error('Either provide \"msiSecret\" as a property of the \"options\" object ' + 'or set the environment variable \"IDENTITY_SECRET\" or \"MSI_SECRET\" and it must be of type \"string\".');\n    }\n\n    if (!options.msiApiVersion) {\n      options.msiApiVersion = \"2017-09-01\";\n    } else if (typeof options.msiApiVersion.valueOf() !== \"string\") {\n      throw new Error(\"msiApiVersion must be a uri.\");\n    }\n\n    this.msiEndpoint = options.msiEndpoint;\n    this.msiSecret = options.msiSecret;\n    this.msiApiVersion = options.msiApiVersion;\n    this.clientId = options.clientId;\n  }\n  /**\r\n   * Prepares and sends a GET request to a service endpoint indicated by the app service, which responds with the access token.\r\n   * @returns Promise with the tokenResponse (tokenType and accessToken are the two important properties).\r\n   */\n\n\n  getToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const reqOptions = this.prepareRequestOptions();\n      const opRes = yield this._httpClient.sendRequest(reqOptions);\n\n      if (opRes.bodyAsText === undefined || opRes.bodyAsText.indexOf(\"ExceptionMessage\") !== -1) {\n        throw new Error(`MSI: Failed to retrieve a token from \"${reqOptions.url}\" with an error: ${opRes.bodyAsText}`);\n      }\n\n      const result = this.parseTokenResponse(opRes.bodyAsText);\n\n      if (!result.tokenType) {\n        throw new Error(`Invalid token response, did not find tokenType. Response body is: ${opRes.bodyAsText}`);\n      } else if (!result.accessToken) {\n        throw new Error(`Invalid token response, did not find accessToken. Response body is: ${opRes.bodyAsText}`);\n      }\n\n      return result;\n    });\n  }\n\n  prepareRequestOptions() {\n    const endpoint = this.msiEndpoint.endsWith(\"/\") ? this.msiEndpoint : `${this.msiEndpoint}/`;\n    const reqOptions = {\n      url: endpoint,\n      headers: {\n        secret: this.msiSecret\n      },\n      queryParameters: {\n        resource: this.resource,\n        \"api-version\": this.msiApiVersion,\n        clientid: this.clientId\n      },\n      method: \"GET\"\n    };\n    const webResource = new ms_rest_js_1.WebResource();\n    return webResource.prepare(reqOptions);\n  }\n\n}\n\nexports.MSIAppServiceTokenCredentials = MSIAppServiceTokenCredentials;","map":{"version":3,"sources":["../../../lib/credentials/msiAppServiceTokenCredentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\r\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\r\n/**\r\n * Provides information about managed service identity token credentials in an App Service environment.\r\n */\r\nclass MSIAppServiceTokenCredentials extends msiTokenCredentials_1.MSITokenCredentials {\r\n    /**\r\n     * Creates an instance of MSIAppServiceTokenCredentials.\r\n     * @param options.msiEndpoint - The local URL from which your app can request tokens.\r\n     * Unless this property is specified, any of the two environment variables `IDENTITY_ENDPOINT` or `MSI_ENDPOINT` will be used as the default value.\r\n     * @param options.msiSecret - The secret used in communication between your code and the local MSI agent.\r\n     * Unless this property is specified, any of the two environment variables `IDENTITY_SECRET` or `MSI_SECRET` will be used as the default value.\r\n     * @param options.resource - The resource uri or token audience for which the token is needed.\r\n     * For e.g. it can be:\r\n     * - resource management endpoint \"https://management.azure.com/\" (default)\r\n     * - management endpoint \"https://management.core.windows.net/\"\r\n     * @param options.msiApiVersion - The api-version of the local MSI agent. Default value is \"2017-09-01\".\r\n     * @param options.clientId - The clientId of the managed identity you would like the token for. Required, if\r\n     * your app service has user-assigned managed identities.\r\n     */\r\n    constructor(options) {\r\n        if (!options)\r\n            options = {};\r\n        super(options);\r\n        options.msiEndpoint =\r\n            options.msiEndpoint || process.env[\"IDENTITY_ENDPOINT\"] || process.env[\"MSI_ENDPOINT\"];\r\n        options.msiSecret =\r\n            options.msiSecret || process.env[\"IDENTITY_SECRET\"] || process.env[\"MSI_SECRET\"];\r\n        if (!options.msiEndpoint ||\r\n            (options.msiEndpoint && typeof options.msiEndpoint.valueOf() !== \"string\")) {\r\n            throw new Error('Either provide \"msiEndpoint\" as a property of the \"options\" object ' +\r\n                'or set the environment variable \"IDENTITY_ENDPOINT\" or \"MSI_ENDPOINT\" and it must be of type \"string\".');\r\n        }\r\n        if (!options.msiSecret ||\r\n            (options.msiSecret && typeof options.msiSecret.valueOf() !== \"string\")) {\r\n            throw new Error('Either provide \"msiSecret\" as a property of the \"options\" object ' +\r\n                'or set the environment variable \"IDENTITY_SECRET\" or \"MSI_SECRET\" and it must be of type \"string\".');\r\n        }\r\n        if (!options.msiApiVersion) {\r\n            options.msiApiVersion = \"2017-09-01\";\r\n        }\r\n        else if (typeof options.msiApiVersion.valueOf() !== \"string\") {\r\n            throw new Error(\"msiApiVersion must be a uri.\");\r\n        }\r\n        this.msiEndpoint = options.msiEndpoint;\r\n        this.msiSecret = options.msiSecret;\r\n        this.msiApiVersion = options.msiApiVersion;\r\n        this.clientId = options.clientId;\r\n    }\r\n    /**\r\n     * Prepares and sends a GET request to a service endpoint indicated by the app service, which responds with the access token.\r\n     * @returns Promise with the tokenResponse (tokenType and accessToken are the two important properties).\r\n     */\r\n    getToken() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const reqOptions = this.prepareRequestOptions();\r\n            const opRes = yield this._httpClient.sendRequest(reqOptions);\r\n            if (opRes.bodyAsText === undefined || opRes.bodyAsText.indexOf(\"ExceptionMessage\") !== -1) {\r\n                throw new Error(`MSI: Failed to retrieve a token from \"${reqOptions.url}\" with an error: ${opRes.bodyAsText}`);\r\n            }\r\n            const result = this.parseTokenResponse(opRes.bodyAsText);\r\n            if (!result.tokenType) {\r\n                throw new Error(`Invalid token response, did not find tokenType. Response body is: ${opRes.bodyAsText}`);\r\n            }\r\n            else if (!result.accessToken) {\r\n                throw new Error(`Invalid token response, did not find accessToken. Response body is: ${opRes.bodyAsText}`);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    prepareRequestOptions() {\r\n        const endpoint = this.msiEndpoint.endsWith(\"/\") ? this.msiEndpoint : `${this.msiEndpoint}/`;\r\n        const reqOptions = {\r\n            url: endpoint,\r\n            headers: {\r\n                secret: this.msiSecret\r\n            },\r\n            queryParameters: {\r\n                resource: this.resource,\r\n                \"api-version\": this.msiApiVersion,\r\n                clientid: this.clientId\r\n            },\r\n            method: \"GET\"\r\n        };\r\n        const webResource = new ms_rest_js_1.WebResource();\r\n        return webResource.prepare(reqOptions);\r\n    }\r\n}\r\nexports.MSIAppServiceTokenCredentials = MSIAppServiceTokenCredentials;\r\n//# sourceMappingURL=msiAppServiceTokenCredentials.js.map"]},"metadata":{},"sourceType":"script"}
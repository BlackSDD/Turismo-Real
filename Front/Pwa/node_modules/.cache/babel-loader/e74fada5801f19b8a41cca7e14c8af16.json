{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF]);\nconst NText = {\n  id: 0x63,\n  type: 'NTEXT',\n  name: 'NText',\n  hasTableName: true,\n  declaration: function () {\n    return 'ntext';\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return -1;\n    }\n  },\n\n  generateTypeInfo(parameter, _options) {\n    const buffer = Buffer.alloc(10);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeInt32LE(parameter.length, 1); // TODO: Collation handling\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32LE(Buffer.byteLength(parameter.value, 'ucs2'), 0);\n    return buffer;\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield Buffer.from(parameter.value.toString(), 'ucs2');\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        throw new TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = NText;\nexports.default = _default;\nmodule.exports = NText;","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/node_modules/tedious/lib/data-types/ntext.js"],"names":["Object","defineProperty","exports","value","default","NULL_LENGTH","Buffer","from","NText","id","type","name","hasTableName","declaration","resolveLength","parameter","length","generateTypeInfo","_options","buffer","alloc","writeUInt8","writeInt32LE","generateParameterLength","options","byteLength","generateParameterData","toString","validate","TypeError","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAZ,CAApB;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,EAAE,EAAE,IADQ;AAEZC,EAAAA,IAAI,EAAE,OAFM;AAGZC,EAAAA,IAAI,EAAE,OAHM;AAIZC,EAAAA,YAAY,EAAE,IAJF;AAKZC,EAAAA,WAAW,EAAE,YAAY;AACvB,WAAO,OAAP;AACD,GAPW;AAQZC,EAAAA,aAAa,EAAE,UAAUC,SAAV,EAAqB;AAClC,UAAMZ,KAAK,GAAGY,SAAS,CAACZ,KAAxB,CADkC,CACH;;AAE/B,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAOA,KAAK,CAACa,MAAb;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GAhBW;;AAkBZC,EAAAA,gBAAgB,CAACF,SAAD,EAAYG,QAAZ,EAAsB;AACpC,UAAMC,MAAM,GAAGb,MAAM,CAACc,KAAP,CAAa,EAAb,CAAf;AACAD,IAAAA,MAAM,CAACE,UAAP,CAAkB,KAAKZ,EAAvB,EAA2B,CAA3B;AACAU,IAAAA,MAAM,CAACG,YAAP,CAAoBP,SAAS,CAACC,MAA9B,EAAsC,CAAtC,EAHoC,CAGM;;AAE1C,WAAOG,MAAP;AACD,GAxBW;;AA0BZI,EAAAA,uBAAuB,CAACR,SAAD,EAAYS,OAAZ,EAAqB;AAC1C,QAAIT,SAAS,CAACZ,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,aAAOE,WAAP;AACD;;AAED,UAAMc,MAAM,GAAGb,MAAM,CAACc,KAAP,CAAa,CAAb,CAAf;AACAD,IAAAA,MAAM,CAACG,YAAP,CAAoBhB,MAAM,CAACmB,UAAP,CAAkBV,SAAS,CAACZ,KAA5B,EAAmC,MAAnC,CAApB,EAAgE,CAAhE;AACA,WAAOgB,MAAP;AACD,GAlCW;;AAoCZO,EAAAA,qBAAqB,EAAE,WAAWX,SAAX,EAAsBS,OAAtB,EAA+B;AACpD,QAAIT,SAAS,CAACZ,KAAV,IAAmB,IAAvB,EAA6B;AAC3B;AACD;;AAED,UAAMG,MAAM,CAACC,IAAP,CAAYQ,SAAS,CAACZ,KAAV,CAAgBwB,QAAhB,EAAZ,EAAwC,MAAxC,CAAN;AACD,GA1CW;AA2CZC,EAAAA,QAAQ,EAAE,UAAUzB,KAAV,EAAiB;AACzB,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAI,OAAOA,KAAK,CAACwB,QAAb,KAA0B,UAA9B,EAA0C;AACxC,cAAM,IAAIE,SAAJ,CAAc,iBAAd,CAAN;AACD;;AAED1B,MAAAA,KAAK,GAAGA,KAAK,CAACwB,QAAN,EAAR;AACD;;AAED,WAAOxB,KAAP;AACD;AAzDW,CAAd;AA2DA,IAAI2B,QAAQ,GAAGtB,KAAf;AACAN,OAAO,CAACE,OAAR,GAAkB0B,QAAlB;AACAC,MAAM,CAAC7B,OAAP,GAAiBM,KAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF]);\nconst NText = {\n  id: 0x63,\n  type: 'NTEXT',\n  name: 'NText',\n  hasTableName: true,\n  declaration: function () {\n    return 'ntext';\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return -1;\n    }\n  },\n\n  generateTypeInfo(parameter, _options) {\n    const buffer = Buffer.alloc(10);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeInt32LE(parameter.length, 1); // TODO: Collation handling\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32LE(Buffer.byteLength(parameter.value, 'ucs2'), 0);\n    return buffer;\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield Buffer.from(parameter.value.toString(), 'ucs2');\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        throw new TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = NText;\nexports.default = _default;\nmodule.exports = NText;"]},"metadata":{},"sourceType":"script"}
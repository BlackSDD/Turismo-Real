{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar debug = require('debug')('mssql:base');\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar _require2 = require('../utils'),\n    IDS = _require2.IDS,\n    objectHasProperty = _require2.objectHasProperty;\n\nvar globalConnection = require('../global-connection');\n\nvar _require3 = require('../error'),\n    TransactionError = _require3.TransactionError,\n    PreparedStatementError = _require3.PreparedStatementError;\n\nvar shared = require('../shared');\n\nvar _require4 = require('../datatypes'),\n    TYPES = _require4.TYPES,\n    declare = _require4.declare;\n/**\r\n * Class PreparedStatement.\r\n *\r\n * IMPORTANT: Rememeber that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\r\n *\r\n * @property {String} statement Prepared SQL statement.\r\n */\n\n\nvar PreparedStatement = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(PreparedStatement, _EventEmitter);\n\n  var _super = _createSuper(PreparedStatement);\n\n  /**\r\n   * Creates a new Prepared Statement.\r\n   *\r\n   * @param {ConnectionPool|Transaction} [holder]\r\n   */\n  function PreparedStatement(parent) {\n    var _this;\n\n    _classCallCheck(this, PreparedStatement);\n\n    _this = _super.call(this);\n    IDS.add(_assertThisInitialized(_this), 'PreparedStatement');\n    debug('ps(%d): created', IDS.get(_assertThisInitialized(_this)));\n    _this.parent = parent || globalConnection.pool;\n    _this._handle = 0;\n    _this.prepared = false;\n    _this.parameters = {};\n    return _this;\n  }\n\n  _createClass(PreparedStatement, [{\n    key: \"config\",\n    get: function get() {\n      return this.parent.config;\n    }\n  }, {\n    key: \"connected\",\n    get: function get() {\n      return this.parent.connected;\n    }\n    /**\r\n     * Acquire connection from connection pool.\r\n     *\r\n     * @param {Request} request Request.\r\n     * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n     * @return {PreparedStatement|Promise}\r\n     */\n\n  }, {\n    key: \"acquire\",\n    value: function acquire(request, callback) {\n      if (!this._acquiredConnection) {\n        setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'));\n        return this;\n      }\n\n      if (this._activeRequest) {\n        setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'));\n        return this;\n      }\n\n      this._activeRequest = request;\n      setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig);\n      return this;\n    }\n    /**\r\n     * Release connection back to the pool.\r\n     *\r\n     * @param {Connection} connection Previously acquired connection.\r\n     * @return {PreparedStatement}\r\n     */\n\n  }, {\n    key: \"release\",\n    value: function release(connection) {\n      if (connection === this._acquiredConnection) {\n        this._activeRequest = null;\n      }\n\n      return this;\n    }\n    /**\r\n     * Add an input parameter to the prepared statement.\r\n     *\r\n     * @param {String} name Name of the input parameter without @ char.\r\n     * @param {*} type SQL data type of input parameter.\r\n     * @return {PreparedStatement}\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(name, type) {\n      if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n        throw new PreparedStatementError(\"SQL injection warning for param '\".concat(name, \"'\"), 'EINJECT');\n      }\n\n      if (arguments.length < 2) {\n        throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS');\n      }\n\n      if (type instanceof Function) {\n        type = type();\n      }\n\n      if (objectHasProperty(this.parameters, name)) {\n        throw new PreparedStatementError(\"The parameter name \".concat(name, \" has already been declared. Parameter names must be unique\"), 'EDUPEPARAM');\n      }\n\n      this.parameters[name] = {\n        name: name,\n        type: type.type,\n        io: 1,\n        length: type.length,\n        scale: type.scale,\n        precision: type.precision,\n        tvpType: type.tvpType\n      };\n      return this;\n    }\n    /**\r\n     * Replace an input parameter on the request.\r\n     *\r\n     * @param {String} name Name of the input parameter without @ char.\r\n     * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n     * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n     * @return {Request}\r\n     */\n\n  }, {\n    key: \"replaceInput\",\n    value: function replaceInput(name, type, value) {\n      delete this.parameters[name];\n      return this.input(name, type, value);\n    }\n    /**\r\n     * Add an output parameter to the prepared statement.\r\n     *\r\n     * @param {String} name Name of the output parameter without @ char.\r\n     * @param {*} type SQL data type of output parameter.\r\n     * @return {PreparedStatement}\r\n     */\n\n  }, {\n    key: \"output\",\n    value: function output(name, type) {\n      if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n        throw new PreparedStatementError(\"SQL injection warning for param '\".concat(name, \"'\"), 'EINJECT');\n      }\n\n      if (arguments.length < 2) {\n        throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS');\n      }\n\n      if (type instanceof Function) type = type();\n\n      if (objectHasProperty(this.parameters, name)) {\n        throw new PreparedStatementError(\"The parameter name \".concat(name, \" has already been declared. Parameter names must be unique\"), 'EDUPEPARAM');\n      }\n\n      this.parameters[name] = {\n        name: name,\n        type: type.type,\n        io: 2,\n        length: type.length,\n        scale: type.scale,\n        precision: type.precision\n      };\n      return this;\n    }\n    /**\r\n     * Replace an output parameter on the request.\r\n     *\r\n     * @param {String} name Name of the output parameter without @ char.\r\n     * @param {*} type SQL data type of output parameter.\r\n     * @return {PreparedStatement}\r\n     */\n\n  }, {\n    key: \"replaceOutput\",\n    value: function replaceOutput(name, type) {\n      delete this.parameters[name];\n      return this.output(name, type);\n    }\n    /**\r\n     * Prepare a statement.\r\n     *\r\n     * @param {String} statement SQL statement to prepare.\r\n     * @param {basicCallback} [callback] A callback which is called after preparation has completed, or an error has occurred. If omited, method returns Promise.\r\n     * @return {PreparedStatement|Promise}\r\n     */\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(statement, callback) {\n      var _this2 = this;\n\n      if (typeof callback === 'function') {\n        this._prepare(statement, callback);\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this2._prepare(statement, function (err) {\n          if (err) return reject(err);\n          resolve(_this2);\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {String} statement\r\n     * @param {basicCallback} callback\r\n     */\n\n  }, {\n    key: \"_prepare\",\n    value: function _prepare(statement, callback) {\n      var _this3 = this;\n\n      debug('ps(%d): prepare', IDS.get(this));\n\n      if (typeof statement === 'function') {\n        callback = statement;\n        statement = undefined;\n      }\n\n      if (this.prepared) {\n        return setImmediate(callback, new PreparedStatementError('Statement is already prepared.', 'EALREADYPREPARED'));\n      }\n\n      this.statement = statement || this.statement;\n      this.parent.acquire(this, function (err, connection, config) {\n        if (err) return callback(err);\n        _this3._acquiredConnection = connection;\n        _this3._acquiredConfig = config;\n        var req = new shared.driver.Request(_this3);\n        req.stream = false;\n        req.output('handle', TYPES.Int);\n        req.input('params', TYPES.NVarChar, function () {\n          var result = [];\n\n          for (var name in _this3.parameters) {\n            if (!objectHasProperty(_this3.parameters, name)) {\n              continue;\n            }\n\n            var param = _this3.parameters[name];\n            result.push(\"@\".concat(name, \" \").concat(declare(param.type, param)).concat(param.io === 2 ? ' output' : ''));\n          }\n\n          return result;\n        }().join(','));\n        req.input('stmt', TYPES.NVarChar, _this3.statement);\n        req.execute('sp_prepare', function (err, result) {\n          if (err) {\n            _this3.parent.release(_this3._acquiredConnection);\n\n            _this3._acquiredConnection = null;\n            _this3._acquiredConfig = null;\n            return callback(err);\n          }\n\n          debug('ps(%d): prepared', IDS.get(_this3));\n          _this3._handle = result.output.handle;\n          _this3.prepared = true;\n          callback(null);\n        });\n      });\n    }\n    /**\r\n     * Execute a prepared statement.\r\n     *\r\n     * @param {Object} values An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\r\n     * @param {basicCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Request|Promise}\r\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(values, callback) {\n      var _this4 = this;\n\n      if (this.stream || typeof callback === 'function') {\n        return this._execute(values, callback);\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this4._execute(values, function (err, recordset) {\n          if (err) return reject(err);\n          resolve(recordset);\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {Object} values\r\n     * @param {basicCallback} callback\r\n     */\n\n  }, {\n    key: \"_execute\",\n    value: function _execute(values, callback) {\n      var req = new shared.driver.Request(this);\n      req.stream = this.stream;\n      req.arrayRowMode = this.arrayRowMode;\n      req.input('handle', TYPES.Int, this._handle); // copy parameters with new values\n\n      for (var name in this.parameters) {\n        if (!objectHasProperty(this.parameters, name)) {\n          continue;\n        }\n\n        var param = this.parameters[name];\n        req.parameters[name] = {\n          name: name,\n          type: param.type,\n          io: param.io,\n          value: values[name],\n          length: param.length,\n          scale: param.scale,\n          precision: param.precision\n        };\n      }\n\n      req.execute('sp_execute', function (err, result) {\n        if (err) return callback(err);\n        callback(null, result);\n      });\n      return req;\n    }\n    /**\r\n     * Unprepare a prepared statement.\r\n     *\r\n     * @param {basicCallback} [callback] A callback which is called after unpreparation has completed, or an error has occurred. If omited, method returns Promise.\r\n     * @return {PreparedStatement|Promise}\r\n     */\n\n  }, {\n    key: \"unprepare\",\n    value: function unprepare(callback) {\n      var _this5 = this;\n\n      if (typeof callback === 'function') {\n        this._unprepare(callback);\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this5._unprepare(function (err) {\n          if (err) return reject(err);\n          resolve();\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {basicCallback} callback\r\n     */\n\n  }, {\n    key: \"_unprepare\",\n    value: function _unprepare(callback) {\n      var _this6 = this;\n\n      debug('ps(%d): unprepare', IDS.get(this));\n\n      if (!this.prepared) {\n        return setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'));\n      }\n\n      if (this._activeRequest) {\n        return setImmediate(callback, new TransactionError(\"Can't unprepare the statement. There is a request in progress.\", 'EREQINPROG'));\n      }\n\n      var req = new shared.driver.Request(this);\n      req.stream = false;\n      req.input('handle', TYPES.Int, this._handle);\n      req.execute('sp_unprepare', function (err) {\n        if (err) return callback(err);\n\n        _this6.parent.release(_this6._acquiredConnection);\n\n        _this6._acquiredConnection = null;\n        _this6._acquiredConfig = null;\n        _this6._handle = 0;\n        _this6.prepared = false;\n        debug('ps(%d): unprepared', IDS.get(_this6));\n        return callback(null);\n      });\n    }\n  }]);\n\n  return PreparedStatement;\n}(EventEmitter);\n\nmodule.exports = PreparedStatement;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/lib/base/prepared-statement.js"],"names":["debug","require","EventEmitter","IDS","objectHasProperty","globalConnection","TransactionError","PreparedStatementError","shared","TYPES","declare","PreparedStatement","parent","add","get","pool","_handle","prepared","parameters","config","connected","request","callback","_acquiredConnection","setImmediate","_activeRequest","_acquiredConfig","connection","name","type","test","arguments","length","Function","io","scale","precision","tvpType","value","input","output","statement","_prepare","Promise","resolve","reject","err","undefined","acquire","req","driver","Request","stream","Int","NVarChar","result","param","push","join","execute","release","handle","values","_execute","recordset","arrayRowMode","_unprepare","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst debug = require('debug')('mssql:base')\r\nconst { EventEmitter } = require('events')\r\nconst { IDS, objectHasProperty } = require('../utils')\r\nconst globalConnection = require('../global-connection')\r\nconst { TransactionError, PreparedStatementError } = require('../error')\r\nconst shared = require('../shared')\r\nconst { TYPES, declare } = require('../datatypes')\r\n\r\n/**\r\n * Class PreparedStatement.\r\n *\r\n * IMPORTANT: Rememeber that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\r\n *\r\n * @property {String} statement Prepared SQL statement.\r\n */\r\n\r\nclass PreparedStatement extends EventEmitter {\r\n  /**\r\n   * Creates a new Prepared Statement.\r\n   *\r\n   * @param {ConnectionPool|Transaction} [holder]\r\n   */\r\n\r\n  constructor (parent) {\r\n    super()\r\n\r\n    IDS.add(this, 'PreparedStatement')\r\n    debug('ps(%d): created', IDS.get(this))\r\n\r\n    this.parent = parent || globalConnection.pool\r\n    this._handle = 0\r\n    this.prepared = false\r\n    this.parameters = {}\r\n  }\r\n\r\n  get config () {\r\n    return this.parent.config\r\n  }\r\n\r\n  get connected () {\r\n    return this.parent.connected\r\n  }\r\n\r\n  /**\r\n   * Acquire connection from connection pool.\r\n   *\r\n   * @param {Request} request Request.\r\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n   * @return {PreparedStatement|Promise}\r\n   */\r\n\r\n  acquire (request, callback) {\r\n    if (!this._acquiredConnection) {\r\n      setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'))\r\n      return this\r\n    }\r\n\r\n    if (this._activeRequest) {\r\n      setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'))\r\n      return this\r\n    }\r\n\r\n    this._activeRequest = request\r\n    setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Release connection back to the pool.\r\n   *\r\n   * @param {Connection} connection Previously acquired connection.\r\n   * @return {PreparedStatement}\r\n   */\r\n\r\n  release (connection) {\r\n    if (connection === this._acquiredConnection) {\r\n      this._activeRequest = null\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Add an input parameter to the prepared statement.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} type SQL data type of input parameter.\r\n   * @return {PreparedStatement}\r\n   */\r\n\r\n  input (name, type) {\r\n    if ((/(--| |\\/\\*|\\*\\/|')/).test(name)) {\r\n      throw new PreparedStatementError(`SQL injection warning for param '${name}'`, 'EINJECT')\r\n    }\r\n\r\n    if (arguments.length < 2) {\r\n      throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS')\r\n    }\r\n\r\n    if (type instanceof Function) {\r\n      type = type()\r\n    }\r\n\r\n    if (objectHasProperty(this.parameters, name)) {\r\n      throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\r\n    }\r\n\r\n    this.parameters[name] = {\r\n      name,\r\n      type: type.type,\r\n      io: 1,\r\n      length: type.length,\r\n      scale: type.scale,\r\n      precision: type.precision,\r\n      tvpType: type.tvpType\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Replace an input parameter on the request.\r\n   *\r\n   * @param {String} name Name of the input parameter without @ char.\r\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\r\n   * @return {Request}\r\n   */\r\n\r\n  replaceInput (name, type, value) {\r\n    delete this.parameters[name]\r\n\r\n    return this.input(name, type, value)\r\n  }\r\n\r\n  /**\r\n   * Add an output parameter to the prepared statement.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @return {PreparedStatement}\r\n   */\r\n\r\n  output (name, type) {\r\n    if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\r\n      throw new PreparedStatementError(`SQL injection warning for param '${name}'`, 'EINJECT')\r\n    }\r\n\r\n    if (arguments.length < 2) {\r\n      throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS')\r\n    }\r\n\r\n    if (type instanceof Function) type = type()\r\n\r\n    if (objectHasProperty(this.parameters, name)) {\r\n      throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\r\n    }\r\n\r\n    this.parameters[name] = {\r\n      name,\r\n      type: type.type,\r\n      io: 2,\r\n      length: type.length,\r\n      scale: type.scale,\r\n      precision: type.precision\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Replace an output parameter on the request.\r\n   *\r\n   * @param {String} name Name of the output parameter without @ char.\r\n   * @param {*} type SQL data type of output parameter.\r\n   * @return {PreparedStatement}\r\n   */\r\n\r\n  replaceOutput (name, type) {\r\n    delete this.parameters[name]\r\n\r\n    return this.output(name, type)\r\n  }\r\n\r\n  /**\r\n   * Prepare a statement.\r\n   *\r\n   * @param {String} statement SQL statement to prepare.\r\n   * @param {basicCallback} [callback] A callback which is called after preparation has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {PreparedStatement|Promise}\r\n   */\r\n\r\n  prepare (statement, callback) {\r\n    if (typeof callback === 'function') {\r\n      this._prepare(statement, callback)\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._prepare(statement, err => {\r\n        if (err) return reject(err)\r\n        resolve(this)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} statement\r\n   * @param {basicCallback} callback\r\n   */\r\n\r\n  _prepare (statement, callback) {\r\n    debug('ps(%d): prepare', IDS.get(this))\r\n\r\n    if (typeof statement === 'function') {\r\n      callback = statement\r\n      statement = undefined\r\n    }\r\n\r\n    if (this.prepared) {\r\n      return setImmediate(callback, new PreparedStatementError('Statement is already prepared.', 'EALREADYPREPARED'))\r\n    }\r\n\r\n    this.statement = statement || this.statement\r\n\r\n    this.parent.acquire(this, (err, connection, config) => {\r\n      if (err) return callback(err)\r\n\r\n      this._acquiredConnection = connection\r\n      this._acquiredConfig = config\r\n\r\n      const req = new shared.driver.Request(this)\r\n      req.stream = false\r\n      req.output('handle', TYPES.Int)\r\n      req.input('params', TYPES.NVarChar, ((() => {\r\n        const result = []\r\n        for (const name in this.parameters) {\r\n          if (!objectHasProperty(this.parameters, name)) {\r\n            continue\r\n          }\r\n          const param = this.parameters[name]\r\n          result.push(`@${name} ${declare(param.type, param)}${param.io === 2 ? ' output' : ''}`)\r\n        }\r\n        return result\r\n      })()).join(','))\r\n      req.input('stmt', TYPES.NVarChar, this.statement)\r\n      req.execute('sp_prepare', (err, result) => {\r\n        if (err) {\r\n          this.parent.release(this._acquiredConnection)\r\n          this._acquiredConnection = null\r\n          this._acquiredConfig = null\r\n\r\n          return callback(err)\r\n        }\r\n\r\n        debug('ps(%d): prepared', IDS.get(this))\r\n\r\n        this._handle = result.output.handle\r\n        this.prepared = true\r\n\r\n        callback(null)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Execute a prepared statement.\r\n   *\r\n   * @param {Object} values An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\r\n   * @param {basicCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  execute (values, callback) {\r\n    if (this.stream || (typeof callback === 'function')) {\r\n      return this._execute(values, callback)\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._execute(values, (err, recordset) => {\r\n        if (err) return reject(err)\r\n        resolve(recordset)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Object} values\r\n   * @param {basicCallback} callback\r\n   */\r\n\r\n  _execute (values, callback) {\r\n    const req = new shared.driver.Request(this)\r\n    req.stream = this.stream\r\n    req.arrayRowMode = this.arrayRowMode\r\n    req.input('handle', TYPES.Int, this._handle)\r\n\r\n    // copy parameters with new values\r\n    for (const name in this.parameters) {\r\n      if (!objectHasProperty(this.parameters, name)) {\r\n        continue\r\n      }\r\n      const param = this.parameters[name]\r\n      req.parameters[name] = {\r\n        name,\r\n        type: param.type,\r\n        io: param.io,\r\n        value: values[name],\r\n        length: param.length,\r\n        scale: param.scale,\r\n        precision: param.precision\r\n      }\r\n    }\r\n\r\n    req.execute('sp_execute', (err, result) => {\r\n      if (err) return callback(err)\r\n\r\n      callback(null, result)\r\n    })\r\n\r\n    return req\r\n  }\r\n\r\n  /**\r\n   * Unprepare a prepared statement.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after unpreparation has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {PreparedStatement|Promise}\r\n   */\r\n\r\n  unprepare (callback) {\r\n    if (typeof callback === 'function') {\r\n      this._unprepare(callback)\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._unprepare(err => {\r\n        if (err) return reject(err)\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {basicCallback} callback\r\n   */\r\n\r\n  _unprepare (callback) {\r\n    debug('ps(%d): unprepare', IDS.get(this))\r\n\r\n    if (!this.prepared) {\r\n      return setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'))\r\n    }\r\n\r\n    if (this._activeRequest) {\r\n      return setImmediate(callback, new TransactionError(\"Can't unprepare the statement. There is a request in progress.\", 'EREQINPROG'))\r\n    }\r\n\r\n    const req = new shared.driver.Request(this)\r\n    req.stream = false\r\n    req.input('handle', TYPES.Int, this._handle)\r\n    req.execute('sp_unprepare', err => {\r\n      if (err) return callback(err)\r\n\r\n      this.parent.release(this._acquiredConnection)\r\n      this._acquiredConnection = null\r\n      this._acquiredConfig = null\r\n      this._handle = 0\r\n      this.prepared = false\r\n\r\n      debug('ps(%d): unprepared', IDS.get(this))\r\n\r\n      return callback(null)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = PreparedStatement\r\n"]},"metadata":{},"sourceType":"script"}
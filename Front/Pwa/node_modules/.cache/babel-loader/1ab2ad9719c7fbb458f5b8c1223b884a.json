{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\r\n * Encodes a string in base64 format.\r\n * @param value the string to encode\r\n */\nexport function encodeString(value) {\n  return btoa(value);\n}\n/**\r\n * Encodes a byte array in base64 format.\r\n * @param value the Uint8Aray to encode\r\n */\n\nexport function encodeByteArray(value) {\n  var str = \"\";\n\n  for (var i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n\n  return btoa(str);\n}\n/**\r\n * Decodes a base64 string into a byte array.\r\n * @param value the base64 string to decode\r\n */\n\nexport function decodeString(value) {\n  var byteString = atob(value);\n  var arr = new Uint8Array(byteString.length);\n\n  for (var i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n\n  return arr;\n}","map":{"version":3,"sources":["../../../lib/util/base64.browser.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA;;;AAGG;AACH,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAoC;AACxC,SAAO,IAAI,CAAC,KAAD,CAAX;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,eAAV,CAA0B,KAA1B,EAA2C;AAC/C,MAAI,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,IAAA,GAAG,IAAI,MAAM,CAAC,YAAP,CAAoB,KAAK,CAAC,CAAD,CAAzB,CAAP;AACD;;AACD,SAAO,IAAI,CAAC,GAAD,CAAX;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAoC;AACxC,MAAM,UAAU,GAAG,IAAI,CAAC,KAAD,CAAvB;AACA,MAAM,GAAG,GAAG,IAAI,UAAJ,CAAe,UAAU,CAAC,MAA1B,CAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAAU,CAAC,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,UAAU,CAAC,UAAX,CAAsB,CAAtB,CAAT;AACD;;AACD,SAAO,GAAP;AACD","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\n/**\r\n * Encodes a string in base64 format.\r\n * @param value the string to encode\r\n */\r\nexport function encodeString(value) {\r\n    return btoa(value);\r\n}\r\n/**\r\n * Encodes a byte array in base64 format.\r\n * @param value the Uint8Aray to encode\r\n */\r\nexport function encodeByteArray(value) {\r\n    var str = \"\";\r\n    for (var i = 0; i < value.length; i++) {\r\n        str += String.fromCharCode(value[i]);\r\n    }\r\n    return btoa(str);\r\n}\r\n/**\r\n * Decodes a base64 string into a byte array.\r\n * @param value the base64 string to decode\r\n */\r\nexport function decodeString(value) {\r\n    var byteString = atob(value);\r\n    var arr = new Uint8Array(byteString.length);\r\n    for (var i = 0; i < byteString.length; i++) {\r\n        arr[i] = byteString.charCodeAt(i);\r\n    }\r\n    return arr;\r\n}\r\n//# sourceMappingURL=base64.browser.js.map"]},"metadata":{},"sourceType":"module"}
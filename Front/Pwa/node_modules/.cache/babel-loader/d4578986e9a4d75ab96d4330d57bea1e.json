{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkLoadPayload = void 0;\n\nvar _errors = require(\"./errors\");\n\nvar _Symbol$asyncIterator;\n\n_Symbol$asyncIterator = Symbol.asyncIterator;\n\nvar BulkLoadPayload = /*#__PURE__*/function () {\n  function BulkLoadPayload(bulkLoad) {\n    var _this = this;\n\n    _classCallCheck(this, BulkLoadPayload);\n\n    this.bulkLoad = void 0;\n    this.iterator = void 0;\n    this.bulkLoad = bulkLoad; // We need to grab the iterator here so that `error` event handlers are set up\n    // as early as possible (and are not potentially lost).\n\n    this.iterator = this.bulkLoad.rowToPacketTransform[Symbol.asyncIterator]();\n    this.bulkLoad.rowToPacketTransform.once('finish', function () {\n      _this.bulkLoad.removeListener('cancel', onCancel);\n    });\n    var onCancel;\n\n    if (this.bulkLoad.streamingMode) {\n      onCancel = function onCancel() {\n        _this.bulkLoad.rowToPacketTransform.destroy(new _errors.RequestError('Canceled.', 'ECANCEL'));\n      };\n    } else {\n      onCancel = function onCancel() {\n        _this.bulkLoad.rowToPacketTransform.destroy();\n      };\n    }\n\n    this.bulkLoad.once('cancel', onCancel);\n  }\n\n  _createClass(BulkLoadPayload, [{\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this.iterator;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return indent + 'BulkLoad';\n    }\n  }]);\n\n  return BulkLoadPayload;\n}();\n\nexports.BulkLoadPayload = BulkLoadPayload;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/bulk-load-payload.js"],"names":["Object","defineProperty","exports","value","BulkLoadPayload","_errors","require","_Symbol$asyncIterator","Symbol","asyncIterator","bulkLoad","iterator","rowToPacketTransform","once","removeListener","onCancel","streamingMode","destroy","RequestError","indent"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAIC,qBAAJ;;AAEAA,qBAAqB,GAAGC,MAAM,CAACC,aAA/B;;IAEML,e;AACJ,2BAAYM,QAAZ,EAAsB;AAAA;;AAAA;;AACpB,SAAKA,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKC,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKD,QAAL,GAAgBA,QAAhB,CAHoB,CAGM;AAC1B;;AAEA,SAAKC,QAAL,GAAgB,KAAKD,QAAL,CAAcE,oBAAd,CAAmCJ,MAAM,CAACC,aAA1C,GAAhB;AACA,SAAKC,QAAL,CAAcE,oBAAd,CAAmCC,IAAnC,CAAwC,QAAxC,EAAkD,YAAM;AACtD,MAAA,KAAI,CAACH,QAAL,CAAcI,cAAd,CAA6B,QAA7B,EAAuCC,QAAvC;AACD,KAFD;AAGA,QAAIA,QAAJ;;AAEA,QAAI,KAAKL,QAAL,CAAcM,aAAlB,EAAiC;AAC/BD,MAAAA,QAAQ,GAAG,oBAAM;AACf,QAAA,KAAI,CAACL,QAAL,CAAcE,oBAAd,CAAmCK,OAAnC,CAA2C,IAAIZ,OAAO,CAACa,YAAZ,CAAyB,WAAzB,EAAsC,SAAtC,CAA3C;AACD,OAFD;AAGD,KAJD,MAIO;AACLH,MAAAA,QAAQ,GAAG,oBAAM;AACf,QAAA,KAAI,CAACL,QAAL,CAAcE,oBAAd,CAAmCK,OAAnC;AACD,OAFD;AAGD;;AAED,SAAKP,QAAL,CAAcG,IAAd,CAAmB,QAAnB,EAA6BE,QAA7B;AACD;;;SAEAR,qB;WAAD,iBAA0B;AACxB,aAAO,KAAKI,QAAZ;AACD;;;WAED,oBAAsB;AAAA,UAAbQ,MAAa,uEAAJ,EAAI;AACpB,aAAOA,MAAM,GAAG,UAAhB;AACD;;;;;;AAIHjB,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.BulkLoadPayload = void 0;\r\n\r\nvar _errors = require(\"./errors\");\r\n\r\nlet _Symbol$asyncIterator;\r\n\r\n_Symbol$asyncIterator = Symbol.asyncIterator;\r\n\r\nclass BulkLoadPayload {\r\n  constructor(bulkLoad) {\r\n    this.bulkLoad = void 0;\r\n    this.iterator = void 0;\r\n    this.bulkLoad = bulkLoad; // We need to grab the iterator here so that `error` event handlers are set up\r\n    // as early as possible (and are not potentially lost).\r\n\r\n    this.iterator = this.bulkLoad.rowToPacketTransform[Symbol.asyncIterator]();\r\n    this.bulkLoad.rowToPacketTransform.once('finish', () => {\r\n      this.bulkLoad.removeListener('cancel', onCancel);\r\n    });\r\n    let onCancel;\r\n\r\n    if (this.bulkLoad.streamingMode) {\r\n      onCancel = () => {\r\n        this.bulkLoad.rowToPacketTransform.destroy(new _errors.RequestError('Canceled.', 'ECANCEL'));\r\n      };\r\n    } else {\r\n      onCancel = () => {\r\n        this.bulkLoad.rowToPacketTransform.destroy();\r\n      };\r\n    }\r\n\r\n    this.bulkLoad.once('cancel', onCancel);\r\n  }\r\n\r\n  [_Symbol$asyncIterator]() {\r\n    return this.iterator;\r\n  }\r\n\r\n  toString(indent = '') {\r\n    return indent + 'BulkLoad';\r\n  }\r\n\r\n}\r\n\r\nexports.BulkLoadPayload = BulkLoadPayload;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { __extends } from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function logPolicy(logger) {\n  if (logger === void 0) {\n    logger = console.log;\n  }\n\n  return {\n    create: function create(nextPolicy, options) {\n      return new LogPolicy(nextPolicy, options, logger);\n    }\n  };\n}\n\nvar LogPolicy =\n/** @class */\nfunction (_super) {\n  __extends(LogPolicy, _super);\n\n  function LogPolicy(nextPolicy, options, logger) {\n    if (logger === void 0) {\n      logger = console.log;\n    }\n\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.logger = logger;\n    return _this;\n  }\n\n  LogPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    return this._nextPolicy.sendRequest(request).then(function (response) {\n      return logResponse(_this, response);\n    });\n  };\n\n  return LogPolicy;\n}(BaseRequestPolicy);\n\nexport { LogPolicy };\n\nfunction logResponse(policy, response) {\n  policy.logger(\">> Request: \" + JSON.stringify(response.request, undefined, 2));\n  policy.logger(\">> Response status code: \" + response.status);\n  var responseBody = response.bodyAsText;\n  policy.logger(\">> Body: \" + responseBody);\n  return Promise.resolve(response);\n}","map":{"version":3,"sources":["../../../lib/policies/logPolicy.ts"],"names":[],"mappings":"AAAA;AACA;;AAIA,SACE,iBADF,QAKO,iBALP;AAOA,OAAM,SAAU,SAAV,CAAoB,MAApB,EAA6C;AAAzB,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAc,OAAO,CAAC,GAAtB;AAAyB;;AACjD,SAAO;AACL,IAAA,MAAM,EAAE,gBAAC,UAAD,EAA4B,OAA5B,EAA6D;AACnE,aAAO,IAAI,SAAJ,CAAc,UAAd,EAA0B,OAA1B,EAAmC,MAAnC,CAAP;AACD;AAHI,GAAP;AAKD;;AAED,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;;AAG7B,WAAA,SAAA,CACE,UADF,EAEE,OAFF,EAGE,MAHF,EAG2B;AAAzB,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAc,OAAO,CAAC,GAAtB;AAAyB;;AAH3B,QAAA,KAAA,GAKE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAN,EAAkB,OAAlB,KAA0B,IAL5B;;AAME,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;;AACD;;AAEM,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,OAAnB,EAA2C;AAA3C,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,EAAsC,IAAtC,CAA2C,UAAC,QAAD,EAAS;AAAK,aAAA,WAAW,CAAC,KAAD,EAAX,QAAW,CAAX;AAA2B,KAApF,CAAP;AACD,GAFM;;AAGT,SAAA,SAAA;AAAC,CAfD,CAA+B,iBAA/B,CAAA;;;;AAiBA,SAAS,WAAT,CACE,MADF,EAEE,QAFF,EAEiC;AAE/B,EAAA,MAAM,CAAC,MAAP,CAAc,iBAAe,IAAI,CAAC,SAAL,CAAe,QAAQ,CAAC,OAAxB,EAAiC,SAAjC,EAA4C,CAA5C,CAA7B;AACA,EAAA,MAAM,CAAC,MAAP,CAAc,8BAA4B,QAAQ,CAAC,MAAnD;AACA,MAAM,YAAY,GAAG,QAAQ,CAAC,UAA9B;AACA,EAAA,MAAM,CAAC,MAAP,CAAc,cAAY,YAA1B;AACA,SAAO,OAAO,CAAC,OAAR,CAAgB,QAAhB,CAAP;AACD","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nimport { __extends } from \"tslib\";\r\nimport { BaseRequestPolicy, } from \"./requestPolicy\";\r\nexport function logPolicy(logger) {\r\n    if (logger === void 0) { logger = console.log; }\r\n    return {\r\n        create: function (nextPolicy, options) {\r\n            return new LogPolicy(nextPolicy, options, logger);\r\n        },\r\n    };\r\n}\r\nvar LogPolicy = /** @class */ (function (_super) {\r\n    __extends(LogPolicy, _super);\r\n    function LogPolicy(nextPolicy, options, logger) {\r\n        if (logger === void 0) { logger = console.log; }\r\n        var _this = _super.call(this, nextPolicy, options) || this;\r\n        _this.logger = logger;\r\n        return _this;\r\n    }\r\n    LogPolicy.prototype.sendRequest = function (request) {\r\n        var _this = this;\r\n        return this._nextPolicy.sendRequest(request).then(function (response) { return logResponse(_this, response); });\r\n    };\r\n    return LogPolicy;\r\n}(BaseRequestPolicy));\r\nexport { LogPolicy };\r\nfunction logResponse(policy, response) {\r\n    policy.logger(\">> Request: \" + JSON.stringify(response.request, undefined, 2));\r\n    policy.logger(\">> Response status code: \" + response.status);\r\n    var responseBody = response.bodyAsText;\r\n    policy.logger(\">> Body: \" + responseBody);\r\n    return Promise.resolve(response);\r\n}\r\n//# sourceMappingURL=logPolicy.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar debug = require('debug')('mssql:base');\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar _require2 = require('../utils'),\n    IDS = _require2.IDS;\n\nvar globalConnection = require('../global-connection');\n\nvar _require3 = require('../error'),\n    TransactionError = _require3.TransactionError;\n\nvar shared = require('../shared');\n\nvar ISOLATION_LEVEL = require('../isolationlevel');\n/**\r\n * Class Transaction.\r\n *\r\n * @property {Number} isolationLevel Controls the locking and row versioning behavior of TSQL statements issued by a connection. READ_COMMITTED by default.\r\n * @property {String} name Transaction name. Empty string by default.\r\n *\r\n * @fires Transaction#begin\r\n * @fires Transaction#commit\r\n * @fires Transaction#rollback\r\n */\n\n\nvar Transaction = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Transaction, _EventEmitter);\n\n  var _super = _createSuper(Transaction);\n\n  /**\r\n   * Create new Transaction.\r\n   *\r\n   * @param {Connection} [parent] If ommited, global connection is used instead.\r\n   */\n  function Transaction(parent) {\n    var _this;\n\n    _classCallCheck(this, Transaction);\n\n    _this = _super.call(this);\n    IDS.add(_assertThisInitialized(_this), 'Transaction');\n    debug('transaction(%d): created', IDS.get(_assertThisInitialized(_this)));\n    _this.parent = parent || globalConnection.pool;\n    _this.isolationLevel = Transaction.defaultIsolationLevel;\n    _this.name = '';\n    return _this;\n  }\n\n  _createClass(Transaction, [{\n    key: \"config\",\n    get: function get() {\n      return this.parent.config;\n    }\n  }, {\n    key: \"connected\",\n    get: function get() {\n      return this.parent.connected;\n    }\n    /**\r\n     * Acquire connection from connection pool.\r\n     *\r\n     * @param {Request} request Request.\r\n     * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Transaction|Promise}\r\n     */\n\n  }, {\n    key: \"acquire\",\n    value: function acquire(request, callback) {\n      if (!this._acquiredConnection) {\n        setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'));\n        return this;\n      }\n\n      if (this._activeRequest) {\n        setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'));\n        return this;\n      }\n\n      this._activeRequest = request;\n      setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig);\n      return this;\n    }\n    /**\r\n     * Release connection back to the pool.\r\n     *\r\n     * @param {Connection} connection Previously acquired connection.\r\n     * @return {Transaction}\r\n     */\n\n  }, {\n    key: \"release\",\n    value: function release(connection) {\n      if (connection === this._acquiredConnection) {\n        this._activeRequest = null;\n      }\n\n      return this;\n    }\n    /**\r\n     * Begin a transaction.\r\n     *\r\n     * @param {Number} [isolationLevel] Controls the locking and row versioning behavior of TSQL statements issued by a connection.\r\n     * @param {basicCallback} [callback] A callback which is called after transaction has began, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Transaction|Promise}\r\n     */\n\n  }, {\n    key: \"begin\",\n    value: function begin(isolationLevel, callback) {\n      var _this2 = this;\n\n      if (isolationLevel instanceof Function) {\n        callback = isolationLevel;\n        isolationLevel = undefined;\n      }\n\n      if (typeof callback === 'function') {\n        this._begin(isolationLevel, function (err) {\n          if (!err) {\n            _this2.emit('begin');\n          }\n\n          callback(err);\n        });\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this2._begin(isolationLevel, function (err) {\n          if (err) return reject(err);\n\n          _this2.emit('begin');\n\n          resolve(_this2);\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {Number} [isolationLevel]\r\n     * @param {basicCallback} [callback]\r\n     * @return {Transaction}\r\n     */\n\n  }, {\n    key: \"_begin\",\n    value: function _begin(isolationLevel, callback) {\n      if (this._acquiredConnection) {\n        return setImmediate(callback, new TransactionError('Transaction has already begun.', 'EALREADYBEGUN'));\n      }\n\n      this._aborted = false;\n      this._rollbackRequested = false;\n\n      if (isolationLevel) {\n        if (Object.keys(ISOLATION_LEVEL).some(function (key) {\n          return ISOLATION_LEVEL[key] === isolationLevel;\n        })) {\n          this.isolationLevel = isolationLevel;\n        } else {\n          throw new TransactionError('Invalid isolation level.');\n        }\n      }\n\n      setImmediate(callback);\n    }\n    /**\r\n     * Commit a transaction.\r\n     *\r\n     * @param {basicCallback} [callback] A callback which is called after transaction has commited, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Transaction|Promise}\r\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit(callback) {\n      var _this3 = this;\n\n      if (typeof callback === 'function') {\n        this._commit(function (err) {\n          if (!err) {\n            _this3.emit('commit');\n          }\n\n          callback(err);\n        });\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this3._commit(function (err) {\n          if (err) return reject(err);\n\n          _this3.emit('commit');\n\n          resolve();\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {basicCallback} [callback]\r\n     * @return {Transaction}\r\n     */\n\n  }, {\n    key: \"_commit\",\n    value: function _commit(callback) {\n      if (this._aborted) {\n        return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'));\n      }\n\n      if (!this._acquiredConnection) {\n        return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'));\n      }\n\n      if (this._activeRequest) {\n        return setImmediate(callback, new TransactionError(\"Can't commit transaction. There is a request in progress.\", 'EREQINPROG'));\n      }\n\n      setImmediate(callback);\n    }\n    /**\r\n     * Returns new request using this transaction.\r\n     *\r\n     * @return {Request}\r\n     */\n\n  }, {\n    key: \"request\",\n    value: function request() {\n      return new shared.driver.Request(this);\n    }\n    /**\r\n     * Rollback a transaction.\r\n     *\r\n     * @param {basicCallback} [callback] A callback which is called after transaction has rolled back, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Transaction|Promise}\r\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function rollback(callback) {\n      var _this4 = this;\n\n      if (typeof callback === 'function') {\n        this._rollback(function (err) {\n          if (!err) {\n            _this4.emit('rollback', _this4._aborted);\n          }\n\n          callback(err);\n        });\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        return _this4._rollback(function (err) {\n          if (err) return reject(err);\n\n          _this4.emit('rollback', _this4._aborted);\n\n          resolve();\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {basicCallback} [callback]\r\n     * @return {Transaction}\r\n     */\n\n  }, {\n    key: \"_rollback\",\n    value: function _rollback(callback) {\n      if (this._aborted) {\n        return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'));\n      }\n\n      if (!this._acquiredConnection) {\n        return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'));\n      }\n\n      if (this._activeRequest) {\n        return setImmediate(callback, new TransactionError(\"Can't rollback transaction. There is a request in progress.\", 'EREQINPROG'));\n      }\n\n      this._rollbackRequested = true;\n      setImmediate(callback);\n    }\n  }]);\n\n  return Transaction;\n}(EventEmitter);\n/**\r\n * Default isolation level used for any transactions that don't explicitly specify an isolation level.\r\n *\r\n * @type {number}\r\n */\n\n\nTransaction.defaultIsolationLevel = ISOLATION_LEVEL.READ_COMMITTED;\nmodule.exports = Transaction;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/lib/base/transaction.js"],"names":["debug","require","EventEmitter","IDS","globalConnection","TransactionError","shared","ISOLATION_LEVEL","Transaction","parent","add","get","pool","isolationLevel","defaultIsolationLevel","name","config","connected","request","callback","_acquiredConnection","setImmediate","_activeRequest","_acquiredConfig","connection","Function","undefined","_begin","err","emit","Promise","resolve","reject","_aborted","_rollbackRequested","Object","keys","some","key","_commit","driver","Request","_rollback","READ_COMMITTED","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst debug = require('debug')('mssql:base')\r\nconst { EventEmitter } = require('events')\r\nconst { IDS } = require('../utils')\r\nconst globalConnection = require('../global-connection')\r\nconst { TransactionError } = require('../error')\r\nconst shared = require('../shared')\r\nconst ISOLATION_LEVEL = require('../isolationlevel')\r\n\r\n/**\r\n * Class Transaction.\r\n *\r\n * @property {Number} isolationLevel Controls the locking and row versioning behavior of TSQL statements issued by a connection. READ_COMMITTED by default.\r\n * @property {String} name Transaction name. Empty string by default.\r\n *\r\n * @fires Transaction#begin\r\n * @fires Transaction#commit\r\n * @fires Transaction#rollback\r\n */\r\n\r\nclass Transaction extends EventEmitter {\r\n  /**\r\n   * Create new Transaction.\r\n   *\r\n   * @param {Connection} [parent] If ommited, global connection is used instead.\r\n   */\r\n\r\n  constructor (parent) {\r\n    super()\r\n\r\n    IDS.add(this, 'Transaction')\r\n    debug('transaction(%d): created', IDS.get(this))\r\n\r\n    this.parent = parent || globalConnection.pool\r\n    this.isolationLevel = Transaction.defaultIsolationLevel\r\n    this.name = ''\r\n  }\r\n\r\n  get config () {\r\n    return this.parent.config\r\n  }\r\n\r\n  get connected () {\r\n    return this.parent.connected\r\n  }\r\n\r\n  /**\r\n   * Acquire connection from connection pool.\r\n   *\r\n   * @param {Request} request Request.\r\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\r\n\r\n  acquire (request, callback) {\r\n    if (!this._acquiredConnection) {\r\n      setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\r\n      return this\r\n    }\r\n\r\n    if (this._activeRequest) {\r\n      setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'))\r\n      return this\r\n    }\r\n\r\n    this._activeRequest = request\r\n    setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Release connection back to the pool.\r\n   *\r\n   * @param {Connection} connection Previously acquired connection.\r\n   * @return {Transaction}\r\n   */\r\n\r\n  release (connection) {\r\n    if (connection === this._acquiredConnection) {\r\n      this._activeRequest = null\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Begin a transaction.\r\n   *\r\n   * @param {Number} [isolationLevel] Controls the locking and row versioning behavior of TSQL statements issued by a connection.\r\n   * @param {basicCallback} [callback] A callback which is called after transaction has began, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\r\n\r\n  begin (isolationLevel, callback) {\r\n    if (isolationLevel instanceof Function) {\r\n      callback = isolationLevel\r\n      isolationLevel = undefined\r\n    }\r\n\r\n    if (typeof callback === 'function') {\r\n      this._begin(isolationLevel, err => {\r\n        if (!err) {\r\n          this.emit('begin')\r\n        }\r\n        callback(err)\r\n      })\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._begin(isolationLevel, err => {\r\n        if (err) return reject(err)\r\n        this.emit('begin')\r\n        resolve(this)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Number} [isolationLevel]\r\n   * @param {basicCallback} [callback]\r\n   * @return {Transaction}\r\n   */\r\n\r\n  _begin (isolationLevel, callback) {\r\n    if (this._acquiredConnection) {\r\n      return setImmediate(callback, new TransactionError('Transaction has already begun.', 'EALREADYBEGUN'))\r\n    }\r\n\r\n    this._aborted = false\r\n    this._rollbackRequested = false\r\n    if (isolationLevel) {\r\n      if (Object.keys(ISOLATION_LEVEL).some(key => {\r\n        return ISOLATION_LEVEL[key] === isolationLevel\r\n      })) {\r\n        this.isolationLevel = isolationLevel\r\n      } else {\r\n        throw new TransactionError('Invalid isolation level.')\r\n      }\r\n    }\r\n\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after transaction has commited, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\r\n\r\n  commit (callback) {\r\n    if (typeof callback === 'function') {\r\n      this._commit(err => {\r\n        if (!err) {\r\n          this.emit('commit')\r\n        }\r\n        callback(err)\r\n      })\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._commit(err => {\r\n        if (err) return reject(err)\r\n        this.emit('commit')\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {basicCallback} [callback]\r\n   * @return {Transaction}\r\n   */\r\n\r\n  _commit (callback) {\r\n    if (this._aborted) {\r\n      return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'))\r\n    }\r\n\r\n    if (!this._acquiredConnection) {\r\n      return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\r\n    }\r\n\r\n    if (this._activeRequest) {\r\n      return setImmediate(callback, new TransactionError(\"Can't commit transaction. There is a request in progress.\", 'EREQINPROG'))\r\n    }\r\n\r\n    setImmediate(callback)\r\n  }\r\n\r\n  /**\r\n   * Returns new request using this transaction.\r\n   *\r\n   * @return {Request}\r\n   */\r\n\r\n  request () {\r\n    return new shared.driver.Request(this)\r\n  }\r\n\r\n  /**\r\n   * Rollback a transaction.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after transaction has rolled back, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Transaction|Promise}\r\n   */\r\n\r\n  rollback (callback) {\r\n    if (typeof callback === 'function') {\r\n      this._rollback(err => {\r\n        if (!err) {\r\n          this.emit('rollback', this._aborted)\r\n        }\r\n        callback(err)\r\n      })\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      return this._rollback(err => {\r\n        if (err) return reject(err)\r\n        this.emit('rollback', this._aborted)\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {basicCallback} [callback]\r\n   * @return {Transaction}\r\n   */\r\n\r\n  _rollback (callback) {\r\n    if (this._aborted) {\r\n      return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'))\r\n    }\r\n\r\n    if (!this._acquiredConnection) {\r\n      return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\r\n    }\r\n\r\n    if (this._activeRequest) {\r\n      return setImmediate(callback, new TransactionError(\"Can't rollback transaction. There is a request in progress.\", 'EREQINPROG'))\r\n    }\r\n\r\n    this._rollbackRequested = true\r\n\r\n    setImmediate(callback)\r\n  }\r\n}\r\n\r\n/**\r\n * Default isolation level used for any transactions that don't explicitly specify an isolation level.\r\n *\r\n * @type {number}\r\n */\r\nTransaction.defaultIsolationLevel = ISOLATION_LEVEL.READ_COMMITTED\r\n\r\nmodule.exports = Transaction\r\n"]},"metadata":{},"sourceType":"script"}
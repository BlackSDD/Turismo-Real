{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nvar _valueParser = _interopRequireDefault(require(\"../value-parser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // s2.2.7.17\n\n\nasync function rowParser(parser) {\n  const colMetadata = parser.colMetadata;\n  const length = colMetadata.length;\n  const columns = [];\n\n  for (let i = 0; i < length; i++) {\n    const currColMetadata = colMetadata[i];\n    let value;\n    (0, _valueParser.default)(parser, currColMetadata, parser.options, v => {\n      value = v;\n    });\n\n    while (parser.suspended) {\n      await parser.streamBuffer.waitForChunk();\n      parser.suspended = false;\n      const next = parser.next;\n      next();\n    }\n\n    columns.push({\n      value,\n      metadata: currColMetadata\n    });\n  }\n\n  if (parser.options.useColumnNames) {\n    const columnsMap = {};\n    columns.forEach(column => {\n      const colName = column.metadata.colName;\n\n      if (columnsMap[colName] == null) {\n        columnsMap[colName] = column;\n      }\n    });\n    return new _token.RowToken(columnsMap);\n  } else {\n    return new _token.RowToken(columns);\n  }\n}\n\nvar _default = rowParser;\nexports.default = _default;\nmodule.exports = rowParser;","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/node_modules/tedious/lib/token/row-token-parser.js"],"names":["Object","defineProperty","exports","value","default","_token","require","_valueParser","_interopRequireDefault","obj","__esModule","rowParser","parser","colMetadata","length","columns","i","currColMetadata","options","v","suspended","streamBuffer","waitForChunk","next","push","metadata","useColumnNames","columnsMap","forEach","column","colName","RowToken","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,YAAY,GAAGC,sBAAsB,CAACF,OAAO,CAAC,iBAAD,CAAR,CAAzC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD,C,CAE/F;;;AACA,eAAeE,SAAf,CAAyBC,MAAzB,EAAiC;AAC/B,QAAMC,WAAW,GAAGD,MAAM,CAACC,WAA3B;AACA,QAAMC,MAAM,GAAGD,WAAW,CAACC,MAA3B;AACA,QAAMC,OAAO,GAAG,EAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,EAA7B,EAAiC;AAC/B,UAAMC,eAAe,GAAGJ,WAAW,CAACG,CAAD,CAAnC;AACA,QAAIb,KAAJ;AACA,KAAC,GAAGI,YAAY,CAACH,OAAjB,EAA0BQ,MAA1B,EAAkCK,eAAlC,EAAmDL,MAAM,CAACM,OAA1D,EAAmEC,CAAC,IAAI;AACtEhB,MAAAA,KAAK,GAAGgB,CAAR;AACD,KAFD;;AAIA,WAAOP,MAAM,CAACQ,SAAd,EAAyB;AACvB,YAAMR,MAAM,CAACS,YAAP,CAAoBC,YAApB,EAAN;AACAV,MAAAA,MAAM,CAACQ,SAAP,GAAmB,KAAnB;AACA,YAAMG,IAAI,GAAGX,MAAM,CAACW,IAApB;AACAA,MAAAA,IAAI;AACL;;AAEDR,IAAAA,OAAO,CAACS,IAAR,CAAa;AACXrB,MAAAA,KADW;AAEXsB,MAAAA,QAAQ,EAAER;AAFC,KAAb;AAID;;AAED,MAAIL,MAAM,CAACM,OAAP,CAAeQ,cAAnB,EAAmC;AACjC,UAAMC,UAAU,GAAG,EAAnB;AACAZ,IAAAA,OAAO,CAACa,OAAR,CAAgBC,MAAM,IAAI;AACxB,YAAMC,OAAO,GAAGD,MAAM,CAACJ,QAAP,CAAgBK,OAAhC;;AAEA,UAAIH,UAAU,CAACG,OAAD,CAAV,IAAuB,IAA3B,EAAiC;AAC/BH,QAAAA,UAAU,CAACG,OAAD,CAAV,GAAsBD,MAAtB;AACD;AACF,KAND;AAOA,WAAO,IAAIxB,MAAM,CAAC0B,QAAX,CAAoBJ,UAApB,CAAP;AACD,GAVD,MAUO;AACL,WAAO,IAAItB,MAAM,CAAC0B,QAAX,CAAoBhB,OAApB,CAAP;AACD;AACF;;AAED,IAAIiB,QAAQ,GAAGrB,SAAf;AACAT,OAAO,CAACE,OAAR,GAAkB4B,QAAlB;AACAC,MAAM,CAAC/B,OAAP,GAAiBS,SAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nvar _valueParser = _interopRequireDefault(require(\"../value-parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// s2.2.7.17\nasync function rowParser(parser) {\n  const colMetadata = parser.colMetadata;\n  const length = colMetadata.length;\n  const columns = [];\n\n  for (let i = 0; i < length; i++) {\n    const currColMetadata = colMetadata[i];\n    let value;\n    (0, _valueParser.default)(parser, currColMetadata, parser.options, v => {\n      value = v;\n    });\n\n    while (parser.suspended) {\n      await parser.streamBuffer.waitForChunk();\n      parser.suspended = false;\n      const next = parser.next;\n      next();\n    }\n\n    columns.push({\n      value,\n      metadata: currColMetadata\n    });\n  }\n\n  if (parser.options.useColumnNames) {\n    const columnsMap = {};\n    columns.forEach(column => {\n      const colName = column.metadata.colName;\n\n      if (columnsMap[colName] == null) {\n        columnsMap[colName] = column;\n      }\n    });\n    return new _token.RowToken(columnsMap);\n  } else {\n    return new _token.RowToken(columns);\n  }\n}\n\nvar _default = rowParser;\nexports.default = _default;\nmodule.exports = rowParser;"]},"metadata":{},"sourceType":"script"}
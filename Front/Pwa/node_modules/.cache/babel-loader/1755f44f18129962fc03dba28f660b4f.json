{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nvar _valueParser = _interopRequireDefault(require(\"../value-parser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // s2.2.7.13 (introduced in TDS 7.3.B)\n\n\nfunction nullHandler(_parser, _columnMetadata, _options, callback) {\n  callback(null);\n}\n\nfunction nbcRowParser(_x) {\n  return _nbcRowParser.apply(this, arguments);\n}\n\nfunction _nbcRowParser() {\n  _nbcRowParser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(parser) {\n    var colMetadata, bitmapByteLength, columns, bitmap, bytes, i, len, byte, _i, currColMetadata, value, next, columnsMap;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            colMetadata = parser.colMetadata;\n            bitmapByteLength = Math.ceil(colMetadata.length / 8);\n            columns = [];\n            bitmap = [];\n\n          case 4:\n            if (!(parser.buffer.length - parser.position < bitmapByteLength)) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 7;\n            return parser.streamBuffer.waitForChunk();\n\n          case 7:\n            _context.next = 4;\n            break;\n\n          case 9:\n            bytes = parser.buffer.slice(parser.position, parser.position + bitmapByteLength);\n            parser.position += bitmapByteLength;\n\n            for (i = 0, len = bytes.length; i < len; i++) {\n              byte = bytes[i];\n              bitmap.push(byte & 1 ? true : false);\n              bitmap.push(byte & 2 ? true : false);\n              bitmap.push(byte & 4 ? true : false);\n              bitmap.push(byte & 8 ? true : false);\n              bitmap.push(byte & 16 ? true : false);\n              bitmap.push(byte & 32 ? true : false);\n              bitmap.push(byte & 64 ? true : false);\n              bitmap.push(byte & 128 ? true : false);\n            }\n\n            _i = 0;\n\n          case 13:\n            if (!(_i < colMetadata.length)) {\n              _context.next = 29;\n              break;\n            }\n\n            currColMetadata = colMetadata[_i];\n            value = void 0;\n            (bitmap[_i] ? nullHandler : _valueParser.default)(parser, currColMetadata, parser.options, function (v) {\n              value = v;\n            });\n\n          case 17:\n            if (!parser.suspended) {\n              _context.next = 25;\n              break;\n            }\n\n            _context.next = 20;\n            return parser.streamBuffer.waitForChunk();\n\n          case 20:\n            parser.suspended = false;\n            next = parser.next;\n            next();\n            _context.next = 17;\n            break;\n\n          case 25:\n            columns.push({\n              value: value,\n              metadata: currColMetadata\n            });\n\n          case 26:\n            _i++;\n            _context.next = 13;\n            break;\n\n          case 29:\n            if (!parser.options.useColumnNames) {\n              _context.next = 35;\n              break;\n            }\n\n            columnsMap = {};\n            columns.forEach(function (column) {\n              var colName = column.metadata.colName;\n\n              if (columnsMap[colName] == null) {\n                columnsMap[colName] = column;\n              }\n            });\n            return _context.abrupt(\"return\", new _token.NBCRowToken(columnsMap));\n\n          case 35:\n            return _context.abrupt(\"return\", new _token.NBCRowToken(columns));\n\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _nbcRowParser.apply(this, arguments);\n}\n\nvar _default = nbcRowParser;\nexports.default = _default;\nmodule.exports = nbcRowParser;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/token/nbcrow-token-parser.js"],"names":["Object","defineProperty","exports","value","default","_token","require","_valueParser","_interopRequireDefault","obj","__esModule","nullHandler","_parser","_columnMetadata","_options","callback","nbcRowParser","parser","colMetadata","bitmapByteLength","Math","ceil","length","columns","bitmap","buffer","position","streamBuffer","waitForChunk","bytes","slice","i","len","byte","push","currColMetadata","options","v","suspended","next","metadata","useColumnNames","columnsMap","forEach","column","colName","NBCRowToken","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _token = require(\"./token\");\r\n\r\nvar _valueParser = _interopRequireDefault(require(\"../value-parser\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n// s2.2.7.13 (introduced in TDS 7.3.B)\r\nfunction nullHandler(_parser, _columnMetadata, _options, callback) {\r\n  callback(null);\r\n}\r\n\r\nasync function nbcRowParser(parser) {\r\n  const colMetadata = parser.colMetadata;\r\n  const bitmapByteLength = Math.ceil(colMetadata.length / 8);\r\n  const columns = [];\r\n  const bitmap = [];\r\n\r\n  while (parser.buffer.length - parser.position < bitmapByteLength) {\r\n    await parser.streamBuffer.waitForChunk();\r\n  }\r\n\r\n  const bytes = parser.buffer.slice(parser.position, parser.position + bitmapByteLength);\r\n  parser.position += bitmapByteLength;\r\n\r\n  for (let i = 0, len = bytes.length; i < len; i++) {\r\n    const byte = bytes[i];\r\n    bitmap.push(byte & 0b1 ? true : false);\r\n    bitmap.push(byte & 0b10 ? true : false);\r\n    bitmap.push(byte & 0b100 ? true : false);\r\n    bitmap.push(byte & 0b1000 ? true : false);\r\n    bitmap.push(byte & 0b10000 ? true : false);\r\n    bitmap.push(byte & 0b100000 ? true : false);\r\n    bitmap.push(byte & 0b1000000 ? true : false);\r\n    bitmap.push(byte & 0b10000000 ? true : false);\r\n  }\r\n\r\n  for (let i = 0; i < colMetadata.length; i++) {\r\n    const currColMetadata = colMetadata[i];\r\n    let value;\r\n    (bitmap[i] ? nullHandler : _valueParser.default)(parser, currColMetadata, parser.options, v => {\r\n      value = v;\r\n    });\r\n\r\n    while (parser.suspended) {\r\n      await parser.streamBuffer.waitForChunk();\r\n      parser.suspended = false;\r\n      const next = parser.next;\r\n      next();\r\n    }\r\n\r\n    columns.push({\r\n      value,\r\n      metadata: currColMetadata\r\n    });\r\n  }\r\n\r\n  if (parser.options.useColumnNames) {\r\n    const columnsMap = {};\r\n    columns.forEach(column => {\r\n      const colName = column.metadata.colName;\r\n\r\n      if (columnsMap[colName] == null) {\r\n        columnsMap[colName] = column;\r\n      }\r\n    });\r\n    return new _token.NBCRowToken(columnsMap);\r\n  } else {\r\n    return new _token.NBCRowToken(columns);\r\n  }\r\n}\r\n\r\nvar _default = nbcRowParser;\r\nexports.default = _default;\r\nmodule.exports = nbcRowParser;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nvar _valueParser = _interopRequireDefault(require(\"../value-parser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // s2.2.7.13 (introduced in TDS 7.3.B)\n\n\nfunction nullHandler(_parser, _columnMetadata, _options, callback) {\n  callback(null);\n}\n\nasync function nbcRowParser(parser) {\n  const colMetadata = parser.colMetadata;\n  const bitmapByteLength = Math.ceil(colMetadata.length / 8);\n  const columns = [];\n  const bitmap = [];\n\n  while (parser.buffer.length - parser.position < bitmapByteLength) {\n    await parser.streamBuffer.waitForChunk();\n  }\n\n  const bytes = parser.buffer.slice(parser.position, parser.position + bitmapByteLength);\n  parser.position += bitmapByteLength;\n\n  for (let i = 0, len = bytes.length; i < len; i++) {\n    const byte = bytes[i];\n    bitmap.push(byte & 0b1 ? true : false);\n    bitmap.push(byte & 0b10 ? true : false);\n    bitmap.push(byte & 0b100 ? true : false);\n    bitmap.push(byte & 0b1000 ? true : false);\n    bitmap.push(byte & 0b10000 ? true : false);\n    bitmap.push(byte & 0b100000 ? true : false);\n    bitmap.push(byte & 0b1000000 ? true : false);\n    bitmap.push(byte & 0b10000000 ? true : false);\n  }\n\n  for (let i = 0; i < colMetadata.length; i++) {\n    const currColMetadata = colMetadata[i];\n    let value;\n    (bitmap[i] ? nullHandler : _valueParser.default)(parser, currColMetadata, parser.options, v => {\n      value = v;\n    });\n\n    while (parser.suspended) {\n      await parser.streamBuffer.waitForChunk();\n      parser.suspended = false;\n      const next = parser.next;\n      next();\n    }\n\n    columns.push({\n      value,\n      metadata: currColMetadata\n    });\n  }\n\n  if (parser.options.useColumnNames) {\n    const columnsMap = {};\n    columns.forEach(column => {\n      const colName = column.metadata.colName;\n\n      if (columnsMap[colName] == null) {\n        columnsMap[colName] = column;\n      }\n    });\n    return new _token.NBCRowToken(columnsMap);\n  } else {\n    return new _token.NBCRowToken(columns);\n  }\n}\n\nvar _default = nbcRowParser;\nexports.default = _default;\nmodule.exports = nbcRowParser;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/token/nbcrow-token-parser.js"],"names":["Object","defineProperty","exports","value","default","_token","require","_valueParser","_interopRequireDefault","obj","__esModule","nullHandler","_parser","_columnMetadata","_options","callback","nbcRowParser","parser","colMetadata","bitmapByteLength","Math","ceil","length","columns","bitmap","buffer","position","streamBuffer","waitForChunk","bytes","slice","i","len","byte","push","currColMetadata","options","v","suspended","next","metadata","useColumnNames","columnsMap","forEach","column","colName","NBCRowToken","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _token = require(\"./token\");\r\n\r\nvar _valueParser = _interopRequireDefault(require(\"../value-parser\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n// s2.2.7.13 (introduced in TDS 7.3.B)\r\nfunction nullHandler(_parser, _columnMetadata, _options, callback) {\r\n  callback(null);\r\n}\r\n\r\nasync function nbcRowParser(parser) {\r\n  const colMetadata = parser.colMetadata;\r\n  const bitmapByteLength = Math.ceil(colMetadata.length / 8);\r\n  const columns = [];\r\n  const bitmap = [];\r\n\r\n  while (parser.buffer.length - parser.position < bitmapByteLength) {\r\n    await parser.streamBuffer.waitForChunk();\r\n  }\r\n\r\n  const bytes = parser.buffer.slice(parser.position, parser.position + bitmapByteLength);\r\n  parser.position += bitmapByteLength;\r\n\r\n  for (let i = 0, len = bytes.length; i < len; i++) {\r\n    const byte = bytes[i];\r\n    bitmap.push(byte & 0b1 ? true : false);\r\n    bitmap.push(byte & 0b10 ? true : false);\r\n    bitmap.push(byte & 0b100 ? true : false);\r\n    bitmap.push(byte & 0b1000 ? true : false);\r\n    bitmap.push(byte & 0b10000 ? true : false);\r\n    bitmap.push(byte & 0b100000 ? true : false);\r\n    bitmap.push(byte & 0b1000000 ? true : false);\r\n    bitmap.push(byte & 0b10000000 ? true : false);\r\n  }\r\n\r\n  for (let i = 0; i < colMetadata.length; i++) {\r\n    const currColMetadata = colMetadata[i];\r\n    let value;\r\n    (bitmap[i] ? nullHandler : _valueParser.default)(parser, currColMetadata, parser.options, v => {\r\n      value = v;\r\n    });\r\n\r\n    while (parser.suspended) {\r\n      await parser.streamBuffer.waitForChunk();\r\n      parser.suspended = false;\r\n      const next = parser.next;\r\n      next();\r\n    }\r\n\r\n    columns.push({\r\n      value,\r\n      metadata: currColMetadata\r\n    });\r\n  }\r\n\r\n  if (parser.options.useColumnNames) {\r\n    const columnsMap = {};\r\n    columns.forEach(column => {\r\n      const colName = column.metadata.colName;\r\n\r\n      if (columnsMap[colName] == null) {\r\n        columnsMap[colName] = column;\r\n      }\r\n    });\r\n    return new _token.NBCRowToken(columnsMap);\r\n  } else {\r\n    return new _token.NBCRowToken(columns);\r\n  }\r\n}\r\n\r\nvar _default = nbcRowParser;\r\nexports.default = _default;\r\nmodule.exports = nbcRowParser;"]},"metadata":{},"sourceType":"script"}
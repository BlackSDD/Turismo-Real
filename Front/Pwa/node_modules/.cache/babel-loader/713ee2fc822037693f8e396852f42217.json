{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.async = global.async || {});\n})(this, function (exports) {\n  'use strict';\n\n  function slice(arrayLike, start) {\n    start = start | 0;\n    var newLen = Math.max(arrayLike.length - start, 0);\n    var newArr = Array(newLen);\n\n    for (var idx = 0; idx < newLen; idx++) {\n      newArr[idx] = arrayLike[start + idx];\n    }\n\n    return newArr;\n  }\n  /**\r\n   * Creates a continuation function with some arguments already applied.\r\n   *\r\n   * Useful as a shorthand when combined with other control flow functions. Any\r\n   * arguments passed to the returned function are added to the arguments\r\n   * originally passed to apply.\r\n   *\r\n   * @name apply\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {Function} fn - The function you want to eventually apply all\r\n   * arguments to. Invokes with (arguments...).\r\n   * @param {...*} arguments... - Any number of arguments to automatically apply\r\n   * when the continuation is called.\r\n   * @returns {Function} the partially-applied function\r\n   * @example\r\n   *\r\n   * // using apply\r\n   * async.parallel([\r\n   *     async.apply(fs.writeFile, 'testfile1', 'test1'),\r\n   *     async.apply(fs.writeFile, 'testfile2', 'test2')\r\n   * ]);\r\n   *\r\n   *\r\n   * // the same process without using apply\r\n   * async.parallel([\r\n   *     function(callback) {\r\n   *         fs.writeFile('testfile1', 'test1', callback);\r\n   *     },\r\n   *     function(callback) {\r\n   *         fs.writeFile('testfile2', 'test2', callback);\r\n   *     }\r\n   * ]);\r\n   *\r\n   * // It's possible to pass any number of additional arguments when calling the\r\n   * // continuation:\r\n   *\r\n   * node> var fn = async.apply(sys.puts, 'one');\r\n   * node> fn('two', 'three');\r\n   * one\r\n   * two\r\n   * three\r\n   */\n\n\n  var apply = function (fn\n  /*, ...args*/\n  ) {\n    var args = slice(arguments, 1);\n    return function ()\n    /*callArgs*/\n    {\n      var callArgs = slice(arguments);\n      return fn.apply(null, args.concat(callArgs));\n    };\n  };\n\n  var initialParams = function (fn) {\n    return function ()\n    /*...args, callback*/\n    {\n      var args = slice(arguments);\n      var callback = args.pop();\n      fn.call(this, args, callback);\n    };\n  };\n  /**\r\n   * Checks if `value` is the\r\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n   * @example\r\n   *\r\n   * _.isObject({});\r\n   * // => true\r\n   *\r\n   * _.isObject([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isObject(_.noop);\r\n   * // => true\r\n   *\r\n   * _.isObject(null);\r\n   * // => false\r\n   */\n\n\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n\n  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\n  function fallback(fn) {\n    setTimeout(fn, 0);\n  }\n\n  function wrap(defer) {\n    return function (fn\n    /*, ...args*/\n    ) {\n      var args = slice(arguments, 1);\n      defer(function () {\n        fn.apply(null, args);\n      });\n    };\n  }\n\n  var _defer;\n\n  if (hasSetImmediate) {\n    _defer = setImmediate;\n  } else if (hasNextTick) {\n    _defer = process.nextTick;\n  } else {\n    _defer = fallback;\n  }\n\n  var setImmediate$1 = wrap(_defer);\n  /**\r\n   * Take a sync function and make it async, passing its return value to a\r\n   * callback. This is useful for plugging sync functions into a waterfall,\r\n   * series, or other async functions. Any arguments passed to the generated\r\n   * function will be passed to the wrapped function (except for the final\r\n   * callback argument). Errors thrown will be passed to the callback.\r\n   *\r\n   * If the function passed to `asyncify` returns a Promise, that promises's\r\n   * resolved/rejected state will be used to call the callback, rather than simply\r\n   * the synchronous return value.\r\n   *\r\n   * This also means you can asyncify ES2017 `async` functions.\r\n   *\r\n   * @name asyncify\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @alias wrapSync\r\n   * @category Util\r\n   * @param {Function} func - The synchronous function, or Promise-returning\r\n   * function to convert to an {@link AsyncFunction}.\r\n   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\r\n   * invoked with `(args..., callback)`.\r\n   * @example\r\n   *\r\n   * // passing a regular synchronous function\r\n   * async.waterfall([\r\n   *     async.apply(fs.readFile, filename, \"utf8\"),\r\n   *     async.asyncify(JSON.parse),\r\n   *     function (data, next) {\r\n   *         // data is the result of parsing the text.\r\n   *         // If there was a parsing error, it would have been caught.\r\n   *     }\r\n   * ], callback);\r\n   *\r\n   * // passing a function returning a promise\r\n   * async.waterfall([\r\n   *     async.apply(fs.readFile, filename, \"utf8\"),\r\n   *     async.asyncify(function (contents) {\r\n   *         return db.model.create(contents);\r\n   *     }),\r\n   *     function (model, next) {\r\n   *         // `model` is the instantiated model object.\r\n   *         // If there was an error, this function would be skipped.\r\n   *     }\r\n   * ], callback);\r\n   *\r\n   * // es2017 example, though `asyncify` is not needed if your JS environment\r\n   * // supports async functions out of the box\r\n   * var q = async.queue(async.asyncify(async function(file) {\r\n   *     var intermediateStep = await processFile(file);\r\n   *     return await somePromise(intermediateStep)\r\n   * }));\r\n   *\r\n   * q.push(files);\r\n   */\n\n  function asyncify(func) {\n    return initialParams(function (args, callback) {\n      var result;\n\n      try {\n        result = func.apply(this, args);\n      } catch (e) {\n        return callback(e);\n      } // if result is Promise object\n\n\n      if (isObject(result) && typeof result.then === 'function') {\n        result.then(function (value) {\n          invokeCallback(callback, null, value);\n        }, function (err) {\n          invokeCallback(callback, err.message ? err : new Error(err));\n        });\n      } else {\n        callback(null, result);\n      }\n    });\n  }\n\n  function invokeCallback(callback, error, value) {\n    try {\n      callback(error, value);\n    } catch (e) {\n      setImmediate$1(rethrow, e);\n    }\n  }\n\n  function rethrow(error) {\n    throw error;\n  }\n\n  var supportsSymbol = typeof Symbol === 'function';\n\n  function isAsync(fn) {\n    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\n  }\n\n  function wrapAsync(asyncFn) {\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n  }\n\n  function applyEach$1(eachfn) {\n    return function (fns\n    /*, ...args*/\n    ) {\n      var args = slice(arguments, 1);\n      var go = initialParams(function (args, callback) {\n        var that = this;\n        return eachfn(fns, function (fn, cb) {\n          wrapAsync(fn).apply(that, args.concat(cb));\n        }, callback);\n      });\n\n      if (args.length) {\n        return go.apply(this, args);\n      } else {\n        return go;\n      }\n    };\n  }\n  /** Detect free variable `global` from Node.js. */\n\n\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n  /** Detect free variable `self`. */\n\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n  /** Built-in value references. */\n\n  var Symbol$1 = root.Symbol;\n  /** Used for built-in method references. */\n\n  var objectProto = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  /**\r\n   * Used to resolve the\r\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n   * of values.\r\n   */\n\n  var nativeObjectToString = objectProto.toString;\n  /** Built-in value references. */\n\n  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n  /**\r\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to query.\r\n   * @returns {string} Returns the raw `toStringTag`.\r\n   */\n\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n        tag = value[symToStringTag$1];\n\n    try {\n      value[symToStringTag$1] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag$1] = tag;\n      } else {\n        delete value[symToStringTag$1];\n      }\n    }\n\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var objectProto$1 = Object.prototype;\n  /**\r\n   * Used to resolve the\r\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n   * of values.\r\n   */\n\n  var nativeObjectToString$1 = objectProto$1.toString;\n  /**\r\n   * Converts `value` to a string using `Object.prototype.toString`.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to convert.\r\n   * @returns {string} Returns the converted string.\r\n   */\n\n  function objectToString(value) {\n    return nativeObjectToString$1.call(value);\n  }\n  /** `Object#toString` result references. */\n\n\n  var nullTag = '[object Null]';\n  var undefinedTag = '[object Undefined]';\n  /** Built-in value references. */\n\n  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n  /**\r\n   * The base implementation of `getTag` without fallbacks for buggy environments.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to query.\r\n   * @returns {string} Returns the `toStringTag`.\r\n   */\n\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n  /** `Object#toString` result references. */\n\n\n  var asyncTag = '[object AsyncFunction]';\n  var funcTag = '[object Function]';\n  var genTag = '[object GeneratorFunction]';\n  var proxyTag = '[object Proxy]';\n  /**\r\n   * Checks if `value` is classified as a `Function` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n   * @example\r\n   *\r\n   * _.isFunction(_);\r\n   * // => true\r\n   *\r\n   * _.isFunction(/abc/);\r\n   * // => false\r\n   */\n\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    } // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n  /** Used as references for various `Number` constants. */\n\n\n  var MAX_SAFE_INTEGER = 9007199254740991;\n  /**\r\n   * Checks if `value` is a valid array-like length.\r\n   *\r\n   * **Note:** This method is loosely based on\r\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n   * @example\r\n   *\r\n   * _.isLength(3);\r\n   * // => true\r\n   *\r\n   * _.isLength(Number.MIN_VALUE);\r\n   * // => false\r\n   *\r\n   * _.isLength(Infinity);\r\n   * // => false\r\n   *\r\n   * _.isLength('3');\r\n   * // => false\r\n   */\n\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  /**\r\n   * Checks if `value` is array-like. A value is considered array-like if it's\r\n   * not a function and has a `value.length` that's an integer greater than or\r\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n   * @example\r\n   *\r\n   * _.isArrayLike([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isArrayLike(document.body.children);\r\n   * // => true\r\n   *\r\n   * _.isArrayLike('abc');\r\n   * // => true\r\n   *\r\n   * _.isArrayLike(_.noop);\r\n   * // => false\r\n   */\n\n\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  } // A temporary value used to identify if the loop should be broken.\n  // See #1064, #1293\n\n\n  var breakLoop = {};\n  /**\r\n   * This method returns `undefined`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 2.3.0\r\n   * @category Util\r\n   * @example\r\n   *\r\n   * _.times(2, _.noop);\r\n   * // => [undefined, undefined]\r\n   */\n\n  function noop() {// No operation performed.\n  }\n\n  function once(fn) {\n    return function () {\n      if (fn === null) return;\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, arguments);\n    };\n  }\n\n  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\n  var getIterator = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n  };\n  /**\r\n   * The base implementation of `_.times` without support for iteratee shorthands\r\n   * or max array length checks.\r\n   *\r\n   * @private\r\n   * @param {number} n The number of times to invoke `iteratee`.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns the array of results.\r\n   */\n\n\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n\n    return result;\n  }\n  /**\r\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n   * and has a `typeof` result of \"object\".\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n   * @example\r\n   *\r\n   * _.isObjectLike({});\r\n   * // => true\r\n   *\r\n   * _.isObjectLike([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isObjectLike(_.noop);\r\n   * // => false\r\n   *\r\n   * _.isObjectLike(null);\r\n   * // => false\r\n   */\n\n\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n  /** `Object#toString` result references. */\n\n\n  var argsTag = '[object Arguments]';\n  /**\r\n   * The base implementation of `_.isArguments`.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n   */\n\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n  /** Used for built-in method references. */\n\n\n  var objectProto$3 = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n  /** Built-in value references. */\n\n  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n  /**\r\n   * Checks if `value` is likely an `arguments` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n   *  else `false`.\r\n   * @example\r\n   *\r\n   * _.isArguments(function() { return arguments; }());\r\n   * // => true\r\n   *\r\n   * _.isArguments([1, 2, 3]);\r\n   * // => false\r\n   */\n\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n  };\n  /**\r\n   * Checks if `value` is classified as an `Array` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n   * @example\r\n   *\r\n   * _.isArray([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isArray(document.body.children);\r\n   * // => false\r\n   *\r\n   * _.isArray('abc');\r\n   * // => false\r\n   *\r\n   * _.isArray(_.noop);\r\n   * // => false\r\n   */\n\n  var isArray = Array.isArray;\n  /**\r\n   * This method returns `false`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.13.0\r\n   * @category Util\r\n   * @returns {boolean} Returns `false`.\r\n   * @example\r\n   *\r\n   * _.times(2, _.stubFalse);\r\n   * // => [false, false]\r\n   */\n\n  function stubFalse() {\n    return false;\n  }\n  /** Detect free variable `exports`. */\n\n\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /** Built-in value references. */\n\n  var Buffer = moduleExports ? root.Buffer : undefined;\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n  /**\r\n   * Checks if `value` is a buffer.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.3.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n   * @example\r\n   *\r\n   * _.isBuffer(new Buffer(2));\r\n   * // => true\r\n   *\r\n   * _.isBuffer(new Uint8Array(2));\r\n   * // => false\r\n   */\n\n  var isBuffer = nativeIsBuffer || stubFalse;\n  /** Used as references for various `Number` constants. */\n\n  var MAX_SAFE_INTEGER$1 = 9007199254740991;\n  /** Used to detect unsigned integer values. */\n\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  /**\r\n   * Checks if `value` is a valid array-like index.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n   */\n\n  function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER$1 : length;\n    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  /** `Object#toString` result references. */\n\n\n  var argsTag$1 = '[object Arguments]';\n  var arrayTag = '[object Array]';\n  var boolTag = '[object Boolean]';\n  var dateTag = '[object Date]';\n  var errorTag = '[object Error]';\n  var funcTag$1 = '[object Function]';\n  var mapTag = '[object Map]';\n  var numberTag = '[object Number]';\n  var objectTag = '[object Object]';\n  var regexpTag = '[object RegExp]';\n  var setTag = '[object Set]';\n  var stringTag = '[object String]';\n  var weakMapTag = '[object WeakMap]';\n  var arrayBufferTag = '[object ArrayBuffer]';\n  var dataViewTag = '[object DataView]';\n  var float32Tag = '[object Float32Array]';\n  var float64Tag = '[object Float64Array]';\n  var int8Tag = '[object Int8Array]';\n  var int16Tag = '[object Int16Array]';\n  var int32Tag = '[object Int32Array]';\n  var uint8Tag = '[object Uint8Array]';\n  var uint8ClampedTag = '[object Uint8ClampedArray]';\n  var uint16Tag = '[object Uint16Array]';\n  var uint32Tag = '[object Uint32Array]';\n  /** Used to identify `toStringTag` values of typed arrays. */\n\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  /**\r\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n   */\n\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n  /**\r\n   * The base implementation of `_.unary` without support for storing metadata.\r\n   *\r\n   * @private\r\n   * @param {Function} func The function to cap arguments for.\r\n   * @returns {Function} Returns the new capped function.\r\n   */\n\n\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n  /** Detect free variable `exports`. */\n\n\n  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n  /** Detect free variable `process` from Node.js. */\n\n  var freeProcess = moduleExports$1 && freeGlobal.process;\n  /** Used to access faster Node.js helpers. */\n\n  var nodeUtil = function () {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;\n\n      if (types) {\n        return types;\n      } // Legacy `process.binding('util')` for Node.js < 10.\n\n\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }();\n  /* Node.js helper references. */\n\n\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n  /**\r\n   * Checks if `value` is classified as a typed array.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 3.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n   * @example\r\n   *\r\n   * _.isTypedArray(new Uint8Array);\r\n   * // => true\r\n   *\r\n   * _.isTypedArray([]);\r\n   * // => false\r\n   */\n\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n  /** Used for built-in method references. */\n\n  var objectProto$2 = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n  /**\r\n   * Creates an array of the enumerable property names of the array-like `value`.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to query.\r\n   * @param {boolean} inherited Specify returning inherited property names.\r\n   * @returns {Array} Returns the array of property names.\r\n   */\n\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n        isArg = !isArr && isArguments(value),\n        isBuff = !isArr && !isArg && isBuffer(value),\n        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n        skipIndexes = isArr || isArg || isBuff || isType,\n        result = skipIndexes ? baseTimes(value.length, String) : [],\n        length = result.length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var objectProto$5 = Object.prototype;\n  /**\r\n   * Checks if `value` is likely a prototype object.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n   */\n\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$5;\n    return value === proto;\n  }\n  /**\r\n   * Creates a unary function that invokes `func` with its argument transformed.\r\n   *\r\n   * @private\r\n   * @param {Function} func The function to wrap.\r\n   * @param {Function} transform The argument transform.\r\n   * @returns {Function} Returns the new function.\r\n   */\n\n\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n\n  var nativeKeys = overArg(Object.keys, Object);\n  /** Used for built-in method references. */\n\n  var objectProto$4 = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n  /**\r\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to query.\r\n   * @returns {Array} Returns the array of property names.\r\n   */\n\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n\n    var result = [];\n\n    for (var key in Object(object)) {\n      if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\r\n   * Creates an array of the own enumerable property names of `object`.\r\n   *\r\n   * **Note:** Non-object values are coerced to objects. See the\r\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n   * for more details.\r\n   *\r\n   * @static\r\n   * @since 0.1.0\r\n   * @memberOf _\r\n   * @category Object\r\n   * @param {Object} object The object to query.\r\n   * @returns {Array} Returns the array of property names.\r\n   * @example\r\n   *\r\n   * function Foo() {\r\n   *   this.a = 1;\r\n   *   this.b = 2;\r\n   * }\r\n   *\r\n   * Foo.prototype.c = 3;\r\n   *\r\n   * _.keys(new Foo);\r\n   * // => ['a', 'b'] (iteration order is not guaranteed)\r\n   *\r\n   * _.keys('hi');\r\n   * // => ['0', '1']\r\n   */\n\n\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n\n  function createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n      return ++i < len ? {\n        value: coll[i],\n        key: i\n      } : null;\n    };\n  }\n\n  function createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n      var item = iterator.next();\n      if (item.done) return null;\n      i++;\n      return {\n        value: item.value,\n        key: i\n      };\n    };\n  }\n\n  function createObjectIterator(obj) {\n    var okeys = keys(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n      var key = okeys[++i];\n      return i < len ? {\n        value: obj[key],\n        key: key\n      } : null;\n    };\n  }\n\n  function iterator(coll) {\n    if (isArrayLike(coll)) {\n      return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n  }\n\n  function onlyOnce(fn) {\n    return function () {\n      if (fn === null) throw new Error(\"Callback was already called.\");\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, arguments);\n    };\n  }\n\n  function _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n      callback = once(callback || noop);\n\n      if (limit <= 0 || !obj) {\n        return callback(null);\n      }\n\n      var nextElem = iterator(obj);\n      var done = false;\n      var running = 0;\n      var looping = false;\n\n      function iterateeCallback(err, value) {\n        running -= 1;\n\n        if (err) {\n          done = true;\n          callback(err);\n        } else if (value === breakLoop || done && running <= 0) {\n          done = true;\n          return callback(null);\n        } else if (!looping) {\n          replenish();\n        }\n      }\n\n      function replenish() {\n        looping = true;\n\n        while (running < limit && !done) {\n          var elem = nextElem();\n\n          if (elem === null) {\n            done = true;\n\n            if (running <= 0) {\n              callback(null);\n            }\n\n            return;\n          }\n\n          running += 1;\n          iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n        }\n\n        looping = false;\n      }\n\n      replenish();\n    };\n  }\n  /**\r\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name eachOfLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.eachOf]{@link module:Collections.eachOf}\r\n   * @alias forEachOfLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each\r\n   * item in `coll`. The `key` is the item's key, or index in the case of an\r\n   * array.\r\n   * Invoked with (item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   */\n\n\n  function eachOfLimit(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n  }\n\n  function doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n      return fn(iterable, limit, iteratee, callback);\n    };\n  } // eachOf implementation optimized for array-likes\n\n\n  function eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback || noop);\n    var index = 0,\n        completed = 0,\n        length = coll.length;\n\n    if (length === 0) {\n      callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n      if (err) {\n        callback(err);\n      } else if (++completed === length || value === breakLoop) {\n        callback(null);\n      }\n    }\n\n    for (; index < length; index++) {\n      iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n  } // a generic version of eachOf which can handle array, object, and iterator cases.\n\n\n  var eachOfGeneric = doLimit(eachOfLimit, Infinity);\n  /**\r\n   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\r\n   * to the iteratee.\r\n   *\r\n   * @name eachOf\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias forEachOf\r\n   * @category Collection\r\n   * @see [async.each]{@link module:Collections.each}\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each\r\n   * item in `coll`.\r\n   * The `key` is the item's key, or index in the case of an array.\r\n   * Invoked with (item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   * @example\r\n   *\r\n   * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\r\n   * var configs = {};\r\n   *\r\n   * async.forEachOf(obj, function (value, key, callback) {\r\n   *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\r\n   *         if (err) return callback(err);\r\n   *         try {\r\n   *             configs[key] = JSON.parse(data);\r\n   *         } catch (e) {\r\n   *             return callback(e);\r\n   *         }\r\n   *         callback();\r\n   *     });\r\n   * }, function (err) {\r\n   *     if (err) console.error(err.message);\r\n   *     // configs is now a map of JSON data\r\n   *     doSomethingWith(configs);\r\n   * });\r\n   */\n\n  var eachOf = function (coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, wrapAsync(iteratee), callback);\n  };\n\n  function doParallel(fn) {\n    return function (obj, iteratee, callback) {\n      return fn(eachOf, obj, wrapAsync(iteratee), callback);\n    };\n  }\n\n  function _asyncMap(eachfn, arr, iteratee, callback) {\n    callback = callback || noop;\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachfn(arr, function (value, _, callback) {\n      var index = counter++;\n\n      _iteratee(value, function (err, v) {\n        results[index] = v;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, results);\n    });\n  }\n  /**\r\n   * Produces a new collection of values by mapping each value in `coll` through\r\n   * the `iteratee` function. The `iteratee` is called with an item from `coll`\r\n   * and a callback for when it has finished processing. Each of these callback\r\n   * takes 2 arguments: an `error`, and the transformed item from `coll`. If\r\n   * `iteratee` passes an error to its callback, the main `callback` (for the\r\n   * `map` function) is immediately called with the error.\r\n   *\r\n   * Note, that since this function applies the `iteratee` to each item in\r\n   * parallel, there is no guarantee that the `iteratee` functions will complete\r\n   * in order. However, the results array will be in the same order as the\r\n   * original `coll`.\r\n   *\r\n   * If `map` is passed an Object, the results will be an Array.  The results\r\n   * will roughly be in the order of the original Objects' keys (but this can\r\n   * vary across JavaScript engines).\r\n   *\r\n   * @name map\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with the transformed item.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Results is an Array of the\r\n   * transformed items from the `coll`. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\r\n   *     // results is now an array of stats for each file\r\n   * });\r\n   */\n\n\n  var map = doParallel(_asyncMap);\n  /**\r\n   * Applies the provided arguments to each function in the array, calling\r\n   * `callback` after all functions have completed. If you only provide the first\r\n   * argument, `fns`, then it will return a function which lets you pass in the\r\n   * arguments as if it were a single function call. If more arguments are\r\n   * provided, `callback` is required while `args` is still optional.\r\n   *\r\n   * @name applyEach\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\r\n   * to all call with the same arguments\r\n   * @param {...*} [args] - any number of separate arguments to pass to the\r\n   * function.\r\n   * @param {Function} [callback] - the final argument should be the callback,\r\n   * called when all functions have completed processing.\r\n   * @returns {Function} - If only the first argument, `fns`, is provided, it will\r\n   * return a function which lets you pass in the arguments as if it were a single\r\n   * function call. The signature is `(..args, callback)`. If invoked with any\r\n   * arguments, `callback` is required.\r\n   * @example\r\n   *\r\n   * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\r\n   *\r\n   * // partial application example:\r\n   * async.each(\r\n   *     buckets,\r\n   *     async.applyEach([enableSearch, updateSchema]),\r\n   *     callback\r\n   * );\r\n   */\n\n  var applyEach = applyEach$1(map);\n\n  function doParallelLimit(fn) {\n    return function (obj, limit, iteratee, callback) {\n      return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\n    };\n  }\n  /**\r\n   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name mapLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.map]{@link module:Collections.map}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with the transformed item.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Results is an array of the\r\n   * transformed items from the `coll`. Invoked with (err, results).\r\n   */\n\n\n  var mapLimit = doParallelLimit(_asyncMap);\n  /**\r\n   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\r\n   *\r\n   * @name mapSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.map]{@link module:Collections.map}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with the transformed item.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Results is an array of the\r\n   * transformed items from the `coll`. Invoked with (err, results).\r\n   */\n\n  var mapSeries = doLimit(mapLimit, 1);\n  /**\r\n   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\r\n   *\r\n   * @name applyEachSeries\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.applyEach]{@link module:ControlFlow.applyEach}\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\r\n   * call with the same arguments\r\n   * @param {...*} [args] - any number of separate arguments to pass to the\r\n   * function.\r\n   * @param {Function} [callback] - the final argument should be the callback,\r\n   * called when all functions have completed processing.\r\n   * @returns {Function} - If only the first argument is provided, it will return\r\n   * a function which lets you pass in the arguments as if it were a single\r\n   * function call.\r\n   */\n\n  var applyEachSeries = applyEach$1(mapSeries);\n  /**\r\n   * A specialized version of `_.forEach` for arrays without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns `array`.\r\n   */\n\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n\n    return array;\n  }\n  /**\r\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\r\n   *\r\n   * @private\r\n   * @param {boolean} [fromRight] Specify iterating from right to left.\r\n   * @returns {Function} Returns the new base function.\r\n   */\n\n\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n          iterable = Object(object),\n          props = keysFunc(object),\n          length = props.length;\n\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n\n      return object;\n    };\n  }\n  /**\r\n   * The base implementation of `baseForOwn` which iterates over `object`\r\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\r\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @param {Function} keysFunc The function to get the keys of `object`.\r\n   * @returns {Object} Returns `object`.\r\n   */\n\n\n  var baseFor = createBaseFor();\n  /**\r\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Object} Returns `object`.\r\n   */\n\n  function baseForOwn(object, iteratee) {\n    return object && baseFor(object, iteratee, keys);\n  }\n  /**\r\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n   * support for iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {Function} predicate The function invoked per iteration.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @param {boolean} [fromRight] Specify iterating from right to left.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\n\n\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while (fromRight ? index-- : ++index < length) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n  /**\r\n   * The base implementation of `_.isNaN` without support for number objects.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n   */\n\n\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n  /**\r\n   * A specialized version of `_.indexOf` which performs strict equality\r\n   * comparisons of values, i.e. `===`.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {*} value The value to search for.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\n\n\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n  /**\r\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {*} value The value to search for.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\n\n\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  /**\r\n   * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\r\n   * their requirements. Each function can optionally depend on other functions\r\n   * being completed first, and each function is run as soon as its requirements\r\n   * are satisfied.\r\n   *\r\n   * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\r\n   * will stop. Further tasks will not execute (so any other functions depending\r\n   * on it will not run), and the main `callback` is immediately called with the\r\n   * error.\r\n   *\r\n   * {@link AsyncFunction}s also receive an object containing the results of functions which\r\n   * have completed so far as the first argument, if they have dependencies. If a\r\n   * task function has no dependencies, it will only be passed a callback.\r\n   *\r\n   * @name auto\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Object} tasks - An object. Each of its properties is either a\r\n   * function or an array of requirements, with the {@link AsyncFunction} itself the last item\r\n   * in the array. The object's key of a property serves as the name of the task\r\n   * defined by that property, i.e. can be used when specifying requirements for\r\n   * other tasks. The function receives one or two arguments:\r\n   * * a `results` object, containing the results of the previously executed\r\n   *   functions, only passed if the task has any dependencies,\r\n   * * a `callback(err, result)` function, which must be called when finished,\r\n   *   passing an `error` (which can be `null`) and the result of the function's\r\n   *   execution.\r\n   * @param {number} [concurrency=Infinity] - An optional `integer` for\r\n   * determining the maximum number of tasks that can be run in parallel. By\r\n   * default, as many as possible.\r\n   * @param {Function} [callback] - An optional callback which is called when all\r\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\r\n   * pass an error to their callback. Results are always returned; however, if an\r\n   * error occurs, no further `tasks` will be performed, and the results object\r\n   * will only contain partial results. Invoked with (err, results).\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * async.auto({\r\n   *     // this function will just be passed a callback\r\n   *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\r\n   *     showData: ['readData', function(results, cb) {\r\n   *         // results.readData is the file's contents\r\n   *         // ...\r\n   *     }]\r\n   * }, callback);\r\n   *\r\n   * async.auto({\r\n   *     get_data: function(callback) {\r\n   *         console.log('in get_data');\r\n   *         // async code to get some data\r\n   *         callback(null, 'data', 'converted to array');\r\n   *     },\r\n   *     make_folder: function(callback) {\r\n   *         console.log('in make_folder');\r\n   *         // async code to create a directory to store a file in\r\n   *         // this is run at the same time as getting the data\r\n   *         callback(null, 'folder');\r\n   *     },\r\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\r\n   *         console.log('in write_file', JSON.stringify(results));\r\n   *         // once there is some data and the directory exists,\r\n   *         // write the data to a file in the directory\r\n   *         callback(null, 'filename');\r\n   *     }],\r\n   *     email_link: ['write_file', function(results, callback) {\r\n   *         console.log('in email_link', JSON.stringify(results));\r\n   *         // once the file is written let's email a link to it...\r\n   *         // results.write_file contains the filename returned by write_file.\r\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\r\n   *     }]\r\n   * }, function(err, results) {\r\n   *     console.log('err = ', err);\r\n   *     console.log('results = ', results);\r\n   * });\r\n   */\n\n\n  var auto = function (tasks, concurrency, callback) {\n    if (typeof concurrency === 'function') {\n      // concurrency is optional, shift the args.\n      callback = concurrency;\n      concurrency = null;\n    }\n\n    callback = once(callback || noop);\n    var keys$$1 = keys(tasks);\n    var numTasks = keys$$1.length;\n\n    if (!numTasks) {\n      return callback(null);\n    }\n\n    if (!concurrency) {\n      concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var hasError = false;\n    var listeners = Object.create(null);\n    var readyTasks = []; // for cycle detection:\n\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n\n    var uncheckedDependencies = {};\n    baseForOwn(tasks, function (task, key) {\n      if (!isArray(task)) {\n        // no dependencies\n        enqueueTask(key, [task]);\n        readyToCheck.push(key);\n        return;\n      }\n\n      var dependencies = task.slice(0, task.length - 1);\n      var remainingDependencies = dependencies.length;\n\n      if (remainingDependencies === 0) {\n        enqueueTask(key, task);\n        readyToCheck.push(key);\n        return;\n      }\n\n      uncheckedDependencies[key] = remainingDependencies;\n      arrayEach(dependencies, function (dependencyName) {\n        if (!tasks[dependencyName]) {\n          throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));\n        }\n\n        addListener(dependencyName, function () {\n          remainingDependencies--;\n\n          if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n          }\n        });\n      });\n    });\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n      readyTasks.push(function () {\n        runTask(key, task);\n      });\n    }\n\n    function processQueue() {\n      if (readyTasks.length === 0 && runningTasks === 0) {\n        return callback(null, results);\n      }\n\n      while (readyTasks.length && runningTasks < concurrency) {\n        var run = readyTasks.shift();\n        run();\n      }\n    }\n\n    function addListener(taskName, fn) {\n      var taskListeners = listeners[taskName];\n\n      if (!taskListeners) {\n        taskListeners = listeners[taskName] = [];\n      }\n\n      taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n      var taskListeners = listeners[taskName] || [];\n      arrayEach(taskListeners, function (fn) {\n        fn();\n      });\n      processQueue();\n    }\n\n    function runTask(key, task) {\n      if (hasError) return;\n      var taskCallback = onlyOnce(function (err, result) {\n        runningTasks--;\n\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        }\n\n        if (err) {\n          var safeResults = {};\n          baseForOwn(results, function (val, rkey) {\n            safeResults[rkey] = val;\n          });\n          safeResults[key] = result;\n          hasError = true;\n          listeners = Object.create(null);\n          callback(err, safeResults);\n        } else {\n          results[key] = result;\n          taskComplete(key);\n        }\n      });\n      runningTasks++;\n      var taskFn = wrapAsync(task[task.length - 1]);\n\n      if (task.length > 1) {\n        taskFn(results, taskCallback);\n      } else {\n        taskFn(taskCallback);\n      }\n    }\n\n    function checkForDeadlocks() {\n      // Kahn's algorithm\n      // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n      // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n      var currentTask;\n      var counter = 0;\n\n      while (readyToCheck.length) {\n        currentTask = readyToCheck.pop();\n        counter++;\n        arrayEach(getDependents(currentTask), function (dependent) {\n          if (--uncheckedDependencies[dependent] === 0) {\n            readyToCheck.push(dependent);\n          }\n        });\n      }\n\n      if (counter !== numTasks) {\n        throw new Error('async.auto cannot execute tasks due to a recursive dependency');\n      }\n    }\n\n    function getDependents(taskName) {\n      var result = [];\n      baseForOwn(tasks, function (task, key) {\n        if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n          result.push(key);\n        }\n      });\n      return result;\n    }\n  };\n  /**\r\n   * A specialized version of `_.map` for arrays without support for iteratee\r\n   * shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns the new mapped array.\r\n   */\n\n\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n\n    return result;\n  }\n  /** `Object#toString` result references. */\n\n\n  var symbolTag = '[object Symbol]';\n  /**\r\n   * Checks if `value` is classified as a `Symbol` primitive or object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n   * @example\r\n   *\r\n   * _.isSymbol(Symbol.iterator);\r\n   * // => true\r\n   *\r\n   * _.isSymbol('abc');\r\n   * // => false\r\n   */\n\n  function isSymbol(value) {\n    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n  }\n  /** Used as references for various `Number` constants. */\n\n\n  var INFINITY = 1 / 0;\n  /** Used to convert symbols to primitives and strings. */\n\n  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\n  var symbolToString = symbolProto ? symbolProto.toString : undefined;\n  /**\r\n   * The base implementation of `_.toString` which doesn't convert nullish\r\n   * values to empty strings.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to process.\r\n   * @returns {string} Returns the string.\r\n   */\n\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n\n    if (isArray(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + '';\n    }\n\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n  /**\r\n   * The base implementation of `_.slice` without an iteratee call guard.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to slice.\r\n   * @param {number} [start=0] The start position.\r\n   * @param {number} [end=array.length] The end position.\r\n   * @returns {Array} Returns the slice of `array`.\r\n   */\n\n\n  function baseSlice(array, start, end) {\n    var index = -1,\n        length = array.length;\n\n    if (start < 0) {\n      start = -start > length ? 0 : length + start;\n    }\n\n    end = end > length ? length : end;\n\n    if (end < 0) {\n      end += length;\n    }\n\n    length = start > end ? 0 : end - start >>> 0;\n    start >>>= 0;\n    var result = Array(length);\n\n    while (++index < length) {\n      result[index] = array[index + start];\n    }\n\n    return result;\n  }\n  /**\r\n   * Casts `array` to a slice if it's needed.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {number} start The start position.\r\n   * @param {number} [end=array.length] The end position.\r\n   * @returns {Array} Returns the cast slice.\r\n   */\n\n\n  function castSlice(array, start, end) {\n    var length = array.length;\n    end = end === undefined ? length : end;\n    return !start && end >= length ? array : baseSlice(array, start, end);\n  }\n  /**\r\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\r\n   * that is not found in the character symbols.\r\n   *\r\n   * @private\r\n   * @param {Array} strSymbols The string symbols to inspect.\r\n   * @param {Array} chrSymbols The character symbols to find.\r\n   * @returns {number} Returns the index of the last unmatched string symbol.\r\n   */\n\n\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n\n    return index;\n  }\n  /**\r\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\r\n   * that is not found in the character symbols.\r\n   *\r\n   * @private\r\n   * @param {Array} strSymbols The string symbols to inspect.\r\n   * @param {Array} chrSymbols The character symbols to find.\r\n   * @returns {number} Returns the index of the first unmatched string symbol.\r\n   */\n\n\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n\n    return index;\n  }\n  /**\r\n   * Converts an ASCII `string` to an array.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\n\n\n  function asciiToArray(string) {\n    return string.split('');\n  }\n  /** Used to compose unicode character classes. */\n\n\n  var rsAstralRange = '\\\\ud800-\\\\udfff';\n  var rsComboMarksRange = '\\\\u0300-\\\\u036f';\n  var reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f';\n  var rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff';\n  var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\n  var rsVarRange = '\\\\ufe0e\\\\ufe0f';\n  /** Used to compose unicode capture groups. */\n\n  var rsZWJ = '\\\\u200d';\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');\n  /**\r\n   * Checks if `string` contains Unicode symbols.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to inspect.\r\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\r\n   */\n\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n  /** Used to compose unicode character classes. */\n\n\n  var rsAstralRange$1 = '\\\\ud800-\\\\udfff';\n  var rsComboMarksRange$1 = '\\\\u0300-\\\\u036f';\n  var reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f';\n  var rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff';\n  var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\n  var rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n  /** Used to compose unicode capture groups. */\n\n  var rsAstral = '[' + rsAstralRange$1 + ']';\n  var rsCombo = '[' + rsComboRange$1 + ']';\n  var rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\n  var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\n  var rsNonAstral = '[^' + rsAstralRange$1 + ']';\n  var rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\n  var rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\n  var rsZWJ$1 = '\\\\u200d';\n  /** Used to compose unicode regexes. */\n\n  var reOptMod = rsModifier + '?';\n  var rsOptVar = '[' + rsVarRange$1 + ']?';\n  var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\n  var rsSeq = rsOptVar + reOptMod + rsOptJoin;\n  var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n  /**\r\n   * Converts a Unicode `string` to an array.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\n\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n  /**\r\n   * Converts `string` to an array.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\n\n\n  function stringToArray(string) {\n    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n  }\n  /**\r\n   * Converts `value` to a string. An empty string is returned for `null`\r\n   * and `undefined` values. The sign of `-0` is preserved.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to convert.\r\n   * @returns {string} Returns the converted string.\r\n   * @example\r\n   *\r\n   * _.toString(null);\r\n   * // => ''\r\n   *\r\n   * _.toString(-0);\r\n   * // => '-0'\r\n   *\r\n   * _.toString([1, 2, 3]);\r\n   * // => '1,2,3'\r\n   */\n\n\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n  /** Used to match leading and trailing whitespace. */\n\n\n  var reTrim = /^\\s+|\\s+$/g;\n  /**\r\n   * Removes leading and trailing whitespace or specified characters from `string`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 3.0.0\r\n   * @category String\r\n   * @param {string} [string=''] The string to trim.\r\n   * @param {string} [chars=whitespace] The characters to trim.\r\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n   * @returns {string} Returns the trimmed string.\r\n   * @example\r\n   *\r\n   * _.trim('  abc  ');\r\n   * // => 'abc'\r\n   *\r\n   * _.trim('-_-abc-_-', '_-');\r\n   * // => 'abc'\r\n   *\r\n   * _.map(['  foo  ', '  bar  '], _.trim);\r\n   * // => ['foo', 'bar']\r\n   */\n\n  function trim(string, chars, guard) {\n    string = toString(string);\n\n    if (string && (guard || chars === undefined)) {\n      return string.replace(reTrim, '');\n    }\n\n    if (!string || !(chars = baseToString(chars))) {\n      return string;\n    }\n\n    var strSymbols = stringToArray(string),\n        chrSymbols = stringToArray(chars),\n        start = charsStartIndex(strSymbols, chrSymbols),\n        end = charsEndIndex(strSymbols, chrSymbols) + 1;\n    return castSlice(strSymbols, start, end).join('');\n  }\n\n  var FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n  var FN_ARG_SPLIT = /,/;\n  var FN_ARG = /(=.+)?(\\s*)$/;\n  var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n  function parseParams(func) {\n    func = func.toString().replace(STRIP_COMMENTS, '');\n    func = func.match(FN_ARGS)[2].replace(' ', '');\n    func = func ? func.split(FN_ARG_SPLIT) : [];\n    func = func.map(function (arg) {\n      return trim(arg.replace(FN_ARG, ''));\n    });\n    return func;\n  }\n  /**\r\n   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\r\n   * tasks are specified as parameters to the function, after the usual callback\r\n   * parameter, with the parameter names matching the names of the tasks it\r\n   * depends on. This can provide even more readable task graphs which can be\r\n   * easier to maintain.\r\n   *\r\n   * If a final callback is specified, the task results are similarly injected,\r\n   * specified as named parameters after the initial error parameter.\r\n   *\r\n   * The autoInject function is purely syntactic sugar and its semantics are\r\n   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\r\n   *\r\n   * @name autoInject\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.auto]{@link module:ControlFlow.auto}\r\n   * @category Control Flow\r\n   * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\r\n   * the form 'func([dependencies...], callback). The object's key of a property\r\n   * serves as the name of the task defined by that property, i.e. can be used\r\n   * when specifying requirements for other tasks.\r\n   * * The `callback` parameter is a `callback(err, result)` which must be called\r\n   *   when finished, passing an `error` (which can be `null`) and the result of\r\n   *   the function's execution. The remaining parameters name other tasks on\r\n   *   which the task is dependent, and the results from those tasks are the\r\n   *   arguments of those parameters.\r\n   * @param {Function} [callback] - An optional callback which is called when all\r\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\r\n   * pass an error to their callback, and a `results` object with any completed\r\n   * task results, similar to `auto`.\r\n   * @example\r\n   *\r\n   * //  The example from `auto` can be rewritten as follows:\r\n   * async.autoInject({\r\n   *     get_data: function(callback) {\r\n   *         // async code to get some data\r\n   *         callback(null, 'data', 'converted to array');\r\n   *     },\r\n   *     make_folder: function(callback) {\r\n   *         // async code to create a directory to store a file in\r\n   *         // this is run at the same time as getting the data\r\n   *         callback(null, 'folder');\r\n   *     },\r\n   *     write_file: function(get_data, make_folder, callback) {\r\n   *         // once there is some data and the directory exists,\r\n   *         // write the data to a file in the directory\r\n   *         callback(null, 'filename');\r\n   *     },\r\n   *     email_link: function(write_file, callback) {\r\n   *         // once the file is written let's email a link to it...\r\n   *         // write_file contains the filename returned by write_file.\r\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\r\n   *     }\r\n   * }, function(err, results) {\r\n   *     console.log('err = ', err);\r\n   *     console.log('email_link = ', results.email_link);\r\n   * });\r\n   *\r\n   * // If you are using a JS minifier that mangles parameter names, `autoInject`\r\n   * // will not work with plain functions, since the parameter names will be\r\n   * // collapsed to a single letter identifier.  To work around this, you can\r\n   * // explicitly specify the names of the parameters your task function needs\r\n   * // in an array, similar to Angular.js dependency injection.\r\n   *\r\n   * // This still has an advantage over plain `auto`, since the results a task\r\n   * // depends on are still spread into arguments.\r\n   * async.autoInject({\r\n   *     //...\r\n   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\r\n   *         callback(null, 'filename');\r\n   *     }],\r\n   *     email_link: ['write_file', function(write_file, callback) {\r\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\r\n   *     }]\r\n   *     //...\r\n   * }, function(err, results) {\r\n   *     console.log('err = ', err);\r\n   *     console.log('email_link = ', results.email_link);\r\n   * });\r\n   */\n\n\n  function autoInject(tasks, callback) {\n    var newTasks = {};\n    baseForOwn(tasks, function (taskFn, key) {\n      var params;\n      var fnIsAsync = isAsync(taskFn);\n      var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;\n\n      if (isArray(taskFn)) {\n        params = taskFn.slice(0, -1);\n        taskFn = taskFn[taskFn.length - 1];\n        newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n      } else if (hasNoDeps) {\n        // no dependencies, use the function as-is\n        newTasks[key] = taskFn;\n      } else {\n        params = parseParams(taskFn);\n\n        if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n          throw new Error(\"autoInject task functions require explicit parameters.\");\n        } // remove callback param\n\n\n        if (!fnIsAsync) params.pop();\n        newTasks[key] = params.concat(newTask);\n      }\n\n      function newTask(results, taskCb) {\n        var newArgs = arrayMap(params, function (name) {\n          return results[name];\n        });\n        newArgs.push(taskCb);\n        wrapAsync(taskFn).apply(null, newArgs);\n      }\n    });\n    auto(newTasks, callback);\n  } // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n  // used for queues. This implementation assumes that the node provided by the user can be modified\n  // to adjust the next and last properties. We implement only the minimal functionality\n  // for queue support.\n\n\n  function DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n  }\n\n  function setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n  }\n\n  DLL.prototype.removeLink = function (node) {\n    if (node.prev) node.prev.next = node.next;else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n  };\n\n  DLL.prototype.empty = function () {\n    while (this.head) this.shift();\n\n    return this;\n  };\n\n  DLL.prototype.insertAfter = function (node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n  };\n\n  DLL.prototype.insertBefore = function (node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n  };\n\n  DLL.prototype.unshift = function (node) {\n    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n  };\n\n  DLL.prototype.push = function (node) {\n    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n  };\n\n  DLL.prototype.shift = function () {\n    return this.head && this.removeLink(this.head);\n  };\n\n  DLL.prototype.pop = function () {\n    return this.tail && this.removeLink(this.tail);\n  };\n\n  DLL.prototype.toArray = function () {\n    var arr = Array(this.length);\n    var curr = this.head;\n\n    for (var idx = 0; idx < this.length; idx++) {\n      arr[idx] = curr.data;\n      curr = curr.next;\n    }\n\n    return arr;\n  };\n\n  DLL.prototype.remove = function (testFn) {\n    var curr = this.head;\n\n    while (!!curr) {\n      var next = curr.next;\n\n      if (testFn(curr)) {\n        this.removeLink(curr);\n      }\n\n      curr = next;\n    }\n\n    return this;\n  };\n\n  function queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n      concurrency = 1;\n    } else if (concurrency === 0) {\n      throw new Error('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n\n    var numRunning = 0;\n    var workersList = [];\n    var processingScheduled = false;\n\n    function _insert(data, insertAtFront, callback) {\n      if (callback != null && typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n\n      q.started = true;\n\n      if (!isArray(data)) {\n        data = [data];\n      }\n\n      if (data.length === 0 && q.idle()) {\n        // call drain immediately if there are no tasks\n        return setImmediate$1(function () {\n          q.drain();\n        });\n      }\n\n      for (var i = 0, l = data.length; i < l; i++) {\n        var item = {\n          data: data[i],\n          callback: callback || noop\n        };\n\n        if (insertAtFront) {\n          q._tasks.unshift(item);\n        } else {\n          q._tasks.push(item);\n        }\n      }\n\n      if (!processingScheduled) {\n        processingScheduled = true;\n        setImmediate$1(function () {\n          processingScheduled = false;\n          q.process();\n        });\n      }\n    }\n\n    function _next(tasks) {\n      return function (err) {\n        numRunning -= 1;\n\n        for (var i = 0, l = tasks.length; i < l; i++) {\n          var task = tasks[i];\n          var index = baseIndexOf(workersList, task, 0);\n\n          if (index === 0) {\n            workersList.shift();\n          } else if (index > 0) {\n            workersList.splice(index, 1);\n          }\n\n          task.callback.apply(task, arguments);\n\n          if (err != null) {\n            q.error(err, task.data);\n          }\n        }\n\n        if (numRunning <= q.concurrency - q.buffer) {\n          q.unsaturated();\n        }\n\n        if (q.idle()) {\n          q.drain();\n        }\n\n        q.process();\n      };\n    }\n\n    var isProcessing = false;\n    var q = {\n      _tasks: new DLL(),\n      concurrency: concurrency,\n      payload: payload,\n      saturated: noop,\n      unsaturated: noop,\n      buffer: concurrency / 4,\n      empty: noop,\n      drain: noop,\n      error: noop,\n      started: false,\n      paused: false,\n      push: function (data, callback) {\n        _insert(data, false, callback);\n      },\n      kill: function () {\n        q.drain = noop;\n\n        q._tasks.empty();\n      },\n      unshift: function (data, callback) {\n        _insert(data, true, callback);\n      },\n      remove: function (testFn) {\n        q._tasks.remove(testFn);\n      },\n      process: function () {\n        // Avoid trying to start too many processing operations. This can occur\n        // when callbacks resolve synchronously (#1267).\n        if (isProcessing) {\n          return;\n        }\n\n        isProcessing = true;\n\n        while (!q.paused && numRunning < q.concurrency && q._tasks.length) {\n          var tasks = [],\n              data = [];\n          var l = q._tasks.length;\n          if (q.payload) l = Math.min(l, q.payload);\n\n          for (var i = 0; i < l; i++) {\n            var node = q._tasks.shift();\n\n            tasks.push(node);\n            workersList.push(node);\n            data.push(node.data);\n          }\n\n          numRunning += 1;\n\n          if (q._tasks.length === 0) {\n            q.empty();\n          }\n\n          if (numRunning === q.concurrency) {\n            q.saturated();\n          }\n\n          var cb = onlyOnce(_next(tasks));\n\n          _worker(data, cb);\n        }\n\n        isProcessing = false;\n      },\n      length: function () {\n        return q._tasks.length;\n      },\n      running: function () {\n        return numRunning;\n      },\n      workersList: function () {\n        return workersList;\n      },\n      idle: function () {\n        return q._tasks.length + numRunning === 0;\n      },\n      pause: function () {\n        q.paused = true;\n      },\n      resume: function () {\n        if (q.paused === false) {\n          return;\n        }\n\n        q.paused = false;\n        setImmediate$1(q.process);\n      }\n    };\n    return q;\n  }\n  /**\r\n   * A cargo of tasks for the worker function to complete. Cargo inherits all of\r\n   * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\r\n   * @typedef {Object} CargoObject\r\n   * @memberOf module:ControlFlow\r\n   * @property {Function} length - A function returning the number of items\r\n   * waiting to be processed. Invoke like `cargo.length()`.\r\n   * @property {number} payload - An `integer` for determining how many tasks\r\n   * should be process per round. This property can be changed after a `cargo` is\r\n   * created to alter the payload on-the-fly.\r\n   * @property {Function} push - Adds `task` to the `queue`. The callback is\r\n   * called once the `worker` has finished processing the task. Instead of a\r\n   * single task, an array of `tasks` can be submitted. The respective callback is\r\n   * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\r\n   * @property {Function} saturated - A callback that is called when the\r\n   * `queue.length()` hits the concurrency and further tasks will be queued.\r\n   * @property {Function} empty - A callback that is called when the last item\r\n   * from the `queue` is given to a `worker`.\r\n   * @property {Function} drain - A callback that is called when the last item\r\n   * from the `queue` has returned from the `worker`.\r\n   * @property {Function} idle - a function returning false if there are items\r\n   * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\r\n   * @property {Function} pause - a function that pauses the processing of tasks\r\n   * until `resume()` is called. Invoke like `cargo.pause()`.\r\n   * @property {Function} resume - a function that resumes the processing of\r\n   * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\r\n   * @property {Function} kill - a function that removes the `drain` callback and\r\n   * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\r\n   */\n\n  /**\r\n   * Creates a `cargo` object with the specified payload. Tasks added to the\r\n   * cargo will be processed altogether (up to the `payload` limit). If the\r\n   * `worker` is in progress, the task is queued until it becomes available. Once\r\n   * the `worker` has completed some tasks, each callback of those tasks is\r\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\r\n   * for how `cargo` and `queue` work.\r\n   *\r\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\r\n   * at a time, cargo passes an array of tasks to a single worker, repeating\r\n   * when the worker is finished.\r\n   *\r\n   * @name cargo\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.queue]{@link module:ControlFlow.queue}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} worker - An asynchronous function for processing an array\r\n   * of queued tasks. Invoked with `(tasks, callback)`.\r\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\r\n   * how many tasks should be processed per round; if omitted, the default is\r\n   * unlimited.\r\n   * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\r\n   * attached as certain properties to listen for specific events during the\r\n   * lifecycle of the cargo and inner queue.\r\n   * @example\r\n   *\r\n   * // create a cargo object with payload 2\r\n   * var cargo = async.cargo(function(tasks, callback) {\r\n   *     for (var i=0; i<tasks.length; i++) {\r\n   *         console.log('hello ' + tasks[i].name);\r\n   *     }\r\n   *     callback();\r\n   * }, 2);\r\n   *\r\n   * // add some items\r\n   * cargo.push({name: 'foo'}, function(err) {\r\n   *     console.log('finished processing foo');\r\n   * });\r\n   * cargo.push({name: 'bar'}, function(err) {\r\n   *     console.log('finished processing bar');\r\n   * });\r\n   * cargo.push({name: 'baz'}, function(err) {\r\n   *     console.log('finished processing baz');\r\n   * });\r\n   */\n\n\n  function cargo(worker, payload) {\n    return queue(worker, 1, payload);\n  }\n  /**\r\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\r\n   *\r\n   * @name eachOfSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.eachOf]{@link module:Collections.eachOf}\r\n   * @alias forEachOfSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * Invoked with (item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Invoked with (err).\r\n   */\n\n\n  var eachOfSeries = doLimit(eachOfLimit, 1);\n  /**\r\n   * Reduces `coll` into a single value using an async `iteratee` to return each\r\n   * successive step. `memo` is the initial state of the reduction. This function\r\n   * only operates in series.\r\n   *\r\n   * For performance reasons, it may make sense to split a call to this function\r\n   * into a parallel map, and then use the normal `Array.prototype.reduce` on the\r\n   * results. This function is for situations where each step in the reduction\r\n   * needs to be async; if you can get the data before reducing it, then it's\r\n   * probably a good idea to do so.\r\n   *\r\n   * @name reduce\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias inject\r\n   * @alias foldl\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {*} memo - The initial state of the reduction.\r\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n   * array to produce the next step in the reduction.\r\n   * The `iteratee` should complete with the next state of the reduction.\r\n   * If the iteratee complete with an error, the reduction is stopped and the\r\n   * main `callback` is immediately called with the error.\r\n   * Invoked with (memo, item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\r\n   * (err, result).\r\n   * @example\r\n   *\r\n   * async.reduce([1,2,3], 0, function(memo, item, callback) {\r\n   *     // pointless async:\r\n   *     process.nextTick(function() {\r\n   *         callback(null, memo + item)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result is now equal to the last value of memo, which is 6\r\n   * });\r\n   */\n\n  function reduce(coll, memo, iteratee, callback) {\n    callback = once(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOfSeries(coll, function (x, i, callback) {\n      _iteratee(memo, x, function (err, v) {\n        memo = v;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, memo);\n    });\n  }\n  /**\r\n   * Version of the compose function that is more natural to read. Each function\r\n   * consumes the return value of the previous function. It is the equivalent of\r\n   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\r\n   *\r\n   * Each function is executed with the `this` binding of the composed function.\r\n   *\r\n   * @name seq\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.compose]{@link module:ControlFlow.compose}\r\n   * @category Control Flow\r\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\r\n   * @returns {Function} a function that composes the `functions` in order\r\n   * @example\r\n   *\r\n   * // Requires lodash (or underscore), express3 and dresende's orm2.\r\n   * // Part of an app, that fetches cats of the logged user.\r\n   * // This example uses `seq` function to avoid overnesting and error\r\n   * // handling clutter.\r\n   * app.get('/cats', function(request, response) {\r\n   *     var User = request.models.User;\r\n   *     async.seq(\r\n   *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\r\n   *         function(user, fn) {\r\n   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\r\n   *         }\r\n   *     )(req.session.user_id, function (err, cats) {\r\n   *         if (err) {\r\n   *             console.error(err);\r\n   *             response.json({ status: 'error', message: err.message });\r\n   *         } else {\r\n   *             response.json({ status: 'ok', message: 'Cats found', data: cats });\r\n   *         }\r\n   *     });\r\n   * });\r\n   */\n\n\n  function seq()\n  /*...functions*/\n  {\n    var _functions = arrayMap(arguments, wrapAsync);\n\n    return function ()\n    /*...args*/\n    {\n      var args = slice(arguments);\n      var that = this;\n      var cb = args[args.length - 1];\n\n      if (typeof cb == 'function') {\n        args.pop();\n      } else {\n        cb = noop;\n      }\n\n      reduce(_functions, args, function (newargs, fn, cb) {\n        fn.apply(that, newargs.concat(function (err\n        /*, ...nextargs*/\n        ) {\n          var nextargs = slice(arguments, 1);\n          cb(err, nextargs);\n        }));\n      }, function (err, results) {\n        cb.apply(that, [err].concat(results));\n      });\n    };\n  }\n  /**\r\n   * Creates a function which is a composition of the passed asynchronous\r\n   * functions. Each function consumes the return value of the function that\r\n   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\r\n   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\r\n   *\r\n   * Each function is executed with the `this` binding of the composed function.\r\n   *\r\n   * @name compose\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\r\n   * @returns {Function} an asynchronous function that is the composed\r\n   * asynchronous `functions`\r\n   * @example\r\n   *\r\n   * function add1(n, callback) {\r\n   *     setTimeout(function () {\r\n   *         callback(null, n + 1);\r\n   *     }, 10);\r\n   * }\r\n   *\r\n   * function mul3(n, callback) {\r\n   *     setTimeout(function () {\r\n   *         callback(null, n * 3);\r\n   *     }, 10);\r\n   * }\r\n   *\r\n   * var add1mul3 = async.compose(mul3, add1);\r\n   * add1mul3(4, function (err, result) {\r\n   *     // result now equals 15\r\n   * });\r\n   */\n\n\n  var compose = function ()\n  /*...args*/\n  {\n    return seq.apply(null, slice(arguments).reverse());\n  };\n\n  var _concat = Array.prototype.concat;\n  /**\r\n   * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name concatLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.concat]{@link module:Collections.concat}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\r\n   * which should use an array as its result. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is an array\r\n   * containing the concatenated results of the `iteratee` function. Invoked with\r\n   * (err, results).\r\n   */\n\n  var concatLimit = function (coll, limit, iteratee, callback) {\n    callback = callback || noop;\n\n    var _iteratee = wrapAsync(iteratee);\n\n    mapLimit(coll, limit, function (val, callback) {\n      _iteratee(val, function (err\n      /*, ...args*/\n      ) {\n        if (err) return callback(err);\n        return callback(null, slice(arguments, 1));\n      });\n    }, function (err, mapResults) {\n      var result = [];\n\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          result = _concat.apply(result, mapResults[i]);\n        }\n      }\n\n      return callback(err, result);\n    });\n  };\n  /**\r\n   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\r\n   * the concatenated list. The `iteratee`s are called in parallel, and the\r\n   * results are concatenated as they return. There is no guarantee that the\r\n   * results array will be returned in the original order of `coll` passed to the\r\n   * `iteratee` function.\r\n   *\r\n   * @name concat\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\r\n   * which should use an array as its result. Invoked with (item, callback).\r\n   * @param {Function} [callback(err)] - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is an array\r\n   * containing the concatenated results of the `iteratee` function. Invoked with\r\n   * (err, results).\r\n   * @example\r\n   *\r\n   * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\r\n   *     // files is now a list of filenames that exist in the 3 directories\r\n   * });\r\n   */\n\n\n  var concat = doLimit(concatLimit, Infinity);\n  /**\r\n   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\r\n   *\r\n   * @name concatSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.concat]{@link module:Collections.concat}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\r\n   * The iteratee should complete with an array an array of results.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback(err)] - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is an array\r\n   * containing the concatenated results of the `iteratee` function. Invoked with\r\n   * (err, results).\r\n   */\n\n  var concatSeries = doLimit(concatLimit, 1);\n  /**\r\n   * Returns a function that when called, calls-back with the values provided.\r\n   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\r\n   * [`auto`]{@link module:ControlFlow.auto}.\r\n   *\r\n   * @name constant\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {...*} arguments... - Any number of arguments to automatically invoke\r\n   * callback with.\r\n   * @returns {AsyncFunction} Returns a function that when invoked, automatically\r\n   * invokes the callback with the previous given arguments.\r\n   * @example\r\n   *\r\n   * async.waterfall([\r\n   *     async.constant(42),\r\n   *     function (value, next) {\r\n   *         // value === 42\r\n   *     },\r\n   *     //...\r\n   * ], callback);\r\n   *\r\n   * async.waterfall([\r\n   *     async.constant(filename, \"utf8\"),\r\n   *     fs.readFile,\r\n   *     function (fileData, next) {\r\n   *         //...\r\n   *     }\r\n   *     //...\r\n   * ], callback);\r\n   *\r\n   * async.auto({\r\n   *     hostname: async.constant(\"https://server.net/\"),\r\n   *     port: findFreePort,\r\n   *     launchServer: [\"hostname\", \"port\", function (options, cb) {\r\n   *         startServer(options, cb);\r\n   *     }],\r\n   *     //...\r\n   * }, callback);\r\n   */\n\n  var constant = function ()\n  /*...values*/\n  {\n    var values = slice(arguments);\n    var args = [null].concat(values);\n    return function ()\n    /*...ignoredArgs, callback*/\n    {\n      var callback = arguments[arguments.length - 1];\n      return callback.apply(this, args);\n    };\n  };\n  /**\r\n   * This method returns the first argument it receives.\r\n   *\r\n   * @static\r\n   * @since 0.1.0\r\n   * @memberOf _\r\n   * @category Util\r\n   * @param {*} value Any value.\r\n   * @returns {*} Returns `value`.\r\n   * @example\r\n   *\r\n   * var object = { 'a': 1 };\r\n   *\r\n   * console.log(_.identity(object) === object);\r\n   * // => true\r\n   */\n\n\n  function identity(value) {\n    return value;\n  }\n\n  function _createTester(check, getResult) {\n    return function (eachfn, arr, iteratee, cb) {\n      cb = cb || noop;\n      var testPassed = false;\n      var testResult;\n      eachfn(arr, function (value, _, callback) {\n        iteratee(value, function (err, result) {\n          if (err) {\n            callback(err);\n          } else if (check(result) && !testResult) {\n            testPassed = true;\n            testResult = getResult(true, value);\n            callback(null, breakLoop);\n          } else {\n            callback();\n          }\n        });\n      }, function (err) {\n        if (err) {\n          cb(err);\n        } else {\n          cb(null, testPassed ? testResult : getResult(false));\n        }\n      });\n    };\n  }\n\n  function _findGetResult(v, x) {\n    return x;\n  }\n  /**\r\n   * Returns the first value in `coll` that passes an async truth test. The\r\n   * `iteratee` is applied in parallel, meaning the first iteratee to return\r\n   * `true` will fire the detect `callback` with that result. That means the\r\n   * result might not be the first item in the original `coll` (in terms of order)\r\n   * that passes the test.\r\n  \r\n   * If order within the original `coll` is important, then look at\r\n   * [`detectSeries`]{@link module:Collections.detectSeries}.\r\n   *\r\n   * @name detect\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias find\r\n   * @category Collections\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n   * The iteratee must complete with a boolean value as its result.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n   * Result will be the first item in the array that passes the truth test\r\n   * (iteratee) or the value `undefined` if none passed. Invoked with\r\n   * (err, result).\r\n   * @example\r\n   *\r\n   * async.detect(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result now equals the first file in the list that exists\r\n   * });\r\n   */\n\n\n  var detect = doParallel(_createTester(identity, _findGetResult));\n  /**\r\n   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name detectLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.detect]{@link module:Collections.detect}\r\n   * @alias findLimit\r\n   * @category Collections\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n   * The iteratee must complete with a boolean value as its result.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n   * Result will be the first item in the array that passes the truth test\r\n   * (iteratee) or the value `undefined` if none passed. Invoked with\r\n   * (err, result).\r\n   */\n\n  var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n  /**\r\n   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\r\n   *\r\n   * @name detectSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.detect]{@link module:Collections.detect}\r\n   * @alias findSeries\r\n   * @category Collections\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n   * The iteratee must complete with a boolean value as its result.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n   * Result will be the first item in the array that passes the truth test\r\n   * (iteratee) or the value `undefined` if none passed. Invoked with\r\n   * (err, result).\r\n   */\n\n  var detectSeries = doLimit(detectLimit, 1);\n\n  function consoleFunc(name) {\n    return function (fn\n    /*, ...args*/\n    ) {\n      var args = slice(arguments, 1);\n      args.push(function (err\n      /*, ...args*/\n      ) {\n        var args = slice(arguments, 1);\n\n        if (typeof console === 'object') {\n          if (err) {\n            if (console.error) {\n              console.error(err);\n            }\n          } else if (console[name]) {\n            arrayEach(args, function (x) {\n              console[name](x);\n            });\n          }\n        }\n      });\n      wrapAsync(fn).apply(null, args);\n    };\n  }\n  /**\r\n   * Logs the result of an [`async` function]{@link AsyncFunction} to the\r\n   * `console` using `console.dir` to display the properties of the resulting object.\r\n   * Only works in Node.js or in browsers that support `console.dir` and\r\n   * `console.error` (such as FF and Chrome).\r\n   * If multiple arguments are returned from the async function,\r\n   * `console.dir` is called on each argument in order.\r\n   *\r\n   * @name dir\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} function - The function you want to eventually apply\r\n   * all arguments to.\r\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\r\n   * @example\r\n   *\r\n   * // in a module\r\n   * var hello = function(name, callback) {\r\n   *     setTimeout(function() {\r\n   *         callback(null, {hello: name});\r\n   *     }, 1000);\r\n   * };\r\n   *\r\n   * // in the node repl\r\n   * node> async.dir(hello, 'world');\r\n   * {hello: 'world'}\r\n   */\n\n\n  var dir = consoleFunc('dir');\n  /**\r\n   * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\r\n   * the order of operations, the arguments `test` and `fn` are switched.\r\n   *\r\n   * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\r\n   * @name doDuring\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.during]{@link module:ControlFlow.during}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} fn - An async function which is called each time\r\n   * `test` passes. Invoked with (callback).\r\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\r\n   * execution of `fn`. Invoked with (...args, callback), where `...args` are the\r\n   * non-error args from the previous callback of `fn`.\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `fn` has stopped. `callback`\r\n   * will be passed an error if one occurred, otherwise `null`.\r\n   */\n\n  function doDuring(fn, test, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _fn = wrapAsync(fn);\n\n    var _test = wrapAsync(test);\n\n    function next(err\n    /*, ...args*/\n    ) {\n      if (err) return callback(err);\n      var args = slice(arguments, 1);\n      args.push(check);\n\n      _test.apply(this, args);\n    }\n\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (!truth) return callback(null);\n\n      _fn(next);\n    }\n\n    check(null, true);\n  }\n  /**\r\n   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\r\n   * the order of operations, the arguments `test` and `iteratee` are switched.\r\n   *\r\n   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\r\n   *\r\n   * @name doWhilst\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} iteratee - A function which is called each time `test`\r\n   * passes. Invoked with (callback).\r\n   * @param {Function} test - synchronous truth test to perform after each\r\n   * execution of `iteratee`. Invoked with any non-error callback results of\r\n   * `iteratee`.\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `iteratee` has stopped.\r\n   * `callback` will be passed an error and any arguments passed to the final\r\n   * `iteratee`'s callback. Invoked with (err, [results]);\r\n   */\n\n\n  function doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    var next = function (err\n    /*, ...args*/\n    ) {\n      if (err) return callback(err);\n      var args = slice(arguments, 1);\n      if (test.apply(this, args)) return _iteratee(next);\n      callback.apply(null, [null].concat(args));\n    };\n\n    _iteratee(next);\n  }\n  /**\r\n   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\r\n   * argument ordering differs from `until`.\r\n   *\r\n   * @name doUntil\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} iteratee - An async function which is called each time\r\n   * `test` fails. Invoked with (callback).\r\n   * @param {Function} test - synchronous truth test to perform after each\r\n   * execution of `iteratee`. Invoked with any non-error callback results of\r\n   * `iteratee`.\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\r\n   * will be passed an error and any arguments passed to the final `iteratee`'s\r\n   * callback. Invoked with (err, [results]);\r\n   */\n\n\n  function doUntil(iteratee, test, callback) {\n    doWhilst(iteratee, function () {\n      return !test.apply(this, arguments);\n    }, callback);\n  }\n  /**\r\n   * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\r\n   * is passed a callback in the form of `function (err, truth)`. If error is\r\n   * passed to `test` or `fn`, the main callback is immediately called with the\r\n   * value of the error.\r\n   *\r\n   * @name during\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\r\n   * execution of `fn`. Invoked with (callback).\r\n   * @param {AsyncFunction} fn - An async function which is called each time\r\n   * `test` passes. Invoked with (callback).\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `fn` has stopped. `callback`\r\n   * will be passed an error, if one occurred, otherwise `null`.\r\n   * @example\r\n   *\r\n   * var count = 0;\r\n   *\r\n   * async.during(\r\n   *     function (callback) {\r\n   *         return callback(null, count < 5);\r\n   *     },\r\n   *     function (callback) {\r\n   *         count++;\r\n   *         setTimeout(callback, 1000);\r\n   *     },\r\n   *     function (err) {\r\n   *         // 5 seconds have passed\r\n   *     }\r\n   * );\r\n   */\n\n\n  function during(test, fn, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _fn = wrapAsync(fn);\n\n    var _test = wrapAsync(test);\n\n    function next(err) {\n      if (err) return callback(err);\n\n      _test(check);\n    }\n\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (!truth) return callback(null);\n\n      _fn(next);\n    }\n\n    _test(check);\n  }\n\n  function _withoutIndex(iteratee) {\n    return function (value, index, callback) {\n      return iteratee(value, callback);\n    };\n  }\n  /**\r\n   * Applies the function `iteratee` to each item in `coll`, in parallel.\r\n   * The `iteratee` is called with an item from the list, and a callback for when\r\n   * it has finished. If the `iteratee` passes an error to its `callback`, the\r\n   * main `callback` (for the `each` function) is immediately called with the\r\n   * error.\r\n   *\r\n   * Note, that since this function applies `iteratee` to each item in parallel,\r\n   * there is no guarantee that the iteratee functions will complete in order.\r\n   *\r\n   * @name each\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias forEach\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to\r\n   * each item in `coll`. Invoked with (item, callback).\r\n   * The array index is not passed to the iteratee.\r\n   * If you need the index, use `eachOf`.\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   * @example\r\n   *\r\n   * // assuming openFiles is an array of file names and saveFile is a function\r\n   * // to save the modified contents of that file:\r\n   *\r\n   * async.each(openFiles, saveFile, function(err){\r\n   *   // if any of the saves produced an error, err would equal that error\r\n   * });\r\n   *\r\n   * // assuming openFiles is an array of file names\r\n   * async.each(openFiles, function(file, callback) {\r\n   *\r\n   *     // Perform operation on file here.\r\n   *     console.log('Processing file ' + file);\r\n   *\r\n   *     if( file.length > 32 ) {\r\n   *       console.log('This file name is too long');\r\n   *       callback('File name too long');\r\n   *     } else {\r\n   *       // Do work to process file here\r\n   *       console.log('File processed');\r\n   *       callback();\r\n   *     }\r\n   * }, function(err) {\r\n   *     // if any of the file processing produced an error, err would equal that error\r\n   *     if( err ) {\r\n   *       // One of the iterations produced an error.\r\n   *       // All processing will now stop.\r\n   *       console.log('A file failed to process');\r\n   *     } else {\r\n   *       console.log('All files have been processed successfully');\r\n   *     }\r\n   * });\r\n   */\n\n\n  function eachLimit(coll, iteratee, callback) {\n    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n  /**\r\n   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name eachLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.each]{@link module:Collections.each}\r\n   * @alias forEachLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The array index is not passed to the iteratee.\r\n   * If you need the index, use `eachOfLimit`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   */\n\n\n  function eachLimit$1(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n  /**\r\n   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\r\n   *\r\n   * @name eachSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.each]{@link module:Collections.each}\r\n   * @alias forEachSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each\r\n   * item in `coll`.\r\n   * The array index is not passed to the iteratee.\r\n   * If you need the index, use `eachOfSeries`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   */\n\n\n  var eachSeries = doLimit(eachLimit$1, 1);\n  /**\r\n   * Wrap an async function and ensure it calls its callback on a later tick of\r\n   * the event loop.  If the function already calls its callback on a next tick,\r\n   * no extra deferral is added. This is useful for preventing stack overflows\r\n   * (`RangeError: Maximum call stack size exceeded`) and generally keeping\r\n   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\r\n   * contained. ES2017 `async` functions are returned as-is -- they are immune\r\n   * to Zalgo's corrupting influences, as they always resolve on a later tick.\r\n   *\r\n   * @name ensureAsync\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} fn - an async function, one that expects a node-style\r\n   * callback as its last argument.\r\n   * @returns {AsyncFunction} Returns a wrapped function with the exact same call\r\n   * signature as the function passed in.\r\n   * @example\r\n   *\r\n   * function sometimesAsync(arg, callback) {\r\n   *     if (cache[arg]) {\r\n   *         return callback(null, cache[arg]); // this would be synchronous!!\r\n   *     } else {\r\n   *         doSomeIO(arg, callback); // this IO would be asynchronous\r\n   *     }\r\n   * }\r\n   *\r\n   * // this has a risk of stack overflows if many results are cached in a row\r\n   * async.mapSeries(args, sometimesAsync, done);\r\n   *\r\n   * // this will defer sometimesAsync's callback if necessary,\r\n   * // preventing stack overflows\r\n   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\r\n   */\n\n  function ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return initialParams(function (args, callback) {\n      var sync = true;\n      args.push(function () {\n        var innerArgs = arguments;\n\n        if (sync) {\n          setImmediate$1(function () {\n            callback.apply(null, innerArgs);\n          });\n        } else {\n          callback.apply(null, innerArgs);\n        }\n      });\n      fn.apply(this, args);\n      sync = false;\n    });\n  }\n\n  function notId(v) {\n    return !v;\n  }\n  /**\r\n   * Returns `true` if every element in `coll` satisfies an async test. If any\r\n   * iteratee call returns `false`, the main `callback` is immediately called.\r\n   *\r\n   * @name every\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias all\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collection in parallel.\r\n   * The iteratee must complete with a boolean result value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result will be either `true` or `false`\r\n   * depending on the values of the async tests. Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.every(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // if result is true then every file exists\r\n   * });\r\n   */\n\n\n  var every = doParallel(_createTester(notId, notId));\n  /**\r\n   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name everyLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.every]{@link module:Collections.every}\r\n   * @alias allLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collection in parallel.\r\n   * The iteratee must complete with a boolean result value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result will be either `true` or `false`\r\n   * depending on the values of the async tests. Invoked with (err, result).\r\n   */\n\n  var everyLimit = doParallelLimit(_createTester(notId, notId));\n  /**\r\n   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\r\n   *\r\n   * @name everySeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.every]{@link module:Collections.every}\r\n   * @alias allSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collection in series.\r\n   * The iteratee must complete with a boolean result value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result will be either `true` or `false`\r\n   * depending on the values of the async tests. Invoked with (err, result).\r\n   */\n\n  var everySeries = doLimit(everyLimit, 1);\n  /**\r\n   * The base implementation of `_.property` without support for deep paths.\r\n   *\r\n   * @private\r\n   * @param {string} key The key of the property to get.\r\n   * @returns {Function} Returns the new accessor function.\r\n   */\n\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  function filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, function (x, index, callback) {\n      iteratee(x, function (err, v) {\n        truthValues[index] = !!v;\n        callback(err);\n      });\n    }, function (err) {\n      if (err) return callback(err);\n      var results = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        if (truthValues[i]) results.push(arr[i]);\n      }\n\n      callback(null, results);\n    });\n  }\n\n  function filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, function (x, index, callback) {\n      iteratee(x, function (err, v) {\n        if (err) {\n          callback(err);\n        } else {\n          if (v) {\n            results.push({\n              index: index,\n              value: x\n            });\n          }\n\n          callback();\n        }\n      });\n    }, function (err) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, arrayMap(results.sort(function (a, b) {\n          return a.index - b.index;\n        }), baseProperty('value')));\n      }\n    });\n  }\n\n  function _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\n  }\n  /**\r\n   * Returns a new array of all the values in `coll` which pass an async truth\r\n   * test. This operation is performed in parallel, but the results array will be\r\n   * in the same order as the original.\r\n   *\r\n   * @name filter\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias select\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.filter(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, results) {\r\n   *     // results now equals an array of the existing files\r\n   * });\r\n   */\n\n\n  var filter = doParallel(_filter);\n  /**\r\n   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name filterLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.filter]{@link module:Collections.filter}\r\n   * @alias selectLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   */\n\n  var filterLimit = doParallelLimit(_filter);\n  /**\r\n   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\r\n   *\r\n   * @name filterSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.filter]{@link module:Collections.filter}\r\n   * @alias selectSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results)\r\n   */\n\n  var filterSeries = doLimit(filterLimit, 1);\n  /**\r\n   * Calls the asynchronous function `fn` with a callback parameter that allows it\r\n   * to call itself again, in series, indefinitely.\r\n  \r\n   * If an error is passed to the callback then `errback` is called with the\r\n   * error, and execution stops, otherwise it will never be called.\r\n   *\r\n   * @name forever\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} fn - an async function to call repeatedly.\r\n   * Invoked with (next).\r\n   * @param {Function} [errback] - when `fn` passes an error to it's callback,\r\n   * this function will be called, and execution stops. Invoked with (err).\r\n   * @example\r\n   *\r\n   * async.forever(\r\n   *     function(next) {\r\n   *         // next is suitable for passing to things that need a callback(err [, whatever]);\r\n   *         // it will result in this function being called again.\r\n   *     },\r\n   *     function(err) {\r\n   *         // if next is called with a value in its first parameter, it will appear\r\n   *         // in here as 'err', and execution will stop.\r\n   *     }\r\n   * );\r\n   */\n\n  function forever(fn, errback) {\n    var done = onlyOnce(errback || noop);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n      if (err) return done(err);\n      task(next);\n    }\n\n    next();\n  }\n  /**\r\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name groupByLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.groupBy]{@link module:Collections.groupBy}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with a `key` to group the value under.\r\n   * Invoked with (value, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Result is an `Object` whoses\r\n   * properties are arrays of values which returned the corresponding key.\r\n   */\n\n\n  var groupByLimit = function (coll, limit, iteratee, callback) {\n    callback = callback || noop;\n\n    var _iteratee = wrapAsync(iteratee);\n\n    mapLimit(coll, limit, function (val, callback) {\n      _iteratee(val, function (err, key) {\n        if (err) return callback(err);\n        return callback(null, {\n          key: key,\n          val: val\n        });\n      });\n    }, function (err, mapResults) {\n      var result = {}; // from MDN, handle object having an `hasOwnProperty` prop\n\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          var key = mapResults[i].key;\n          var val = mapResults[i].val;\n\n          if (hasOwnProperty.call(result, key)) {\n            result[key].push(val);\n          } else {\n            result[key] = [val];\n          }\n        }\n      }\n\n      return callback(err, result);\n    });\n  };\n  /**\r\n   * Returns a new object, where each value corresponds to an array of items, from\r\n   * `coll`, that returned the corresponding key. That is, the keys of the object\r\n   * correspond to the values passed to the `iteratee` callback.\r\n   *\r\n   * Note: Since this function applies the `iteratee` to each item in parallel,\r\n   * there is no guarantee that the `iteratee` functions will complete in order.\r\n   * However, the values for each key in the `result` will be in the same order as\r\n   * the original `coll`. For Objects, the values will roughly be in the order of\r\n   * the original Objects' keys (but this can vary across JavaScript engines).\r\n   *\r\n   * @name groupBy\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with a `key` to group the value under.\r\n   * Invoked with (value, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Result is an `Object` whoses\r\n   * properties are arrays of values which returned the corresponding key.\r\n   * @example\r\n   *\r\n   * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\r\n   *     db.findById(userId, function(err, user) {\r\n   *         if (err) return callback(err);\r\n   *         return callback(null, user.age);\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result is object containing the userIds grouped by age\r\n   *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\r\n   * });\r\n   */\n\n\n  var groupBy = doLimit(groupByLimit, Infinity);\n  /**\r\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\r\n   *\r\n   * @name groupBySeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.groupBy]{@link module:Collections.groupBy}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with a `key` to group the value under.\r\n   * Invoked with (value, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Result is an `Object` whoses\r\n   * properties are arrays of values which returned the corresponding key.\r\n   */\n\n  var groupBySeries = doLimit(groupByLimit, 1);\n  /**\r\n   * Logs the result of an `async` function to the `console`. Only works in\r\n   * Node.js or in browsers that support `console.log` and `console.error` (such\r\n   * as FF and Chrome). If multiple arguments are returned from the async\r\n   * function, `console.log` is called on each argument in order.\r\n   *\r\n   * @name log\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} function - The function you want to eventually apply\r\n   * all arguments to.\r\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\r\n   * @example\r\n   *\r\n   * // in a module\r\n   * var hello = function(name, callback) {\r\n   *     setTimeout(function() {\r\n   *         callback(null, 'hello ' + name);\r\n   *     }, 1000);\r\n   * };\r\n   *\r\n   * // in the node repl\r\n   * node> async.log(hello, 'world');\r\n   * 'hello world'\r\n   */\n\n  var log = consoleFunc('log');\n  /**\r\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name mapValuesLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.mapValues]{@link module:Collections.mapValues}\r\n   * @category Collection\r\n   * @param {Object} obj - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n   * in `coll`.\r\n   * The iteratee should complete with the transformed value as its result.\r\n   * Invoked with (value, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. `result` is a new object consisting\r\n   * of each key from `obj`, with each transformed value on the right-hand side.\r\n   * Invoked with (err, result).\r\n   */\n\n  function mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback || noop);\n    var newObj = {};\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOfLimit(obj, limit, function (val, key, next) {\n      _iteratee(val, key, function (err, result) {\n        if (err) return next(err);\n        newObj[key] = result;\n        next();\n      });\n    }, function (err) {\n      callback(err, newObj);\n    });\n  }\n  /**\r\n   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\r\n   *\r\n   * Produces a new Object by mapping each value of `obj` through the `iteratee`\r\n   * function. The `iteratee` is called each `value` and `key` from `obj` and a\r\n   * callback for when it has finished processing. Each of these callbacks takes\r\n   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\r\n   * passes an error to its callback, the main `callback` (for the `mapValues`\r\n   * function) is immediately called with the error.\r\n   *\r\n   * Note, the order of the keys in the result is not guaranteed.  The keys will\r\n   * be roughly in the order they complete, (but this is very engine-specific)\r\n   *\r\n   * @name mapValues\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Object} obj - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n   * in `coll`.\r\n   * The iteratee should complete with the transformed value as its result.\r\n   * Invoked with (value, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. `result` is a new object consisting\r\n   * of each key from `obj`, with each transformed value on the right-hand side.\r\n   * Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.mapValues({\r\n   *     f1: 'file1',\r\n   *     f2: 'file2',\r\n   *     f3: 'file3'\r\n   * }, function (file, key, callback) {\r\n   *   fs.stat(file, callback);\r\n   * }, function(err, result) {\r\n   *     // result is now a map of stats for each file, e.g.\r\n   *     // {\r\n   *     //     f1: [stats for file1],\r\n   *     //     f2: [stats for file2],\r\n   *     //     f3: [stats for file3]\r\n   *     // }\r\n   * });\r\n   */\n\n\n  var mapValues = doLimit(mapValuesLimit, Infinity);\n  /**\r\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\r\n   *\r\n   * @name mapValuesSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.mapValues]{@link module:Collections.mapValues}\r\n   * @category Collection\r\n   * @param {Object} obj - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n   * in `coll`.\r\n   * The iteratee should complete with the transformed value as its result.\r\n   * Invoked with (value, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. `result` is a new object consisting\r\n   * of each key from `obj`, with each transformed value on the right-hand side.\r\n   * Invoked with (err, result).\r\n   */\n\n  var mapValuesSeries = doLimit(mapValuesLimit, 1);\n\n  function has(obj, key) {\n    return key in obj;\n  }\n  /**\r\n   * Caches the results of an async function. When creating a hash to store\r\n   * function results against, the callback is omitted from the hash and an\r\n   * optional hash function can be used.\r\n   *\r\n   * If no hash function is specified, the first argument is used as a hash key,\r\n   * which may work reasonably if it is a string or a data type that converts to a\r\n   * distinct string. Note that objects and arrays will not behave reasonably.\r\n   * Neither will cases where the other arguments are significant. In such cases,\r\n   * specify your own hash function.\r\n   *\r\n   * The cache of results is exposed as the `memo` property of the function\r\n   * returned by `memoize`.\r\n   *\r\n   * @name memoize\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} fn - The async function to proxy and cache results from.\r\n   * @param {Function} hasher - An optional function for generating a custom hash\r\n   * for storing results. It has all the arguments applied to it apart from the\r\n   * callback, and must be synchronous.\r\n   * @returns {AsyncFunction} a memoized version of `fn`\r\n   * @example\r\n   *\r\n   * var slow_fn = function(name, callback) {\r\n   *     // do something\r\n   *     callback(null, result);\r\n   * };\r\n   * var fn = async.memoize(slow_fn);\r\n   *\r\n   * // fn can now be used as if it were slow_fn\r\n   * fn('some name', function() {\r\n   *     // callback\r\n   * });\r\n   */\n\n\n  function memoize(fn, hasher) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    hasher = hasher || identity;\n\n    var _fn = wrapAsync(fn);\n\n    var memoized = initialParams(function memoized(args, callback) {\n      var key = hasher.apply(null, args);\n\n      if (has(memo, key)) {\n        setImmediate$1(function () {\n          callback.apply(null, memo[key]);\n        });\n      } else if (has(queues, key)) {\n        queues[key].push(callback);\n      } else {\n        queues[key] = [callback];\n\n        _fn.apply(null, args.concat(function ()\n        /*args*/\n        {\n          var args = slice(arguments);\n          memo[key] = args;\n          var q = queues[key];\n          delete queues[key];\n\n          for (var i = 0, l = q.length; i < l; i++) {\n            q[i].apply(null, args);\n          }\n        }));\n      }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n  }\n  /**\r\n   * Calls `callback` on a later loop around the event loop. In Node.js this just\r\n   * calls `process.nextTick`.  In the browser it will use `setImmediate` if\r\n   * available, otherwise `setTimeout(callback, 0)`, which means other higher\r\n   * priority events may precede the execution of `callback`.\r\n   *\r\n   * This is used internally for browser-compatibility purposes.\r\n   *\r\n   * @name nextTick\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @see [async.setImmediate]{@link module:Utils.setImmediate}\r\n   * @category Util\r\n   * @param {Function} callback - The function to call on a later loop around\r\n   * the event loop. Invoked with (args...).\r\n   * @param {...*} args... - any number of additional arguments to pass to the\r\n   * callback on the next tick.\r\n   * @example\r\n   *\r\n   * var call_order = [];\r\n   * async.nextTick(function() {\r\n   *     call_order.push('two');\r\n   *     // call_order now equals ['one','two']\r\n   * });\r\n   * call_order.push('one');\r\n   *\r\n   * async.setImmediate(function (a, b, c) {\r\n   *     // a, b, and c equal 1, 2, and 3\r\n   * }, 1, 2, 3);\r\n   */\n\n\n  var _defer$1;\n\n  if (hasNextTick) {\n    _defer$1 = process.nextTick;\n  } else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n  } else {\n    _defer$1 = fallback;\n  }\n\n  var nextTick = wrap(_defer$1);\n\n  function _parallel(eachfn, tasks, callback) {\n    callback = callback || noop;\n    var results = isArrayLike(tasks) ? [] : {};\n    eachfn(tasks, function (task, key, callback) {\n      wrapAsync(task)(function (err, result) {\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        }\n\n        results[key] = result;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, results);\n    });\n  }\n  /**\r\n   * Run the `tasks` collection of functions in parallel, without waiting until\r\n   * the previous function has completed. If any of the functions pass an error to\r\n   * its callback, the main `callback` is immediately called with the value of the\r\n   * error. Once the `tasks` have completed, the results are passed to the final\r\n   * `callback` as an array.\r\n   *\r\n   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\r\n   * parallel execution of code.  If your tasks do not use any timers or perform\r\n   * any I/O, they will actually be executed in series.  Any synchronous setup\r\n   * sections for each task will happen one after the other.  JavaScript remains\r\n   * single-threaded.\r\n   *\r\n   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\r\n   * execution of other tasks when a task fails.\r\n   *\r\n   * It is also possible to use an object instead of an array. Each property will\r\n   * be run as a function and the results will be passed to the final `callback`\r\n   * as an object instead of an array. This can be a more readable way of handling\r\n   * results from {@link async.parallel}.\r\n   *\r\n   * @name parallel\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} tasks - A collection of\r\n   * [async functions]{@link AsyncFunction} to run.\r\n   * Each async function can complete with any number of optional `result` values.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed successfully. This function gets a results array\r\n   * (or object) containing all the result arguments passed to the task callbacks.\r\n   * Invoked with (err, results).\r\n   *\r\n   * @example\r\n   * async.parallel([\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'two');\r\n   *         }, 100);\r\n   *     }\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // the results array will equal ['one','two'] even though\r\n   *     // the second function had a shorter timeout.\r\n   * });\r\n   *\r\n   * // an example using an object instead of an array\r\n   * async.parallel({\r\n   *     one: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 1);\r\n   *         }, 200);\r\n   *     },\r\n   *     two: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 2);\r\n   *         }, 100);\r\n   *     }\r\n   * }, function(err, results) {\r\n   *     // results is now equals to: {one: 1, two: 2}\r\n   * });\r\n   */\n\n\n  function parallelLimit(tasks, callback) {\n    _parallel(eachOf, tasks, callback);\n  }\n  /**\r\n   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name parallelLimit\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.parallel]{@link module:ControlFlow.parallel}\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} tasks - A collection of\r\n   * [async functions]{@link AsyncFunction} to run.\r\n   * Each async function can complete with any number of optional `result` values.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed successfully. This function gets a results array\r\n   * (or object) containing all the result arguments passed to the task callbacks.\r\n   * Invoked with (err, results).\r\n   */\n\n\n  function parallelLimit$1(tasks, limit, callback) {\n    _parallel(_eachOfLimit(limit), tasks, callback);\n  }\n  /**\r\n   * A queue of tasks for the worker function to complete.\r\n   * @typedef {Object} QueueObject\r\n   * @memberOf module:ControlFlow\r\n   * @property {Function} length - a function returning the number of items\r\n   * waiting to be processed. Invoke with `queue.length()`.\r\n   * @property {boolean} started - a boolean indicating whether or not any\r\n   * items have been pushed and processed by the queue.\r\n   * @property {Function} running - a function returning the number of items\r\n   * currently being processed. Invoke with `queue.running()`.\r\n   * @property {Function} workersList - a function returning the array of items\r\n   * currently being processed. Invoke with `queue.workersList()`.\r\n   * @property {Function} idle - a function returning false if there are items\r\n   * waiting or being processed, or true if not. Invoke with `queue.idle()`.\r\n   * @property {number} concurrency - an integer for determining how many `worker`\r\n   * functions should be run in parallel. This property can be changed after a\r\n   * `queue` is created to alter the concurrency on-the-fly.\r\n   * @property {Function} push - add a new task to the `queue`. Calls `callback`\r\n   * once the `worker` has finished processing the task. Instead of a single task,\r\n   * a `tasks` array can be submitted. The respective callback is used for every\r\n   * task in the list. Invoke with `queue.push(task, [callback])`,\r\n   * @property {Function} unshift - add a new task to the front of the `queue`.\r\n   * Invoke with `queue.unshift(task, [callback])`.\r\n   * @property {Function} remove - remove items from the queue that match a test\r\n   * function.  The test function will be passed an object with a `data` property,\r\n   * and a `priority` property, if this is a\r\n   * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\r\n   * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\r\n   * `function ({data, priority}) {}` and returns a Boolean.\r\n   * @property {Function} saturated - a callback that is called when the number of\r\n   * running workers hits the `concurrency` limit, and further tasks will be\r\n   * queued.\r\n   * @property {Function} unsaturated - a callback that is called when the number\r\n   * of running workers is less than the `concurrency` & `buffer` limits, and\r\n   * further tasks will not be queued.\r\n   * @property {number} buffer - A minimum threshold buffer in order to say that\r\n   * the `queue` is `unsaturated`.\r\n   * @property {Function} empty - a callback that is called when the last item\r\n   * from the `queue` is given to a `worker`.\r\n   * @property {Function} drain - a callback that is called when the last item\r\n   * from the `queue` has returned from the `worker`.\r\n   * @property {Function} error - a callback that is called when a task errors.\r\n   * Has the signature `function(error, task)`.\r\n   * @property {boolean} paused - a boolean for determining whether the queue is\r\n   * in a paused state.\r\n   * @property {Function} pause - a function that pauses the processing of tasks\r\n   * until `resume()` is called. Invoke with `queue.pause()`.\r\n   * @property {Function} resume - a function that resumes the processing of\r\n   * queued tasks when the queue is paused. Invoke with `queue.resume()`.\r\n   * @property {Function} kill - a function that removes the `drain` callback and\r\n   * empties remaining tasks from the queue forcing it to go idle. No more tasks\r\n   * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\r\n   */\n\n  /**\r\n   * Creates a `queue` object with the specified `concurrency`. Tasks added to the\r\n   * `queue` are processed in parallel (up to the `concurrency` limit). If all\r\n   * `worker`s are in progress, the task is queued until one becomes available.\r\n   * Once a `worker` completes a `task`, that `task`'s callback is called.\r\n   *\r\n   * @name queue\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\r\n   * If you want to handle errors from an individual task, pass a callback to\r\n   * `q.push()`. Invoked with (task, callback).\r\n   * @param {number} [concurrency=1] - An `integer` for determining how many\r\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\r\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\r\n   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\r\n   * attached as certain properties to listen for specific events during the\r\n   * lifecycle of the queue.\r\n   * @example\r\n   *\r\n   * // create a queue object with concurrency 2\r\n   * var q = async.queue(function(task, callback) {\r\n   *     console.log('hello ' + task.name);\r\n   *     callback();\r\n   * }, 2);\r\n   *\r\n   * // assign a callback\r\n   * q.drain = function() {\r\n   *     console.log('all items have been processed');\r\n   * };\r\n   *\r\n   * // add some items to the queue\r\n   * q.push({name: 'foo'}, function(err) {\r\n   *     console.log('finished processing foo');\r\n   * });\r\n   * q.push({name: 'bar'}, function (err) {\r\n   *     console.log('finished processing bar');\r\n   * });\r\n   *\r\n   * // add some items to the queue (batch-wise)\r\n   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\r\n   *     console.log('finished processing item');\r\n   * });\r\n   *\r\n   * // add some items to the front of the queue\r\n   * q.unshift({name: 'bar'}, function (err) {\r\n   *     console.log('finished processing bar');\r\n   * });\r\n   */\n\n\n  var queue$1 = function (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n\n    return queue(function (items, cb) {\n      _worker(items[0], cb);\n    }, concurrency, 1);\n  };\n  /**\r\n   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\r\n   * completed in ascending priority order.\r\n   *\r\n   * @name priorityQueue\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.queue]{@link module:ControlFlow.queue}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\r\n   * If you want to handle errors from an individual task, pass a callback to\r\n   * `q.push()`.\r\n   * Invoked with (task, callback).\r\n   * @param {number} concurrency - An `integer` for determining how many `worker`\r\n   * functions should be run in parallel.  If omitted, the concurrency defaults to\r\n   * `1`.  If the concurrency is `0`, an error is thrown.\r\n   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\r\n   * differences between `queue` and `priorityQueue` objects:\r\n   * * `push(task, priority, [callback])` - `priority` should be a number. If an\r\n   *   array of `tasks` is given, all tasks will be assigned the same priority.\r\n   * * The `unshift` method was removed.\r\n   */\n\n\n  var priorityQueue = function (worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency); // Override push to accept second parameter representing priority\n\n    q.push = function (data, priority, callback) {\n      if (callback == null) callback = noop;\n\n      if (typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n\n      q.started = true;\n\n      if (!isArray(data)) {\n        data = [data];\n      }\n\n      if (data.length === 0) {\n        // call drain immediately if there are no tasks\n        return setImmediate$1(function () {\n          q.drain();\n        });\n      }\n\n      priority = priority || 0;\n      var nextNode = q._tasks.head;\n\n      while (nextNode && priority >= nextNode.priority) {\n        nextNode = nextNode.next;\n      }\n\n      for (var i = 0, l = data.length; i < l; i++) {\n        var item = {\n          data: data[i],\n          priority: priority,\n          callback: callback\n        };\n\n        if (nextNode) {\n          q._tasks.insertBefore(nextNode, item);\n        } else {\n          q._tasks.push(item);\n        }\n      }\n\n      setImmediate$1(q.process);\n    }; // Remove unshift function\n\n\n    delete q.unshift;\n    return q;\n  };\n  /**\r\n   * Runs the `tasks` array of functions in parallel, without waiting until the\r\n   * previous function has completed. Once any of the `tasks` complete or pass an\r\n   * error to its callback, the main `callback` is immediately called. It's\r\n   * equivalent to `Promise.race()`.\r\n   *\r\n   * @name race\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\r\n   * to run. Each function can complete with an optional `result` value.\r\n   * @param {Function} callback - A callback to run once any of the functions have\r\n   * completed. This function gets an error or result from the first function that\r\n   * completed. Invoked with (err, result).\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * async.race([\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'two');\r\n   *         }, 100);\r\n   *     }\r\n   * ],\r\n   * // main callback\r\n   * function(err, result) {\r\n   *     // the result will be equal to 'two' as it finishes earlier\r\n   * });\r\n   */\n\n\n  function race(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n\n    for (var i = 0, l = tasks.length; i < l; i++) {\n      wrapAsync(tasks[i])(callback);\n    }\n  }\n  /**\r\n   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\r\n   *\r\n   * @name reduceRight\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.reduce]{@link module:Collections.reduce}\r\n   * @alias foldr\r\n   * @category Collection\r\n   * @param {Array} array - A collection to iterate over.\r\n   * @param {*} memo - The initial state of the reduction.\r\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n   * array to produce the next step in the reduction.\r\n   * The `iteratee` should complete with the next state of the reduction.\r\n   * If the iteratee complete with an error, the reduction is stopped and the\r\n   * main `callback` is immediately called with the error.\r\n   * Invoked with (memo, item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\r\n   * (err, result).\r\n   */\n\n\n  function reduceRight(array, memo, iteratee, callback) {\n    var reversed = slice(array).reverse();\n    reduce(reversed, memo, iteratee, callback);\n  }\n  /**\r\n   * Wraps the async function in another function that always completes with a\r\n   * result object, even when it errors.\r\n   *\r\n   * The result object has either the property `error` or `value`.\r\n   *\r\n   * @name reflect\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} fn - The async function you want to wrap\r\n   * @returns {Function} - A function that always passes null to it's callback as\r\n   * the error. The second argument to the callback will be an `object` with\r\n   * either an `error` or a `value` property.\r\n   * @example\r\n   *\r\n   * async.parallel([\r\n   *     async.reflect(function(callback) {\r\n   *         // do some stuff ...\r\n   *         callback(null, 'one');\r\n   *     }),\r\n   *     async.reflect(function(callback) {\r\n   *         // do some more stuff but error ...\r\n   *         callback('bad stuff happened');\r\n   *     }),\r\n   *     async.reflect(function(callback) {\r\n   *         // do some more stuff ...\r\n   *         callback(null, 'two');\r\n   *     })\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // values\r\n   *     // results[0].value = 'one'\r\n   *     // results[1].error = 'bad stuff happened'\r\n   *     // results[2].value = 'two'\r\n   * });\r\n   */\n\n\n  function reflect(fn) {\n    var _fn = wrapAsync(fn);\n\n    return initialParams(function reflectOn(args, reflectCallback) {\n      args.push(function callback(error, cbArg) {\n        if (error) {\n          reflectCallback(null, {\n            error: error\n          });\n        } else {\n          var value;\n\n          if (arguments.length <= 2) {\n            value = cbArg;\n          } else {\n            value = slice(arguments, 1);\n          }\n\n          reflectCallback(null, {\n            value: value\n          });\n        }\n      });\n      return _fn.apply(this, args);\n    });\n  }\n  /**\r\n   * A helper function that wraps an array or an object of functions with `reflect`.\r\n   *\r\n   * @name reflectAll\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @see [async.reflect]{@link module:Utils.reflect}\r\n   * @category Util\r\n   * @param {Array|Object|Iterable} tasks - The collection of\r\n   * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\r\n   * @returns {Array} Returns an array of async functions, each wrapped in\r\n   * `async.reflect`\r\n   * @example\r\n   *\r\n   * let tasks = [\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     function(callback) {\r\n   *         // do some more stuff but error ...\r\n   *         callback(new Error('bad stuff happened'));\r\n   *     },\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'two');\r\n   *         }, 100);\r\n   *     }\r\n   * ];\r\n   *\r\n   * async.parallel(async.reflectAll(tasks),\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // values\r\n   *     // results[0].value = 'one'\r\n   *     // results[1].error = Error('bad stuff happened')\r\n   *     // results[2].value = 'two'\r\n   * });\r\n   *\r\n   * // an example using an object instead of an array\r\n   * let tasks = {\r\n   *     one: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     two: function(callback) {\r\n   *         callback('two');\r\n   *     },\r\n   *     three: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'three');\r\n   *         }, 100);\r\n   *     }\r\n   * };\r\n   *\r\n   * async.parallel(async.reflectAll(tasks),\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // values\r\n   *     // results.one.value = 'one'\r\n   *     // results.two.error = 'two'\r\n   *     // results.three.value = 'three'\r\n   * });\r\n   */\n\n\n  function reflectAll(tasks) {\n    var results;\n\n    if (isArray(tasks)) {\n      results = arrayMap(tasks, reflect);\n    } else {\n      results = {};\n      baseForOwn(tasks, function (task, key) {\n        results[key] = reflect.call(this, task);\n      });\n    }\n\n    return results;\n  }\n\n  function reject$1(eachfn, arr, iteratee, callback) {\n    _filter(eachfn, arr, function (value, cb) {\n      iteratee(value, function (err, v) {\n        cb(err, !v);\n      });\n    }, callback);\n  }\n  /**\r\n   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\r\n   *\r\n   * @name reject\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.filter]{@link module:Collections.filter}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - An async truth test to apply to each item in\r\n   * `coll`.\r\n   * The should complete with a boolean value as its `result`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.reject(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, results) {\r\n   *     // results now equals an array of missing files\r\n   *     createFiles(results);\r\n   * });\r\n   */\n\n\n  var reject = doParallel(reject$1);\n  /**\r\n   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name rejectLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.reject]{@link module:Collections.reject}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - An async truth test to apply to each item in\r\n   * `coll`.\r\n   * The should complete with a boolean value as its `result`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   */\n\n  var rejectLimit = doParallelLimit(reject$1);\n  /**\r\n   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\r\n   *\r\n   * @name rejectSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.reject]{@link module:Collections.reject}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - An async truth test to apply to each item in\r\n   * `coll`.\r\n   * The should complete with a boolean value as its `result`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   */\n\n  var rejectSeries = doLimit(rejectLimit, 1);\n  /**\r\n   * Creates a function that returns `value`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 2.4.0\r\n   * @category Util\r\n   * @param {*} value The value to return from the new function.\r\n   * @returns {Function} Returns the new constant function.\r\n   * @example\r\n   *\r\n   * var objects = _.times(2, _.constant({ 'a': 1 }));\r\n   *\r\n   * console.log(objects);\r\n   * // => [{ 'a': 1 }, { 'a': 1 }]\r\n   *\r\n   * console.log(objects[0] === objects[1]);\r\n   * // => true\r\n   */\n\n  function constant$1(value) {\n    return function () {\n      return value;\n    };\n  }\n  /**\r\n   * Attempts to get a successful response from `task` no more than `times` times\r\n   * before returning an error. If the task is successful, the `callback` will be\r\n   * passed the result of the successful task. If all attempts fail, the callback\r\n   * will be passed the error and result (if any) of the final attempt.\r\n   *\r\n   * @name retry\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @see [async.retryable]{@link module:ControlFlow.retryable}\r\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\r\n   * object with `times` and `interval` or a number.\r\n   * * `times` - The number of attempts to make before giving up.  The default\r\n   *   is `5`.\r\n   * * `interval` - The time to wait between retries, in milliseconds.  The\r\n   *   default is `0`. The interval may also be specified as a function of the\r\n   *   retry count (see example).\r\n   * * `errorFilter` - An optional synchronous function that is invoked on\r\n   *   erroneous result. If it returns `true` the retry attempts will continue;\r\n   *   if the function returns `false` the retry flow is aborted with the current\r\n   *   attempt's error and result being returned to the final callback.\r\n   *   Invoked with (err).\r\n   * * If `opts` is a number, the number specifies the number of times to retry,\r\n   *   with the default interval of `0`.\r\n   * @param {AsyncFunction} task - An async function to retry.\r\n   * Invoked with (callback).\r\n   * @param {Function} [callback] - An optional callback which is called when the\r\n   * task has succeeded, or after the final failed attempt. It receives the `err`\r\n   * and `result` arguments of the last attempt at completing the `task`. Invoked\r\n   * with (err, results).\r\n   *\r\n   * @example\r\n   *\r\n   * // The `retry` function can be used as a stand-alone control flow by passing\r\n   * // a callback, as shown below:\r\n   *\r\n   * // try calling apiMethod 3 times\r\n   * async.retry(3, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod 3 times, waiting 200 ms between each retry\r\n   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod 10 times with exponential backoff\r\n   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\r\n   * async.retry({\r\n   *   times: 10,\r\n   *   interval: function(retryCount) {\r\n   *     return 50 * Math.pow(2, retryCount);\r\n   *   }\r\n   * }, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod the default 5 times no delay between each retry\r\n   * async.retry(apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod only when error condition satisfies, all other\r\n   * // errors will abort the retry control flow and return to final callback\r\n   * async.retry({\r\n   *   errorFilter: function(err) {\r\n   *     return err.message === 'Temporary error'; // only retry on a specific error\r\n   *   }\r\n   * }, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // to retry individual methods that are not as reliable within other\r\n   * // control flow functions, use the `retryable` wrapper:\r\n   * async.auto({\r\n   *     users: api.getUsers.bind(api),\r\n   *     payments: async.retryable(3, api.getPayments.bind(api))\r\n   * }, function(err, results) {\r\n   *     // do something with the results\r\n   * });\r\n   *\r\n   */\n\n\n  function retry(opts, task, callback) {\n    var DEFAULT_TIMES = 5;\n    var DEFAULT_INTERVAL = 0;\n    var options = {\n      times: DEFAULT_TIMES,\n      intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    function parseTimes(acc, t) {\n      if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n        acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);\n        acc.errorFilter = t.errorFilter;\n      } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n      } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n      }\n    }\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n      callback = task || noop;\n      task = opts;\n    } else {\n      parseTimes(options, opts);\n      callback = callback || noop;\n    }\n\n    if (typeof task !== 'function') {\n      throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n\n    function retryAttempt() {\n      _task(function (err) {\n        if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {\n          setTimeout(retryAttempt, options.intervalFunc(attempt));\n        } else {\n          callback.apply(null, arguments);\n        }\n      });\n    }\n\n    retryAttempt();\n  }\n  /**\r\n   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\r\n   * wraps a task and makes it retryable, rather than immediately calling it\r\n   * with retries.\r\n   *\r\n   * @name retryable\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.retry]{@link module:ControlFlow.retry}\r\n   * @category Control Flow\r\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\r\n   * options, exactly the same as from `retry`\r\n   * @param {AsyncFunction} task - the asynchronous function to wrap.\r\n   * This function will be passed any arguments passed to the returned wrapper.\r\n   * Invoked with (...args, callback).\r\n   * @returns {AsyncFunction} The wrapped function, which when invoked, will\r\n   * retry on an error, based on the parameters specified in `opts`.\r\n   * This function will accept the same parameters as `task`.\r\n   * @example\r\n   *\r\n   * async.auto({\r\n   *     dep1: async.retryable(3, getFromFlakyService),\r\n   *     process: [\"dep1\", async.retryable(3, function (results, cb) {\r\n   *         maybeProcessData(results.dep1, cb);\r\n   *     })]\r\n   * }, callback);\r\n   */\n\n\n  var retryable = function (opts, task) {\n    if (!task) {\n      task = opts;\n      opts = null;\n    }\n\n    var _task = wrapAsync(task);\n\n    return initialParams(function (args, callback) {\n      function taskFn(cb) {\n        _task.apply(null, args.concat(cb));\n      }\n\n      if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\n    });\n  };\n  /**\r\n   * Run the functions in the `tasks` collection in series, each one running once\r\n   * the previous function has completed. If any functions in the series pass an\r\n   * error to its callback, no more functions are run, and `callback` is\r\n   * immediately called with the value of the error. Otherwise, `callback`\r\n   * receives an array of results when `tasks` have completed.\r\n   *\r\n   * It is also possible to use an object instead of an array. Each property will\r\n   * be run as a function, and the results will be passed to the final `callback`\r\n   * as an object instead of an array. This can be a more readable way of handling\r\n   *  results from {@link async.series}.\r\n   *\r\n   * **Note** that while many implementations preserve the order of object\r\n   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\r\n   * explicitly states that\r\n   *\r\n   * > The mechanics and order of enumerating the properties is not specified.\r\n   *\r\n   * So if you rely on the order in which your series of functions are executed,\r\n   * and want this to work on all platforms, consider using an array.\r\n   *\r\n   * @name series\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} tasks - A collection containing\r\n   * [async functions]{@link AsyncFunction} to run in series.\r\n   * Each function can complete with any number of optional `result` values.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed. This function gets a results array (or object)\r\n   * containing all the result arguments passed to the `task` callbacks. Invoked\r\n   * with (err, result).\r\n   * @example\r\n   * async.series([\r\n   *     function(callback) {\r\n   *         // do some stuff ...\r\n   *         callback(null, 'one');\r\n   *     },\r\n   *     function(callback) {\r\n   *         // do some more stuff ...\r\n   *         callback(null, 'two');\r\n   *     }\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // results is now equal to ['one', 'two']\r\n   * });\r\n   *\r\n   * async.series({\r\n   *     one: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 1);\r\n   *         }, 200);\r\n   *     },\r\n   *     two: function(callback){\r\n   *         setTimeout(function() {\r\n   *             callback(null, 2);\r\n   *         }, 100);\r\n   *     }\r\n   * }, function(err, results) {\r\n   *     // results is now equal to: {one: 1, two: 2}\r\n   * });\r\n   */\n\n\n  function series(tasks, callback) {\n    _parallel(eachOfSeries, tasks, callback);\n  }\n  /**\r\n   * Returns `true` if at least one element in the `coll` satisfies an async test.\r\n   * If any iteratee call returns `true`, the main `callback` is immediately\r\n   * called.\r\n   *\r\n   * @name some\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias any\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collections in parallel.\r\n   * The iteratee should complete with a boolean `result` value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the iteratee functions have finished.\r\n   * Result will be either `true` or `false` depending on the values of the async\r\n   * tests. Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.some(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // if result is true then at least one of the files exists\r\n   * });\r\n   */\n\n\n  var some = doParallel(_createTester(Boolean, identity));\n  /**\r\n   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name someLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.some]{@link module:Collections.some}\r\n   * @alias anyLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collections in parallel.\r\n   * The iteratee should complete with a boolean `result` value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the iteratee functions have finished.\r\n   * Result will be either `true` or `false` depending on the values of the async\r\n   * tests. Invoked with (err, result).\r\n   */\n\n  var someLimit = doParallelLimit(_createTester(Boolean, identity));\n  /**\r\n   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\r\n   *\r\n   * @name someSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.some]{@link module:Collections.some}\r\n   * @alias anySeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collections in series.\r\n   * The iteratee should complete with a boolean `result` value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the iteratee functions have finished.\r\n   * Result will be either `true` or `false` depending on the values of the async\r\n   * tests. Invoked with (err, result).\r\n   */\n\n  var someSeries = doLimit(someLimit, 1);\n  /**\r\n   * Sorts a list by the results of running each `coll` value through an async\r\n   * `iteratee`.\r\n   *\r\n   * @name sortBy\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with a value to use as the sort criteria as\r\n   * its `result`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} callback - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is the items\r\n   * from the original `coll` sorted by the values returned by the `iteratee`\r\n   * calls. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.sortBy(['file1','file2','file3'], function(file, callback) {\r\n   *     fs.stat(file, function(err, stats) {\r\n   *         callback(err, stats.mtime);\r\n   *     });\r\n   * }, function(err, results) {\r\n   *     // results is now the original array of files sorted by\r\n   *     // modified date\r\n   * });\r\n   *\r\n   * // By modifying the callback parameter the\r\n   * // sorting order can be influenced:\r\n   *\r\n   * // ascending order\r\n   * async.sortBy([1,9,3,5], function(x, callback) {\r\n   *     callback(null, x);\r\n   * }, function(err,result) {\r\n   *     // result callback\r\n   * });\r\n   *\r\n   * // descending order\r\n   * async.sortBy([1,9,3,5], function(x, callback) {\r\n   *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\r\n   * }, function(err,result) {\r\n   *     // result callback\r\n   * });\r\n   */\n\n  function sortBy(coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n\n    map(coll, function (x, callback) {\n      _iteratee(x, function (err, criteria) {\n        if (err) return callback(err);\n        callback(null, {\n          value: x,\n          criteria: criteria\n        });\n      });\n    }, function (err, results) {\n      if (err) return callback(err);\n      callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n    });\n\n    function comparator(left, right) {\n      var a = left.criteria,\n          b = right.criteria;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }\n  }\n  /**\r\n   * Sets a time limit on an asynchronous function. If the function does not call\r\n   * its callback within the specified milliseconds, it will be called with a\r\n   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\r\n   *\r\n   * @name timeout\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} asyncFn - The async function to limit in time.\r\n   * @param {number} milliseconds - The specified time limit.\r\n   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\r\n   * to timeout Error for more information..\r\n   * @returns {AsyncFunction} Returns a wrapped function that can be used with any\r\n   * of the control flow functions.\r\n   * Invoke this function with the same parameters as you would `asyncFunc`.\r\n   * @example\r\n   *\r\n   * function myFunction(foo, callback) {\r\n   *     doAsyncTask(foo, function(err, data) {\r\n   *         // handle errors\r\n   *         if (err) return callback(err);\r\n   *\r\n   *         // do some stuff ...\r\n   *\r\n   *         // return processed data\r\n   *         return callback(null, data);\r\n   *     });\r\n   * }\r\n   *\r\n   * var wrapped = async.timeout(myFunction, 1000);\r\n   *\r\n   * // call `wrapped` as you would `myFunction`\r\n   * wrapped({ bar: 'bar' }, function(err, data) {\r\n   *     // if `myFunction` takes < 1000 ms to execute, `err`\r\n   *     // and `data` will have their expected values\r\n   *\r\n   *     // else `err` will be an Error with the code 'ETIMEDOUT'\r\n   * });\r\n   */\n\n\n  function timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n    return initialParams(function (args, callback) {\n      var timedOut = false;\n      var timer;\n\n      function timeoutCallback() {\n        var name = asyncFn.name || 'anonymous';\n        var error = new Error('Callback function \"' + name + '\" timed out.');\n        error.code = 'ETIMEDOUT';\n\n        if (info) {\n          error.info = info;\n        }\n\n        timedOut = true;\n        callback(error);\n      }\n\n      args.push(function () {\n        if (!timedOut) {\n          callback.apply(null, arguments);\n          clearTimeout(timer);\n        }\n      }); // setup timer and call original function\n\n      timer = setTimeout(timeoutCallback, milliseconds);\n      fn.apply(null, args);\n    });\n  }\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n\n  var nativeCeil = Math.ceil;\n  var nativeMax = Math.max;\n  /**\r\n   * The base implementation of `_.range` and `_.rangeRight` which doesn't\r\n   * coerce arguments.\r\n   *\r\n   * @private\r\n   * @param {number} start The start of the range.\r\n   * @param {number} end The end of the range.\r\n   * @param {number} step The value to increment or decrement by.\r\n   * @param {boolean} [fromRight] Specify iterating from right to left.\r\n   * @returns {Array} Returns the range of numbers.\r\n   */\n\n  function baseRange(start, end, step, fromRight) {\n    var index = -1,\n        length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n        result = Array(length);\n\n    while (length--) {\n      result[fromRight ? length : ++index] = start;\n      start += step;\n    }\n\n    return result;\n  }\n  /**\r\n   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name timesLimit\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.times]{@link module:ControlFlow.times}\r\n   * @category Control Flow\r\n   * @param {number} count - The number of times to run the function.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n   * Invoked with the iteration index and a callback: (n, next).\r\n   * @param {Function} callback - see [async.map]{@link module:Collections.map}.\r\n   */\n\n\n  function timeLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n\n    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\n  }\n  /**\r\n   * Calls the `iteratee` function `n` times, and accumulates results in the same\r\n   * manner you would use with [map]{@link module:Collections.map}.\r\n   *\r\n   * @name times\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.map]{@link module:Collections.map}\r\n   * @category Control Flow\r\n   * @param {number} n - The number of times to run the function.\r\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n   * Invoked with the iteration index and a callback: (n, next).\r\n   * @param {Function} callback - see {@link module:Collections.map}.\r\n   * @example\r\n   *\r\n   * // Pretend this is some complicated async factory\r\n   * var createUser = function(id, callback) {\r\n   *     callback(null, {\r\n   *         id: 'user' + id\r\n   *     });\r\n   * };\r\n   *\r\n   * // generate 5 users\r\n   * async.times(5, function(n, next) {\r\n   *     createUser(n, function(err, user) {\r\n   *         next(err, user);\r\n   *     });\r\n   * }, function(err, users) {\r\n   *     // we should now have 5 users\r\n   * });\r\n   */\n\n\n  var times = doLimit(timeLimit, Infinity);\n  /**\r\n   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\r\n   *\r\n   * @name timesSeries\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.times]{@link module:ControlFlow.times}\r\n   * @category Control Flow\r\n   * @param {number} n - The number of times to run the function.\r\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n   * Invoked with the iteration index and a callback: (n, next).\r\n   * @param {Function} callback - see {@link module:Collections.map}.\r\n   */\n\n  var timesSeries = doLimit(timeLimit, 1);\n  /**\r\n   * A relative of `reduce`.  Takes an Object or Array, and iterates over each\r\n   * element in series, each step potentially mutating an `accumulator` value.\r\n   * The type of the accumulator defaults to the type of collection passed in.\r\n   *\r\n   * @name transform\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {*} [accumulator] - The initial state of the transform.  If omitted,\r\n   * it will default to an empty Object or Array, depending on the type of `coll`\r\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n   * collection that potentially modifies the accumulator.\r\n   * Invoked with (accumulator, item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result is the transformed accumulator.\r\n   * Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.transform([1,2,3], function(acc, item, index, callback) {\r\n   *     // pointless async:\r\n   *     process.nextTick(function() {\r\n   *         acc.push(item * 2)\r\n   *         callback(null)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result is now equal to [2, 4, 6]\r\n   * });\r\n   *\r\n   * @example\r\n   *\r\n   * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\r\n   *     setImmediate(function () {\r\n   *         obj[key] = val * 2;\r\n   *         callback();\r\n   *     })\r\n   * }, function (err, result) {\r\n   *     // result is equal to {a: 2, b: 4, c: 6}\r\n   * })\r\n   */\n\n  function transform(coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3) {\n      callback = iteratee;\n      iteratee = accumulator;\n      accumulator = isArray(coll) ? [] : {};\n    }\n\n    callback = once(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf(coll, function (v, k, cb) {\n      _iteratee(accumulator, v, k, cb);\n    }, function (err) {\n      callback(err, accumulator);\n    });\n  }\n  /**\r\n   * It runs each task in series but stops whenever any of the functions were\r\n   * successful. If one of the tasks were successful, the `callback` will be\r\n   * passed the result of the successful task. If all tasks fail, the callback\r\n   * will be passed the error and result (if any) of the final attempt.\r\n   *\r\n   * @name tryEach\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} tasks - A collection containing functions to\r\n   * run, each function is passed a `callback(err, result)` it must call on\r\n   * completion with an error `err` (which can be `null`) and an optional `result`\r\n   * value.\r\n   * @param {Function} [callback] - An optional callback which is called when one\r\n   * of the tasks has succeeded, or all have failed. It receives the `err` and\r\n   * `result` arguments of the last attempt at completing the `task`. Invoked with\r\n   * (err, results).\r\n   * @example\r\n   * async.tryEach([\r\n   *     function getDataFromFirstWebsite(callback) {\r\n   *         // Try getting the data from the first website\r\n   *         callback(err, data);\r\n   *     },\r\n   *     function getDataFromSecondWebsite(callback) {\r\n   *         // First website failed,\r\n   *         // Try getting the data from the backup website\r\n   *         callback(err, data);\r\n   *     }\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     Now do something with the data.\r\n   * });\r\n   *\r\n   */\n\n\n  function tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    callback = callback || noop;\n    eachSeries(tasks, function (task, callback) {\n      wrapAsync(task)(function (err, res\n      /*, ...args*/\n      ) {\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        } else {\n          result = res;\n        }\n\n        error = err;\n        callback(!err);\n      });\n    }, function () {\n      callback(error, result);\n    });\n  }\n  /**\r\n   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\r\n   * unmemoized form. Handy for testing.\r\n   *\r\n   * @name unmemoize\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @see [async.memoize]{@link module:Utils.memoize}\r\n   * @category Util\r\n   * @param {AsyncFunction} fn - the memoized function\r\n   * @returns {AsyncFunction} a function that calls the original unmemoized function\r\n   */\n\n\n  function unmemoize(fn) {\n    return function () {\n      return (fn.unmemoized || fn).apply(null, arguments);\n    };\n  }\n  /**\r\n   * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\r\n   * stopped, or an error occurs.\r\n   *\r\n   * @name whilst\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Function} test - synchronous truth test to perform before each\r\n   * execution of `iteratee`. Invoked with ().\r\n   * @param {AsyncFunction} iteratee - An async function which is called each time\r\n   * `test` passes. Invoked with (callback).\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `iteratee` has stopped. `callback`\r\n   * will be passed an error and any arguments passed to the final `iteratee`'s\r\n   * callback. Invoked with (err, [results]);\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * var count = 0;\r\n   * async.whilst(\r\n   *     function() { return count < 5; },\r\n   *     function(callback) {\r\n   *         count++;\r\n   *         setTimeout(function() {\r\n   *             callback(null, count);\r\n   *         }, 1000);\r\n   *     },\r\n   *     function (err, n) {\r\n   *         // 5 seconds have passed, n = 5\r\n   *     }\r\n   * );\r\n   */\n\n\n  function whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    if (!test()) return callback(null);\n\n    var next = function (err\n    /*, ...args*/\n    ) {\n      if (err) return callback(err);\n      if (test()) return _iteratee(next);\n      var args = slice(arguments, 1);\n      callback.apply(null, [null].concat(args));\n    };\n\n    _iteratee(next);\n  }\n  /**\r\n   * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\r\n   * stopped, or an error occurs. `callback` will be passed an error and any\r\n   * arguments passed to the final `iteratee`'s callback.\r\n   *\r\n   * The inverse of [whilst]{@link module:ControlFlow.whilst}.\r\n   *\r\n   * @name until\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n   * @category Control Flow\r\n   * @param {Function} test - synchronous truth test to perform before each\r\n   * execution of `iteratee`. Invoked with ().\r\n   * @param {AsyncFunction} iteratee - An async function which is called each time\r\n   * `test` fails. Invoked with (callback).\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\r\n   * will be passed an error and any arguments passed to the final `iteratee`'s\r\n   * callback. Invoked with (err, [results]);\r\n   */\n\n\n  function until(test, iteratee, callback) {\n    whilst(function () {\n      return !test.apply(this, arguments);\n    }, iteratee, callback);\n  }\n  /**\r\n   * Runs the `tasks` array of functions in series, each passing their results to\r\n   * the next in the array. However, if any of the `tasks` pass an error to their\r\n   * own callback, the next function is not executed, and the main `callback` is\r\n   * immediately called with the error.\r\n   *\r\n   * @name waterfall\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\r\n   * to run.\r\n   * Each function should complete with any number of `result` values.\r\n   * The `result` values will be passed as arguments, in order, to the next task.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed. This will be passed the results of the last task's\r\n   * callback. Invoked with (err, [results]).\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * async.waterfall([\r\n   *     function(callback) {\r\n   *         callback(null, 'one', 'two');\r\n   *     },\r\n   *     function(arg1, arg2, callback) {\r\n   *         // arg1 now equals 'one' and arg2 now equals 'two'\r\n   *         callback(null, 'three');\r\n   *     },\r\n   *     function(arg1, callback) {\r\n   *         // arg1 now equals 'three'\r\n   *         callback(null, 'done');\r\n   *     }\r\n   * ], function (err, result) {\r\n   *     // result now equals 'done'\r\n   * });\r\n   *\r\n   * // Or, with named functions:\r\n   * async.waterfall([\r\n   *     myFirstFunction,\r\n   *     mySecondFunction,\r\n   *     myLastFunction,\r\n   * ], function (err, result) {\r\n   *     // result now equals 'done'\r\n   * });\r\n   * function myFirstFunction(callback) {\r\n   *     callback(null, 'one', 'two');\r\n   * }\r\n   * function mySecondFunction(arg1, arg2, callback) {\r\n   *     // arg1 now equals 'one' and arg2 now equals 'two'\r\n   *     callback(null, 'three');\r\n   * }\r\n   * function myLastFunction(arg1, callback) {\r\n   *     // arg1 now equals 'three'\r\n   *     callback(null, 'done');\r\n   * }\r\n   */\n\n\n  var waterfall = function (tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n      var task = wrapAsync(tasks[taskIndex++]);\n      args.push(onlyOnce(next));\n      task.apply(null, args);\n    }\n\n    function next(err\n    /*, ...args*/\n    ) {\n      if (err || taskIndex === tasks.length) {\n        return callback.apply(null, arguments);\n      }\n\n      nextTask(slice(arguments, 1));\n    }\n\n    nextTask([]);\n  };\n  /**\r\n   * An \"async function\" in the context of Async is an asynchronous function with\r\n   * a variable number of parameters, with the final parameter being a callback.\r\n   * (`function (arg1, arg2, ..., callback) {}`)\r\n   * The final callback is of the form `callback(err, results...)`, which must be\r\n   * called once the function is completed.  The callback should be called with a\r\n   * Error as its first argument to signal that an error occurred.\r\n   * Otherwise, if no error occurred, it should be called with `null` as the first\r\n   * argument, and any additional `result` arguments that may apply, to signal\r\n   * successful completion.\r\n   * The callback must be called exactly once, ideally on a later tick of the\r\n   * JavaScript event loop.\r\n   *\r\n   * This type of function is also referred to as a \"Node-style async function\",\r\n   * or a \"continuation passing-style function\" (CPS). Most of the methods of this\r\n   * library are themselves CPS/Node-style async functions, or functions that\r\n   * return CPS/Node-style async functions.\r\n   *\r\n   * Wherever we accept a Node-style async function, we also directly accept an\r\n   * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\r\n   * In this case, the `async` function will not be passed a final callback\r\n   * argument, and any thrown error will be used as the `err` argument of the\r\n   * implicit callback, and the return value will be used as the `result` value.\r\n   * (i.e. a `rejected` of the returned Promise becomes the `err` callback\r\n   * argument, and a `resolved` value becomes the `result`.)\r\n   *\r\n   * Note, due to JavaScript limitations, we can only detect native `async`\r\n   * functions and not transpilied implementations.\r\n   * Your environment must have `async`/`await` support for this to work.\r\n   * (e.g. Node > v7.6, or a recent version of a modern browser).\r\n   * If you are using `async` functions through a transpiler (e.g. Babel), you\r\n   * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\r\n   * because the `async function` will be compiled to an ordinary function that\r\n   * returns a promise.\r\n   *\r\n   * @typedef {Function} AsyncFunction\r\n   * @static\r\n   */\n\n  /**\r\n   * Async is a utility module which provides straight-forward, powerful functions\r\n   * for working with asynchronous JavaScript. Although originally designed for\r\n   * use with [Node.js](http://nodejs.org) and installable via\r\n   * `npm install --save async`, it can also be used directly in the browser.\r\n   * @module async\r\n   * @see AsyncFunction\r\n   */\n\n  /**\r\n   * A collection of `async` functions for manipulating collections, such as\r\n   * arrays and objects.\r\n   * @module Collections\r\n   */\n\n  /**\r\n   * A collection of `async` functions for controlling the flow through a script.\r\n   * @module ControlFlow\r\n   */\n\n  /**\r\n   * A collection of `async` utility functions.\r\n   * @module Utils\r\n   */\n\n\n  var index = {\n    apply: apply,\n    applyEach: applyEach,\n    applyEachSeries: applyEachSeries,\n    asyncify: asyncify,\n    auto: auto,\n    autoInject: autoInject,\n    cargo: cargo,\n    compose: compose,\n    concat: concat,\n    concatLimit: concatLimit,\n    concatSeries: concatSeries,\n    constant: constant,\n    detect: detect,\n    detectLimit: detectLimit,\n    detectSeries: detectSeries,\n    dir: dir,\n    doDuring: doDuring,\n    doUntil: doUntil,\n    doWhilst: doWhilst,\n    during: during,\n    each: eachLimit,\n    eachLimit: eachLimit$1,\n    eachOf: eachOf,\n    eachOfLimit: eachOfLimit,\n    eachOfSeries: eachOfSeries,\n    eachSeries: eachSeries,\n    ensureAsync: ensureAsync,\n    every: every,\n    everyLimit: everyLimit,\n    everySeries: everySeries,\n    filter: filter,\n    filterLimit: filterLimit,\n    filterSeries: filterSeries,\n    forever: forever,\n    groupBy: groupBy,\n    groupByLimit: groupByLimit,\n    groupBySeries: groupBySeries,\n    log: log,\n    map: map,\n    mapLimit: mapLimit,\n    mapSeries: mapSeries,\n    mapValues: mapValues,\n    mapValuesLimit: mapValuesLimit,\n    mapValuesSeries: mapValuesSeries,\n    memoize: memoize,\n    nextTick: nextTick,\n    parallel: parallelLimit,\n    parallelLimit: parallelLimit$1,\n    priorityQueue: priorityQueue,\n    queue: queue$1,\n    race: race,\n    reduce: reduce,\n    reduceRight: reduceRight,\n    reflect: reflect,\n    reflectAll: reflectAll,\n    reject: reject,\n    rejectLimit: rejectLimit,\n    rejectSeries: rejectSeries,\n    retry: retry,\n    retryable: retryable,\n    seq: seq,\n    series: series,\n    setImmediate: setImmediate$1,\n    some: some,\n    someLimit: someLimit,\n    someSeries: someSeries,\n    sortBy: sortBy,\n    timeout: timeout,\n    times: times,\n    timesLimit: timeLimit,\n    timesSeries: timesSeries,\n    transform: transform,\n    tryEach: tryEach,\n    unmemoize: unmemoize,\n    until: until,\n    waterfall: waterfall,\n    whilst: whilst,\n    // aliases\n    all: every,\n    allLimit: everyLimit,\n    allSeries: everySeries,\n    any: some,\n    anyLimit: someLimit,\n    anySeries: someSeries,\n    find: detect,\n    findLimit: detectLimit,\n    findSeries: detectSeries,\n    forEach: eachLimit,\n    forEachSeries: eachSeries,\n    forEachLimit: eachLimit$1,\n    forEachOf: eachOf,\n    forEachOfSeries: eachOfSeries,\n    forEachOfLimit: eachOfLimit,\n    inject: reduce,\n    foldl: reduce,\n    foldr: reduceRight,\n    select: filter,\n    selectLimit: filterLimit,\n    selectSeries: filterSeries,\n    wrapSync: asyncify\n  };\n  exports['default'] = index;\n  exports.apply = apply;\n  exports.applyEach = applyEach;\n  exports.applyEachSeries = applyEachSeries;\n  exports.asyncify = asyncify;\n  exports.auto = auto;\n  exports.autoInject = autoInject;\n  exports.cargo = cargo;\n  exports.compose = compose;\n  exports.concat = concat;\n  exports.concatLimit = concatLimit;\n  exports.concatSeries = concatSeries;\n  exports.constant = constant;\n  exports.detect = detect;\n  exports.detectLimit = detectLimit;\n  exports.detectSeries = detectSeries;\n  exports.dir = dir;\n  exports.doDuring = doDuring;\n  exports.doUntil = doUntil;\n  exports.doWhilst = doWhilst;\n  exports.during = during;\n  exports.each = eachLimit;\n  exports.eachLimit = eachLimit$1;\n  exports.eachOf = eachOf;\n  exports.eachOfLimit = eachOfLimit;\n  exports.eachOfSeries = eachOfSeries;\n  exports.eachSeries = eachSeries;\n  exports.ensureAsync = ensureAsync;\n  exports.every = every;\n  exports.everyLimit = everyLimit;\n  exports.everySeries = everySeries;\n  exports.filter = filter;\n  exports.filterLimit = filterLimit;\n  exports.filterSeries = filterSeries;\n  exports.forever = forever;\n  exports.groupBy = groupBy;\n  exports.groupByLimit = groupByLimit;\n  exports.groupBySeries = groupBySeries;\n  exports.log = log;\n  exports.map = map;\n  exports.mapLimit = mapLimit;\n  exports.mapSeries = mapSeries;\n  exports.mapValues = mapValues;\n  exports.mapValuesLimit = mapValuesLimit;\n  exports.mapValuesSeries = mapValuesSeries;\n  exports.memoize = memoize;\n  exports.nextTick = nextTick;\n  exports.parallel = parallelLimit;\n  exports.parallelLimit = parallelLimit$1;\n  exports.priorityQueue = priorityQueue;\n  exports.queue = queue$1;\n  exports.race = race;\n  exports.reduce = reduce;\n  exports.reduceRight = reduceRight;\n  exports.reflect = reflect;\n  exports.reflectAll = reflectAll;\n  exports.reject = reject;\n  exports.rejectLimit = rejectLimit;\n  exports.rejectSeries = rejectSeries;\n  exports.retry = retry;\n  exports.retryable = retryable;\n  exports.seq = seq;\n  exports.series = series;\n  exports.setImmediate = setImmediate$1;\n  exports.some = some;\n  exports.someLimit = someLimit;\n  exports.someSeries = someSeries;\n  exports.sortBy = sortBy;\n  exports.timeout = timeout;\n  exports.times = times;\n  exports.timesLimit = timeLimit;\n  exports.timesSeries = timesSeries;\n  exports.transform = transform;\n  exports.tryEach = tryEach;\n  exports.unmemoize = unmemoize;\n  exports.until = until;\n  exports.waterfall = waterfall;\n  exports.whilst = whilst;\n  exports.all = every;\n  exports.allLimit = everyLimit;\n  exports.allSeries = everySeries;\n  exports.any = some;\n  exports.anyLimit = someLimit;\n  exports.anySeries = someSeries;\n  exports.find = detect;\n  exports.findLimit = detectLimit;\n  exports.findSeries = detectSeries;\n  exports.forEach = eachLimit;\n  exports.forEachSeries = eachSeries;\n  exports.forEachLimit = eachLimit$1;\n  exports.forEachOf = eachOf;\n  exports.forEachOfSeries = eachOfSeries;\n  exports.forEachOfLimit = eachOfLimit;\n  exports.inject = reduce;\n  exports.foldl = reduce;\n  exports.foldr = reduceRight;\n  exports.select = filter;\n  exports.selectLimit = filterLimit;\n  exports.selectSeries = filterSeries;\n  exports.wrapSync = asyncify;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["B:/Duoc/Portafolio_de_titulo/Git/Turismo-Real/Front/Pwa/node_modules/async/dist/async.js"],"names":["global","factory","exports","module","define","amd","async","slice","arrayLike","start","newLen","Math","max","length","newArr","Array","idx","apply","fn","args","arguments","callArgs","concat","initialParams","callback","pop","call","isObject","value","type","hasSetImmediate","setImmediate","hasNextTick","process","nextTick","fallback","setTimeout","wrap","defer","_defer","setImmediate$1","asyncify","func","result","e","then","invokeCallback","err","message","Error","error","rethrow","supportsSymbol","Symbol","isAsync","toStringTag","wrapAsync","asyncFn","applyEach$1","eachfn","fns","go","that","cb","freeGlobal","Object","freeSelf","self","root","Function","Symbol$1","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag$1","undefined","getRawTag","isOwn","tag","unmasked","objectProto$1","nativeObjectToString$1","objectToString","nullTag","undefinedTag","symToStringTag","baseGetTag","asyncTag","funcTag","genTag","proxyTag","isFunction","MAX_SAFE_INTEGER","isLength","isArrayLike","breakLoop","noop","once","callFn","iteratorSymbol","iterator","getIterator","coll","baseTimes","n","iteratee","index","isObjectLike","argsTag","baseIsArguments","objectProto$3","hasOwnProperty$2","propertyIsEnumerable","isArguments","isArray","stubFalse","freeExports","nodeType","freeModule","moduleExports","Buffer","nativeIsBuffer","isBuffer","MAX_SAFE_INTEGER$1","reIsUint","isIndex","test","argsTag$1","arrayTag","boolTag","dateTag","errorTag","funcTag$1","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","typedArrayTags","baseIsTypedArray","baseUnary","freeExports$1","freeModule$1","moduleExports$1","freeProcess","nodeUtil","types","require","binding","nodeIsTypedArray","isTypedArray","objectProto$2","hasOwnProperty$1","arrayLikeKeys","inherited","isArr","isArg","isBuff","isType","skipIndexes","String","key","push","objectProto$5","isPrototype","Ctor","constructor","proto","overArg","transform","arg","nativeKeys","keys","objectProto$4","hasOwnProperty$3","baseKeys","object","createArrayIterator","i","len","next","createES2015Iterator","item","done","createObjectIterator","obj","okeys","onlyOnce","_eachOfLimit","limit","nextElem","running","looping","iterateeCallback","replenish","elem","eachOfLimit","doLimit","iterable","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf","eachOfImplementation","doParallel","_asyncMap","arr","results","counter","_iteratee","_","v","map","applyEach","doParallelLimit","mapLimit","mapSeries","applyEachSeries","arrayEach","array","createBaseFor","fromRight","keysFunc","props","baseFor","baseForOwn","baseFindIndex","predicate","fromIndex","baseIsNaN","strictIndexOf","baseIndexOf","auto","tasks","concurrency","keys$$1","numTasks","runningTasks","hasError","listeners","create","readyTasks","readyToCheck","uncheckedDependencies","task","enqueueTask","dependencies","remainingDependencies","dependencyName","join","addListener","checkForDeadlocks","processQueue","runTask","run","shift","taskName","taskListeners","taskComplete","taskCallback","safeResults","val","rkey","taskFn","currentTask","getDependents","dependent","arrayMap","symbolTag","isSymbol","INFINITY","symbolProto","symbolToString","baseToString","baseSlice","end","castSlice","charsEndIndex","strSymbols","chrSymbols","charsStartIndex","asciiToArray","string","split","rsAstralRange","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsVarRange","rsZWJ","reHasUnicode","RegExp","hasUnicode","rsAstralRange$1","rsComboMarksRange$1","reComboHalfMarksRange$1","rsComboSymbolsRange$1","rsComboRange$1","rsVarRange$1","rsAstral","rsCombo","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","rsZWJ$1","reOptMod","rsOptVar","rsOptJoin","rsSeq","rsSymbol","reUnicode","unicodeToArray","match","stringToArray","reTrim","trim","chars","guard","replace","FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","parseParams","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","taskCb","newArgs","name","DLL","head","tail","setInitial","dll","node","removeLink","prev","empty","insertAfter","newNode","insertBefore","unshift","toArray","curr","data","remove","testFn","queue","worker","payload","_worker","numRunning","workersList","processingScheduled","_insert","insertAtFront","q","started","idle","drain","l","_tasks","_next","splice","buffer","unsaturated","isProcessing","saturated","paused","kill","min","pause","resume","cargo","eachOfSeries","reduce","memo","x","seq","_functions","newargs","nextargs","compose","reverse","_concat","concatLimit","mapResults","concatSeries","constant","values","identity","_createTester","check","getResult","testPassed","testResult","_findGetResult","detect","detectLimit","detectSeries","consoleFunc","console","dir","doDuring","_fn","_test","truth","doWhilst","doUntil","during","_withoutIndex","eachLimit","eachLimit$1","eachSeries","ensureAsync","sync","innerArgs","notId","every","everyLimit","everySeries","baseProperty","filterArray","truthValues","filterGeneric","sort","a","b","_filter","filter","filterLimit","filterSeries","forever","errback","groupByLimit","groupBy","groupBySeries","log","mapValuesLimit","newObj","mapValues","mapValuesSeries","has","memoize","hasher","queues","memoized","unmemoized","_defer$1","_parallel","parallelLimit","parallelLimit$1","queue$1","items","priorityQueue","priority","nextNode","race","TypeError","reduceRight","reversed","reflect","reflectOn","reflectCallback","cbArg","reflectAll","reject$1","reject","rejectLimit","rejectSeries","constant$1","retry","opts","DEFAULT_TIMES","DEFAULT_INTERVAL","options","times","intervalFunc","parseTimes","acc","t","interval","errorFilter","_task","attempt","retryAttempt","retryable","series","some","Boolean","someLimit","someSeries","sortBy","criteria","comparator","left","right","timeout","milliseconds","info","timedOut","timer","timeoutCallback","code","clearTimeout","nativeCeil","ceil","nativeMax","baseRange","step","timeLimit","count","timesSeries","accumulator","k","tryEach","res","unmemoize","whilst","until","waterfall","taskIndex","nextTask","each","parallel","timesLimit","all","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","forEach","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","defineProperty"],"mappings":"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ACA;AACA;;;AACA,WAASiB,KAAT,CAAezB,MAAf,EAAuBC,OAAvB,EAAgC;AAC5B,WAAOF,KAAK,CAACC,MAAD,EAAS,CAAT,EAAYC,OAAZ,CAAZ;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIyB,YAAY,GAAG1L,OAAO,CAACD,WAAD,EAAc,CAAd,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAS4L,MAAT,CAAgBvS,IAAhB,EAAsBwS,IAAtB,EAA4BrS,QAA5B,EAAsCnF,QAAtC,EAAgD;AAC5CA,IAAAA,QAAQ,GAAG2E,IAAI,CAAC3E,QAAQ,IAAI0E,IAAb,CAAf;;AACA,QAAIgI,SAAS,GAAG1K,SAAS,CAACmD,QAAD,CAAzB;;AACAmS,IAAAA,YAAY,CAACtS,IAAD,EAAO,UAASyS,CAAT,EAAYhN,CAAZ,EAAezK,QAAf,EAAyB;AACxC0M,MAAAA,SAAS,CAAC8K,IAAD,EAAOC,CAAP,EAAU,UAASlW,GAAT,EAAcqL,CAAd,EAAiB;AAChC4K,QAAAA,IAAI,GAAG5K,CAAP;AACA5M,QAAAA,QAAQ,CAACuB,GAAD,CAAR;AACH,OAHQ,CAAT;AAIH,KALW,EAKT,UAASA,GAAT,EAAc;AACbvB,MAAAA,QAAQ,CAACuB,GAAD,EAAMiW,IAAN,CAAR;AACH,KAPW,CAAZ;AAQH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASE,GAAT;AAAa;AAAkB;AAC3B,QAAIC,UAAU,GAAGvH,QAAQ,CAACxQ,SAAD,EAAYoC,SAAZ,CAAzB;;AACA,WAAO;AAAS;AAAa;AACzB,UAAIrC,IAAI,GAAGZ,KAAK,CAACa,SAAD,CAAhB;AACA,UAAI0C,IAAI,GAAG,IAAX;AAEA,UAAIC,EAAE,GAAG5C,IAAI,CAACA,IAAI,CAACN,MAAL,GAAc,CAAf,CAAb;;AACA,UAAI,OAAOkD,EAAP,IAAa,UAAjB,EAA6B;AACzB5C,QAAAA,IAAI,CAACM,GAAL;AACH,OAFD,MAEO;AACHsC,QAAAA,EAAE,GAAGmC,IAAL;AACH;;AAED6S,MAAAA,MAAM,CAACI,UAAD,EAAahY,IAAb,EAAmB,UAASiY,OAAT,EAAkBlY,EAAlB,EAAsB6C,EAAtB,EAA0B;AAC/C7C,QAAAA,EAAE,CAACD,KAAH,CAAS6C,IAAT,EAAesV,OAAO,CAAC9X,MAAR,CAAe,UAASyB;AAAG;AAAZ,UAA+B;AACzD,cAAIsW,QAAQ,GAAG9Y,KAAK,CAACa,SAAD,EAAY,CAAZ,CAApB;AACA2C,UAAAA,EAAE,CAAChB,GAAD,EAAMsW,QAAN,CAAF;AACH,SAHc,CAAf;AAIH,OALK,EAMN,UAAStW,GAAT,EAAciL,OAAd,EAAuB;AACnBjK,QAAAA,EAAE,CAAC9C,KAAH,CAAS6C,IAAT,EAAe,CAACf,GAAD,EAAMzB,MAAN,CAAa0M,OAAb,CAAf;AACH,OARK,CAAN;AASH,KApBD;AAqBH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIsL,OAAO,GAAG;AAAS;AAAa;AAChC,WAAOJ,GAAG,CAACjY,KAAJ,CAAU,IAAV,EAAgBV,KAAK,CAACa,SAAD,CAAL,CAAiBmY,OAAjB,EAAhB,CAAP;AACH,GAFD;;AAIA,MAAIC,OAAO,GAAGzY,KAAK,CAACyD,SAAN,CAAgBlD,MAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAImY,WAAW,GAAG,UAASjT,IAAT,EAAeoG,KAAf,EAAsBjG,QAAtB,EAAgCnF,QAAhC,EAA0C;AACxDA,IAAAA,QAAQ,GAAGA,QAAQ,IAAI0E,IAAvB;;AACA,QAAIgI,SAAS,GAAG1K,SAAS,CAACmD,QAAD,CAAzB;;AACA6H,IAAAA,QAAQ,CAAChI,IAAD,EAAOoG,KAAP,EAAc,UAAS0E,GAAT,EAAc9P,QAAd,EAAwB;AAC1C0M,MAAAA,SAAS,CAACoD,GAAD,EAAM,UAASvO;AAAI;AAAb,QAA4B;AACvC,YAAIA,GAAJ,EAAS,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;AACT,eAAOvB,QAAQ,CAAC,IAAD,EAAOjB,KAAK,CAACa,SAAD,EAAY,CAAZ,CAAZ,CAAf;AACH,OAHQ,CAAT;AAIH,KALO,EAKL,UAAS2B,GAAT,EAAc2W,UAAd,EAA0B;AACzB,UAAI/W,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIsJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyN,UAAU,CAAC7Y,MAA/B,EAAuCoL,CAAC,EAAxC,EAA4C;AACxC,YAAIyN,UAAU,CAACzN,CAAD,CAAd,EAAmB;AACftJ,UAAAA,MAAM,GAAG6W,OAAO,CAACvY,KAAR,CAAc0B,MAAd,EAAsB+W,UAAU,CAACzN,CAAD,CAAhC,CAAT;AACH;AACJ;;AAED,aAAOzK,QAAQ,CAACuB,GAAD,EAAMJ,MAAN,CAAf;AACH,KAdO,CAAR;AAeH,GAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIrB,MAAM,GAAG8L,OAAO,CAACqM,WAAD,EAAc/L,QAAd,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIiM,YAAY,GAAGvM,OAAO,CAACqM,WAAD,EAAc,CAAd,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIG,QAAQ,GAAG;AAAS;AAAe;AACnC,QAAIC,MAAM,GAAGtZ,KAAK,CAACa,SAAD,CAAlB;AACA,QAAID,IAAI,GAAG,CAAC,IAAD,EAAOG,MAAP,CAAcuY,MAAd,CAAX;AACA,WAAO;AAAU;AAA8B;AAC3C,UAAIrY,QAAQ,GAAGJ,SAAS,CAACA,SAAS,CAACP,MAAV,GAAmB,CAApB,CAAxB;AACA,aAAOW,QAAQ,CAACP,KAAT,CAAe,IAAf,EAAqBE,IAArB,CAAP;AACH,KAHD;AAIH,GAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAS2Y,QAAT,CAAkBlY,KAAlB,EAAyB;AACvB,WAAOA,KAAP;AACD;;AAED,WAASmY,aAAT,CAAuBC,KAAvB,EAA8BC,SAA9B,EAAyC;AACrC,WAAO,UAAStW,MAAT,EAAiBoK,GAAjB,EAAsBpH,QAAtB,EAAgC5C,EAAhC,EAAoC;AACvCA,MAAAA,EAAE,GAAGA,EAAE,IAAImC,IAAX;AACA,UAAIgU,UAAU,GAAG,KAAjB;AACA,UAAIC,UAAJ;AACAxW,MAAAA,MAAM,CAACoK,GAAD,EAAM,UAASnM,KAAT,EAAgBuM,CAAhB,EAAmB3M,QAAnB,EAA6B;AACrCmF,QAAAA,QAAQ,CAAC/E,KAAD,EAAQ,UAASmB,GAAT,EAAcJ,MAAd,EAAsB;AAClC,cAAII,GAAJ,EAAS;AACLvB,YAAAA,QAAQ,CAACuB,GAAD,CAAR;AACH,WAFD,MAEO,IAAIiX,KAAK,CAACrX,MAAD,CAAL,IAAiB,CAACwX,UAAtB,EAAkC;AACrCD,YAAAA,UAAU,GAAG,IAAb;AACAC,YAAAA,UAAU,GAAGF,SAAS,CAAC,IAAD,EAAOrY,KAAP,CAAtB;AACAJ,YAAAA,QAAQ,CAAC,IAAD,EAAOyE,SAAP,CAAR;AACH,WAJM,MAIA;AACHzE,YAAAA,QAAQ;AACX;AACJ,SAVO,CAAR;AAWH,OAZK,EAYH,UAASuB,GAAT,EAAc;AACb,YAAIA,GAAJ,EAAS;AACLgB,UAAAA,EAAE,CAAChB,GAAD,CAAF;AACH,SAFD,MAEO;AACHgB,UAAAA,EAAE,CAAC,IAAD,EAAOmW,UAAU,GAAGC,UAAH,GAAgBF,SAAS,CAAC,KAAD,CAA1C,CAAF;AACH;AACJ,OAlBK,CAAN;AAmBH,KAvBD;AAwBH;;AAED,WAASG,cAAT,CAAwBhM,CAAxB,EAA2B6K,CAA3B,EAA8B;AAC1B,WAAOA,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIoB,MAAM,GAAGxM,UAAU,CAACkM,aAAa,CAACD,QAAD,EAAWM,cAAX,CAAd,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIE,WAAW,GAAG/L,eAAe,CAACwL,aAAa,CAACD,QAAD,EAAWM,cAAX,CAAd,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIG,YAAY,GAAGnN,OAAO,CAACkN,WAAD,EAAc,CAAd,CAA1B;;AAEA,WAASE,WAAT,CAAqBxE,IAArB,EAA2B;AACvB,WAAO,UAAU9U;AAAE;AAAZ,MAA2B;AAC9B,UAAIC,IAAI,GAAGZ,KAAK,CAACa,SAAD,EAAY,CAAZ,CAAhB;AACAD,MAAAA,IAAI,CAAC8J,IAAL,CAAU,UAAUlI;AAAG;AAAb,QAA4B;AAClC,YAAI5B,IAAI,GAAGZ,KAAK,CAACa,SAAD,EAAY,CAAZ,CAAhB;;AACA,YAAI,OAAOqZ,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,cAAI1X,GAAJ,EAAS;AACL,gBAAI0X,OAAO,CAACvX,KAAZ,EAAmB;AACfuX,cAAAA,OAAO,CAACvX,KAAR,CAAcH,GAAd;AACH;AACJ,WAJD,MAIO,IAAI0X,OAAO,CAACzE,IAAD,CAAX,EAAmB;AACtBrH,YAAAA,SAAS,CAACxN,IAAD,EAAO,UAAU8X,CAAV,EAAa;AACzBwB,cAAAA,OAAO,CAACzE,IAAD,CAAP,CAAciD,CAAd;AACH,aAFQ,CAAT;AAGH;AACJ;AACJ,OAbD;AAcAzV,MAAAA,SAAS,CAACtC,EAAD,CAAT,CAAcD,KAAd,CAAoB,IAApB,EAA0BE,IAA1B;AACH,KAjBD;AAkBH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIuZ,GAAG,GAAGF,WAAW,CAAC,KAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASG,QAAT,CAAkBzZ,EAAlB,EAAsB8G,IAAtB,EAA4BxG,QAA5B,EAAsC;AAClCA,IAAAA,QAAQ,GAAGkL,QAAQ,CAAClL,QAAQ,IAAI0E,IAAb,CAAnB;;AACA,QAAI0U,GAAG,GAAGpX,SAAS,CAACtC,EAAD,CAAnB;;AACA,QAAI2Z,KAAK,GAAGrX,SAAS,CAACwE,IAAD,CAArB;;AAEA,aAASmE,IAAT,CAAcpJ;AAAG;AAAjB,MAAgC;AAC5B,UAAIA,GAAJ,EAAS,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;AACT,UAAI5B,IAAI,GAAGZ,KAAK,CAACa,SAAD,EAAY,CAAZ,CAAhB;AACAD,MAAAA,IAAI,CAAC8J,IAAL,CAAU+O,KAAV;;AACAa,MAAAA,KAAK,CAAC5Z,KAAN,CAAY,IAAZ,EAAkBE,IAAlB;AACH;;AAED,aAAS6Y,KAAT,CAAejX,GAAf,EAAoB+X,KAApB,EAA2B;AACvB,UAAI/X,GAAJ,EAAS,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;AACT,UAAI,CAAC+X,KAAL,EAAY,OAAOtZ,QAAQ,CAAC,IAAD,CAAf;;AACZoZ,MAAAA,GAAG,CAACzO,IAAD,CAAH;AACH;;AAED6N,IAAAA,KAAK,CAAC,IAAD,EAAO,IAAP,CAAL;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASe,QAAT,CAAkBpU,QAAlB,EAA4BqB,IAA5B,EAAkCxG,QAAlC,EAA4C;AACxCA,IAAAA,QAAQ,GAAGkL,QAAQ,CAAClL,QAAQ,IAAI0E,IAAb,CAAnB;;AACA,QAAIgI,SAAS,GAAG1K,SAAS,CAACmD,QAAD,CAAzB;;AACA,QAAIwF,IAAI,GAAG,UAASpJ;AAAG;AAAZ,MAA2B;AAClC,UAAIA,GAAJ,EAAS,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;AACT,UAAI5B,IAAI,GAAGZ,KAAK,CAACa,SAAD,EAAY,CAAZ,CAAhB;AACA,UAAI4G,IAAI,CAAC/G,KAAL,CAAW,IAAX,EAAiBE,IAAjB,CAAJ,EAA4B,OAAO+M,SAAS,CAAC/B,IAAD,CAAhB;AAC5B3K,MAAAA,QAAQ,CAACP,KAAT,CAAe,IAAf,EAAqB,CAAC,IAAD,EAAOK,MAAP,CAAcH,IAAd,CAArB;AACH,KALD;;AAMA+M,IAAAA,SAAS,CAAC/B,IAAD,CAAT;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAS6O,OAAT,CAAiBrU,QAAjB,EAA2BqB,IAA3B,EAAiCxG,QAAjC,EAA2C;AACvCuZ,IAAAA,QAAQ,CAACpU,QAAD,EAAW,YAAW;AAC1B,aAAO,CAACqB,IAAI,CAAC/G,KAAL,CAAW,IAAX,EAAiBG,SAAjB,CAAR;AACH,KAFO,EAELI,QAFK,CAAR;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASyZ,MAAT,CAAgBjT,IAAhB,EAAsB9G,EAAtB,EAA0BM,QAA1B,EAAoC;AAChCA,IAAAA,QAAQ,GAAGkL,QAAQ,CAAClL,QAAQ,IAAI0E,IAAb,CAAnB;;AACA,QAAI0U,GAAG,GAAGpX,SAAS,CAACtC,EAAD,CAAnB;;AACA,QAAI2Z,KAAK,GAAGrX,SAAS,CAACwE,IAAD,CAArB;;AAEA,aAASmE,IAAT,CAAcpJ,GAAd,EAAmB;AACf,UAAIA,GAAJ,EAAS,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;;AACT8X,MAAAA,KAAK,CAACb,KAAD,CAAL;AACH;;AAED,aAASA,KAAT,CAAejX,GAAf,EAAoB+X,KAApB,EAA2B;AACvB,UAAI/X,GAAJ,EAAS,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;AACT,UAAI,CAAC+X,KAAL,EAAY,OAAOtZ,QAAQ,CAAC,IAAD,CAAf;;AACZoZ,MAAAA,GAAG,CAACzO,IAAD,CAAH;AACH;;AAED0O,IAAAA,KAAK,CAACb,KAAD,CAAL;AACH;;AAED,WAASkB,aAAT,CAAuBvU,QAAvB,EAAiC;AAC7B,WAAO,UAAU/E,KAAV,EAAiBgF,KAAjB,EAAwBpF,QAAxB,EAAkC;AACrC,aAAOmF,QAAQ,CAAC/E,KAAD,EAAQJ,QAAR,CAAf;AACH,KAFD;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAS2Z,SAAT,CAAmB3U,IAAnB,EAAyBG,QAAzB,EAAmCnF,QAAnC,EAA6C;AACzCmM,IAAAA,MAAM,CAACnH,IAAD,EAAO0U,aAAa,CAAC1X,SAAS,CAACmD,QAAD,CAAV,CAApB,EAA2CnF,QAA3C,CAAN;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAS4Z,WAAT,CAAqB5U,IAArB,EAA2BoG,KAA3B,EAAkCjG,QAAlC,EAA4CnF,QAA5C,EAAsD;AAClDmL,IAAAA,YAAY,CAACC,KAAD,CAAZ,CAAoBpG,IAApB,EAA0B0U,aAAa,CAAC1X,SAAS,CAACmD,QAAD,CAAV,CAAvC,EAA8DnF,QAA9D;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAI6Z,UAAU,GAAGjO,OAAO,CAACgO,WAAD,EAAc,CAAd,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASE,WAAT,CAAqBpa,EAArB,EAAyB;AACrB,QAAIoC,OAAO,CAACpC,EAAD,CAAX,EAAiB,OAAOA,EAAP;AACjB,WAAOK,aAAa,CAAC,UAAUJ,IAAV,EAAgBK,QAAhB,EAA0B;AAC3C,UAAI+Z,IAAI,GAAG,IAAX;AACApa,MAAAA,IAAI,CAAC8J,IAAL,CAAU,YAAY;AAClB,YAAIuQ,SAAS,GAAGpa,SAAhB;;AACA,YAAIma,IAAJ,EAAU;AACN/Y,UAAAA,cAAc,CAAC,YAAY;AACvBhB,YAAAA,QAAQ,CAACP,KAAT,CAAe,IAAf,EAAqBua,SAArB;AACH,WAFa,CAAd;AAGH,SAJD,MAIO;AACHha,UAAAA,QAAQ,CAACP,KAAT,CAAe,IAAf,EAAqBua,SAArB;AACH;AACJ,OATD;AAUAta,MAAAA,EAAE,CAACD,KAAH,CAAS,IAAT,EAAeE,IAAf;AACAoa,MAAAA,IAAI,GAAG,KAAP;AACH,KAdmB,CAApB;AAeH;;AAED,WAASE,KAAT,CAAerN,CAAf,EAAkB;AACd,WAAO,CAACA,CAAR;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIsN,KAAK,GAAG7N,UAAU,CAACkM,aAAa,CAAC0B,KAAD,EAAQA,KAAR,CAAd,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIE,UAAU,GAAGpN,eAAe,CAACwL,aAAa,CAAC0B,KAAD,EAAQA,KAAR,CAAd,CAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIG,WAAW,GAAGxO,OAAO,CAACuO,UAAD,EAAa,CAAb,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASE,YAAT,CAAsB7Q,GAAtB,EAA2B;AACzB,WAAO,UAASe,MAAT,EAAiB;AACtB,aAAOA,MAAM,IAAI,IAAV,GAAiBlH,SAAjB,GAA6BkH,MAAM,CAACf,GAAD,CAA1C;AACD,KAFD;AAGD;;AAED,WAAS8Q,WAAT,CAAqBnY,MAArB,EAA6BoK,GAA7B,EAAkCpH,QAAlC,EAA4CnF,QAA5C,EAAsD;AAClD,QAAIua,WAAW,GAAG,IAAIhb,KAAJ,CAAUgN,GAAG,CAAClN,MAAd,CAAlB;AACA8C,IAAAA,MAAM,CAACoK,GAAD,EAAM,UAAUkL,CAAV,EAAarS,KAAb,EAAoBpF,QAApB,EAA8B;AACtCmF,MAAAA,QAAQ,CAACsS,CAAD,EAAI,UAAUlW,GAAV,EAAeqL,CAAf,EAAkB;AAC1B2N,QAAAA,WAAW,CAACnV,KAAD,CAAX,GAAqB,CAAC,CAACwH,CAAvB;AACA5M,QAAAA,QAAQ,CAACuB,GAAD,CAAR;AACH,OAHO,CAAR;AAIH,KALK,EAKH,UAAUA,GAAV,EAAe;AACd,UAAIA,GAAJ,EAAS,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;AACT,UAAIiL,OAAO,GAAG,EAAd;;AACA,WAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8B,GAAG,CAAClN,MAAxB,EAAgCoL,CAAC,EAAjC,EAAqC;AACjC,YAAI8P,WAAW,CAAC9P,CAAD,CAAf,EAAoB+B,OAAO,CAAC/C,IAAR,CAAa8C,GAAG,CAAC9B,CAAD,CAAhB;AACvB;;AACDzK,MAAAA,QAAQ,CAAC,IAAD,EAAOwM,OAAP,CAAR;AACH,KAZK,CAAN;AAaH;;AAED,WAASgO,aAAT,CAAuBrY,MAAvB,EAA+B6C,IAA/B,EAAqCG,QAArC,EAA+CnF,QAA/C,EAAyD;AACrD,QAAIwM,OAAO,GAAG,EAAd;AACArK,IAAAA,MAAM,CAAC6C,IAAD,EAAO,UAAUyS,CAAV,EAAarS,KAAb,EAAoBpF,QAApB,EAA8B;AACvCmF,MAAAA,QAAQ,CAACsS,CAAD,EAAI,UAAUlW,GAAV,EAAeqL,CAAf,EAAkB;AAC1B,YAAIrL,GAAJ,EAAS;AACLvB,UAAAA,QAAQ,CAACuB,GAAD,CAAR;AACH,SAFD,MAEO;AACH,cAAIqL,CAAJ,EAAO;AACHJ,YAAAA,OAAO,CAAC/C,IAAR,CAAa;AAACrE,cAAAA,KAAK,EAAEA,KAAR;AAAehF,cAAAA,KAAK,EAAEqX;AAAtB,aAAb;AACH;;AACDzX,UAAAA,QAAQ;AACX;AACJ,OATO,CAAR;AAUH,KAXK,EAWH,UAAUuB,GAAV,EAAe;AACd,UAAIA,GAAJ,EAAS;AACLvB,QAAAA,QAAQ,CAACuB,GAAD,CAAR;AACH,OAFD,MAEO;AACHvB,QAAAA,QAAQ,CAAC,IAAD,EAAOoQ,QAAQ,CAAC5D,OAAO,CAACiO,IAAR,CAAa,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACjD,iBAAOD,CAAC,CAACtV,KAAF,GAAUuV,CAAC,CAACvV,KAAnB;AACH,SAFuB,CAAD,EAEnBiV,YAAY,CAAC,OAAD,CAFO,CAAf,CAAR;AAGH;AACJ,KAnBK,CAAN;AAoBH;;AAED,WAASO,OAAT,CAAiBzY,MAAjB,EAAyB6C,IAAzB,EAA+BG,QAA/B,EAAyCnF,QAAzC,EAAmD;AAC/C,QAAI6a,MAAM,GAAGrW,WAAW,CAACQ,IAAD,CAAX,GAAoBsV,WAApB,GAAkCE,aAA/C;AACAK,IAAAA,MAAM,CAAC1Y,MAAD,EAAS6C,IAAT,EAAehD,SAAS,CAACmD,QAAD,CAAxB,EAAoCnF,QAAQ,IAAI0E,IAAhD,CAAN;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAImW,MAAM,GAAGxO,UAAU,CAACuO,OAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIE,WAAW,GAAG/N,eAAe,CAAC6N,OAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIG,YAAY,GAAGnP,OAAO,CAACkP,WAAD,EAAc,CAAd,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASE,OAAT,CAAiBtb,EAAjB,EAAqBub,OAArB,EAA8B;AAC1B,QAAInQ,IAAI,GAAGI,QAAQ,CAAC+P,OAAO,IAAIvW,IAAZ,CAAnB;AACA,QAAImK,IAAI,GAAG7M,SAAS,CAAC8X,WAAW,CAACpa,EAAD,CAAZ,CAApB;;AAEA,aAASiL,IAAT,CAAcpJ,GAAd,EAAmB;AACf,UAAIA,GAAJ,EAAS,OAAOuJ,IAAI,CAACvJ,GAAD,CAAX;AACTsN,MAAAA,IAAI,CAAClE,IAAD,CAAJ;AACH;;AACDA,IAAAA,IAAI;AACP;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIuQ,YAAY,GAAG,UAASlW,IAAT,EAAeoG,KAAf,EAAsBjG,QAAtB,EAAgCnF,QAAhC,EAA0C;AACzDA,IAAAA,QAAQ,GAAGA,QAAQ,IAAI0E,IAAvB;;AACA,QAAIgI,SAAS,GAAG1K,SAAS,CAACmD,QAAD,CAAzB;;AACA6H,IAAAA,QAAQ,CAAChI,IAAD,EAAOoG,KAAP,EAAc,UAAS0E,GAAT,EAAc9P,QAAd,EAAwB;AAC1C0M,MAAAA,SAAS,CAACoD,GAAD,EAAM,UAASvO,GAAT,EAAciI,GAAd,EAAmB;AAC9B,YAAIjI,GAAJ,EAAS,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;AACT,eAAOvB,QAAQ,CAAC,IAAD,EAAO;AAACwJ,UAAAA,GAAG,EAAEA,GAAN;AAAWsG,UAAAA,GAAG,EAAEA;AAAhB,SAAP,CAAf;AACH,OAHQ,CAAT;AAIH,KALO,EAKL,UAASvO,GAAT,EAAc2W,UAAd,EAA0B;AACzB,UAAI/W,MAAM,GAAG,EAAb,CADyB,CAEzB;;AACA,UAAI8B,cAAc,GAAGR,MAAM,CAACO,SAAP,CAAiBC,cAAtC;;AAEA,WAAK,IAAIwH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyN,UAAU,CAAC7Y,MAA/B,EAAuCoL,CAAC,EAAxC,EAA4C;AACxC,YAAIyN,UAAU,CAACzN,CAAD,CAAd,EAAmB;AACf,cAAIjB,GAAG,GAAG0O,UAAU,CAACzN,CAAD,CAAV,CAAcjB,GAAxB;AACA,cAAIsG,GAAG,GAAGoI,UAAU,CAACzN,CAAD,CAAV,CAAcqF,GAAxB;;AAEA,cAAI7M,cAAc,CAAC/C,IAAf,CAAoBiB,MAApB,EAA4BqI,GAA5B,CAAJ,EAAsC;AAClCrI,YAAAA,MAAM,CAACqI,GAAD,CAAN,CAAYC,IAAZ,CAAiBqG,GAAjB;AACH,WAFD,MAEO;AACH3O,YAAAA,MAAM,CAACqI,GAAD,CAAN,GAAc,CAACsG,GAAD,CAAd;AACH;AACJ;AACJ;;AAED,aAAO9P,QAAQ,CAACuB,GAAD,EAAMJ,MAAN,CAAf;AACH,KAxBO,CAAR;AAyBH,GA5BD;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIga,OAAO,GAAGvP,OAAO,CAACsP,YAAD,EAAehP,QAAf,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIkP,aAAa,GAAGxP,OAAO,CAACsP,YAAD,EAAe,CAAf,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIG,GAAG,GAAGrC,WAAW,CAAC,KAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASsC,cAAT,CAAwBtQ,GAAxB,EAA6BI,KAA7B,EAAoCjG,QAApC,EAA8CnF,QAA9C,EAAwD;AACpDA,IAAAA,QAAQ,GAAG2E,IAAI,CAAC3E,QAAQ,IAAI0E,IAAb,CAAf;AACA,QAAI6W,MAAM,GAAG,EAAb;;AACA,QAAI7O,SAAS,GAAG1K,SAAS,CAACmD,QAAD,CAAzB;;AACAwG,IAAAA,WAAW,CAACX,GAAD,EAAMI,KAAN,EAAa,UAAS0E,GAAT,EAActG,GAAd,EAAmBmB,IAAnB,EAAyB;AAC7C+B,MAAAA,SAAS,CAACoD,GAAD,EAAMtG,GAAN,EAAW,UAAUjI,GAAV,EAAeJ,MAAf,EAAuB;AACvC,YAAII,GAAJ,EAAS,OAAOoJ,IAAI,CAACpJ,GAAD,CAAX;AACTga,QAAAA,MAAM,CAAC/R,GAAD,CAAN,GAAcrI,MAAd;AACAwJ,QAAAA,IAAI;AACP,OAJQ,CAAT;AAKH,KANU,EAMR,UAAUpJ,GAAV,EAAe;AACdvB,MAAAA,QAAQ,CAACuB,GAAD,EAAMga,MAAN,CAAR;AACH,KARU,CAAX;AASH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAIC,SAAS,GAAG5P,OAAO,CAAC0P,cAAD,EAAiBpP,QAAjB,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIuP,eAAe,GAAG7P,OAAO,CAAC0P,cAAD,EAAiB,CAAjB,CAA7B;;AAEA,WAASI,GAAT,CAAa1Q,GAAb,EAAkBxB,GAAlB,EAAuB;AACnB,WAAOA,GAAG,IAAIwB,GAAd;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAS2Q,OAAT,CAAiBjc,EAAjB,EAAqBkc,MAArB,EAA6B;AACzB,QAAIpE,IAAI,GAAG/U,MAAM,CAACgM,MAAP,CAAc,IAAd,CAAX;AACA,QAAIoN,MAAM,GAAGpZ,MAAM,CAACgM,MAAP,CAAc,IAAd,CAAb;AACAmN,IAAAA,MAAM,GAAGA,MAAM,IAAItD,QAAnB;;AACA,QAAIc,GAAG,GAAGpX,SAAS,CAACtC,EAAD,CAAnB;;AACA,QAAIoc,QAAQ,GAAG/b,aAAa,CAAC,SAAS+b,QAAT,CAAkBnc,IAAlB,EAAwBK,QAAxB,EAAkC;AAC3D,UAAIwJ,GAAG,GAAGoS,MAAM,CAACnc,KAAP,CAAa,IAAb,EAAmBE,IAAnB,CAAV;;AACA,UAAI+b,GAAG,CAAClE,IAAD,EAAOhO,GAAP,CAAP,EAAoB;AAChBxI,QAAAA,cAAc,CAAC,YAAW;AACtBhB,UAAAA,QAAQ,CAACP,KAAT,CAAe,IAAf,EAAqB+X,IAAI,CAAChO,GAAD,CAAzB;AACH,SAFa,CAAd;AAGH,OAJD,MAIO,IAAIkS,GAAG,CAACG,MAAD,EAASrS,GAAT,CAAP,EAAsB;AACzBqS,QAAAA,MAAM,CAACrS,GAAD,CAAN,CAAYC,IAAZ,CAAiBzJ,QAAjB;AACH,OAFM,MAEA;AACH6b,QAAAA,MAAM,CAACrS,GAAD,CAAN,GAAc,CAACxJ,QAAD,CAAd;;AACAoZ,QAAAA,GAAG,CAAC3Z,KAAJ,CAAU,IAAV,EAAgBE,IAAI,CAACG,MAAL,CAAY;AAAS;AAAU;AAC3C,cAAIH,IAAI,GAAGZ,KAAK,CAACa,SAAD,CAAhB;AACA4X,UAAAA,IAAI,CAAChO,GAAD,CAAJ,GAAY7J,IAAZ;AACA,cAAIyW,CAAC,GAAGyF,MAAM,CAACrS,GAAD,CAAd;AACA,iBAAOqS,MAAM,CAACrS,GAAD,CAAb;;AACA,eAAK,IAAIiB,CAAC,GAAG,CAAR,EAAW+L,CAAC,GAAGJ,CAAC,CAAC/W,MAAtB,EAA8BoL,CAAC,GAAG+L,CAAlC,EAAqC/L,CAAC,EAAtC,EAA0C;AACtC2L,YAAAA,CAAC,CAAC3L,CAAD,CAAD,CAAKhL,KAAL,CAAW,IAAX,EAAiBE,IAAjB;AACH;AACJ,SARe,CAAhB;AASH;AACJ,KApB2B,CAA5B;AAqBAmc,IAAAA,QAAQ,CAACtE,IAAT,GAAgBA,IAAhB;AACAsE,IAAAA,QAAQ,CAACC,UAAT,GAAsBrc,EAAtB;AACA,WAAOoc,QAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIE,QAAJ;;AAEA,MAAIxb,WAAJ,EAAiB;AACbwb,IAAAA,QAAQ,GAAGvb,OAAO,CAACC,QAAnB;AACH,GAFD,MAEO,IAAIJ,eAAJ,EAAqB;AACxB0b,IAAAA,QAAQ,GAAGzb,YAAX;AACH,GAFM,MAEA;AACHyb,IAAAA,QAAQ,GAAGrb,QAAX;AACH;;AAED,MAAID,QAAQ,GAAGG,IAAI,CAACmb,QAAD,CAAnB;;AAEA,WAASC,SAAT,CAAmB9Z,MAAnB,EAA2B+L,KAA3B,EAAkClO,QAAlC,EAA4C;AACxCA,IAAAA,QAAQ,GAAGA,QAAQ,IAAI0E,IAAvB;AACA,QAAI8H,OAAO,GAAGhI,WAAW,CAAC0J,KAAD,CAAX,GAAqB,EAArB,GAA0B,EAAxC;AAEA/L,IAAAA,MAAM,CAAC+L,KAAD,EAAQ,UAAUW,IAAV,EAAgBrF,GAAhB,EAAqBxJ,QAArB,EAA+B;AACzCgC,MAAAA,SAAS,CAAC6M,IAAD,CAAT,CAAgB,UAAUtN,GAAV,EAAeJ,MAAf,EAAuB;AACnC,YAAIvB,SAAS,CAACP,MAAV,GAAmB,CAAvB,EAA0B;AACtB8B,UAAAA,MAAM,GAAGpC,KAAK,CAACa,SAAD,EAAY,CAAZ,CAAd;AACH;;AACD4M,QAAAA,OAAO,CAAChD,GAAD,CAAP,GAAerI,MAAf;AACAnB,QAAAA,QAAQ,CAACuB,GAAD,CAAR;AACH,OAND;AAOH,KARK,EAQH,UAAUA,GAAV,EAAe;AACdvB,MAAAA,QAAQ,CAACuB,GAAD,EAAMiL,OAAN,CAAR;AACH,KAVK,CAAN;AAWH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAS0P,aAAT,CAAuBhO,KAAvB,EAA8BlO,QAA9B,EAAwC;AACpCic,IAAAA,SAAS,CAAC9P,MAAD,EAAS+B,KAAT,EAAgBlO,QAAhB,CAAT;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASmc,eAAT,CAAyBjO,KAAzB,EAAgC9C,KAAhC,EAAuCpL,QAAvC,EAAiD;AAC7Cic,IAAAA,SAAS,CAAC9Q,YAAY,CAACC,KAAD,CAAb,EAAsB8C,KAAtB,EAA6BlO,QAA7B,CAAT;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIoc,OAAO,GAAG,UAAUxG,MAAV,EAAkBzH,WAAlB,EAA+B;AACzC,QAAI2H,OAAO,GAAG9T,SAAS,CAAC4T,MAAD,CAAvB;;AACA,WAAOD,KAAK,CAAC,UAAU0G,KAAV,EAAiB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AAIE,WAAW,GAAGrQ,eAAe,CAACmQ,QAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIG,YAAY,GAAGzR,OAAO,CAACwR,WAAD,EAAc,CAAd,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASE,UAAT,CAAoBld,KAApB,EAA2B;AACzB,WAAO,YAAW;AAChB,aAAOA,KAAP;AACD,KAFD;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASmd,KAAT,CAAeC,IAAf,EAAqB3O,IAArB,EAA2B7O,QAA3B,EAAqC;AACjC,QAAIyd,aAAa,GAAG,CAApB;AACA,QAAIC,gBAAgB,GAAG,CAAvB;AAEA,QAAIC,OAAO,GAAG;AACVC,MAAAA,KAAK,EAAEH,aADG;AAEVI,MAAAA,YAAY,EAAEP,UAAU,CAACI,gBAAD;AAFd,KAAd;;AAKA,aAASI,UAAT,CAAoBC,GAApB,EAAyBC,CAAzB,EAA4B;AACxB,UAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACvBD,QAAAA,GAAG,CAACH,KAAJ,GAAY,CAACI,CAAC,CAACJ,KAAH,IAAYH,aAAxB;AAEAM,QAAAA,GAAG,CAACF,YAAJ,GAAmB,OAAOG,CAAC,CAACC,QAAT,KAAsB,UAAtB,GACfD,CAAC,CAACC,QADa,GAEfX,UAAU,CAAC,CAACU,CAAC,CAACC,QAAH,IAAeP,gBAAhB,CAFd;AAIAK,QAAAA,GAAG,CAACG,WAAJ,GAAkBF,CAAC,CAACE,WAApB;AACH,OARD,MAQO,IAAI,OAAOF,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAP,KAAa,QAA1C,EAAoD;AACvDD,QAAAA,GAAG,CAACH,KAAJ,GAAY,CAACI,CAAD,IAAMP,aAAlB;AACH,OAFM,MAEA;AACH,cAAM,IAAIhc,KAAJ,CAAU,mCAAV,CAAN;AACH;AACJ;;AAED,QAAI7B,SAAS,CAACP,MAAV,GAAmB,CAAnB,IAAwB,OAAOme,IAAP,KAAgB,UAA5C,EAAwD;AACpDxd,MAAAA,QAAQ,GAAG6O,IAAI,IAAInK,IAAnB;AACAmK,MAAAA,IAAI,GAAG2O,IAAP;AACH,KAHD,MAGO;AACHM,MAAAA,UAAU,CAACH,OAAD,EAAUH,IAAV,CAAV;AACAxd,MAAAA,QAAQ,GAAGA,QAAQ,IAAI0E,IAAvB;AACH;;AAED,QAAI,OAAOmK,IAAP,KAAgB,UAApB,EAAgC;AAC5B,YAAM,IAAIpN,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAED,QAAI0c,KAAK,GAAGnc,SAAS,CAAC6M,IAAD,CAArB;;AAEA,QAAIuP,OAAO,GAAG,CAAd;;AACA,aAASC,YAAT,GAAwB;AACpBF,MAAAA,KAAK,CAAC,UAAS5c,GAAT,EAAc;AAChB,YAAIA,GAAG,IAAI6c,OAAO,KAAKT,OAAO,CAACC,KAA3B,KACC,OAAOD,OAAO,CAACO,WAAf,IAA8B,UAA9B,IACGP,OAAO,CAACO,WAAR,CAAoB3c,GAApB,CAFJ,CAAJ,EAEmC;AAC/BX,UAAAA,UAAU,CAACyd,YAAD,EAAeV,OAAO,CAACE,YAAR,CAAqBO,OAArB,CAAf,CAAV;AACH,SAJD,MAIO;AACHpe,UAAAA,QAAQ,CAACP,KAAT,CAAe,IAAf,EAAqBG,SAArB;AACH;AACJ,OARI,CAAL;AASH;;AAEDye,IAAAA,YAAY;AACf;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIC,SAAS,GAAG,UAAUd,IAAV,EAAgB3O,IAAhB,EAAsB;AAClC,QAAI,CAACA,IAAL,EAAW;AACPA,MAAAA,IAAI,GAAG2O,IAAP;AACAA,MAAAA,IAAI,GAAG,IAAP;AACH;;AACD,QAAIW,KAAK,GAAGnc,SAAS,CAAC6M,IAAD,CAArB;;AACA,WAAO9O,aAAa,CAAC,UAAUJ,IAAV,EAAgBK,QAAhB,EAA0B;AAC3C,eAASgQ,MAAT,CAAgBzN,EAAhB,EAAoB;AAChB4b,QAAAA,KAAK,CAAC1e,KAAN,CAAY,IAAZ,EAAkBE,IAAI,CAACG,MAAL,CAAYyC,EAAZ,CAAlB;AACH;;AAED,UAAIib,IAAJ,EAAUD,KAAK,CAACC,IAAD,EAAOxN,MAAP,EAAehQ,QAAf,CAAL,CAAV,KACKud,KAAK,CAACvN,MAAD,EAAShQ,QAAT,CAAL;AAER,KARmB,CAApB;AASH,GAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASue,MAAT,CAAgBrQ,KAAhB,EAAuBlO,QAAvB,EAAiC;AAC7Bic,IAAAA,SAAS,CAAC3E,YAAD,EAAepJ,KAAf,EAAsBlO,QAAtB,CAAT;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","sourcesContent":["(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\r\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\r\n  (factory((global.async = global.async || {})));\r\n}(this, (function (exports) { 'use strict';\r\n\r\nfunction slice(arrayLike, start) {\r\n    start = start|0;\r\n    var newLen = Math.max(arrayLike.length - start, 0);\r\n    var newArr = Array(newLen);\r\n    for(var idx = 0; idx < newLen; idx++)  {\r\n        newArr[idx] = arrayLike[start + idx];\r\n    }\r\n    return newArr;\r\n}\r\n\r\n/**\r\n * Creates a continuation function with some arguments already applied.\r\n *\r\n * Useful as a shorthand when combined with other control flow functions. Any\r\n * arguments passed to the returned function are added to the arguments\r\n * originally passed to apply.\r\n *\r\n * @name apply\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {Function} fn - The function you want to eventually apply all\r\n * arguments to. Invokes with (arguments...).\r\n * @param {...*} arguments... - Any number of arguments to automatically apply\r\n * when the continuation is called.\r\n * @returns {Function} the partially-applied function\r\n * @example\r\n *\r\n * // using apply\r\n * async.parallel([\r\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\r\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\r\n * ]);\r\n *\r\n *\r\n * // the same process without using apply\r\n * async.parallel([\r\n *     function(callback) {\r\n *         fs.writeFile('testfile1', 'test1', callback);\r\n *     },\r\n *     function(callback) {\r\n *         fs.writeFile('testfile2', 'test2', callback);\r\n *     }\r\n * ]);\r\n *\r\n * // It's possible to pass any number of additional arguments when calling the\r\n * // continuation:\r\n *\r\n * node> var fn = async.apply(sys.puts, 'one');\r\n * node> fn('two', 'three');\r\n * one\r\n * two\r\n * three\r\n */\r\nvar apply = function(fn/*, ...args*/) {\r\n    var args = slice(arguments, 1);\r\n    return function(/*callArgs*/) {\r\n        var callArgs = slice(arguments);\r\n        return fn.apply(null, args.concat(callArgs));\r\n    };\r\n};\r\n\r\nvar initialParams = function (fn) {\r\n    return function (/*...args, callback*/) {\r\n        var args = slice(arguments);\r\n        var callback = args.pop();\r\n        fn.call(this, args, callback);\r\n    };\r\n};\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return value != null && (type == 'object' || type == 'function');\r\n}\r\n\r\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\r\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\r\n\r\nfunction fallback(fn) {\r\n    setTimeout(fn, 0);\r\n}\r\n\r\nfunction wrap(defer) {\r\n    return function (fn/*, ...args*/) {\r\n        var args = slice(arguments, 1);\r\n        defer(function () {\r\n            fn.apply(null, args);\r\n        });\r\n    };\r\n}\r\n\r\nvar _defer;\r\n\r\nif (hasSetImmediate) {\r\n    _defer = setImmediate;\r\n} else if (hasNextTick) {\r\n    _defer = process.nextTick;\r\n} else {\r\n    _defer = fallback;\r\n}\r\n\r\nvar setImmediate$1 = wrap(_defer);\r\n\r\n/**\r\n * Take a sync function and make it async, passing its return value to a\r\n * callback. This is useful for plugging sync functions into a waterfall,\r\n * series, or other async functions. Any arguments passed to the generated\r\n * function will be passed to the wrapped function (except for the final\r\n * callback argument). Errors thrown will be passed to the callback.\r\n *\r\n * If the function passed to `asyncify` returns a Promise, that promises's\r\n * resolved/rejected state will be used to call the callback, rather than simply\r\n * the synchronous return value.\r\n *\r\n * This also means you can asyncify ES2017 `async` functions.\r\n *\r\n * @name asyncify\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @alias wrapSync\r\n * @category Util\r\n * @param {Function} func - The synchronous function, or Promise-returning\r\n * function to convert to an {@link AsyncFunction}.\r\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\r\n * invoked with `(args..., callback)`.\r\n * @example\r\n *\r\n * // passing a regular synchronous function\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(JSON.parse),\r\n *     function (data, next) {\r\n *         // data is the result of parsing the text.\r\n *         // If there was a parsing error, it would have been caught.\r\n *     }\r\n * ], callback);\r\n *\r\n * // passing a function returning a promise\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(function (contents) {\r\n *         return db.model.create(contents);\r\n *     }),\r\n *     function (model, next) {\r\n *         // `model` is the instantiated model object.\r\n *         // If there was an error, this function would be skipped.\r\n *     }\r\n * ], callback);\r\n *\r\n * // es2017 example, though `asyncify` is not needed if your JS environment\r\n * // supports async functions out of the box\r\n * var q = async.queue(async.asyncify(async function(file) {\r\n *     var intermediateStep = await processFile(file);\r\n *     return await somePromise(intermediateStep)\r\n * }));\r\n *\r\n * q.push(files);\r\n */\r\nfunction asyncify(func) {\r\n    return initialParams(function (args, callback) {\r\n        var result;\r\n        try {\r\n            result = func.apply(this, args);\r\n        } catch (e) {\r\n            return callback(e);\r\n        }\r\n        // if result is Promise object\r\n        if (isObject(result) && typeof result.then === 'function') {\r\n            result.then(function(value) {\r\n                invokeCallback(callback, null, value);\r\n            }, function(err) {\r\n                invokeCallback(callback, err.message ? err : new Error(err));\r\n            });\r\n        } else {\r\n            callback(null, result);\r\n        }\r\n    });\r\n}\r\n\r\nfunction invokeCallback(callback, error, value) {\r\n    try {\r\n        callback(error, value);\r\n    } catch (e) {\r\n        setImmediate$1(rethrow, e);\r\n    }\r\n}\r\n\r\nfunction rethrow(error) {\r\n    throw error;\r\n}\r\n\r\nvar supportsSymbol = typeof Symbol === 'function';\r\n\r\nfunction isAsync(fn) {\r\n    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\r\n}\r\n\r\nfunction wrapAsync(asyncFn) {\r\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\r\n}\r\n\r\nfunction applyEach$1(eachfn) {\r\n    return function(fns/*, ...args*/) {\r\n        var args = slice(arguments, 1);\r\n        var go = initialParams(function(args, callback) {\r\n            var that = this;\r\n            return eachfn(fns, function (fn, cb) {\r\n                wrapAsync(fn).apply(that, args.concat(cb));\r\n            }, callback);\r\n        });\r\n        if (args.length) {\r\n            return go.apply(this, args);\r\n        }\r\n        else {\r\n            return go;\r\n        }\r\n    };\r\n}\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Built-in value references. */\r\nvar Symbol$1 = root.Symbol;\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar nativeObjectToString = objectProto.toString;\r\n\r\n/** Built-in value references. */\r\nvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\r\n\r\n/**\r\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the raw `toStringTag`.\r\n */\r\nfunction getRawTag(value) {\r\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\r\n      tag = value[symToStringTag$1];\r\n\r\n  try {\r\n    value[symToStringTag$1] = undefined;\r\n    var unmasked = true;\r\n  } catch (e) {}\r\n\r\n  var result = nativeObjectToString.call(value);\r\n  if (unmasked) {\r\n    if (isOwn) {\r\n      value[symToStringTag$1] = tag;\r\n    } else {\r\n      delete value[symToStringTag$1];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto$1 = Object.prototype;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar nativeObjectToString$1 = objectProto$1.toString;\r\n\r\n/**\r\n * Converts `value` to a string using `Object.prototype.toString`.\r\n *\r\n * @private\r\n * @param {*} value The value to convert.\r\n * @returns {string} Returns the converted string.\r\n */\r\nfunction objectToString(value) {\r\n  return nativeObjectToString$1.call(value);\r\n}\r\n\r\n/** `Object#toString` result references. */\r\nvar nullTag = '[object Null]';\r\nvar undefinedTag = '[object Undefined]';\r\n\r\n/** Built-in value references. */\r\nvar symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\r\n\r\n/**\r\n * The base implementation of `getTag` without fallbacks for buggy environments.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nfunction baseGetTag(value) {\r\n  if (value == null) {\r\n    return value === undefined ? undefinedTag : nullTag;\r\n  }\r\n  return (symToStringTag && symToStringTag in Object(value))\r\n    ? getRawTag(value)\r\n    : objectToString(value);\r\n}\r\n\r\n/** `Object#toString` result references. */\r\nvar asyncTag = '[object AsyncFunction]';\r\nvar funcTag = '[object Function]';\r\nvar genTag = '[object GeneratorFunction]';\r\nvar proxyTag = '[object Proxy]';\r\n\r\n/**\r\n * Checks if `value` is classified as a `Function` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n * @example\r\n *\r\n * _.isFunction(_);\r\n * // => true\r\n *\r\n * _.isFunction(/abc/);\r\n * // => false\r\n */\r\nfunction isFunction(value) {\r\n  if (!isObject(value)) {\r\n    return false;\r\n  }\r\n  // The use of `Object#toString` avoids issues with the `typeof` operator\r\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\r\n  var tag = baseGetTag(value);\r\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\r\n}\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/**\r\n * Checks if `value` is a valid array-like length.\r\n *\r\n * **Note:** This method is loosely based on\r\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n * @example\r\n *\r\n * _.isLength(3);\r\n * // => true\r\n *\r\n * _.isLength(Number.MIN_VALUE);\r\n * // => false\r\n *\r\n * _.isLength(Infinity);\r\n * // => false\r\n *\r\n * _.isLength('3');\r\n * // => false\r\n */\r\nfunction isLength(value) {\r\n  return typeof value == 'number' &&\r\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n}\r\n\r\n/**\r\n * Checks if `value` is array-like. A value is considered array-like if it's\r\n * not a function and has a `value.length` that's an integer greater than or\r\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n * @example\r\n *\r\n * _.isArrayLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLike(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLike('abc');\r\n * // => true\r\n *\r\n * _.isArrayLike(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLike(value) {\r\n  return value != null && isLength(value.length) && !isFunction(value);\r\n}\r\n\r\n// A temporary value used to identify if the loop should be broken.\r\n// See #1064, #1293\r\nvar breakLoop = {};\r\n\r\n/**\r\n * This method returns `undefined`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 2.3.0\r\n * @category Util\r\n * @example\r\n *\r\n * _.times(2, _.noop);\r\n * // => [undefined, undefined]\r\n */\r\nfunction noop() {\r\n  // No operation performed.\r\n}\r\n\r\nfunction once(fn) {\r\n    return function () {\r\n        if (fn === null) return;\r\n        var callFn = fn;\r\n        fn = null;\r\n        callFn.apply(this, arguments);\r\n    };\r\n}\r\n\r\nvar iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\r\n\r\nvar getIterator = function (coll) {\r\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\r\n};\r\n\r\n/**\r\n * The base implementation of `_.times` without support for iteratee shorthands\r\n * or max array length checks.\r\n *\r\n * @private\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n */\r\nfunction baseTimes(n, iteratee) {\r\n  var index = -1,\r\n      result = Array(n);\r\n\r\n  while (++index < n) {\r\n    result[index] = iteratee(index);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return value != null && typeof value == 'object';\r\n}\r\n\r\n/** `Object#toString` result references. */\r\nvar argsTag = '[object Arguments]';\r\n\r\n/**\r\n * The base implementation of `_.isArguments`.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n */\r\nfunction baseIsArguments(value) {\r\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto$3 = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty$2 = objectProto$3.hasOwnProperty;\r\n\r\n/** Built-in value references. */\r\nvar propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\r\n\r\n/**\r\n * Checks if `value` is likely an `arguments` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArguments(function() { return arguments; }());\r\n * // => true\r\n *\r\n * _.isArguments([1, 2, 3]);\r\n * // => false\r\n */\r\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\r\n  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&\r\n    !propertyIsEnumerable.call(value, 'callee');\r\n};\r\n\r\n/**\r\n * Checks if `value` is classified as an `Array` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n * @example\r\n *\r\n * _.isArray([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArray(document.body.children);\r\n * // => false\r\n *\r\n * _.isArray('abc');\r\n * // => false\r\n *\r\n * _.isArray(_.noop);\r\n * // => false\r\n */\r\nvar isArray = Array.isArray;\r\n\r\n/**\r\n * This method returns `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {boolean} Returns `false`.\r\n * @example\r\n *\r\n * _.times(2, _.stubFalse);\r\n * // => [false, false]\r\n */\r\nfunction stubFalse() {\r\n  return false;\r\n}\r\n\r\n/** Detect free variable `exports`. */\r\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n/** Detect free variable `module`. */\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n\r\n/** Built-in value references. */\r\nvar Buffer = moduleExports ? root.Buffer : undefined;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\r\n\r\n/**\r\n * Checks if `value` is a buffer.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.3.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n * @example\r\n *\r\n * _.isBuffer(new Buffer(2));\r\n * // => true\r\n *\r\n * _.isBuffer(new Uint8Array(2));\r\n * // => false\r\n */\r\nvar isBuffer = nativeIsBuffer || stubFalse;\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\r\n\r\n/** Used to detect unsigned integer values. */\r\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\nfunction isIndex(value, length) {\r\n  var type = typeof value;\r\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\r\n\r\n  return !!length &&\r\n    (type == 'number' ||\r\n      (type != 'symbol' && reIsUint.test(value))) &&\r\n        (value > -1 && value % 1 == 0 && value < length);\r\n}\r\n\r\n/** `Object#toString` result references. */\r\nvar argsTag$1 = '[object Arguments]';\r\nvar arrayTag = '[object Array]';\r\nvar boolTag = '[object Boolean]';\r\nvar dateTag = '[object Date]';\r\nvar errorTag = '[object Error]';\r\nvar funcTag$1 = '[object Function]';\r\nvar mapTag = '[object Map]';\r\nvar numberTag = '[object Number]';\r\nvar objectTag = '[object Object]';\r\nvar regexpTag = '[object RegExp]';\r\nvar setTag = '[object Set]';\r\nvar stringTag = '[object String]';\r\nvar weakMapTag = '[object WeakMap]';\r\n\r\nvar arrayBufferTag = '[object ArrayBuffer]';\r\nvar dataViewTag = '[object DataView]';\r\nvar float32Tag = '[object Float32Array]';\r\nvar float64Tag = '[object Float64Array]';\r\nvar int8Tag = '[object Int8Array]';\r\nvar int16Tag = '[object Int16Array]';\r\nvar int32Tag = '[object Int32Array]';\r\nvar uint8Tag = '[object Uint8Array]';\r\nvar uint8ClampedTag = '[object Uint8ClampedArray]';\r\nvar uint16Tag = '[object Uint16Array]';\r\nvar uint32Tag = '[object Uint32Array]';\r\n\r\n/** Used to identify `toStringTag` values of typed arrays. */\r\nvar typedArrayTags = {};\r\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\r\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\r\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\r\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\r\ntypedArrayTags[uint32Tag] = true;\r\ntypedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =\r\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\r\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\r\ntypedArrayTags[errorTag] = typedArrayTags[funcTag$1] =\r\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\r\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\r\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\r\ntypedArrayTags[weakMapTag] = false;\r\n\r\n/**\r\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n */\r\nfunction baseIsTypedArray(value) {\r\n  return isObjectLike(value) &&\r\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\r\n}\r\n\r\n/**\r\n * The base implementation of `_.unary` without support for storing metadata.\r\n *\r\n * @private\r\n * @param {Function} func The function to cap arguments for.\r\n * @returns {Function} Returns the new capped function.\r\n */\r\nfunction baseUnary(func) {\r\n  return function(value) {\r\n    return func(value);\r\n  };\r\n}\r\n\r\n/** Detect free variable `exports`. */\r\nvar freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n/** Detect free variable `module`. */\r\nvar freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\nvar moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\r\n\r\n/** Detect free variable `process` from Node.js. */\r\nvar freeProcess = moduleExports$1 && freeGlobal.process;\r\n\r\n/** Used to access faster Node.js helpers. */\r\nvar nodeUtil = (function() {\r\n  try {\r\n    // Use `util.types` for Node.js 10+.\r\n    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;\r\n\r\n    if (types) {\r\n      return types;\r\n    }\r\n\r\n    // Legacy `process.binding('util')` for Node.js < 10.\r\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\r\n  } catch (e) {}\r\n}());\r\n\r\n/* Node.js helper references. */\r\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\r\n\r\n/**\r\n * Checks if `value` is classified as a typed array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n * @example\r\n *\r\n * _.isTypedArray(new Uint8Array);\r\n * // => true\r\n *\r\n * _.isTypedArray([]);\r\n * // => false\r\n */\r\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto$2 = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty$1 = objectProto$2.hasOwnProperty;\r\n\r\n/**\r\n * Creates an array of the enumerable property names of the array-like `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @param {boolean} inherited Specify returning inherited property names.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction arrayLikeKeys(value, inherited) {\r\n  var isArr = isArray(value),\r\n      isArg = !isArr && isArguments(value),\r\n      isBuff = !isArr && !isArg && isBuffer(value),\r\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\r\n      skipIndexes = isArr || isArg || isBuff || isType,\r\n      result = skipIndexes ? baseTimes(value.length, String) : [],\r\n      length = result.length;\r\n\r\n  for (var key in value) {\r\n    if ((inherited || hasOwnProperty$1.call(value, key)) &&\r\n        !(skipIndexes && (\r\n           // Safari 9 has enumerable `arguments.length` in strict mode.\r\n           key == 'length' ||\r\n           // Node.js 0.10 has enumerable non-index properties on buffers.\r\n           (isBuff && (key == 'offset' || key == 'parent')) ||\r\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\r\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\r\n           // Skip index properties.\r\n           isIndex(key, length)\r\n        ))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto$5 = Object.prototype;\r\n\r\n/**\r\n * Checks if `value` is likely a prototype object.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n */\r\nfunction isPrototype(value) {\r\n  var Ctor = value && value.constructor,\r\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;\r\n\r\n  return value === proto;\r\n}\r\n\r\n/**\r\n * Creates a unary function that invokes `func` with its argument transformed.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {Function} transform The argument transform.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction overArg(func, transform) {\r\n  return function(arg) {\r\n    return func(transform(arg));\r\n  };\r\n}\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeKeys = overArg(Object.keys, Object);\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto$4 = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty$3 = objectProto$4.hasOwnProperty;\r\n\r\n/**\r\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction baseKeys(object) {\r\n  if (!isPrototype(object)) {\r\n    return nativeKeys(object);\r\n  }\r\n  var result = [];\r\n  for (var key in Object(object)) {\r\n    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects. See the\r\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n * for more details.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keys(new Foo);\r\n * // => ['a', 'b'] (iteration order is not guaranteed)\r\n *\r\n * _.keys('hi');\r\n * // => ['0', '1']\r\n */\r\nfunction keys(object) {\r\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\r\n}\r\n\r\nfunction createArrayIterator(coll) {\r\n    var i = -1;\r\n    var len = coll.length;\r\n    return function next() {\r\n        return ++i < len ? {value: coll[i], key: i} : null;\r\n    }\r\n}\r\n\r\nfunction createES2015Iterator(iterator) {\r\n    var i = -1;\r\n    return function next() {\r\n        var item = iterator.next();\r\n        if (item.done)\r\n            return null;\r\n        i++;\r\n        return {value: item.value, key: i};\r\n    }\r\n}\r\n\r\nfunction createObjectIterator(obj) {\r\n    var okeys = keys(obj);\r\n    var i = -1;\r\n    var len = okeys.length;\r\n    return function next() {\r\n        var key = okeys[++i];\r\n        return i < len ? {value: obj[key], key: key} : null;\r\n    };\r\n}\r\n\r\nfunction iterator(coll) {\r\n    if (isArrayLike(coll)) {\r\n        return createArrayIterator(coll);\r\n    }\r\n\r\n    var iterator = getIterator(coll);\r\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\r\n}\r\n\r\nfunction onlyOnce(fn) {\r\n    return function() {\r\n        if (fn === null) throw new Error(\"Callback was already called.\");\r\n        var callFn = fn;\r\n        fn = null;\r\n        callFn.apply(this, arguments);\r\n    };\r\n}\r\n\r\nfunction _eachOfLimit(limit) {\r\n    return function (obj, iteratee, callback) {\r\n        callback = once(callback || noop);\r\n        if (limit <= 0 || !obj) {\r\n            return callback(null);\r\n        }\r\n        var nextElem = iterator(obj);\r\n        var done = false;\r\n        var running = 0;\r\n        var looping = false;\r\n\r\n        function iterateeCallback(err, value) {\r\n            running -= 1;\r\n            if (err) {\r\n                done = true;\r\n                callback(err);\r\n            }\r\n            else if (value === breakLoop || (done && running <= 0)) {\r\n                done = true;\r\n                return callback(null);\r\n            }\r\n            else if (!looping) {\r\n                replenish();\r\n            }\r\n        }\r\n\r\n        function replenish () {\r\n            looping = true;\r\n            while (running < limit && !done) {\r\n                var elem = nextElem();\r\n                if (elem === null) {\r\n                    done = true;\r\n                    if (running <= 0) {\r\n                        callback(null);\r\n                    }\r\n                    return;\r\n                }\r\n                running += 1;\r\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\r\n            }\r\n            looping = false;\r\n        }\r\n\r\n        replenish();\r\n    };\r\n}\r\n\r\n/**\r\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name eachOfLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.eachOf]{@link module:Collections.eachOf}\r\n * @alias forEachOfLimit\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each\r\n * item in `coll`. The `key` is the item's key, or index in the case of an\r\n * array.\r\n * Invoked with (item, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n */\r\nfunction eachOfLimit(coll, limit, iteratee, callback) {\r\n    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\r\n}\r\n\r\nfunction doLimit(fn, limit) {\r\n    return function (iterable, iteratee, callback) {\r\n        return fn(iterable, limit, iteratee, callback);\r\n    };\r\n}\r\n\r\n// eachOf implementation optimized for array-likes\r\nfunction eachOfArrayLike(coll, iteratee, callback) {\r\n    callback = once(callback || noop);\r\n    var index = 0,\r\n        completed = 0,\r\n        length = coll.length;\r\n    if (length === 0) {\r\n        callback(null);\r\n    }\r\n\r\n    function iteratorCallback(err, value) {\r\n        if (err) {\r\n            callback(err);\r\n        } else if ((++completed === length) || value === breakLoop) {\r\n            callback(null);\r\n        }\r\n    }\r\n\r\n    for (; index < length; index++) {\r\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\r\n    }\r\n}\r\n\r\n// a generic version of eachOf which can handle array, object, and iterator cases.\r\nvar eachOfGeneric = doLimit(eachOfLimit, Infinity);\r\n\r\n/**\r\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\r\n * to the iteratee.\r\n *\r\n * @name eachOf\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias forEachOf\r\n * @category Collection\r\n * @see [async.each]{@link module:Collections.each}\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A function to apply to each\r\n * item in `coll`.\r\n * The `key` is the item's key, or index in the case of an array.\r\n * Invoked with (item, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n * @example\r\n *\r\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\r\n * var configs = {};\r\n *\r\n * async.forEachOf(obj, function (value, key, callback) {\r\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\r\n *         if (err) return callback(err);\r\n *         try {\r\n *             configs[key] = JSON.parse(data);\r\n *         } catch (e) {\r\n *             return callback(e);\r\n *         }\r\n *         callback();\r\n *     });\r\n * }, function (err) {\r\n *     if (err) console.error(err.message);\r\n *     // configs is now a map of JSON data\r\n *     doSomethingWith(configs);\r\n * });\r\n */\r\nvar eachOf = function(coll, iteratee, callback) {\r\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\r\n    eachOfImplementation(coll, wrapAsync(iteratee), callback);\r\n};\r\n\r\nfunction doParallel(fn) {\r\n    return function (obj, iteratee, callback) {\r\n        return fn(eachOf, obj, wrapAsync(iteratee), callback);\r\n    };\r\n}\r\n\r\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\r\n    callback = callback || noop;\r\n    arr = arr || [];\r\n    var results = [];\r\n    var counter = 0;\r\n    var _iteratee = wrapAsync(iteratee);\r\n\r\n    eachfn(arr, function (value, _, callback) {\r\n        var index = counter++;\r\n        _iteratee(value, function (err, v) {\r\n            results[index] = v;\r\n            callback(err);\r\n        });\r\n    }, function (err) {\r\n        callback(err, results);\r\n    });\r\n}\r\n\r\n/**\r\n * Produces a new collection of values by mapping each value in `coll` through\r\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\r\n * and a callback for when it has finished processing. Each of these callback\r\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\r\n * `iteratee` passes an error to its callback, the main `callback` (for the\r\n * `map` function) is immediately called with the error.\r\n *\r\n * Note, that since this function applies the `iteratee` to each item in\r\n * parallel, there is no guarantee that the `iteratee` functions will complete\r\n * in order. However, the results array will be in the same order as the\r\n * original `coll`.\r\n *\r\n * If `map` is passed an Object, the results will be an Array.  The results\r\n * will roughly be in the order of the original Objects' keys (but this can\r\n * vary across JavaScript engines).\r\n *\r\n * @name map\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with the transformed item.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Results is an Array of the\r\n * transformed items from the `coll`. Invoked with (err, results).\r\n * @example\r\n *\r\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\r\n *     // results is now an array of stats for each file\r\n * });\r\n */\r\nvar map = doParallel(_asyncMap);\r\n\r\n/**\r\n * Applies the provided arguments to each function in the array, calling\r\n * `callback` after all functions have completed. If you only provide the first\r\n * argument, `fns`, then it will return a function which lets you pass in the\r\n * arguments as if it were a single function call. If more arguments are\r\n * provided, `callback` is required while `args` is still optional.\r\n *\r\n * @name applyEach\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\r\n * to all call with the same arguments\r\n * @param {...*} [args] - any number of separate arguments to pass to the\r\n * function.\r\n * @param {Function} [callback] - the final argument should be the callback,\r\n * called when all functions have completed processing.\r\n * @returns {Function} - If only the first argument, `fns`, is provided, it will\r\n * return a function which lets you pass in the arguments as if it were a single\r\n * function call. The signature is `(..args, callback)`. If invoked with any\r\n * arguments, `callback` is required.\r\n * @example\r\n *\r\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\r\n *\r\n * // partial application example:\r\n * async.each(\r\n *     buckets,\r\n *     async.applyEach([enableSearch, updateSchema]),\r\n *     callback\r\n * );\r\n */\r\nvar applyEach = applyEach$1(map);\r\n\r\nfunction doParallelLimit(fn) {\r\n    return function (obj, limit, iteratee, callback) {\r\n        return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\r\n    };\r\n}\r\n\r\n/**\r\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name mapLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.map]{@link module:Collections.map}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with the transformed item.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Results is an array of the\r\n * transformed items from the `coll`. Invoked with (err, results).\r\n */\r\nvar mapLimit = doParallelLimit(_asyncMap);\r\n\r\n/**\r\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\r\n *\r\n * @name mapSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.map]{@link module:Collections.map}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with the transformed item.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Results is an array of the\r\n * transformed items from the `coll`. Invoked with (err, results).\r\n */\r\nvar mapSeries = doLimit(mapLimit, 1);\r\n\r\n/**\r\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\r\n *\r\n * @name applyEachSeries\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\r\n * call with the same arguments\r\n * @param {...*} [args] - any number of separate arguments to pass to the\r\n * function.\r\n * @param {Function} [callback] - the final argument should be the callback,\r\n * called when all functions have completed processing.\r\n * @returns {Function} - If only the first argument is provided, it will return\r\n * a function which lets you pass in the arguments as if it were a single\r\n * function call.\r\n */\r\nvar applyEachSeries = applyEach$1(mapSeries);\r\n\r\n/**\r\n * A specialized version of `_.forEach` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayEach(array, iteratee) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length;\r\n\r\n  while (++index < length) {\r\n    if (iteratee(array[index], index, array) === false) {\r\n      break;\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\r\n *\r\n * @private\r\n * @param {boolean} [fromRight] Specify iterating from right to left.\r\n * @returns {Function} Returns the new base function.\r\n */\r\nfunction createBaseFor(fromRight) {\r\n  return function(object, iteratee, keysFunc) {\r\n    var index = -1,\r\n        iterable = Object(object),\r\n        props = keysFunc(object),\r\n        length = props.length;\r\n\r\n    while (length--) {\r\n      var key = props[fromRight ? length : ++index];\r\n      if (iteratee(iterable[key], key, iterable) === false) {\r\n        break;\r\n      }\r\n    }\r\n    return object;\r\n  };\r\n}\r\n\r\n/**\r\n * The base implementation of `baseForOwn` which iterates over `object`\r\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\r\n * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n *\r\n * @private\r\n * @param {Object} object The object to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @param {Function} keysFunc The function to get the keys of `object`.\r\n * @returns {Object} Returns `object`.\r\n */\r\nvar baseFor = createBaseFor();\r\n\r\n/**\r\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Object} object The object to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction baseForOwn(object, iteratee) {\r\n  return object && baseFor(object, iteratee, keys);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n * support for iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {Function} predicate The function invoked per iteration.\r\n * @param {number} fromIndex The index to search from.\r\n * @param {boolean} [fromRight] Specify iterating from right to left.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n  var length = array.length,\r\n      index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n  while ((fromRight ? index-- : ++index < length)) {\r\n    if (predicate(array[index], index, array)) {\r\n      return index;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isNaN` without support for number objects.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n */\r\nfunction baseIsNaN(value) {\r\n  return value !== value;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.indexOf` which performs strict equality\r\n * comparisons of values, i.e. `===`.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} value The value to search for.\r\n * @param {number} fromIndex The index to search from.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction strictIndexOf(array, value, fromIndex) {\r\n  var index = fromIndex - 1,\r\n      length = array.length;\r\n\r\n  while (++index < length) {\r\n    if (array[index] === value) {\r\n      return index;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} value The value to search for.\r\n * @param {number} fromIndex The index to search from.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction baseIndexOf(array, value, fromIndex) {\r\n  return value === value\r\n    ? strictIndexOf(array, value, fromIndex)\r\n    : baseFindIndex(array, baseIsNaN, fromIndex);\r\n}\r\n\r\n/**\r\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\r\n * their requirements. Each function can optionally depend on other functions\r\n * being completed first, and each function is run as soon as its requirements\r\n * are satisfied.\r\n *\r\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\r\n * will stop. Further tasks will not execute (so any other functions depending\r\n * on it will not run), and the main `callback` is immediately called with the\r\n * error.\r\n *\r\n * {@link AsyncFunction}s also receive an object containing the results of functions which\r\n * have completed so far as the first argument, if they have dependencies. If a\r\n * task function has no dependencies, it will only be passed a callback.\r\n *\r\n * @name auto\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Object} tasks - An object. Each of its properties is either a\r\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\r\n * in the array. The object's key of a property serves as the name of the task\r\n * defined by that property, i.e. can be used when specifying requirements for\r\n * other tasks. The function receives one or two arguments:\r\n * * a `results` object, containing the results of the previously executed\r\n *   functions, only passed if the task has any dependencies,\r\n * * a `callback(err, result)` function, which must be called when finished,\r\n *   passing an `error` (which can be `null`) and the result of the function's\r\n *   execution.\r\n * @param {number} [concurrency=Infinity] - An optional `integer` for\r\n * determining the maximum number of tasks that can be run in parallel. By\r\n * default, as many as possible.\r\n * @param {Function} [callback] - An optional callback which is called when all\r\n * the tasks have been completed. It receives the `err` argument if any `tasks`\r\n * pass an error to their callback. Results are always returned; however, if an\r\n * error occurs, no further `tasks` will be performed, and the results object\r\n * will only contain partial results. Invoked with (err, results).\r\n * @returns undefined\r\n * @example\r\n *\r\n * async.auto({\r\n *     // this function will just be passed a callback\r\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\r\n *     showData: ['readData', function(results, cb) {\r\n *         // results.readData is the file's contents\r\n *         // ...\r\n *     }]\r\n * }, callback);\r\n *\r\n * async.auto({\r\n *     get_data: function(callback) {\r\n *         console.log('in get_data');\r\n *         // async code to get some data\r\n *         callback(null, 'data', 'converted to array');\r\n *     },\r\n *     make_folder: function(callback) {\r\n *         console.log('in make_folder');\r\n *         // async code to create a directory to store a file in\r\n *         // this is run at the same time as getting the data\r\n *         callback(null, 'folder');\r\n *     },\r\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\r\n *         console.log('in write_file', JSON.stringify(results));\r\n *         // once there is some data and the directory exists,\r\n *         // write the data to a file in the directory\r\n *         callback(null, 'filename');\r\n *     }],\r\n *     email_link: ['write_file', function(results, callback) {\r\n *         console.log('in email_link', JSON.stringify(results));\r\n *         // once the file is written let's email a link to it...\r\n *         // results.write_file contains the filename returned by write_file.\r\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\r\n *     }]\r\n * }, function(err, results) {\r\n *     console.log('err = ', err);\r\n *     console.log('results = ', results);\r\n * });\r\n */\r\nvar auto = function (tasks, concurrency, callback) {\r\n    if (typeof concurrency === 'function') {\r\n        // concurrency is optional, shift the args.\r\n        callback = concurrency;\r\n        concurrency = null;\r\n    }\r\n    callback = once(callback || noop);\r\n    var keys$$1 = keys(tasks);\r\n    var numTasks = keys$$1.length;\r\n    if (!numTasks) {\r\n        return callback(null);\r\n    }\r\n    if (!concurrency) {\r\n        concurrency = numTasks;\r\n    }\r\n\r\n    var results = {};\r\n    var runningTasks = 0;\r\n    var hasError = false;\r\n\r\n    var listeners = Object.create(null);\r\n\r\n    var readyTasks = [];\r\n\r\n    // for cycle detection:\r\n    var readyToCheck = []; // tasks that have been identified as reachable\r\n    // without the possibility of returning to an ancestor task\r\n    var uncheckedDependencies = {};\r\n\r\n    baseForOwn(tasks, function (task, key) {\r\n        if (!isArray(task)) {\r\n            // no dependencies\r\n            enqueueTask(key, [task]);\r\n            readyToCheck.push(key);\r\n            return;\r\n        }\r\n\r\n        var dependencies = task.slice(0, task.length - 1);\r\n        var remainingDependencies = dependencies.length;\r\n        if (remainingDependencies === 0) {\r\n            enqueueTask(key, task);\r\n            readyToCheck.push(key);\r\n            return;\r\n        }\r\n        uncheckedDependencies[key] = remainingDependencies;\r\n\r\n        arrayEach(dependencies, function (dependencyName) {\r\n            if (!tasks[dependencyName]) {\r\n                throw new Error('async.auto task `' + key +\r\n                    '` has a non-existent dependency `' +\r\n                    dependencyName + '` in ' +\r\n                    dependencies.join(', '));\r\n            }\r\n            addListener(dependencyName, function () {\r\n                remainingDependencies--;\r\n                if (remainingDependencies === 0) {\r\n                    enqueueTask(key, task);\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    checkForDeadlocks();\r\n    processQueue();\r\n\r\n    function enqueueTask(key, task) {\r\n        readyTasks.push(function () {\r\n            runTask(key, task);\r\n        });\r\n    }\r\n\r\n    function processQueue() {\r\n        if (readyTasks.length === 0 && runningTasks === 0) {\r\n            return callback(null, results);\r\n        }\r\n        while(readyTasks.length && runningTasks < concurrency) {\r\n            var run = readyTasks.shift();\r\n            run();\r\n        }\r\n\r\n    }\r\n\r\n    function addListener(taskName, fn) {\r\n        var taskListeners = listeners[taskName];\r\n        if (!taskListeners) {\r\n            taskListeners = listeners[taskName] = [];\r\n        }\r\n\r\n        taskListeners.push(fn);\r\n    }\r\n\r\n    function taskComplete(taskName) {\r\n        var taskListeners = listeners[taskName] || [];\r\n        arrayEach(taskListeners, function (fn) {\r\n            fn();\r\n        });\r\n        processQueue();\r\n    }\r\n\r\n\r\n    function runTask(key, task) {\r\n        if (hasError) return;\r\n\r\n        var taskCallback = onlyOnce(function(err, result) {\r\n            runningTasks--;\r\n            if (arguments.length > 2) {\r\n                result = slice(arguments, 1);\r\n            }\r\n            if (err) {\r\n                var safeResults = {};\r\n                baseForOwn(results, function(val, rkey) {\r\n                    safeResults[rkey] = val;\r\n                });\r\n                safeResults[key] = result;\r\n                hasError = true;\r\n                listeners = Object.create(null);\r\n\r\n                callback(err, safeResults);\r\n            } else {\r\n                results[key] = result;\r\n                taskComplete(key);\r\n            }\r\n        });\r\n\r\n        runningTasks++;\r\n        var taskFn = wrapAsync(task[task.length - 1]);\r\n        if (task.length > 1) {\r\n            taskFn(results, taskCallback);\r\n        } else {\r\n            taskFn(taskCallback);\r\n        }\r\n    }\r\n\r\n    function checkForDeadlocks() {\r\n        // Kahn's algorithm\r\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\r\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\r\n        var currentTask;\r\n        var counter = 0;\r\n        while (readyToCheck.length) {\r\n            currentTask = readyToCheck.pop();\r\n            counter++;\r\n            arrayEach(getDependents(currentTask), function (dependent) {\r\n                if (--uncheckedDependencies[dependent] === 0) {\r\n                    readyToCheck.push(dependent);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (counter !== numTasks) {\r\n            throw new Error(\r\n                'async.auto cannot execute tasks due to a recursive dependency'\r\n            );\r\n        }\r\n    }\r\n\r\n    function getDependents(taskName) {\r\n        var result = [];\r\n        baseForOwn(tasks, function (task, key) {\r\n            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\r\n                result.push(key);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n};\r\n\r\n/**\r\n * A specialized version of `_.map` for arrays without support for iteratee\r\n * shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the new mapped array.\r\n */\r\nfunction arrayMap(array, iteratee) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length,\r\n      result = Array(length);\r\n\r\n  while (++index < length) {\r\n    result[index] = iteratee(array[index], index, array);\r\n  }\r\n  return result;\r\n}\r\n\r\n/** `Object#toString` result references. */\r\nvar symbolTag = '[object Symbol]';\r\n\r\n/**\r\n * Checks if `value` is classified as a `Symbol` primitive or object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n * @example\r\n *\r\n * _.isSymbol(Symbol.iterator);\r\n * // => true\r\n *\r\n * _.isSymbol('abc');\r\n * // => false\r\n */\r\nfunction isSymbol(value) {\r\n  return typeof value == 'symbol' ||\r\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\r\n}\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar INFINITY = 1 / 0;\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\r\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\r\n\r\n/**\r\n * The base implementation of `_.toString` which doesn't convert nullish\r\n * values to empty strings.\r\n *\r\n * @private\r\n * @param {*} value The value to process.\r\n * @returns {string} Returns the string.\r\n */\r\nfunction baseToString(value) {\r\n  // Exit early for strings to avoid a performance hit in some environments.\r\n  if (typeof value == 'string') {\r\n    return value;\r\n  }\r\n  if (isArray(value)) {\r\n    // Recursively convert values (susceptible to call stack limits).\r\n    return arrayMap(value, baseToString) + '';\r\n  }\r\n  if (isSymbol(value)) {\r\n    return symbolToString ? symbolToString.call(value) : '';\r\n  }\r\n  var result = (value + '');\r\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.slice` without an iteratee call guard.\r\n *\r\n * @private\r\n * @param {Array} array The array to slice.\r\n * @param {number} [start=0] The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns the slice of `array`.\r\n */\r\nfunction baseSlice(array, start, end) {\r\n  var index = -1,\r\n      length = array.length;\r\n\r\n  if (start < 0) {\r\n    start = -start > length ? 0 : (length + start);\r\n  }\r\n  end = end > length ? length : end;\r\n  if (end < 0) {\r\n    end += length;\r\n  }\r\n  length = start > end ? 0 : ((end - start) >>> 0);\r\n  start >>>= 0;\r\n\r\n  var result = Array(length);\r\n  while (++index < length) {\r\n    result[index] = array[index + start];\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Casts `array` to a slice if it's needed.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {number} start The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns the cast slice.\r\n */\r\nfunction castSlice(array, start, end) {\r\n  var length = array.length;\r\n  end = end === undefined ? length : end;\r\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\r\n}\r\n\r\n/**\r\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\r\n * that is not found in the character symbols.\r\n *\r\n * @private\r\n * @param {Array} strSymbols The string symbols to inspect.\r\n * @param {Array} chrSymbols The character symbols to find.\r\n * @returns {number} Returns the index of the last unmatched string symbol.\r\n */\r\nfunction charsEndIndex(strSymbols, chrSymbols) {\r\n  var index = strSymbols.length;\r\n\r\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\r\n  return index;\r\n}\r\n\r\n/**\r\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\r\n * that is not found in the character symbols.\r\n *\r\n * @private\r\n * @param {Array} strSymbols The string symbols to inspect.\r\n * @param {Array} chrSymbols The character symbols to find.\r\n * @returns {number} Returns the index of the first unmatched string symbol.\r\n */\r\nfunction charsStartIndex(strSymbols, chrSymbols) {\r\n  var index = -1,\r\n      length = strSymbols.length;\r\n\r\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\r\n  return index;\r\n}\r\n\r\n/**\r\n * Converts an ASCII `string` to an array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the converted array.\r\n */\r\nfunction asciiToArray(string) {\r\n  return string.split('');\r\n}\r\n\r\n/** Used to compose unicode character classes. */\r\nvar rsAstralRange = '\\\\ud800-\\\\udfff';\r\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f';\r\nvar reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f';\r\nvar rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff';\r\nvar rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\r\nvar rsVarRange = '\\\\ufe0e\\\\ufe0f';\r\n\r\n/** Used to compose unicode capture groups. */\r\nvar rsZWJ = '\\\\u200d';\r\n\r\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\r\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\r\n\r\n/**\r\n * Checks if `string` contains Unicode symbols.\r\n *\r\n * @private\r\n * @param {string} string The string to inspect.\r\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\r\n */\r\nfunction hasUnicode(string) {\r\n  return reHasUnicode.test(string);\r\n}\r\n\r\n/** Used to compose unicode character classes. */\r\nvar rsAstralRange$1 = '\\\\ud800-\\\\udfff';\r\nvar rsComboMarksRange$1 = '\\\\u0300-\\\\u036f';\r\nvar reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f';\r\nvar rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff';\r\nvar rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\r\nvar rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\r\n\r\n/** Used to compose unicode capture groups. */\r\nvar rsAstral = '[' + rsAstralRange$1 + ']';\r\nvar rsCombo = '[' + rsComboRange$1 + ']';\r\nvar rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\r\nvar rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\r\nvar rsNonAstral = '[^' + rsAstralRange$1 + ']';\r\nvar rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\r\nvar rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\r\nvar rsZWJ$1 = '\\\\u200d';\r\n\r\n/** Used to compose unicode regexes. */\r\nvar reOptMod = rsModifier + '?';\r\nvar rsOptVar = '[' + rsVarRange$1 + ']?';\r\nvar rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\r\nvar rsSeq = rsOptVar + reOptMod + rsOptJoin;\r\nvar rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\r\n\r\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\r\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\r\n\r\n/**\r\n * Converts a Unicode `string` to an array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the converted array.\r\n */\r\nfunction unicodeToArray(string) {\r\n  return string.match(reUnicode) || [];\r\n}\r\n\r\n/**\r\n * Converts `string` to an array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the converted array.\r\n */\r\nfunction stringToArray(string) {\r\n  return hasUnicode(string)\r\n    ? unicodeToArray(string)\r\n    : asciiToArray(string);\r\n}\r\n\r\n/**\r\n * Converts `value` to a string. An empty string is returned for `null`\r\n * and `undefined` values. The sign of `-0` is preserved.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to convert.\r\n * @returns {string} Returns the converted string.\r\n * @example\r\n *\r\n * _.toString(null);\r\n * // => ''\r\n *\r\n * _.toString(-0);\r\n * // => '-0'\r\n *\r\n * _.toString([1, 2, 3]);\r\n * // => '1,2,3'\r\n */\r\nfunction toString(value) {\r\n  return value == null ? '' : baseToString(value);\r\n}\r\n\r\n/** Used to match leading and trailing whitespace. */\r\nvar reTrim = /^\\s+|\\s+$/g;\r\n\r\n/**\r\n * Removes leading and trailing whitespace or specified characters from `string`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to trim.\r\n * @param {string} [chars=whitespace] The characters to trim.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {string} Returns the trimmed string.\r\n * @example\r\n *\r\n * _.trim('  abc  ');\r\n * // => 'abc'\r\n *\r\n * _.trim('-_-abc-_-', '_-');\r\n * // => 'abc'\r\n *\r\n * _.map(['  foo  ', '  bar  '], _.trim);\r\n * // => ['foo', 'bar']\r\n */\r\nfunction trim(string, chars, guard) {\r\n  string = toString(string);\r\n  if (string && (guard || chars === undefined)) {\r\n    return string.replace(reTrim, '');\r\n  }\r\n  if (!string || !(chars = baseToString(chars))) {\r\n    return string;\r\n  }\r\n  var strSymbols = stringToArray(string),\r\n      chrSymbols = stringToArray(chars),\r\n      start = charsStartIndex(strSymbols, chrSymbols),\r\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\r\n\r\n  return castSlice(strSymbols, start, end).join('');\r\n}\r\n\r\nvar FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\r\nvar FN_ARG_SPLIT = /,/;\r\nvar FN_ARG = /(=.+)?(\\s*)$/;\r\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n\r\nfunction parseParams(func) {\r\n    func = func.toString().replace(STRIP_COMMENTS, '');\r\n    func = func.match(FN_ARGS)[2].replace(' ', '');\r\n    func = func ? func.split(FN_ARG_SPLIT) : [];\r\n    func = func.map(function (arg){\r\n        return trim(arg.replace(FN_ARG, ''));\r\n    });\r\n    return func;\r\n}\r\n\r\n/**\r\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\r\n * tasks are specified as parameters to the function, after the usual callback\r\n * parameter, with the parameter names matching the names of the tasks it\r\n * depends on. This can provide even more readable task graphs which can be\r\n * easier to maintain.\r\n *\r\n * If a final callback is specified, the task results are similarly injected,\r\n * specified as named parameters after the initial error parameter.\r\n *\r\n * The autoInject function is purely syntactic sugar and its semantics are\r\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\r\n *\r\n * @name autoInject\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.auto]{@link module:ControlFlow.auto}\r\n * @category Control Flow\r\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\r\n * the form 'func([dependencies...], callback). The object's key of a property\r\n * serves as the name of the task defined by that property, i.e. can be used\r\n * when specifying requirements for other tasks.\r\n * * The `callback` parameter is a `callback(err, result)` which must be called\r\n *   when finished, passing an `error` (which can be `null`) and the result of\r\n *   the function's execution. The remaining parameters name other tasks on\r\n *   which the task is dependent, and the results from those tasks are the\r\n *   arguments of those parameters.\r\n * @param {Function} [callback] - An optional callback which is called when all\r\n * the tasks have been completed. It receives the `err` argument if any `tasks`\r\n * pass an error to their callback, and a `results` object with any completed\r\n * task results, similar to `auto`.\r\n * @example\r\n *\r\n * //  The example from `auto` can be rewritten as follows:\r\n * async.autoInject({\r\n *     get_data: function(callback) {\r\n *         // async code to get some data\r\n *         callback(null, 'data', 'converted to array');\r\n *     },\r\n *     make_folder: function(callback) {\r\n *         // async code to create a directory to store a file in\r\n *         // this is run at the same time as getting the data\r\n *         callback(null, 'folder');\r\n *     },\r\n *     write_file: function(get_data, make_folder, callback) {\r\n *         // once there is some data and the directory exists,\r\n *         // write the data to a file in the directory\r\n *         callback(null, 'filename');\r\n *     },\r\n *     email_link: function(write_file, callback) {\r\n *         // once the file is written let's email a link to it...\r\n *         // write_file contains the filename returned by write_file.\r\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\r\n *     }\r\n * }, function(err, results) {\r\n *     console.log('err = ', err);\r\n *     console.log('email_link = ', results.email_link);\r\n * });\r\n *\r\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\r\n * // will not work with plain functions, since the parameter names will be\r\n * // collapsed to a single letter identifier.  To work around this, you can\r\n * // explicitly specify the names of the parameters your task function needs\r\n * // in an array, similar to Angular.js dependency injection.\r\n *\r\n * // This still has an advantage over plain `auto`, since the results a task\r\n * // depends on are still spread into arguments.\r\n * async.autoInject({\r\n *     //...\r\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\r\n *         callback(null, 'filename');\r\n *     }],\r\n *     email_link: ['write_file', function(write_file, callback) {\r\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\r\n *     }]\r\n *     //...\r\n * }, function(err, results) {\r\n *     console.log('err = ', err);\r\n *     console.log('email_link = ', results.email_link);\r\n * });\r\n */\r\nfunction autoInject(tasks, callback) {\r\n    var newTasks = {};\r\n\r\n    baseForOwn(tasks, function (taskFn, key) {\r\n        var params;\r\n        var fnIsAsync = isAsync(taskFn);\r\n        var hasNoDeps =\r\n            (!fnIsAsync && taskFn.length === 1) ||\r\n            (fnIsAsync && taskFn.length === 0);\r\n\r\n        if (isArray(taskFn)) {\r\n            params = taskFn.slice(0, -1);\r\n            taskFn = taskFn[taskFn.length - 1];\r\n\r\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\r\n        } else if (hasNoDeps) {\r\n            // no dependencies, use the function as-is\r\n            newTasks[key] = taskFn;\r\n        } else {\r\n            params = parseParams(taskFn);\r\n            if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\r\n                throw new Error(\"autoInject task functions require explicit parameters.\");\r\n            }\r\n\r\n            // remove callback param\r\n            if (!fnIsAsync) params.pop();\r\n\r\n            newTasks[key] = params.concat(newTask);\r\n        }\r\n\r\n        function newTask(results, taskCb) {\r\n            var newArgs = arrayMap(params, function (name) {\r\n                return results[name];\r\n            });\r\n            newArgs.push(taskCb);\r\n            wrapAsync(taskFn).apply(null, newArgs);\r\n        }\r\n    });\r\n\r\n    auto(newTasks, callback);\r\n}\r\n\r\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\r\n// used for queues. This implementation assumes that the node provided by the user can be modified\r\n// to adjust the next and last properties. We implement only the minimal functionality\r\n// for queue support.\r\nfunction DLL() {\r\n    this.head = this.tail = null;\r\n    this.length = 0;\r\n}\r\n\r\nfunction setInitial(dll, node) {\r\n    dll.length = 1;\r\n    dll.head = dll.tail = node;\r\n}\r\n\r\nDLL.prototype.removeLink = function(node) {\r\n    if (node.prev) node.prev.next = node.next;\r\n    else this.head = node.next;\r\n    if (node.next) node.next.prev = node.prev;\r\n    else this.tail = node.prev;\r\n\r\n    node.prev = node.next = null;\r\n    this.length -= 1;\r\n    return node;\r\n};\r\n\r\nDLL.prototype.empty = function () {\r\n    while(this.head) this.shift();\r\n    return this;\r\n};\r\n\r\nDLL.prototype.insertAfter = function(node, newNode) {\r\n    newNode.prev = node;\r\n    newNode.next = node.next;\r\n    if (node.next) node.next.prev = newNode;\r\n    else this.tail = newNode;\r\n    node.next = newNode;\r\n    this.length += 1;\r\n};\r\n\r\nDLL.prototype.insertBefore = function(node, newNode) {\r\n    newNode.prev = node.prev;\r\n    newNode.next = node;\r\n    if (node.prev) node.prev.next = newNode;\r\n    else this.head = newNode;\r\n    node.prev = newNode;\r\n    this.length += 1;\r\n};\r\n\r\nDLL.prototype.unshift = function(node) {\r\n    if (this.head) this.insertBefore(this.head, node);\r\n    else setInitial(this, node);\r\n};\r\n\r\nDLL.prototype.push = function(node) {\r\n    if (this.tail) this.insertAfter(this.tail, node);\r\n    else setInitial(this, node);\r\n};\r\n\r\nDLL.prototype.shift = function() {\r\n    return this.head && this.removeLink(this.head);\r\n};\r\n\r\nDLL.prototype.pop = function() {\r\n    return this.tail && this.removeLink(this.tail);\r\n};\r\n\r\nDLL.prototype.toArray = function () {\r\n    var arr = Array(this.length);\r\n    var curr = this.head;\r\n    for(var idx = 0; idx < this.length; idx++) {\r\n        arr[idx] = curr.data;\r\n        curr = curr.next;\r\n    }\r\n    return arr;\r\n};\r\n\r\nDLL.prototype.remove = function (testFn) {\r\n    var curr = this.head;\r\n    while(!!curr) {\r\n        var next = curr.next;\r\n        if (testFn(curr)) {\r\n            this.removeLink(curr);\r\n        }\r\n        curr = next;\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction queue(worker, concurrency, payload) {\r\n    if (concurrency == null) {\r\n        concurrency = 1;\r\n    }\r\n    else if(concurrency === 0) {\r\n        throw new Error('Concurrency must not be zero');\r\n    }\r\n\r\n    var _worker = wrapAsync(worker);\r\n    var numRunning = 0;\r\n    var workersList = [];\r\n\r\n    var processingScheduled = false;\r\n    function _insert(data, insertAtFront, callback) {\r\n        if (callback != null && typeof callback !== 'function') {\r\n            throw new Error('task callback must be a function');\r\n        }\r\n        q.started = true;\r\n        if (!isArray(data)) {\r\n            data = [data];\r\n        }\r\n        if (data.length === 0 && q.idle()) {\r\n            // call drain immediately if there are no tasks\r\n            return setImmediate$1(function() {\r\n                q.drain();\r\n            });\r\n        }\r\n\r\n        for (var i = 0, l = data.length; i < l; i++) {\r\n            var item = {\r\n                data: data[i],\r\n                callback: callback || noop\r\n            };\r\n\r\n            if (insertAtFront) {\r\n                q._tasks.unshift(item);\r\n            } else {\r\n                q._tasks.push(item);\r\n            }\r\n        }\r\n\r\n        if (!processingScheduled) {\r\n            processingScheduled = true;\r\n            setImmediate$1(function() {\r\n                processingScheduled = false;\r\n                q.process();\r\n            });\r\n        }\r\n    }\r\n\r\n    function _next(tasks) {\r\n        return function(err){\r\n            numRunning -= 1;\r\n\r\n            for (var i = 0, l = tasks.length; i < l; i++) {\r\n                var task = tasks[i];\r\n\r\n                var index = baseIndexOf(workersList, task, 0);\r\n                if (index === 0) {\r\n                    workersList.shift();\r\n                } else if (index > 0) {\r\n                    workersList.splice(index, 1);\r\n                }\r\n\r\n                task.callback.apply(task, arguments);\r\n\r\n                if (err != null) {\r\n                    q.error(err, task.data);\r\n                }\r\n            }\r\n\r\n            if (numRunning <= (q.concurrency - q.buffer) ) {\r\n                q.unsaturated();\r\n            }\r\n\r\n            if (q.idle()) {\r\n                q.drain();\r\n            }\r\n            q.process();\r\n        };\r\n    }\r\n\r\n    var isProcessing = false;\r\n    var q = {\r\n        _tasks: new DLL(),\r\n        concurrency: concurrency,\r\n        payload: payload,\r\n        saturated: noop,\r\n        unsaturated:noop,\r\n        buffer: concurrency / 4,\r\n        empty: noop,\r\n        drain: noop,\r\n        error: noop,\r\n        started: false,\r\n        paused: false,\r\n        push: function (data, callback) {\r\n            _insert(data, false, callback);\r\n        },\r\n        kill: function () {\r\n            q.drain = noop;\r\n            q._tasks.empty();\r\n        },\r\n        unshift: function (data, callback) {\r\n            _insert(data, true, callback);\r\n        },\r\n        remove: function (testFn) {\r\n            q._tasks.remove(testFn);\r\n        },\r\n        process: function () {\r\n            // Avoid trying to start too many processing operations. This can occur\r\n            // when callbacks resolve synchronously (#1267).\r\n            if (isProcessing) {\r\n                return;\r\n            }\r\n            isProcessing = true;\r\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\r\n                var tasks = [], data = [];\r\n                var l = q._tasks.length;\r\n                if (q.payload) l = Math.min(l, q.payload);\r\n                for (var i = 0; i < l; i++) {\r\n                    var node = q._tasks.shift();\r\n                    tasks.push(node);\r\n                    workersList.push(node);\r\n                    data.push(node.data);\r\n                }\r\n\r\n                numRunning += 1;\r\n\r\n                if (q._tasks.length === 0) {\r\n                    q.empty();\r\n                }\r\n\r\n                if (numRunning === q.concurrency) {\r\n                    q.saturated();\r\n                }\r\n\r\n                var cb = onlyOnce(_next(tasks));\r\n                _worker(data, cb);\r\n            }\r\n            isProcessing = false;\r\n        },\r\n        length: function () {\r\n            return q._tasks.length;\r\n        },\r\n        running: function () {\r\n            return numRunning;\r\n        },\r\n        workersList: function () {\r\n            return workersList;\r\n        },\r\n        idle: function() {\r\n            return q._tasks.length + numRunning === 0;\r\n        },\r\n        pause: function () {\r\n            q.paused = true;\r\n        },\r\n        resume: function () {\r\n            if (q.paused === false) { return; }\r\n            q.paused = false;\r\n            setImmediate$1(q.process);\r\n        }\r\n    };\r\n    return q;\r\n}\r\n\r\n/**\r\n * A cargo of tasks for the worker function to complete. Cargo inherits all of\r\n * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\r\n * @typedef {Object} CargoObject\r\n * @memberOf module:ControlFlow\r\n * @property {Function} length - A function returning the number of items\r\n * waiting to be processed. Invoke like `cargo.length()`.\r\n * @property {number} payload - An `integer` for determining how many tasks\r\n * should be process per round. This property can be changed after a `cargo` is\r\n * created to alter the payload on-the-fly.\r\n * @property {Function} push - Adds `task` to the `queue`. The callback is\r\n * called once the `worker` has finished processing the task. Instead of a\r\n * single task, an array of `tasks` can be submitted. The respective callback is\r\n * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\r\n * @property {Function} saturated - A callback that is called when the\r\n * `queue.length()` hits the concurrency and further tasks will be queued.\r\n * @property {Function} empty - A callback that is called when the last item\r\n * from the `queue` is given to a `worker`.\r\n * @property {Function} drain - A callback that is called when the last item\r\n * from the `queue` has returned from the `worker`.\r\n * @property {Function} idle - a function returning false if there are items\r\n * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\r\n * @property {Function} pause - a function that pauses the processing of tasks\r\n * until `resume()` is called. Invoke like `cargo.pause()`.\r\n * @property {Function} resume - a function that resumes the processing of\r\n * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\r\n * @property {Function} kill - a function that removes the `drain` callback and\r\n * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\r\n */\r\n\r\n/**\r\n * Creates a `cargo` object with the specified payload. Tasks added to the\r\n * cargo will be processed altogether (up to the `payload` limit). If the\r\n * `worker` is in progress, the task is queued until it becomes available. Once\r\n * the `worker` has completed some tasks, each callback of those tasks is\r\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\r\n * for how `cargo` and `queue` work.\r\n *\r\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\r\n * at a time, cargo passes an array of tasks to a single worker, repeating\r\n * when the worker is finished.\r\n *\r\n * @name cargo\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.queue]{@link module:ControlFlow.queue}\r\n * @category Control Flow\r\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\r\n * of queued tasks. Invoked with `(tasks, callback)`.\r\n * @param {number} [payload=Infinity] - An optional `integer` for determining\r\n * how many tasks should be processed per round; if omitted, the default is\r\n * unlimited.\r\n * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\r\n * attached as certain properties to listen for specific events during the\r\n * lifecycle of the cargo and inner queue.\r\n * @example\r\n *\r\n * // create a cargo object with payload 2\r\n * var cargo = async.cargo(function(tasks, callback) {\r\n *     for (var i=0; i<tasks.length; i++) {\r\n *         console.log('hello ' + tasks[i].name);\r\n *     }\r\n *     callback();\r\n * }, 2);\r\n *\r\n * // add some items\r\n * cargo.push({name: 'foo'}, function(err) {\r\n *     console.log('finished processing foo');\r\n * });\r\n * cargo.push({name: 'bar'}, function(err) {\r\n *     console.log('finished processing bar');\r\n * });\r\n * cargo.push({name: 'baz'}, function(err) {\r\n *     console.log('finished processing baz');\r\n * });\r\n */\r\nfunction cargo(worker, payload) {\r\n    return queue(worker, 1, payload);\r\n}\r\n\r\n/**\r\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\r\n *\r\n * @name eachOfSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.eachOf]{@link module:Collections.eachOf}\r\n * @alias forEachOfSeries\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * Invoked with (item, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Invoked with (err).\r\n */\r\nvar eachOfSeries = doLimit(eachOfLimit, 1);\r\n\r\n/**\r\n * Reduces `coll` into a single value using an async `iteratee` to return each\r\n * successive step. `memo` is the initial state of the reduction. This function\r\n * only operates in series.\r\n *\r\n * For performance reasons, it may make sense to split a call to this function\r\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\r\n * results. This function is for situations where each step in the reduction\r\n * needs to be async; if you can get the data before reducing it, then it's\r\n * probably a good idea to do so.\r\n *\r\n * @name reduce\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias inject\r\n * @alias foldl\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {*} memo - The initial state of the reduction.\r\n * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n * array to produce the next step in the reduction.\r\n * The `iteratee` should complete with the next state of the reduction.\r\n * If the iteratee complete with an error, the reduction is stopped and the\r\n * main `callback` is immediately called with the error.\r\n * Invoked with (memo, item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\r\n * (err, result).\r\n * @example\r\n *\r\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\r\n *     // pointless async:\r\n *     process.nextTick(function() {\r\n *         callback(null, memo + item)\r\n *     });\r\n * }, function(err, result) {\r\n *     // result is now equal to the last value of memo, which is 6\r\n * });\r\n */\r\nfunction reduce(coll, memo, iteratee, callback) {\r\n    callback = once(callback || noop);\r\n    var _iteratee = wrapAsync(iteratee);\r\n    eachOfSeries(coll, function(x, i, callback) {\r\n        _iteratee(memo, x, function(err, v) {\r\n            memo = v;\r\n            callback(err);\r\n        });\r\n    }, function(err) {\r\n        callback(err, memo);\r\n    });\r\n}\r\n\r\n/**\r\n * Version of the compose function that is more natural to read. Each function\r\n * consumes the return value of the previous function. It is the equivalent of\r\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\r\n *\r\n * Each function is executed with the `this` binding of the composed function.\r\n *\r\n * @name seq\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.compose]{@link module:ControlFlow.compose}\r\n * @category Control Flow\r\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\r\n * @returns {Function} a function that composes the `functions` in order\r\n * @example\r\n *\r\n * // Requires lodash (or underscore), express3 and dresende's orm2.\r\n * // Part of an app, that fetches cats of the logged user.\r\n * // This example uses `seq` function to avoid overnesting and error\r\n * // handling clutter.\r\n * app.get('/cats', function(request, response) {\r\n *     var User = request.models.User;\r\n *     async.seq(\r\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\r\n *         function(user, fn) {\r\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\r\n *         }\r\n *     )(req.session.user_id, function (err, cats) {\r\n *         if (err) {\r\n *             console.error(err);\r\n *             response.json({ status: 'error', message: err.message });\r\n *         } else {\r\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\r\n *         }\r\n *     });\r\n * });\r\n */\r\nfunction seq(/*...functions*/) {\r\n    var _functions = arrayMap(arguments, wrapAsync);\r\n    return function(/*...args*/) {\r\n        var args = slice(arguments);\r\n        var that = this;\r\n\r\n        var cb = args[args.length - 1];\r\n        if (typeof cb == 'function') {\r\n            args.pop();\r\n        } else {\r\n            cb = noop;\r\n        }\r\n\r\n        reduce(_functions, args, function(newargs, fn, cb) {\r\n            fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {\r\n                var nextargs = slice(arguments, 1);\r\n                cb(err, nextargs);\r\n            }));\r\n        },\r\n        function(err, results) {\r\n            cb.apply(that, [err].concat(results));\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a function which is a composition of the passed asynchronous\r\n * functions. Each function consumes the return value of the function that\r\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\r\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\r\n *\r\n * Each function is executed with the `this` binding of the composed function.\r\n *\r\n * @name compose\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\r\n * @returns {Function} an asynchronous function that is the composed\r\n * asynchronous `functions`\r\n * @example\r\n *\r\n * function add1(n, callback) {\r\n *     setTimeout(function () {\r\n *         callback(null, n + 1);\r\n *     }, 10);\r\n * }\r\n *\r\n * function mul3(n, callback) {\r\n *     setTimeout(function () {\r\n *         callback(null, n * 3);\r\n *     }, 10);\r\n * }\r\n *\r\n * var add1mul3 = async.compose(mul3, add1);\r\n * add1mul3(4, function (err, result) {\r\n *     // result now equals 15\r\n * });\r\n */\r\nvar compose = function(/*...args*/) {\r\n    return seq.apply(null, slice(arguments).reverse());\r\n};\r\n\r\nvar _concat = Array.prototype.concat;\r\n\r\n/**\r\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name concatLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.concat]{@link module:Collections.concat}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\r\n * which should use an array as its result. Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished, or an error occurs. Results is an array\r\n * containing the concatenated results of the `iteratee` function. Invoked with\r\n * (err, results).\r\n */\r\nvar concatLimit = function(coll, limit, iteratee, callback) {\r\n    callback = callback || noop;\r\n    var _iteratee = wrapAsync(iteratee);\r\n    mapLimit(coll, limit, function(val, callback) {\r\n        _iteratee(val, function(err /*, ...args*/) {\r\n            if (err) return callback(err);\r\n            return callback(null, slice(arguments, 1));\r\n        });\r\n    }, function(err, mapResults) {\r\n        var result = [];\r\n        for (var i = 0; i < mapResults.length; i++) {\r\n            if (mapResults[i]) {\r\n                result = _concat.apply(result, mapResults[i]);\r\n            }\r\n        }\r\n\r\n        return callback(err, result);\r\n    });\r\n};\r\n\r\n/**\r\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\r\n * the concatenated list. The `iteratee`s are called in parallel, and the\r\n * results are concatenated as they return. There is no guarantee that the\r\n * results array will be returned in the original order of `coll` passed to the\r\n * `iteratee` function.\r\n *\r\n * @name concat\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\r\n * which should use an array as its result. Invoked with (item, callback).\r\n * @param {Function} [callback(err)] - A callback which is called after all the\r\n * `iteratee` functions have finished, or an error occurs. Results is an array\r\n * containing the concatenated results of the `iteratee` function. Invoked with\r\n * (err, results).\r\n * @example\r\n *\r\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\r\n *     // files is now a list of filenames that exist in the 3 directories\r\n * });\r\n */\r\nvar concat = doLimit(concatLimit, Infinity);\r\n\r\n/**\r\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\r\n *\r\n * @name concatSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.concat]{@link module:Collections.concat}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\r\n * The iteratee should complete with an array an array of results.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback(err)] - A callback which is called after all the\r\n * `iteratee` functions have finished, or an error occurs. Results is an array\r\n * containing the concatenated results of the `iteratee` function. Invoked with\r\n * (err, results).\r\n */\r\nvar concatSeries = doLimit(concatLimit, 1);\r\n\r\n/**\r\n * Returns a function that when called, calls-back with the values provided.\r\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\r\n * [`auto`]{@link module:ControlFlow.auto}.\r\n *\r\n * @name constant\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {...*} arguments... - Any number of arguments to automatically invoke\r\n * callback with.\r\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\r\n * invokes the callback with the previous given arguments.\r\n * @example\r\n *\r\n * async.waterfall([\r\n *     async.constant(42),\r\n *     function (value, next) {\r\n *         // value === 42\r\n *     },\r\n *     //...\r\n * ], callback);\r\n *\r\n * async.waterfall([\r\n *     async.constant(filename, \"utf8\"),\r\n *     fs.readFile,\r\n *     function (fileData, next) {\r\n *         //...\r\n *     }\r\n *     //...\r\n * ], callback);\r\n *\r\n * async.auto({\r\n *     hostname: async.constant(\"https://server.net/\"),\r\n *     port: findFreePort,\r\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\r\n *         startServer(options, cb);\r\n *     }],\r\n *     //...\r\n * }, callback);\r\n */\r\nvar constant = function(/*...values*/) {\r\n    var values = slice(arguments);\r\n    var args = [null].concat(values);\r\n    return function (/*...ignoredArgs, callback*/) {\r\n        var callback = arguments[arguments.length - 1];\r\n        return callback.apply(this, args);\r\n    };\r\n};\r\n\r\n/**\r\n * This method returns the first argument it receives.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Util\r\n * @param {*} value Any value.\r\n * @returns {*} Returns `value`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n *\r\n * console.log(_.identity(object) === object);\r\n * // => true\r\n */\r\nfunction identity(value) {\r\n  return value;\r\n}\r\n\r\nfunction _createTester(check, getResult) {\r\n    return function(eachfn, arr, iteratee, cb) {\r\n        cb = cb || noop;\r\n        var testPassed = false;\r\n        var testResult;\r\n        eachfn(arr, function(value, _, callback) {\r\n            iteratee(value, function(err, result) {\r\n                if (err) {\r\n                    callback(err);\r\n                } else if (check(result) && !testResult) {\r\n                    testPassed = true;\r\n                    testResult = getResult(true, value);\r\n                    callback(null, breakLoop);\r\n                } else {\r\n                    callback();\r\n                }\r\n            });\r\n        }, function(err) {\r\n            if (err) {\r\n                cb(err);\r\n            } else {\r\n                cb(null, testPassed ? testResult : getResult(false));\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\nfunction _findGetResult(v, x) {\r\n    return x;\r\n}\r\n\r\n/**\r\n * Returns the first value in `coll` that passes an async truth test. The\r\n * `iteratee` is applied in parallel, meaning the first iteratee to return\r\n * `true` will fire the detect `callback` with that result. That means the\r\n * result might not be the first item in the original `coll` (in terms of order)\r\n * that passes the test.\r\n\r\n * If order within the original `coll` is important, then look at\r\n * [`detectSeries`]{@link module:Collections.detectSeries}.\r\n *\r\n * @name detect\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias find\r\n * @category Collections\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n * The iteratee must complete with a boolean value as its result.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n * Result will be the first item in the array that passes the truth test\r\n * (iteratee) or the value `undefined` if none passed. Invoked with\r\n * (err, result).\r\n * @example\r\n *\r\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\r\n *     fs.access(filePath, function(err) {\r\n *         callback(null, !err)\r\n *     });\r\n * }, function(err, result) {\r\n *     // result now equals the first file in the list that exists\r\n * });\r\n */\r\nvar detect = doParallel(_createTester(identity, _findGetResult));\r\n\r\n/**\r\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name detectLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.detect]{@link module:Collections.detect}\r\n * @alias findLimit\r\n * @category Collections\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n * The iteratee must complete with a boolean value as its result.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n * Result will be the first item in the array that passes the truth test\r\n * (iteratee) or the value `undefined` if none passed. Invoked with\r\n * (err, result).\r\n */\r\nvar detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\r\n\r\n/**\r\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\r\n *\r\n * @name detectSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.detect]{@link module:Collections.detect}\r\n * @alias findSeries\r\n * @category Collections\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n * The iteratee must complete with a boolean value as its result.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n * Result will be the first item in the array that passes the truth test\r\n * (iteratee) or the value `undefined` if none passed. Invoked with\r\n * (err, result).\r\n */\r\nvar detectSeries = doLimit(detectLimit, 1);\r\n\r\nfunction consoleFunc(name) {\r\n    return function (fn/*, ...args*/) {\r\n        var args = slice(arguments, 1);\r\n        args.push(function (err/*, ...args*/) {\r\n            var args = slice(arguments, 1);\r\n            if (typeof console === 'object') {\r\n                if (err) {\r\n                    if (console.error) {\r\n                        console.error(err);\r\n                    }\r\n                } else if (console[name]) {\r\n                    arrayEach(args, function (x) {\r\n                        console[name](x);\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        wrapAsync(fn).apply(null, args);\r\n    };\r\n}\r\n\r\n/**\r\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\r\n * `console` using `console.dir` to display the properties of the resulting object.\r\n * Only works in Node.js or in browsers that support `console.dir` and\r\n * `console.error` (such as FF and Chrome).\r\n * If multiple arguments are returned from the async function,\r\n * `console.dir` is called on each argument in order.\r\n *\r\n * @name dir\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} function - The function you want to eventually apply\r\n * all arguments to.\r\n * @param {...*} arguments... - Any number of arguments to apply to the function.\r\n * @example\r\n *\r\n * // in a module\r\n * var hello = function(name, callback) {\r\n *     setTimeout(function() {\r\n *         callback(null, {hello: name});\r\n *     }, 1000);\r\n * };\r\n *\r\n * // in the node repl\r\n * node> async.dir(hello, 'world');\r\n * {hello: 'world'}\r\n */\r\nvar dir = consoleFunc('dir');\r\n\r\n/**\r\n * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\r\n * the order of operations, the arguments `test` and `fn` are switched.\r\n *\r\n * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\r\n * @name doDuring\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.during]{@link module:ControlFlow.during}\r\n * @category Control Flow\r\n * @param {AsyncFunction} fn - An async function which is called each time\r\n * `test` passes. Invoked with (callback).\r\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\r\n * execution of `fn`. Invoked with (...args, callback), where `...args` are the\r\n * non-error args from the previous callback of `fn`.\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has failed and repeated execution of `fn` has stopped. `callback`\r\n * will be passed an error if one occurred, otherwise `null`.\r\n */\r\nfunction doDuring(fn, test, callback) {\r\n    callback = onlyOnce(callback || noop);\r\n    var _fn = wrapAsync(fn);\r\n    var _test = wrapAsync(test);\r\n\r\n    function next(err/*, ...args*/) {\r\n        if (err) return callback(err);\r\n        var args = slice(arguments, 1);\r\n        args.push(check);\r\n        _test.apply(this, args);\r\n    }\r\n\r\n    function check(err, truth) {\r\n        if (err) return callback(err);\r\n        if (!truth) return callback(null);\r\n        _fn(next);\r\n    }\r\n\r\n    check(null, true);\r\n\r\n}\r\n\r\n/**\r\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\r\n * the order of operations, the arguments `test` and `iteratee` are switched.\r\n *\r\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\r\n *\r\n * @name doWhilst\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n * @category Control Flow\r\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\r\n * passes. Invoked with (callback).\r\n * @param {Function} test - synchronous truth test to perform after each\r\n * execution of `iteratee`. Invoked with any non-error callback results of\r\n * `iteratee`.\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has failed and repeated execution of `iteratee` has stopped.\r\n * `callback` will be passed an error and any arguments passed to the final\r\n * `iteratee`'s callback. Invoked with (err, [results]);\r\n */\r\nfunction doWhilst(iteratee, test, callback) {\r\n    callback = onlyOnce(callback || noop);\r\n    var _iteratee = wrapAsync(iteratee);\r\n    var next = function(err/*, ...args*/) {\r\n        if (err) return callback(err);\r\n        var args = slice(arguments, 1);\r\n        if (test.apply(this, args)) return _iteratee(next);\r\n        callback.apply(null, [null].concat(args));\r\n    };\r\n    _iteratee(next);\r\n}\r\n\r\n/**\r\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\r\n * argument ordering differs from `until`.\r\n *\r\n * @name doUntil\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\r\n * @category Control Flow\r\n * @param {AsyncFunction} iteratee - An async function which is called each time\r\n * `test` fails. Invoked with (callback).\r\n * @param {Function} test - synchronous truth test to perform after each\r\n * execution of `iteratee`. Invoked with any non-error callback results of\r\n * `iteratee`.\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\r\n * will be passed an error and any arguments passed to the final `iteratee`'s\r\n * callback. Invoked with (err, [results]);\r\n */\r\nfunction doUntil(iteratee, test, callback) {\r\n    doWhilst(iteratee, function() {\r\n        return !test.apply(this, arguments);\r\n    }, callback);\r\n}\r\n\r\n/**\r\n * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\r\n * is passed a callback in the form of `function (err, truth)`. If error is\r\n * passed to `test` or `fn`, the main callback is immediately called with the\r\n * value of the error.\r\n *\r\n * @name during\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n * @category Control Flow\r\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\r\n * execution of `fn`. Invoked with (callback).\r\n * @param {AsyncFunction} fn - An async function which is called each time\r\n * `test` passes. Invoked with (callback).\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has failed and repeated execution of `fn` has stopped. `callback`\r\n * will be passed an error, if one occurred, otherwise `null`.\r\n * @example\r\n *\r\n * var count = 0;\r\n *\r\n * async.during(\r\n *     function (callback) {\r\n *         return callback(null, count < 5);\r\n *     },\r\n *     function (callback) {\r\n *         count++;\r\n *         setTimeout(callback, 1000);\r\n *     },\r\n *     function (err) {\r\n *         // 5 seconds have passed\r\n *     }\r\n * );\r\n */\r\nfunction during(test, fn, callback) {\r\n    callback = onlyOnce(callback || noop);\r\n    var _fn = wrapAsync(fn);\r\n    var _test = wrapAsync(test);\r\n\r\n    function next(err) {\r\n        if (err) return callback(err);\r\n        _test(check);\r\n    }\r\n\r\n    function check(err, truth) {\r\n        if (err) return callback(err);\r\n        if (!truth) return callback(null);\r\n        _fn(next);\r\n    }\r\n\r\n    _test(check);\r\n}\r\n\r\nfunction _withoutIndex(iteratee) {\r\n    return function (value, index, callback) {\r\n        return iteratee(value, callback);\r\n    };\r\n}\r\n\r\n/**\r\n * Applies the function `iteratee` to each item in `coll`, in parallel.\r\n * The `iteratee` is called with an item from the list, and a callback for when\r\n * it has finished. If the `iteratee` passes an error to its `callback`, the\r\n * main `callback` (for the `each` function) is immediately called with the\r\n * error.\r\n *\r\n * Note, that since this function applies `iteratee` to each item in parallel,\r\n * there is no guarantee that the iteratee functions will complete in order.\r\n *\r\n * @name each\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias forEach\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to\r\n * each item in `coll`. Invoked with (item, callback).\r\n * The array index is not passed to the iteratee.\r\n * If you need the index, use `eachOf`.\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n * @example\r\n *\r\n * // assuming openFiles is an array of file names and saveFile is a function\r\n * // to save the modified contents of that file:\r\n *\r\n * async.each(openFiles, saveFile, function(err){\r\n *   // if any of the saves produced an error, err would equal that error\r\n * });\r\n *\r\n * // assuming openFiles is an array of file names\r\n * async.each(openFiles, function(file, callback) {\r\n *\r\n *     // Perform operation on file here.\r\n *     console.log('Processing file ' + file);\r\n *\r\n *     if( file.length > 32 ) {\r\n *       console.log('This file name is too long');\r\n *       callback('File name too long');\r\n *     } else {\r\n *       // Do work to process file here\r\n *       console.log('File processed');\r\n *       callback();\r\n *     }\r\n * }, function(err) {\r\n *     // if any of the file processing produced an error, err would equal that error\r\n *     if( err ) {\r\n *       // One of the iterations produced an error.\r\n *       // All processing will now stop.\r\n *       console.log('A file failed to process');\r\n *     } else {\r\n *       console.log('All files have been processed successfully');\r\n *     }\r\n * });\r\n */\r\nfunction eachLimit(coll, iteratee, callback) {\r\n    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\r\n}\r\n\r\n/**\r\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name eachLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.each]{@link module:Collections.each}\r\n * @alias forEachLimit\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The array index is not passed to the iteratee.\r\n * If you need the index, use `eachOfLimit`.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n */\r\nfunction eachLimit$1(coll, limit, iteratee, callback) {\r\n    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\r\n}\r\n\r\n/**\r\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\r\n *\r\n * @name eachSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.each]{@link module:Collections.each}\r\n * @alias forEachSeries\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each\r\n * item in `coll`.\r\n * The array index is not passed to the iteratee.\r\n * If you need the index, use `eachOfSeries`.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n */\r\nvar eachSeries = doLimit(eachLimit$1, 1);\r\n\r\n/**\r\n * Wrap an async function and ensure it calls its callback on a later tick of\r\n * the event loop.  If the function already calls its callback on a next tick,\r\n * no extra deferral is added. This is useful for preventing stack overflows\r\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\r\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\r\n * contained. ES2017 `async` functions are returned as-is -- they are immune\r\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\r\n *\r\n * @name ensureAsync\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\r\n * callback as its last argument.\r\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\r\n * signature as the function passed in.\r\n * @example\r\n *\r\n * function sometimesAsync(arg, callback) {\r\n *     if (cache[arg]) {\r\n *         return callback(null, cache[arg]); // this would be synchronous!!\r\n *     } else {\r\n *         doSomeIO(arg, callback); // this IO would be asynchronous\r\n *     }\r\n * }\r\n *\r\n * // this has a risk of stack overflows if many results are cached in a row\r\n * async.mapSeries(args, sometimesAsync, done);\r\n *\r\n * // this will defer sometimesAsync's callback if necessary,\r\n * // preventing stack overflows\r\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\r\n */\r\nfunction ensureAsync(fn) {\r\n    if (isAsync(fn)) return fn;\r\n    return initialParams(function (args, callback) {\r\n        var sync = true;\r\n        args.push(function () {\r\n            var innerArgs = arguments;\r\n            if (sync) {\r\n                setImmediate$1(function () {\r\n                    callback.apply(null, innerArgs);\r\n                });\r\n            } else {\r\n                callback.apply(null, innerArgs);\r\n            }\r\n        });\r\n        fn.apply(this, args);\r\n        sync = false;\r\n    });\r\n}\r\n\r\nfunction notId(v) {\r\n    return !v;\r\n}\r\n\r\n/**\r\n * Returns `true` if every element in `coll` satisfies an async test. If any\r\n * iteratee call returns `false`, the main `callback` is immediately called.\r\n *\r\n * @name every\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias all\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collection in parallel.\r\n * The iteratee must complete with a boolean result value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result will be either `true` or `false`\r\n * depending on the values of the async tests. Invoked with (err, result).\r\n * @example\r\n *\r\n * async.every(['file1','file2','file3'], function(filePath, callback) {\r\n *     fs.access(filePath, function(err) {\r\n *         callback(null, !err)\r\n *     });\r\n * }, function(err, result) {\r\n *     // if result is true then every file exists\r\n * });\r\n */\r\nvar every = doParallel(_createTester(notId, notId));\r\n\r\n/**\r\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name everyLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.every]{@link module:Collections.every}\r\n * @alias allLimit\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collection in parallel.\r\n * The iteratee must complete with a boolean result value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result will be either `true` or `false`\r\n * depending on the values of the async tests. Invoked with (err, result).\r\n */\r\nvar everyLimit = doParallelLimit(_createTester(notId, notId));\r\n\r\n/**\r\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\r\n *\r\n * @name everySeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.every]{@link module:Collections.every}\r\n * @alias allSeries\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collection in series.\r\n * The iteratee must complete with a boolean result value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result will be either `true` or `false`\r\n * depending on the values of the async tests. Invoked with (err, result).\r\n */\r\nvar everySeries = doLimit(everyLimit, 1);\r\n\r\n/**\r\n * The base implementation of `_.property` without support for deep paths.\r\n *\r\n * @private\r\n * @param {string} key The key of the property to get.\r\n * @returns {Function} Returns the new accessor function.\r\n */\r\nfunction baseProperty(key) {\r\n  return function(object) {\r\n    return object == null ? undefined : object[key];\r\n  };\r\n}\r\n\r\nfunction filterArray(eachfn, arr, iteratee, callback) {\r\n    var truthValues = new Array(arr.length);\r\n    eachfn(arr, function (x, index, callback) {\r\n        iteratee(x, function (err, v) {\r\n            truthValues[index] = !!v;\r\n            callback(err);\r\n        });\r\n    }, function (err) {\r\n        if (err) return callback(err);\r\n        var results = [];\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (truthValues[i]) results.push(arr[i]);\r\n        }\r\n        callback(null, results);\r\n    });\r\n}\r\n\r\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\r\n    var results = [];\r\n    eachfn(coll, function (x, index, callback) {\r\n        iteratee(x, function (err, v) {\r\n            if (err) {\r\n                callback(err);\r\n            } else {\r\n                if (v) {\r\n                    results.push({index: index, value: x});\r\n                }\r\n                callback();\r\n            }\r\n        });\r\n    }, function (err) {\r\n        if (err) {\r\n            callback(err);\r\n        } else {\r\n            callback(null, arrayMap(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), baseProperty('value')));\r\n        }\r\n    });\r\n}\r\n\r\nfunction _filter(eachfn, coll, iteratee, callback) {\r\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\r\n    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\r\n}\r\n\r\n/**\r\n * Returns a new array of all the values in `coll` which pass an async truth\r\n * test. This operation is performed in parallel, but the results array will be\r\n * in the same order as the original.\r\n *\r\n * @name filter\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias select\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n * with a boolean argument once it has completed. Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results).\r\n * @example\r\n *\r\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\r\n *     fs.access(filePath, function(err) {\r\n *         callback(null, !err)\r\n *     });\r\n * }, function(err, results) {\r\n *     // results now equals an array of the existing files\r\n * });\r\n */\r\nvar filter = doParallel(_filter);\r\n\r\n/**\r\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name filterLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.filter]{@link module:Collections.filter}\r\n * @alias selectLimit\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n * with a boolean argument once it has completed. Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results).\r\n */\r\nvar filterLimit = doParallelLimit(_filter);\r\n\r\n/**\r\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\r\n *\r\n * @name filterSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.filter]{@link module:Collections.filter}\r\n * @alias selectSeries\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n * with a boolean argument once it has completed. Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results)\r\n */\r\nvar filterSeries = doLimit(filterLimit, 1);\r\n\r\n/**\r\n * Calls the asynchronous function `fn` with a callback parameter that allows it\r\n * to call itself again, in series, indefinitely.\r\n\r\n * If an error is passed to the callback then `errback` is called with the\r\n * error, and execution stops, otherwise it will never be called.\r\n *\r\n * @name forever\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {AsyncFunction} fn - an async function to call repeatedly.\r\n * Invoked with (next).\r\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\r\n * this function will be called, and execution stops. Invoked with (err).\r\n * @example\r\n *\r\n * async.forever(\r\n *     function(next) {\r\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\r\n *         // it will result in this function being called again.\r\n *     },\r\n *     function(err) {\r\n *         // if next is called with a value in its first parameter, it will appear\r\n *         // in here as 'err', and execution will stop.\r\n *     }\r\n * );\r\n */\r\nfunction forever(fn, errback) {\r\n    var done = onlyOnce(errback || noop);\r\n    var task = wrapAsync(ensureAsync(fn));\r\n\r\n    function next(err) {\r\n        if (err) return done(err);\r\n        task(next);\r\n    }\r\n    next();\r\n}\r\n\r\n/**\r\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name groupByLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.groupBy]{@link module:Collections.groupBy}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with a `key` to group the value under.\r\n * Invoked with (value, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Result is an `Object` whoses\r\n * properties are arrays of values which returned the corresponding key.\r\n */\r\nvar groupByLimit = function(coll, limit, iteratee, callback) {\r\n    callback = callback || noop;\r\n    var _iteratee = wrapAsync(iteratee);\r\n    mapLimit(coll, limit, function(val, callback) {\r\n        _iteratee(val, function(err, key) {\r\n            if (err) return callback(err);\r\n            return callback(null, {key: key, val: val});\r\n        });\r\n    }, function(err, mapResults) {\r\n        var result = {};\r\n        // from MDN, handle object having an `hasOwnProperty` prop\r\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n        for (var i = 0; i < mapResults.length; i++) {\r\n            if (mapResults[i]) {\r\n                var key = mapResults[i].key;\r\n                var val = mapResults[i].val;\r\n\r\n                if (hasOwnProperty.call(result, key)) {\r\n                    result[key].push(val);\r\n                } else {\r\n                    result[key] = [val];\r\n                }\r\n            }\r\n        }\r\n\r\n        return callback(err, result);\r\n    });\r\n};\r\n\r\n/**\r\n * Returns a new object, where each value corresponds to an array of items, from\r\n * `coll`, that returned the corresponding key. That is, the keys of the object\r\n * correspond to the values passed to the `iteratee` callback.\r\n *\r\n * Note: Since this function applies the `iteratee` to each item in parallel,\r\n * there is no guarantee that the `iteratee` functions will complete in order.\r\n * However, the values for each key in the `result` will be in the same order as\r\n * the original `coll`. For Objects, the values will roughly be in the order of\r\n * the original Objects' keys (but this can vary across JavaScript engines).\r\n *\r\n * @name groupBy\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with a `key` to group the value under.\r\n * Invoked with (value, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Result is an `Object` whoses\r\n * properties are arrays of values which returned the corresponding key.\r\n * @example\r\n *\r\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\r\n *     db.findById(userId, function(err, user) {\r\n *         if (err) return callback(err);\r\n *         return callback(null, user.age);\r\n *     });\r\n * }, function(err, result) {\r\n *     // result is object containing the userIds grouped by age\r\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\r\n * });\r\n */\r\nvar groupBy = doLimit(groupByLimit, Infinity);\r\n\r\n/**\r\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\r\n *\r\n * @name groupBySeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.groupBy]{@link module:Collections.groupBy}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with a `key` to group the value under.\r\n * Invoked with (value, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Result is an `Object` whoses\r\n * properties are arrays of values which returned the corresponding key.\r\n */\r\nvar groupBySeries = doLimit(groupByLimit, 1);\r\n\r\n/**\r\n * Logs the result of an `async` function to the `console`. Only works in\r\n * Node.js or in browsers that support `console.log` and `console.error` (such\r\n * as FF and Chrome). If multiple arguments are returned from the async\r\n * function, `console.log` is called on each argument in order.\r\n *\r\n * @name log\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} function - The function you want to eventually apply\r\n * all arguments to.\r\n * @param {...*} arguments... - Any number of arguments to apply to the function.\r\n * @example\r\n *\r\n * // in a module\r\n * var hello = function(name, callback) {\r\n *     setTimeout(function() {\r\n *         callback(null, 'hello ' + name);\r\n *     }, 1000);\r\n * };\r\n *\r\n * // in the node repl\r\n * node> async.log(hello, 'world');\r\n * 'hello world'\r\n */\r\nvar log = consoleFunc('log');\r\n\r\n/**\r\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name mapValuesLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.mapValues]{@link module:Collections.mapValues}\r\n * @category Collection\r\n * @param {Object} obj - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n * in `coll`.\r\n * The iteratee should complete with the transformed value as its result.\r\n * Invoked with (value, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. `result` is a new object consisting\r\n * of each key from `obj`, with each transformed value on the right-hand side.\r\n * Invoked with (err, result).\r\n */\r\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\r\n    callback = once(callback || noop);\r\n    var newObj = {};\r\n    var _iteratee = wrapAsync(iteratee);\r\n    eachOfLimit(obj, limit, function(val, key, next) {\r\n        _iteratee(val, key, function (err, result) {\r\n            if (err) return next(err);\r\n            newObj[key] = result;\r\n            next();\r\n        });\r\n    }, function (err) {\r\n        callback(err, newObj);\r\n    });\r\n}\r\n\r\n/**\r\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\r\n *\r\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\r\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\r\n * callback for when it has finished processing. Each of these callbacks takes\r\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\r\n * passes an error to its callback, the main `callback` (for the `mapValues`\r\n * function) is immediately called with the error.\r\n *\r\n * Note, the order of the keys in the result is not guaranteed.  The keys will\r\n * be roughly in the order they complete, (but this is very engine-specific)\r\n *\r\n * @name mapValues\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Object} obj - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n * in `coll`.\r\n * The iteratee should complete with the transformed value as its result.\r\n * Invoked with (value, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. `result` is a new object consisting\r\n * of each key from `obj`, with each transformed value on the right-hand side.\r\n * Invoked with (err, result).\r\n * @example\r\n *\r\n * async.mapValues({\r\n *     f1: 'file1',\r\n *     f2: 'file2',\r\n *     f3: 'file3'\r\n * }, function (file, key, callback) {\r\n *   fs.stat(file, callback);\r\n * }, function(err, result) {\r\n *     // result is now a map of stats for each file, e.g.\r\n *     // {\r\n *     //     f1: [stats for file1],\r\n *     //     f2: [stats for file2],\r\n *     //     f3: [stats for file3]\r\n *     // }\r\n * });\r\n */\r\n\r\nvar mapValues = doLimit(mapValuesLimit, Infinity);\r\n\r\n/**\r\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\r\n *\r\n * @name mapValuesSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.mapValues]{@link module:Collections.mapValues}\r\n * @category Collection\r\n * @param {Object} obj - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n * in `coll`.\r\n * The iteratee should complete with the transformed value as its result.\r\n * Invoked with (value, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. `result` is a new object consisting\r\n * of each key from `obj`, with each transformed value on the right-hand side.\r\n * Invoked with (err, result).\r\n */\r\nvar mapValuesSeries = doLimit(mapValuesLimit, 1);\r\n\r\nfunction has(obj, key) {\r\n    return key in obj;\r\n}\r\n\r\n/**\r\n * Caches the results of an async function. When creating a hash to store\r\n * function results against, the callback is omitted from the hash and an\r\n * optional hash function can be used.\r\n *\r\n * If no hash function is specified, the first argument is used as a hash key,\r\n * which may work reasonably if it is a string or a data type that converts to a\r\n * distinct string. Note that objects and arrays will not behave reasonably.\r\n * Neither will cases where the other arguments are significant. In such cases,\r\n * specify your own hash function.\r\n *\r\n * The cache of results is exposed as the `memo` property of the function\r\n * returned by `memoize`.\r\n *\r\n * @name memoize\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\r\n * @param {Function} hasher - An optional function for generating a custom hash\r\n * for storing results. It has all the arguments applied to it apart from the\r\n * callback, and must be synchronous.\r\n * @returns {AsyncFunction} a memoized version of `fn`\r\n * @example\r\n *\r\n * var slow_fn = function(name, callback) {\r\n *     // do something\r\n *     callback(null, result);\r\n * };\r\n * var fn = async.memoize(slow_fn);\r\n *\r\n * // fn can now be used as if it were slow_fn\r\n * fn('some name', function() {\r\n *     // callback\r\n * });\r\n */\r\nfunction memoize(fn, hasher) {\r\n    var memo = Object.create(null);\r\n    var queues = Object.create(null);\r\n    hasher = hasher || identity;\r\n    var _fn = wrapAsync(fn);\r\n    var memoized = initialParams(function memoized(args, callback) {\r\n        var key = hasher.apply(null, args);\r\n        if (has(memo, key)) {\r\n            setImmediate$1(function() {\r\n                callback.apply(null, memo[key]);\r\n            });\r\n        } else if (has(queues, key)) {\r\n            queues[key].push(callback);\r\n        } else {\r\n            queues[key] = [callback];\r\n            _fn.apply(null, args.concat(function(/*args*/) {\r\n                var args = slice(arguments);\r\n                memo[key] = args;\r\n                var q = queues[key];\r\n                delete queues[key];\r\n                for (var i = 0, l = q.length; i < l; i++) {\r\n                    q[i].apply(null, args);\r\n                }\r\n            }));\r\n        }\r\n    });\r\n    memoized.memo = memo;\r\n    memoized.unmemoized = fn;\r\n    return memoized;\r\n}\r\n\r\n/**\r\n * Calls `callback` on a later loop around the event loop. In Node.js this just\r\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\r\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\r\n * priority events may precede the execution of `callback`.\r\n *\r\n * This is used internally for browser-compatibility purposes.\r\n *\r\n * @name nextTick\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\r\n * @category Util\r\n * @param {Function} callback - The function to call on a later loop around\r\n * the event loop. Invoked with (args...).\r\n * @param {...*} args... - any number of additional arguments to pass to the\r\n * callback on the next tick.\r\n * @example\r\n *\r\n * var call_order = [];\r\n * async.nextTick(function() {\r\n *     call_order.push('two');\r\n *     // call_order now equals ['one','two']\r\n * });\r\n * call_order.push('one');\r\n *\r\n * async.setImmediate(function (a, b, c) {\r\n *     // a, b, and c equal 1, 2, and 3\r\n * }, 1, 2, 3);\r\n */\r\nvar _defer$1;\r\n\r\nif (hasNextTick) {\r\n    _defer$1 = process.nextTick;\r\n} else if (hasSetImmediate) {\r\n    _defer$1 = setImmediate;\r\n} else {\r\n    _defer$1 = fallback;\r\n}\r\n\r\nvar nextTick = wrap(_defer$1);\r\n\r\nfunction _parallel(eachfn, tasks, callback) {\r\n    callback = callback || noop;\r\n    var results = isArrayLike(tasks) ? [] : {};\r\n\r\n    eachfn(tasks, function (task, key, callback) {\r\n        wrapAsync(task)(function (err, result) {\r\n            if (arguments.length > 2) {\r\n                result = slice(arguments, 1);\r\n            }\r\n            results[key] = result;\r\n            callback(err);\r\n        });\r\n    }, function (err) {\r\n        callback(err, results);\r\n    });\r\n}\r\n\r\n/**\r\n * Run the `tasks` collection of functions in parallel, without waiting until\r\n * the previous function has completed. If any of the functions pass an error to\r\n * its callback, the main `callback` is immediately called with the value of the\r\n * error. Once the `tasks` have completed, the results are passed to the final\r\n * `callback` as an array.\r\n *\r\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\r\n * parallel execution of code.  If your tasks do not use any timers or perform\r\n * any I/O, they will actually be executed in series.  Any synchronous setup\r\n * sections for each task will happen one after the other.  JavaScript remains\r\n * single-threaded.\r\n *\r\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\r\n * execution of other tasks when a task fails.\r\n *\r\n * It is also possible to use an object instead of an array. Each property will\r\n * be run as a function and the results will be passed to the final `callback`\r\n * as an object instead of an array. This can be a more readable way of handling\r\n * results from {@link async.parallel}.\r\n *\r\n * @name parallel\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} tasks - A collection of\r\n * [async functions]{@link AsyncFunction} to run.\r\n * Each async function can complete with any number of optional `result` values.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed successfully. This function gets a results array\r\n * (or object) containing all the result arguments passed to the task callbacks.\r\n * Invoked with (err, results).\r\n *\r\n * @example\r\n * async.parallel([\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'one');\r\n *         }, 200);\r\n *     },\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'two');\r\n *         }, 100);\r\n *     }\r\n * ],\r\n * // optional callback\r\n * function(err, results) {\r\n *     // the results array will equal ['one','two'] even though\r\n *     // the second function had a shorter timeout.\r\n * });\r\n *\r\n * // an example using an object instead of an array\r\n * async.parallel({\r\n *     one: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 1);\r\n *         }, 200);\r\n *     },\r\n *     two: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 2);\r\n *         }, 100);\r\n *     }\r\n * }, function(err, results) {\r\n *     // results is now equals to: {one: 1, two: 2}\r\n * });\r\n */\r\nfunction parallelLimit(tasks, callback) {\r\n    _parallel(eachOf, tasks, callback);\r\n}\r\n\r\n/**\r\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name parallelLimit\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.parallel]{@link module:ControlFlow.parallel}\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} tasks - A collection of\r\n * [async functions]{@link AsyncFunction} to run.\r\n * Each async function can complete with any number of optional `result` values.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed successfully. This function gets a results array\r\n * (or object) containing all the result arguments passed to the task callbacks.\r\n * Invoked with (err, results).\r\n */\r\nfunction parallelLimit$1(tasks, limit, callback) {\r\n    _parallel(_eachOfLimit(limit), tasks, callback);\r\n}\r\n\r\n/**\r\n * A queue of tasks for the worker function to complete.\r\n * @typedef {Object} QueueObject\r\n * @memberOf module:ControlFlow\r\n * @property {Function} length - a function returning the number of items\r\n * waiting to be processed. Invoke with `queue.length()`.\r\n * @property {boolean} started - a boolean indicating whether or not any\r\n * items have been pushed and processed by the queue.\r\n * @property {Function} running - a function returning the number of items\r\n * currently being processed. Invoke with `queue.running()`.\r\n * @property {Function} workersList - a function returning the array of items\r\n * currently being processed. Invoke with `queue.workersList()`.\r\n * @property {Function} idle - a function returning false if there are items\r\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\r\n * @property {number} concurrency - an integer for determining how many `worker`\r\n * functions should be run in parallel. This property can be changed after a\r\n * `queue` is created to alter the concurrency on-the-fly.\r\n * @property {Function} push - add a new task to the `queue`. Calls `callback`\r\n * once the `worker` has finished processing the task. Instead of a single task,\r\n * a `tasks` array can be submitted. The respective callback is used for every\r\n * task in the list. Invoke with `queue.push(task, [callback])`,\r\n * @property {Function} unshift - add a new task to the front of the `queue`.\r\n * Invoke with `queue.unshift(task, [callback])`.\r\n * @property {Function} remove - remove items from the queue that match a test\r\n * function.  The test function will be passed an object with a `data` property,\r\n * and a `priority` property, if this is a\r\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\r\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\r\n * `function ({data, priority}) {}` and returns a Boolean.\r\n * @property {Function} saturated - a callback that is called when the number of\r\n * running workers hits the `concurrency` limit, and further tasks will be\r\n * queued.\r\n * @property {Function} unsaturated - a callback that is called when the number\r\n * of running workers is less than the `concurrency` & `buffer` limits, and\r\n * further tasks will not be queued.\r\n * @property {number} buffer - A minimum threshold buffer in order to say that\r\n * the `queue` is `unsaturated`.\r\n * @property {Function} empty - a callback that is called when the last item\r\n * from the `queue` is given to a `worker`.\r\n * @property {Function} drain - a callback that is called when the last item\r\n * from the `queue` has returned from the `worker`.\r\n * @property {Function} error - a callback that is called when a task errors.\r\n * Has the signature `function(error, task)`.\r\n * @property {boolean} paused - a boolean for determining whether the queue is\r\n * in a paused state.\r\n * @property {Function} pause - a function that pauses the processing of tasks\r\n * until `resume()` is called. Invoke with `queue.pause()`.\r\n * @property {Function} resume - a function that resumes the processing of\r\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\r\n * @property {Function} kill - a function that removes the `drain` callback and\r\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\r\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\r\n */\r\n\r\n/**\r\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\r\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\r\n * `worker`s are in progress, the task is queued until one becomes available.\r\n * Once a `worker` completes a `task`, that `task`'s callback is called.\r\n *\r\n * @name queue\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {AsyncFunction} worker - An async function for processing a queued task.\r\n * If you want to handle errors from an individual task, pass a callback to\r\n * `q.push()`. Invoked with (task, callback).\r\n * @param {number} [concurrency=1] - An `integer` for determining how many\r\n * `worker` functions should be run in parallel.  If omitted, the concurrency\r\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\r\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\r\n * attached as certain properties to listen for specific events during the\r\n * lifecycle of the queue.\r\n * @example\r\n *\r\n * // create a queue object with concurrency 2\r\n * var q = async.queue(function(task, callback) {\r\n *     console.log('hello ' + task.name);\r\n *     callback();\r\n * }, 2);\r\n *\r\n * // assign a callback\r\n * q.drain = function() {\r\n *     console.log('all items have been processed');\r\n * };\r\n *\r\n * // add some items to the queue\r\n * q.push({name: 'foo'}, function(err) {\r\n *     console.log('finished processing foo');\r\n * });\r\n * q.push({name: 'bar'}, function (err) {\r\n *     console.log('finished processing bar');\r\n * });\r\n *\r\n * // add some items to the queue (batch-wise)\r\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\r\n *     console.log('finished processing item');\r\n * });\r\n *\r\n * // add some items to the front of the queue\r\n * q.unshift({name: 'bar'}, function (err) {\r\n *     console.log('finished processing bar');\r\n * });\r\n */\r\nvar queue$1 = function (worker, concurrency) {\r\n    var _worker = wrapAsync(worker);\r\n    return queue(function (items, cb) {\r\n        _worker(items[0], cb);\r\n    }, concurrency, 1);\r\n};\r\n\r\n/**\r\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\r\n * completed in ascending priority order.\r\n *\r\n * @name priorityQueue\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.queue]{@link module:ControlFlow.queue}\r\n * @category Control Flow\r\n * @param {AsyncFunction} worker - An async function for processing a queued task.\r\n * If you want to handle errors from an individual task, pass a callback to\r\n * `q.push()`.\r\n * Invoked with (task, callback).\r\n * @param {number} concurrency - An `integer` for determining how many `worker`\r\n * functions should be run in parallel.  If omitted, the concurrency defaults to\r\n * `1`.  If the concurrency is `0`, an error is thrown.\r\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\r\n * differences between `queue` and `priorityQueue` objects:\r\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\r\n *   array of `tasks` is given, all tasks will be assigned the same priority.\r\n * * The `unshift` method was removed.\r\n */\r\nvar priorityQueue = function(worker, concurrency) {\r\n    // Start with a normal queue\r\n    var q = queue$1(worker, concurrency);\r\n\r\n    // Override push to accept second parameter representing priority\r\n    q.push = function(data, priority, callback) {\r\n        if (callback == null) callback = noop;\r\n        if (typeof callback !== 'function') {\r\n            throw new Error('task callback must be a function');\r\n        }\r\n        q.started = true;\r\n        if (!isArray(data)) {\r\n            data = [data];\r\n        }\r\n        if (data.length === 0) {\r\n            // call drain immediately if there are no tasks\r\n            return setImmediate$1(function() {\r\n                q.drain();\r\n            });\r\n        }\r\n\r\n        priority = priority || 0;\r\n        var nextNode = q._tasks.head;\r\n        while (nextNode && priority >= nextNode.priority) {\r\n            nextNode = nextNode.next;\r\n        }\r\n\r\n        for (var i = 0, l = data.length; i < l; i++) {\r\n            var item = {\r\n                data: data[i],\r\n                priority: priority,\r\n                callback: callback\r\n            };\r\n\r\n            if (nextNode) {\r\n                q._tasks.insertBefore(nextNode, item);\r\n            } else {\r\n                q._tasks.push(item);\r\n            }\r\n        }\r\n        setImmediate$1(q.process);\r\n    };\r\n\r\n    // Remove unshift function\r\n    delete q.unshift;\r\n\r\n    return q;\r\n};\r\n\r\n/**\r\n * Runs the `tasks` array of functions in parallel, without waiting until the\r\n * previous function has completed. Once any of the `tasks` complete or pass an\r\n * error to its callback, the main `callback` is immediately called. It's\r\n * equivalent to `Promise.race()`.\r\n *\r\n * @name race\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\r\n * to run. Each function can complete with an optional `result` value.\r\n * @param {Function} callback - A callback to run once any of the functions have\r\n * completed. This function gets an error or result from the first function that\r\n * completed. Invoked with (err, result).\r\n * @returns undefined\r\n * @example\r\n *\r\n * async.race([\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'one');\r\n *         }, 200);\r\n *     },\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'two');\r\n *         }, 100);\r\n *     }\r\n * ],\r\n * // main callback\r\n * function(err, result) {\r\n *     // the result will be equal to 'two' as it finishes earlier\r\n * });\r\n */\r\nfunction race(tasks, callback) {\r\n    callback = once(callback || noop);\r\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\r\n    if (!tasks.length) return callback();\r\n    for (var i = 0, l = tasks.length; i < l; i++) {\r\n        wrapAsync(tasks[i])(callback);\r\n    }\r\n}\r\n\r\n/**\r\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\r\n *\r\n * @name reduceRight\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.reduce]{@link module:Collections.reduce}\r\n * @alias foldr\r\n * @category Collection\r\n * @param {Array} array - A collection to iterate over.\r\n * @param {*} memo - The initial state of the reduction.\r\n * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n * array to produce the next step in the reduction.\r\n * The `iteratee` should complete with the next state of the reduction.\r\n * If the iteratee complete with an error, the reduction is stopped and the\r\n * main `callback` is immediately called with the error.\r\n * Invoked with (memo, item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\r\n * (err, result).\r\n */\r\nfunction reduceRight (array, memo, iteratee, callback) {\r\n    var reversed = slice(array).reverse();\r\n    reduce(reversed, memo, iteratee, callback);\r\n}\r\n\r\n/**\r\n * Wraps the async function in another function that always completes with a\r\n * result object, even when it errors.\r\n *\r\n * The result object has either the property `error` or `value`.\r\n *\r\n * @name reflect\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} fn - The async function you want to wrap\r\n * @returns {Function} - A function that always passes null to it's callback as\r\n * the error. The second argument to the callback will be an `object` with\r\n * either an `error` or a `value` property.\r\n * @example\r\n *\r\n * async.parallel([\r\n *     async.reflect(function(callback) {\r\n *         // do some stuff ...\r\n *         callback(null, 'one');\r\n *     }),\r\n *     async.reflect(function(callback) {\r\n *         // do some more stuff but error ...\r\n *         callback('bad stuff happened');\r\n *     }),\r\n *     async.reflect(function(callback) {\r\n *         // do some more stuff ...\r\n *         callback(null, 'two');\r\n *     })\r\n * ],\r\n * // optional callback\r\n * function(err, results) {\r\n *     // values\r\n *     // results[0].value = 'one'\r\n *     // results[1].error = 'bad stuff happened'\r\n *     // results[2].value = 'two'\r\n * });\r\n */\r\nfunction reflect(fn) {\r\n    var _fn = wrapAsync(fn);\r\n    return initialParams(function reflectOn(args, reflectCallback) {\r\n        args.push(function callback(error, cbArg) {\r\n            if (error) {\r\n                reflectCallback(null, { error: error });\r\n            } else {\r\n                var value;\r\n                if (arguments.length <= 2) {\r\n                    value = cbArg;\r\n                } else {\r\n                    value = slice(arguments, 1);\r\n                }\r\n                reflectCallback(null, { value: value });\r\n            }\r\n        });\r\n\r\n        return _fn.apply(this, args);\r\n    });\r\n}\r\n\r\n/**\r\n * A helper function that wraps an array or an object of functions with `reflect`.\r\n *\r\n * @name reflectAll\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @see [async.reflect]{@link module:Utils.reflect}\r\n * @category Util\r\n * @param {Array|Object|Iterable} tasks - The collection of\r\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\r\n * @returns {Array} Returns an array of async functions, each wrapped in\r\n * `async.reflect`\r\n * @example\r\n *\r\n * let tasks = [\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'one');\r\n *         }, 200);\r\n *     },\r\n *     function(callback) {\r\n *         // do some more stuff but error ...\r\n *         callback(new Error('bad stuff happened'));\r\n *     },\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'two');\r\n *         }, 100);\r\n *     }\r\n * ];\r\n *\r\n * async.parallel(async.reflectAll(tasks),\r\n * // optional callback\r\n * function(err, results) {\r\n *     // values\r\n *     // results[0].value = 'one'\r\n *     // results[1].error = Error('bad stuff happened')\r\n *     // results[2].value = 'two'\r\n * });\r\n *\r\n * // an example using an object instead of an array\r\n * let tasks = {\r\n *     one: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'one');\r\n *         }, 200);\r\n *     },\r\n *     two: function(callback) {\r\n *         callback('two');\r\n *     },\r\n *     three: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'three');\r\n *         }, 100);\r\n *     }\r\n * };\r\n *\r\n * async.parallel(async.reflectAll(tasks),\r\n * // optional callback\r\n * function(err, results) {\r\n *     // values\r\n *     // results.one.value = 'one'\r\n *     // results.two.error = 'two'\r\n *     // results.three.value = 'three'\r\n * });\r\n */\r\nfunction reflectAll(tasks) {\r\n    var results;\r\n    if (isArray(tasks)) {\r\n        results = arrayMap(tasks, reflect);\r\n    } else {\r\n        results = {};\r\n        baseForOwn(tasks, function(task, key) {\r\n            results[key] = reflect.call(this, task);\r\n        });\r\n    }\r\n    return results;\r\n}\r\n\r\nfunction reject$1(eachfn, arr, iteratee, callback) {\r\n    _filter(eachfn, arr, function(value, cb) {\r\n        iteratee(value, function(err, v) {\r\n            cb(err, !v);\r\n        });\r\n    }, callback);\r\n}\r\n\r\n/**\r\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\r\n *\r\n * @name reject\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.filter]{@link module:Collections.filter}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {Function} iteratee - An async truth test to apply to each item in\r\n * `coll`.\r\n * The should complete with a boolean value as its `result`.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results).\r\n * @example\r\n *\r\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\r\n *     fs.access(filePath, function(err) {\r\n *         callback(null, !err)\r\n *     });\r\n * }, function(err, results) {\r\n *     // results now equals an array of missing files\r\n *     createFiles(results);\r\n * });\r\n */\r\nvar reject = doParallel(reject$1);\r\n\r\n/**\r\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name rejectLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.reject]{@link module:Collections.reject}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {Function} iteratee - An async truth test to apply to each item in\r\n * `coll`.\r\n * The should complete with a boolean value as its `result`.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results).\r\n */\r\nvar rejectLimit = doParallelLimit(reject$1);\r\n\r\n/**\r\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\r\n *\r\n * @name rejectSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.reject]{@link module:Collections.reject}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {Function} iteratee - An async truth test to apply to each item in\r\n * `coll`.\r\n * The should complete with a boolean value as its `result`.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results).\r\n */\r\nvar rejectSeries = doLimit(rejectLimit, 1);\r\n\r\n/**\r\n * Creates a function that returns `value`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 2.4.0\r\n * @category Util\r\n * @param {*} value The value to return from the new function.\r\n * @returns {Function} Returns the new constant function.\r\n * @example\r\n *\r\n * var objects = _.times(2, _.constant({ 'a': 1 }));\r\n *\r\n * console.log(objects);\r\n * // => [{ 'a': 1 }, { 'a': 1 }]\r\n *\r\n * console.log(objects[0] === objects[1]);\r\n * // => true\r\n */\r\nfunction constant$1(value) {\r\n  return function() {\r\n    return value;\r\n  };\r\n}\r\n\r\n/**\r\n * Attempts to get a successful response from `task` no more than `times` times\r\n * before returning an error. If the task is successful, the `callback` will be\r\n * passed the result of the successful task. If all attempts fail, the callback\r\n * will be passed the error and result (if any) of the final attempt.\r\n *\r\n * @name retry\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @see [async.retryable]{@link module:ControlFlow.retryable}\r\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\r\n * object with `times` and `interval` or a number.\r\n * * `times` - The number of attempts to make before giving up.  The default\r\n *   is `5`.\r\n * * `interval` - The time to wait between retries, in milliseconds.  The\r\n *   default is `0`. The interval may also be specified as a function of the\r\n *   retry count (see example).\r\n * * `errorFilter` - An optional synchronous function that is invoked on\r\n *   erroneous result. If it returns `true` the retry attempts will continue;\r\n *   if the function returns `false` the retry flow is aborted with the current\r\n *   attempt's error and result being returned to the final callback.\r\n *   Invoked with (err).\r\n * * If `opts` is a number, the number specifies the number of times to retry,\r\n *   with the default interval of `0`.\r\n * @param {AsyncFunction} task - An async function to retry.\r\n * Invoked with (callback).\r\n * @param {Function} [callback] - An optional callback which is called when the\r\n * task has succeeded, or after the final failed attempt. It receives the `err`\r\n * and `result` arguments of the last attempt at completing the `task`. Invoked\r\n * with (err, results).\r\n *\r\n * @example\r\n *\r\n * // The `retry` function can be used as a stand-alone control flow by passing\r\n * // a callback, as shown below:\r\n *\r\n * // try calling apiMethod 3 times\r\n * async.retry(3, apiMethod, function(err, result) {\r\n *     // do something with the result\r\n * });\r\n *\r\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\r\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\r\n *     // do something with the result\r\n * });\r\n *\r\n * // try calling apiMethod 10 times with exponential backoff\r\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\r\n * async.retry({\r\n *   times: 10,\r\n *   interval: function(retryCount) {\r\n *     return 50 * Math.pow(2, retryCount);\r\n *   }\r\n * }, apiMethod, function(err, result) {\r\n *     // do something with the result\r\n * });\r\n *\r\n * // try calling apiMethod the default 5 times no delay between each retry\r\n * async.retry(apiMethod, function(err, result) {\r\n *     // do something with the result\r\n * });\r\n *\r\n * // try calling apiMethod only when error condition satisfies, all other\r\n * // errors will abort the retry control flow and return to final callback\r\n * async.retry({\r\n *   errorFilter: function(err) {\r\n *     return err.message === 'Temporary error'; // only retry on a specific error\r\n *   }\r\n * }, apiMethod, function(err, result) {\r\n *     // do something with the result\r\n * });\r\n *\r\n * // to retry individual methods that are not as reliable within other\r\n * // control flow functions, use the `retryable` wrapper:\r\n * async.auto({\r\n *     users: api.getUsers.bind(api),\r\n *     payments: async.retryable(3, api.getPayments.bind(api))\r\n * }, function(err, results) {\r\n *     // do something with the results\r\n * });\r\n *\r\n */\r\nfunction retry(opts, task, callback) {\r\n    var DEFAULT_TIMES = 5;\r\n    var DEFAULT_INTERVAL = 0;\r\n\r\n    var options = {\r\n        times: DEFAULT_TIMES,\r\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\r\n    };\r\n\r\n    function parseTimes(acc, t) {\r\n        if (typeof t === 'object') {\r\n            acc.times = +t.times || DEFAULT_TIMES;\r\n\r\n            acc.intervalFunc = typeof t.interval === 'function' ?\r\n                t.interval :\r\n                constant$1(+t.interval || DEFAULT_INTERVAL);\r\n\r\n            acc.errorFilter = t.errorFilter;\r\n        } else if (typeof t === 'number' || typeof t === 'string') {\r\n            acc.times = +t || DEFAULT_TIMES;\r\n        } else {\r\n            throw new Error(\"Invalid arguments for async.retry\");\r\n        }\r\n    }\r\n\r\n    if (arguments.length < 3 && typeof opts === 'function') {\r\n        callback = task || noop;\r\n        task = opts;\r\n    } else {\r\n        parseTimes(options, opts);\r\n        callback = callback || noop;\r\n    }\r\n\r\n    if (typeof task !== 'function') {\r\n        throw new Error(\"Invalid arguments for async.retry\");\r\n    }\r\n\r\n    var _task = wrapAsync(task);\r\n\r\n    var attempt = 1;\r\n    function retryAttempt() {\r\n        _task(function(err) {\r\n            if (err && attempt++ < options.times &&\r\n                (typeof options.errorFilter != 'function' ||\r\n                    options.errorFilter(err))) {\r\n                setTimeout(retryAttempt, options.intervalFunc(attempt));\r\n            } else {\r\n                callback.apply(null, arguments);\r\n            }\r\n        });\r\n    }\r\n\r\n    retryAttempt();\r\n}\r\n\r\n/**\r\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\r\n * wraps a task and makes it retryable, rather than immediately calling it\r\n * with retries.\r\n *\r\n * @name retryable\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.retry]{@link module:ControlFlow.retry}\r\n * @category Control Flow\r\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\r\n * options, exactly the same as from `retry`\r\n * @param {AsyncFunction} task - the asynchronous function to wrap.\r\n * This function will be passed any arguments passed to the returned wrapper.\r\n * Invoked with (...args, callback).\r\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\r\n * retry on an error, based on the parameters specified in `opts`.\r\n * This function will accept the same parameters as `task`.\r\n * @example\r\n *\r\n * async.auto({\r\n *     dep1: async.retryable(3, getFromFlakyService),\r\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\r\n *         maybeProcessData(results.dep1, cb);\r\n *     })]\r\n * }, callback);\r\n */\r\nvar retryable = function (opts, task) {\r\n    if (!task) {\r\n        task = opts;\r\n        opts = null;\r\n    }\r\n    var _task = wrapAsync(task);\r\n    return initialParams(function (args, callback) {\r\n        function taskFn(cb) {\r\n            _task.apply(null, args.concat(cb));\r\n        }\r\n\r\n        if (opts) retry(opts, taskFn, callback);\r\n        else retry(taskFn, callback);\r\n\r\n    });\r\n};\r\n\r\n/**\r\n * Run the functions in the `tasks` collection in series, each one running once\r\n * the previous function has completed. If any functions in the series pass an\r\n * error to its callback, no more functions are run, and `callback` is\r\n * immediately called with the value of the error. Otherwise, `callback`\r\n * receives an array of results when `tasks` have completed.\r\n *\r\n * It is also possible to use an object instead of an array. Each property will\r\n * be run as a function, and the results will be passed to the final `callback`\r\n * as an object instead of an array. This can be a more readable way of handling\r\n *  results from {@link async.series}.\r\n *\r\n * **Note** that while many implementations preserve the order of object\r\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\r\n * explicitly states that\r\n *\r\n * > The mechanics and order of enumerating the properties is not specified.\r\n *\r\n * So if you rely on the order in which your series of functions are executed,\r\n * and want this to work on all platforms, consider using an array.\r\n *\r\n * @name series\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} tasks - A collection containing\r\n * [async functions]{@link AsyncFunction} to run in series.\r\n * Each function can complete with any number of optional `result` values.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed. This function gets a results array (or object)\r\n * containing all the result arguments passed to the `task` callbacks. Invoked\r\n * with (err, result).\r\n * @example\r\n * async.series([\r\n *     function(callback) {\r\n *         // do some stuff ...\r\n *         callback(null, 'one');\r\n *     },\r\n *     function(callback) {\r\n *         // do some more stuff ...\r\n *         callback(null, 'two');\r\n *     }\r\n * ],\r\n * // optional callback\r\n * function(err, results) {\r\n *     // results is now equal to ['one', 'two']\r\n * });\r\n *\r\n * async.series({\r\n *     one: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 1);\r\n *         }, 200);\r\n *     },\r\n *     two: function(callback){\r\n *         setTimeout(function() {\r\n *             callback(null, 2);\r\n *         }, 100);\r\n *     }\r\n * }, function(err, results) {\r\n *     // results is now equal to: {one: 1, two: 2}\r\n * });\r\n */\r\nfunction series(tasks, callback) {\r\n    _parallel(eachOfSeries, tasks, callback);\r\n}\r\n\r\n/**\r\n * Returns `true` if at least one element in the `coll` satisfies an async test.\r\n * If any iteratee call returns `true`, the main `callback` is immediately\r\n * called.\r\n *\r\n * @name some\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias any\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collections in parallel.\r\n * The iteratee should complete with a boolean `result` value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the iteratee functions have finished.\r\n * Result will be either `true` or `false` depending on the values of the async\r\n * tests. Invoked with (err, result).\r\n * @example\r\n *\r\n * async.some(['file1','file2','file3'], function(filePath, callback) {\r\n *     fs.access(filePath, function(err) {\r\n *         callback(null, !err)\r\n *     });\r\n * }, function(err, result) {\r\n *     // if result is true then at least one of the files exists\r\n * });\r\n */\r\nvar some = doParallel(_createTester(Boolean, identity));\r\n\r\n/**\r\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name someLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.some]{@link module:Collections.some}\r\n * @alias anyLimit\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collections in parallel.\r\n * The iteratee should complete with a boolean `result` value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the iteratee functions have finished.\r\n * Result will be either `true` or `false` depending on the values of the async\r\n * tests. Invoked with (err, result).\r\n */\r\nvar someLimit = doParallelLimit(_createTester(Boolean, identity));\r\n\r\n/**\r\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\r\n *\r\n * @name someSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.some]{@link module:Collections.some}\r\n * @alias anySeries\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collections in series.\r\n * The iteratee should complete with a boolean `result` value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the iteratee functions have finished.\r\n * Result will be either `true` or `false` depending on the values of the async\r\n * tests. Invoked with (err, result).\r\n */\r\nvar someSeries = doLimit(someLimit, 1);\r\n\r\n/**\r\n * Sorts a list by the results of running each `coll` value through an async\r\n * `iteratee`.\r\n *\r\n * @name sortBy\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with a value to use as the sort criteria as\r\n * its `result`.\r\n * Invoked with (item, callback).\r\n * @param {Function} callback - A callback which is called after all the\r\n * `iteratee` functions have finished, or an error occurs. Results is the items\r\n * from the original `coll` sorted by the values returned by the `iteratee`\r\n * calls. Invoked with (err, results).\r\n * @example\r\n *\r\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\r\n *     fs.stat(file, function(err, stats) {\r\n *         callback(err, stats.mtime);\r\n *     });\r\n * }, function(err, results) {\r\n *     // results is now the original array of files sorted by\r\n *     // modified date\r\n * });\r\n *\r\n * // By modifying the callback parameter the\r\n * // sorting order can be influenced:\r\n *\r\n * // ascending order\r\n * async.sortBy([1,9,3,5], function(x, callback) {\r\n *     callback(null, x);\r\n * }, function(err,result) {\r\n *     // result callback\r\n * });\r\n *\r\n * // descending order\r\n * async.sortBy([1,9,3,5], function(x, callback) {\r\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\r\n * }, function(err,result) {\r\n *     // result callback\r\n * });\r\n */\r\nfunction sortBy (coll, iteratee, callback) {\r\n    var _iteratee = wrapAsync(iteratee);\r\n    map(coll, function (x, callback) {\r\n        _iteratee(x, function (err, criteria) {\r\n            if (err) return callback(err);\r\n            callback(null, {value: x, criteria: criteria});\r\n        });\r\n    }, function (err, results) {\r\n        if (err) return callback(err);\r\n        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\r\n    });\r\n\r\n    function comparator(left, right) {\r\n        var a = left.criteria, b = right.criteria;\r\n        return a < b ? -1 : a > b ? 1 : 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Sets a time limit on an asynchronous function. If the function does not call\r\n * its callback within the specified milliseconds, it will be called with a\r\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\r\n *\r\n * @name timeout\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\r\n * @param {number} milliseconds - The specified time limit.\r\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\r\n * to timeout Error for more information..\r\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\r\n * of the control flow functions.\r\n * Invoke this function with the same parameters as you would `asyncFunc`.\r\n * @example\r\n *\r\n * function myFunction(foo, callback) {\r\n *     doAsyncTask(foo, function(err, data) {\r\n *         // handle errors\r\n *         if (err) return callback(err);\r\n *\r\n *         // do some stuff ...\r\n *\r\n *         // return processed data\r\n *         return callback(null, data);\r\n *     });\r\n * }\r\n *\r\n * var wrapped = async.timeout(myFunction, 1000);\r\n *\r\n * // call `wrapped` as you would `myFunction`\r\n * wrapped({ bar: 'bar' }, function(err, data) {\r\n *     // if `myFunction` takes < 1000 ms to execute, `err`\r\n *     // and `data` will have their expected values\r\n *\r\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\r\n * });\r\n */\r\nfunction timeout(asyncFn, milliseconds, info) {\r\n    var fn = wrapAsync(asyncFn);\r\n\r\n    return initialParams(function (args, callback) {\r\n        var timedOut = false;\r\n        var timer;\r\n\r\n        function timeoutCallback() {\r\n            var name = asyncFn.name || 'anonymous';\r\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\r\n            error.code = 'ETIMEDOUT';\r\n            if (info) {\r\n                error.info = info;\r\n            }\r\n            timedOut = true;\r\n            callback(error);\r\n        }\r\n\r\n        args.push(function () {\r\n            if (!timedOut) {\r\n                callback.apply(null, arguments);\r\n                clearTimeout(timer);\r\n            }\r\n        });\r\n\r\n        // setup timer and call original function\r\n        timer = setTimeout(timeoutCallback, milliseconds);\r\n        fn.apply(null, args);\r\n    });\r\n}\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeCeil = Math.ceil;\r\nvar nativeMax = Math.max;\r\n\r\n/**\r\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\r\n * coerce arguments.\r\n *\r\n * @private\r\n * @param {number} start The start of the range.\r\n * @param {number} end The end of the range.\r\n * @param {number} step The value to increment or decrement by.\r\n * @param {boolean} [fromRight] Specify iterating from right to left.\r\n * @returns {Array} Returns the range of numbers.\r\n */\r\nfunction baseRange(start, end, step, fromRight) {\r\n  var index = -1,\r\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\r\n      result = Array(length);\r\n\r\n  while (length--) {\r\n    result[fromRight ? length : ++index] = start;\r\n    start += step;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name timesLimit\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.times]{@link module:ControlFlow.times}\r\n * @category Control Flow\r\n * @param {number} count - The number of times to run the function.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n * Invoked with the iteration index and a callback: (n, next).\r\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\r\n */\r\nfunction timeLimit(count, limit, iteratee, callback) {\r\n    var _iteratee = wrapAsync(iteratee);\r\n    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\r\n}\r\n\r\n/**\r\n * Calls the `iteratee` function `n` times, and accumulates results in the same\r\n * manner you would use with [map]{@link module:Collections.map}.\r\n *\r\n * @name times\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.map]{@link module:Collections.map}\r\n * @category Control Flow\r\n * @param {number} n - The number of times to run the function.\r\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n * Invoked with the iteration index and a callback: (n, next).\r\n * @param {Function} callback - see {@link module:Collections.map}.\r\n * @example\r\n *\r\n * // Pretend this is some complicated async factory\r\n * var createUser = function(id, callback) {\r\n *     callback(null, {\r\n *         id: 'user' + id\r\n *     });\r\n * };\r\n *\r\n * // generate 5 users\r\n * async.times(5, function(n, next) {\r\n *     createUser(n, function(err, user) {\r\n *         next(err, user);\r\n *     });\r\n * }, function(err, users) {\r\n *     // we should now have 5 users\r\n * });\r\n */\r\nvar times = doLimit(timeLimit, Infinity);\r\n\r\n/**\r\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\r\n *\r\n * @name timesSeries\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.times]{@link module:ControlFlow.times}\r\n * @category Control Flow\r\n * @param {number} n - The number of times to run the function.\r\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n * Invoked with the iteration index and a callback: (n, next).\r\n * @param {Function} callback - see {@link module:Collections.map}.\r\n */\r\nvar timesSeries = doLimit(timeLimit, 1);\r\n\r\n/**\r\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\r\n * element in series, each step potentially mutating an `accumulator` value.\r\n * The type of the accumulator defaults to the type of collection passed in.\r\n *\r\n * @name transform\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\r\n * it will default to an empty Object or Array, depending on the type of `coll`\r\n * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n * collection that potentially modifies the accumulator.\r\n * Invoked with (accumulator, item, key, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result is the transformed accumulator.\r\n * Invoked with (err, result).\r\n * @example\r\n *\r\n * async.transform([1,2,3], function(acc, item, index, callback) {\r\n *     // pointless async:\r\n *     process.nextTick(function() {\r\n *         acc.push(item * 2)\r\n *         callback(null)\r\n *     });\r\n * }, function(err, result) {\r\n *     // result is now equal to [2, 4, 6]\r\n * });\r\n *\r\n * @example\r\n *\r\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\r\n *     setImmediate(function () {\r\n *         obj[key] = val * 2;\r\n *         callback();\r\n *     })\r\n * }, function (err, result) {\r\n *     // result is equal to {a: 2, b: 4, c: 6}\r\n * })\r\n */\r\nfunction transform (coll, accumulator, iteratee, callback) {\r\n    if (arguments.length <= 3) {\r\n        callback = iteratee;\r\n        iteratee = accumulator;\r\n        accumulator = isArray(coll) ? [] : {};\r\n    }\r\n    callback = once(callback || noop);\r\n    var _iteratee = wrapAsync(iteratee);\r\n\r\n    eachOf(coll, function(v, k, cb) {\r\n        _iteratee(accumulator, v, k, cb);\r\n    }, function(err) {\r\n        callback(err, accumulator);\r\n    });\r\n}\r\n\r\n/**\r\n * It runs each task in series but stops whenever any of the functions were\r\n * successful. If one of the tasks were successful, the `callback` will be\r\n * passed the result of the successful task. If all tasks fail, the callback\r\n * will be passed the error and result (if any) of the final attempt.\r\n *\r\n * @name tryEach\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} tasks - A collection containing functions to\r\n * run, each function is passed a `callback(err, result)` it must call on\r\n * completion with an error `err` (which can be `null`) and an optional `result`\r\n * value.\r\n * @param {Function} [callback] - An optional callback which is called when one\r\n * of the tasks has succeeded, or all have failed. It receives the `err` and\r\n * `result` arguments of the last attempt at completing the `task`. Invoked with\r\n * (err, results).\r\n * @example\r\n * async.tryEach([\r\n *     function getDataFromFirstWebsite(callback) {\r\n *         // Try getting the data from the first website\r\n *         callback(err, data);\r\n *     },\r\n *     function getDataFromSecondWebsite(callback) {\r\n *         // First website failed,\r\n *         // Try getting the data from the backup website\r\n *         callback(err, data);\r\n *     }\r\n * ],\r\n * // optional callback\r\n * function(err, results) {\r\n *     Now do something with the data.\r\n * });\r\n *\r\n */\r\nfunction tryEach(tasks, callback) {\r\n    var error = null;\r\n    var result;\r\n    callback = callback || noop;\r\n    eachSeries(tasks, function(task, callback) {\r\n        wrapAsync(task)(function (err, res/*, ...args*/) {\r\n            if (arguments.length > 2) {\r\n                result = slice(arguments, 1);\r\n            } else {\r\n                result = res;\r\n            }\r\n            error = err;\r\n            callback(!err);\r\n        });\r\n    }, function () {\r\n        callback(error, result);\r\n    });\r\n}\r\n\r\n/**\r\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\r\n * unmemoized form. Handy for testing.\r\n *\r\n * @name unmemoize\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @see [async.memoize]{@link module:Utils.memoize}\r\n * @category Util\r\n * @param {AsyncFunction} fn - the memoized function\r\n * @returns {AsyncFunction} a function that calls the original unmemoized function\r\n */\r\nfunction unmemoize(fn) {\r\n    return function () {\r\n        return (fn.unmemoized || fn).apply(null, arguments);\r\n    };\r\n}\r\n\r\n/**\r\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\r\n * stopped, or an error occurs.\r\n *\r\n * @name whilst\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Function} test - synchronous truth test to perform before each\r\n * execution of `iteratee`. Invoked with ().\r\n * @param {AsyncFunction} iteratee - An async function which is called each time\r\n * `test` passes. Invoked with (callback).\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\r\n * will be passed an error and any arguments passed to the final `iteratee`'s\r\n * callback. Invoked with (err, [results]);\r\n * @returns undefined\r\n * @example\r\n *\r\n * var count = 0;\r\n * async.whilst(\r\n *     function() { return count < 5; },\r\n *     function(callback) {\r\n *         count++;\r\n *         setTimeout(function() {\r\n *             callback(null, count);\r\n *         }, 1000);\r\n *     },\r\n *     function (err, n) {\r\n *         // 5 seconds have passed, n = 5\r\n *     }\r\n * );\r\n */\r\nfunction whilst(test, iteratee, callback) {\r\n    callback = onlyOnce(callback || noop);\r\n    var _iteratee = wrapAsync(iteratee);\r\n    if (!test()) return callback(null);\r\n    var next = function(err/*, ...args*/) {\r\n        if (err) return callback(err);\r\n        if (test()) return _iteratee(next);\r\n        var args = slice(arguments, 1);\r\n        callback.apply(null, [null].concat(args));\r\n    };\r\n    _iteratee(next);\r\n}\r\n\r\n/**\r\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\r\n * stopped, or an error occurs. `callback` will be passed an error and any\r\n * arguments passed to the final `iteratee`'s callback.\r\n *\r\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\r\n *\r\n * @name until\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n * @category Control Flow\r\n * @param {Function} test - synchronous truth test to perform before each\r\n * execution of `iteratee`. Invoked with ().\r\n * @param {AsyncFunction} iteratee - An async function which is called each time\r\n * `test` fails. Invoked with (callback).\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\r\n * will be passed an error and any arguments passed to the final `iteratee`'s\r\n * callback. Invoked with (err, [results]);\r\n */\r\nfunction until(test, iteratee, callback) {\r\n    whilst(function() {\r\n        return !test.apply(this, arguments);\r\n    }, iteratee, callback);\r\n}\r\n\r\n/**\r\n * Runs the `tasks` array of functions in series, each passing their results to\r\n * the next in the array. However, if any of the `tasks` pass an error to their\r\n * own callback, the next function is not executed, and the main `callback` is\r\n * immediately called with the error.\r\n *\r\n * @name waterfall\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\r\n * to run.\r\n * Each function should complete with any number of `result` values.\r\n * The `result` values will be passed as arguments, in order, to the next task.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed. This will be passed the results of the last task's\r\n * callback. Invoked with (err, [results]).\r\n * @returns undefined\r\n * @example\r\n *\r\n * async.waterfall([\r\n *     function(callback) {\r\n *         callback(null, 'one', 'two');\r\n *     },\r\n *     function(arg1, arg2, callback) {\r\n *         // arg1 now equals 'one' and arg2 now equals 'two'\r\n *         callback(null, 'three');\r\n *     },\r\n *     function(arg1, callback) {\r\n *         // arg1 now equals 'three'\r\n *         callback(null, 'done');\r\n *     }\r\n * ], function (err, result) {\r\n *     // result now equals 'done'\r\n * });\r\n *\r\n * // Or, with named functions:\r\n * async.waterfall([\r\n *     myFirstFunction,\r\n *     mySecondFunction,\r\n *     myLastFunction,\r\n * ], function (err, result) {\r\n *     // result now equals 'done'\r\n * });\r\n * function myFirstFunction(callback) {\r\n *     callback(null, 'one', 'two');\r\n * }\r\n * function mySecondFunction(arg1, arg2, callback) {\r\n *     // arg1 now equals 'one' and arg2 now equals 'two'\r\n *     callback(null, 'three');\r\n * }\r\n * function myLastFunction(arg1, callback) {\r\n *     // arg1 now equals 'three'\r\n *     callback(null, 'done');\r\n * }\r\n */\r\nvar waterfall = function(tasks, callback) {\r\n    callback = once(callback || noop);\r\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\r\n    if (!tasks.length) return callback();\r\n    var taskIndex = 0;\r\n\r\n    function nextTask(args) {\r\n        var task = wrapAsync(tasks[taskIndex++]);\r\n        args.push(onlyOnce(next));\r\n        task.apply(null, args);\r\n    }\r\n\r\n    function next(err/*, ...args*/) {\r\n        if (err || taskIndex === tasks.length) {\r\n            return callback.apply(null, arguments);\r\n        }\r\n        nextTask(slice(arguments, 1));\r\n    }\r\n\r\n    nextTask([]);\r\n};\r\n\r\n/**\r\n * An \"async function\" in the context of Async is an asynchronous function with\r\n * a variable number of parameters, with the final parameter being a callback.\r\n * (`function (arg1, arg2, ..., callback) {}`)\r\n * The final callback is of the form `callback(err, results...)`, which must be\r\n * called once the function is completed.  The callback should be called with a\r\n * Error as its first argument to signal that an error occurred.\r\n * Otherwise, if no error occurred, it should be called with `null` as the first\r\n * argument, and any additional `result` arguments that may apply, to signal\r\n * successful completion.\r\n * The callback must be called exactly once, ideally on a later tick of the\r\n * JavaScript event loop.\r\n *\r\n * This type of function is also referred to as a \"Node-style async function\",\r\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\r\n * library are themselves CPS/Node-style async functions, or functions that\r\n * return CPS/Node-style async functions.\r\n *\r\n * Wherever we accept a Node-style async function, we also directly accept an\r\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\r\n * In this case, the `async` function will not be passed a final callback\r\n * argument, and any thrown error will be used as the `err` argument of the\r\n * implicit callback, and the return value will be used as the `result` value.\r\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\r\n * argument, and a `resolved` value becomes the `result`.)\r\n *\r\n * Note, due to JavaScript limitations, we can only detect native `async`\r\n * functions and not transpilied implementations.\r\n * Your environment must have `async`/`await` support for this to work.\r\n * (e.g. Node > v7.6, or a recent version of a modern browser).\r\n * If you are using `async` functions through a transpiler (e.g. Babel), you\r\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\r\n * because the `async function` will be compiled to an ordinary function that\r\n * returns a promise.\r\n *\r\n * @typedef {Function} AsyncFunction\r\n * @static\r\n */\r\n\r\n/**\r\n * Async is a utility module which provides straight-forward, powerful functions\r\n * for working with asynchronous JavaScript. Although originally designed for\r\n * use with [Node.js](http://nodejs.org) and installable via\r\n * `npm install --save async`, it can also be used directly in the browser.\r\n * @module async\r\n * @see AsyncFunction\r\n */\r\n\r\n\r\n/**\r\n * A collection of `async` functions for manipulating collections, such as\r\n * arrays and objects.\r\n * @module Collections\r\n */\r\n\r\n/**\r\n * A collection of `async` functions for controlling the flow through a script.\r\n * @module ControlFlow\r\n */\r\n\r\n/**\r\n * A collection of `async` utility functions.\r\n * @module Utils\r\n */\r\n\r\nvar index = {\r\n    apply: apply,\r\n    applyEach: applyEach,\r\n    applyEachSeries: applyEachSeries,\r\n    asyncify: asyncify,\r\n    auto: auto,\r\n    autoInject: autoInject,\r\n    cargo: cargo,\r\n    compose: compose,\r\n    concat: concat,\r\n    concatLimit: concatLimit,\r\n    concatSeries: concatSeries,\r\n    constant: constant,\r\n    detect: detect,\r\n    detectLimit: detectLimit,\r\n    detectSeries: detectSeries,\r\n    dir: dir,\r\n    doDuring: doDuring,\r\n    doUntil: doUntil,\r\n    doWhilst: doWhilst,\r\n    during: during,\r\n    each: eachLimit,\r\n    eachLimit: eachLimit$1,\r\n    eachOf: eachOf,\r\n    eachOfLimit: eachOfLimit,\r\n    eachOfSeries: eachOfSeries,\r\n    eachSeries: eachSeries,\r\n    ensureAsync: ensureAsync,\r\n    every: every,\r\n    everyLimit: everyLimit,\r\n    everySeries: everySeries,\r\n    filter: filter,\r\n    filterLimit: filterLimit,\r\n    filterSeries: filterSeries,\r\n    forever: forever,\r\n    groupBy: groupBy,\r\n    groupByLimit: groupByLimit,\r\n    groupBySeries: groupBySeries,\r\n    log: log,\r\n    map: map,\r\n    mapLimit: mapLimit,\r\n    mapSeries: mapSeries,\r\n    mapValues: mapValues,\r\n    mapValuesLimit: mapValuesLimit,\r\n    mapValuesSeries: mapValuesSeries,\r\n    memoize: memoize,\r\n    nextTick: nextTick,\r\n    parallel: parallelLimit,\r\n    parallelLimit: parallelLimit$1,\r\n    priorityQueue: priorityQueue,\r\n    queue: queue$1,\r\n    race: race,\r\n    reduce: reduce,\r\n    reduceRight: reduceRight,\r\n    reflect: reflect,\r\n    reflectAll: reflectAll,\r\n    reject: reject,\r\n    rejectLimit: rejectLimit,\r\n    rejectSeries: rejectSeries,\r\n    retry: retry,\r\n    retryable: retryable,\r\n    seq: seq,\r\n    series: series,\r\n    setImmediate: setImmediate$1,\r\n    some: some,\r\n    someLimit: someLimit,\r\n    someSeries: someSeries,\r\n    sortBy: sortBy,\r\n    timeout: timeout,\r\n    times: times,\r\n    timesLimit: timeLimit,\r\n    timesSeries: timesSeries,\r\n    transform: transform,\r\n    tryEach: tryEach,\r\n    unmemoize: unmemoize,\r\n    until: until,\r\n    waterfall: waterfall,\r\n    whilst: whilst,\r\n\r\n    // aliases\r\n    all: every,\r\n    allLimit: everyLimit,\r\n    allSeries: everySeries,\r\n    any: some,\r\n    anyLimit: someLimit,\r\n    anySeries: someSeries,\r\n    find: detect,\r\n    findLimit: detectLimit,\r\n    findSeries: detectSeries,\r\n    forEach: eachLimit,\r\n    forEachSeries: eachSeries,\r\n    forEachLimit: eachLimit$1,\r\n    forEachOf: eachOf,\r\n    forEachOfSeries: eachOfSeries,\r\n    forEachOfLimit: eachOfLimit,\r\n    inject: reduce,\r\n    foldl: reduce,\r\n    foldr: reduceRight,\r\n    select: filter,\r\n    selectLimit: filterLimit,\r\n    selectSeries: filterSeries,\r\n    wrapSync: asyncify\r\n};\r\n\r\nexports['default'] = index;\r\nexports.apply = apply;\r\nexports.applyEach = applyEach;\r\nexports.applyEachSeries = applyEachSeries;\r\nexports.asyncify = asyncify;\r\nexports.auto = auto;\r\nexports.autoInject = autoInject;\r\nexports.cargo = cargo;\r\nexports.compose = compose;\r\nexports.concat = concat;\r\nexports.concatLimit = concatLimit;\r\nexports.concatSeries = concatSeries;\r\nexports.constant = constant;\r\nexports.detect = detect;\r\nexports.detectLimit = detectLimit;\r\nexports.detectSeries = detectSeries;\r\nexports.dir = dir;\r\nexports.doDuring = doDuring;\r\nexports.doUntil = doUntil;\r\nexports.doWhilst = doWhilst;\r\nexports.during = during;\r\nexports.each = eachLimit;\r\nexports.eachLimit = eachLimit$1;\r\nexports.eachOf = eachOf;\r\nexports.eachOfLimit = eachOfLimit;\r\nexports.eachOfSeries = eachOfSeries;\r\nexports.eachSeries = eachSeries;\r\nexports.ensureAsync = ensureAsync;\r\nexports.every = every;\r\nexports.everyLimit = everyLimit;\r\nexports.everySeries = everySeries;\r\nexports.filter = filter;\r\nexports.filterLimit = filterLimit;\r\nexports.filterSeries = filterSeries;\r\nexports.forever = forever;\r\nexports.groupBy = groupBy;\r\nexports.groupByLimit = groupByLimit;\r\nexports.groupBySeries = groupBySeries;\r\nexports.log = log;\r\nexports.map = map;\r\nexports.mapLimit = mapLimit;\r\nexports.mapSeries = mapSeries;\r\nexports.mapValues = mapValues;\r\nexports.mapValuesLimit = mapValuesLimit;\r\nexports.mapValuesSeries = mapValuesSeries;\r\nexports.memoize = memoize;\r\nexports.nextTick = nextTick;\r\nexports.parallel = parallelLimit;\r\nexports.parallelLimit = parallelLimit$1;\r\nexports.priorityQueue = priorityQueue;\r\nexports.queue = queue$1;\r\nexports.race = race;\r\nexports.reduce = reduce;\r\nexports.reduceRight = reduceRight;\r\nexports.reflect = reflect;\r\nexports.reflectAll = reflectAll;\r\nexports.reject = reject;\r\nexports.rejectLimit = rejectLimit;\r\nexports.rejectSeries = rejectSeries;\r\nexports.retry = retry;\r\nexports.retryable = retryable;\r\nexports.seq = seq;\r\nexports.series = series;\r\nexports.setImmediate = setImmediate$1;\r\nexports.some = some;\r\nexports.someLimit = someLimit;\r\nexports.someSeries = someSeries;\r\nexports.sortBy = sortBy;\r\nexports.timeout = timeout;\r\nexports.times = times;\r\nexports.timesLimit = timeLimit;\r\nexports.timesSeries = timesSeries;\r\nexports.transform = transform;\r\nexports.tryEach = tryEach;\r\nexports.unmemoize = unmemoize;\r\nexports.until = until;\r\nexports.waterfall = waterfall;\r\nexports.whilst = whilst;\r\nexports.all = every;\r\nexports.allLimit = everyLimit;\r\nexports.allSeries = everySeries;\r\nexports.any = some;\r\nexports.anyLimit = someLimit;\r\nexports.anySeries = someSeries;\r\nexports.find = detect;\r\nexports.findLimit = detectLimit;\r\nexports.findSeries = detectSeries;\r\nexports.forEach = eachLimit;\r\nexports.forEachSeries = eachSeries;\r\nexports.forEachLimit = eachLimit$1;\r\nexports.forEachOf = eachOf;\r\nexports.forEachOfSeries = eachOfSeries;\r\nexports.forEachOfLimit = eachOfLimit;\r\nexports.inject = reduce;\r\nexports.foldl = reduce;\r\nexports.foldr = reduceRight;\r\nexports.select = filter;\r\nexports.selectLimit = filterLimit;\r\nexports.selectSeries = filterSeries;\r\nexports.wrapSync = asyncify;\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n})));\r\n"]},"metadata":{},"sourceType":"script"}
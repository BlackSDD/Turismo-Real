{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n\nconst authConstants_1 = require(\"../util/authConstants\");\n/**\r\n * Provides information about managed service identity token credentials.\r\n * This object can only be used to acquire token on a virtual machine provisioned in Azure with managed service identity.\r\n */\n\n\nclass MSITokenCredentials {\n  /**\r\n   * Creates an instance of MSITokenCredentials.\r\n   * @param options - Optional parameters\r\n   * @param options.resource - The resource uri or token audience for which the token is needed.\r\n   * For e.g. it can be:\r\n   * - resource management endpoint \"https://management.azure.com/\"(default)\r\n   * - management endpoint \"https://management.core.windows.net/\"\r\n   */\n  constructor(options) {\n    if (!options) options = {};\n\n    if (!options.resource) {\n      options.resource = authConstants_1.AuthConstants.RESOURCE_MANAGER_ENDPOINT;\n    } else if (typeof options.resource.valueOf() !== \"string\") {\n      throw new Error(\"resource must be a uri.\");\n    }\n\n    this.resource = options.resource;\n    this._httpClient = options.httpClient || new ms_rest_js_1.DefaultHttpClient();\n  }\n  /**\r\n   * Parses a tokenResponse json string into a object, and converts properties on the first level to camelCase.\r\n   * This method tries to standardize the tokenResponse\r\n   * @param  body - A json string\r\n   * @returns The tokenResponse (tokenType and accessToken are the two important properties).\r\n   */\n\n\n  parseTokenResponse(body) {\n    // Docs show different examples of possible MSI responses for different services. https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/overview\n    // expires_on - is a Date like string in this doc\n    //   - https://docs.microsoft.com/en-us/azure/app-service/app-service-managed-service-identity#rest-protocol-examples\n    // In other doc it is stringified number.\n    //   - https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/tutorial-linux-vm-access-arm#get-an-access-token-using-the-vms-identity-and-use-it-to-call-resource-manager\n    const parsedBody = JSON.parse(body);\n    parsedBody.accessToken = parsedBody[\"access_token\"];\n    delete parsedBody[\"access_token\"];\n    parsedBody.tokenType = parsedBody[\"token_type\"];\n    delete parsedBody[\"token_type\"];\n\n    if (parsedBody[\"refresh_token\"]) {\n      parsedBody.refreshToken = parsedBody[\"refresh_token\"];\n      delete parsedBody[\"refresh_token\"];\n    }\n\n    if (parsedBody[\"expires_in\"]) {\n      parsedBody.expiresIn = parsedBody[\"expires_in\"];\n\n      if (typeof parsedBody[\"expires_in\"] === \"string\") {\n        // normal number as a string '1504130527'\n        parsedBody.expiresIn = parseInt(parsedBody[\"expires_in\"], 10);\n      }\n\n      delete parsedBody[\"expires_in\"];\n    }\n\n    if (parsedBody[\"not_before\"]) {\n      parsedBody.notBefore = parsedBody[\"not_before\"];\n\n      if (typeof parsedBody[\"not_before\"] === \"string\") {\n        // normal number as a string '1504130527'\n        parsedBody.notBefore = parseInt(parsedBody[\"not_before\"], 10);\n      }\n\n      delete parsedBody[\"not_before\"];\n    }\n\n    if (parsedBody[\"expires_on\"]) {\n      parsedBody.expiresOn = parsedBody[\"expires_on\"];\n\n      if (typeof parsedBody[\"expires_on\"] === \"string\") {\n        // possibly a Date string '09/14/2017 00:00:00 PM +00:00'\n        if (parsedBody[\"expires_on\"].includes(\":\") || parsedBody[\"expires_on\"].includes(\"/\")) {\n          parsedBody.expiresOn = new Date(parseInt(parsedBody[\"expires_on\"], 10));\n        } else {\n          // normal number as a string '1504130527'\n          parsedBody.expiresOn = new Date(parseInt(parsedBody[\"expires_on\"], 10));\n        }\n      }\n\n      delete parsedBody[\"expires_on\"];\n    }\n\n    return parsedBody;\n  }\n  /**\r\n   * Signs a request with the Authentication header.\r\n   *\r\n   * @param webResource - The WebResource to be signed.\r\n   * @returns Promise with signed WebResource.\r\n   */\n\n\n  signRequest(webResource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tokenResponse = yield this.getToken();\n      webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, `${tokenResponse.tokenType} ${tokenResponse.accessToken}`);\n      return webResource;\n    });\n  }\n\n}\n\nexports.MSITokenCredentials = MSITokenCredentials;","map":{"version":3,"sources":["../../../lib/credentials/msiTokenCredentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\r\nconst authConstants_1 = require(\"../util/authConstants\");\r\n/**\r\n * Provides information about managed service identity token credentials.\r\n * This object can only be used to acquire token on a virtual machine provisioned in Azure with managed service identity.\r\n */\r\nclass MSITokenCredentials {\r\n    /**\r\n     * Creates an instance of MSITokenCredentials.\r\n     * @param options - Optional parameters\r\n     * @param options.resource - The resource uri or token audience for which the token is needed.\r\n     * For e.g. it can be:\r\n     * - resource management endpoint \"https://management.azure.com/\"(default)\r\n     * - management endpoint \"https://management.core.windows.net/\"\r\n     */\r\n    constructor(options) {\r\n        if (!options)\r\n            options = {};\r\n        if (!options.resource) {\r\n            options.resource = authConstants_1.AuthConstants.RESOURCE_MANAGER_ENDPOINT;\r\n        }\r\n        else if (typeof options.resource.valueOf() !== \"string\") {\r\n            throw new Error(\"resource must be a uri.\");\r\n        }\r\n        this.resource = options.resource;\r\n        this._httpClient = options.httpClient || new ms_rest_js_1.DefaultHttpClient();\r\n    }\r\n    /**\r\n     * Parses a tokenResponse json string into a object, and converts properties on the first level to camelCase.\r\n     * This method tries to standardize the tokenResponse\r\n     * @param  body - A json string\r\n     * @returns The tokenResponse (tokenType and accessToken are the two important properties).\r\n     */\r\n    parseTokenResponse(body) {\r\n        // Docs show different examples of possible MSI responses for different services. https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/overview\r\n        // expires_on - is a Date like string in this doc\r\n        //   - https://docs.microsoft.com/en-us/azure/app-service/app-service-managed-service-identity#rest-protocol-examples\r\n        // In other doc it is stringified number.\r\n        //   - https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/tutorial-linux-vm-access-arm#get-an-access-token-using-the-vms-identity-and-use-it-to-call-resource-manager\r\n        const parsedBody = JSON.parse(body);\r\n        parsedBody.accessToken = parsedBody[\"access_token\"];\r\n        delete parsedBody[\"access_token\"];\r\n        parsedBody.tokenType = parsedBody[\"token_type\"];\r\n        delete parsedBody[\"token_type\"];\r\n        if (parsedBody[\"refresh_token\"]) {\r\n            parsedBody.refreshToken = parsedBody[\"refresh_token\"];\r\n            delete parsedBody[\"refresh_token\"];\r\n        }\r\n        if (parsedBody[\"expires_in\"]) {\r\n            parsedBody.expiresIn = parsedBody[\"expires_in\"];\r\n            if (typeof parsedBody[\"expires_in\"] === \"string\") {\r\n                // normal number as a string '1504130527'\r\n                parsedBody.expiresIn = parseInt(parsedBody[\"expires_in\"], 10);\r\n            }\r\n            delete parsedBody[\"expires_in\"];\r\n        }\r\n        if (parsedBody[\"not_before\"]) {\r\n            parsedBody.notBefore = parsedBody[\"not_before\"];\r\n            if (typeof parsedBody[\"not_before\"] === \"string\") {\r\n                // normal number as a string '1504130527'\r\n                parsedBody.notBefore = parseInt(parsedBody[\"not_before\"], 10);\r\n            }\r\n            delete parsedBody[\"not_before\"];\r\n        }\r\n        if (parsedBody[\"expires_on\"]) {\r\n            parsedBody.expiresOn = parsedBody[\"expires_on\"];\r\n            if (typeof parsedBody[\"expires_on\"] === \"string\") {\r\n                // possibly a Date string '09/14/2017 00:00:00 PM +00:00'\r\n                if (parsedBody[\"expires_on\"].includes(\":\") || parsedBody[\"expires_on\"].includes(\"/\")) {\r\n                    parsedBody.expiresOn = new Date(parseInt(parsedBody[\"expires_on\"], 10));\r\n                }\r\n                else {\r\n                    // normal number as a string '1504130527'\r\n                    parsedBody.expiresOn = new Date(parseInt(parsedBody[\"expires_on\"], 10));\r\n                }\r\n            }\r\n            delete parsedBody[\"expires_on\"];\r\n        }\r\n        return parsedBody;\r\n    }\r\n    /**\r\n     * Signs a request with the Authentication header.\r\n     *\r\n     * @param webResource - The WebResource to be signed.\r\n     * @returns Promise with signed WebResource.\r\n     */\r\n    signRequest(webResource) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const tokenResponse = yield this.getToken();\r\n            webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, `${tokenResponse.tokenType} ${tokenResponse.accessToken}`);\r\n            return webResource;\r\n        });\r\n    }\r\n}\r\nexports.MSITokenCredentials = MSITokenCredentials;\r\n//# sourceMappingURL=msiTokenCredentials.js.map"]},"metadata":{},"sourceType":"script"}
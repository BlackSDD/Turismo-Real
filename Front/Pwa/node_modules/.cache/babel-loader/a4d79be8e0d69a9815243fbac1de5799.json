{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _assertThisInitialized = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar debug = require('debug')('mssql:base');\n\nvar _require2 = require('@tediousjs/connection-string'),\n    parseSqlConnectionString = _require2.parseSqlConnectionString;\n\nvar tarn = require('tarn');\n\nvar _require3 = require('../utils'),\n    IDS = _require3.IDS;\n\nvar ConnectionError = require('../error/connection-error');\n\nvar shared = require('../shared');\n\nvar deepclone = require('rfdc/default');\n/**\r\n * Class ConnectionPool.\r\n *\r\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\r\n *\r\n * @property {Boolean} connected If true, connection is established.\r\n * @property {Boolean} connecting If true, connection is being established.\r\n *\r\n * @fires ConnectionPool#connect\r\n * @fires ConnectionPool#close\r\n */\n\n\nvar ConnectionPool = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(ConnectionPool, _EventEmitter);\n\n  var _super = _createSuper(ConnectionPool);\n\n  /**\r\n   * Create new Connection.\r\n   *\r\n   * @param {Object|String} config Connection configuration object or connection string.\r\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\r\n   */\n  function ConnectionPool(config, callback) {\n    var _this;\n\n    _classCallCheck(this, ConnectionPool);\n\n    _this = _super.call(this);\n    IDS.add(_assertThisInitialized(_this), 'ConnectionPool');\n    debug('pool(%d): created', IDS.get(_assertThisInitialized(_this)));\n    _this._connectStack = [];\n    _this._closeStack = [];\n    _this._connected = false;\n    _this._connecting = false;\n    _this._healthy = false;\n\n    if (typeof config === 'string') {\n      try {\n        _this.config = _this.parseConnectionString(config);\n      } catch (ex) {\n        if (typeof callback === 'function') {\n          return _possibleConstructorReturn(_this, setImmediate(callback, ex));\n        }\n\n        throw ex;\n      }\n    } else {\n      _this.config = deepclone(config);\n    } // set defaults\n\n\n    _this.config.port = _this.config.port || 1433;\n    _this.config.options = _this.config.options || {};\n    _this.config.stream = _this.config.stream || false;\n    _this.config.parseJSON = _this.config.parseJSON || false;\n    _this.config.arrayRowMode = _this.config.arrayRowMode || false;\n    _this.config.validateConnection = 'validateConnection' in _this.config ? _this.config.validateConnection : true;\n\n    if (/^(.*)\\\\(.*)$/.exec(_this.config.server)) {\n      _this.config.server = RegExp.$1;\n      _this.config.options.instanceName = RegExp.$2;\n    }\n\n    if (typeof callback === 'function') {\n      _this.connect(callback);\n    }\n\n    return _this;\n  }\n\n  _createClass(ConnectionPool, [{\n    key: \"connected\",\n    get: function get() {\n      return this._connected;\n    }\n  }, {\n    key: \"connecting\",\n    get: function get() {\n      return this._connecting;\n    }\n  }, {\n    key: \"healthy\",\n    get: function get() {\n      return this._healthy;\n    }\n  }, {\n    key: \"parseConnectionString\",\n    value: function parseConnectionString(connectionString) {\n      return this._parseConnectionString(connectionString);\n    }\n  }, {\n    key: \"_parseConnectionString\",\n    value: function _parseConnectionString(connectionString) {\n      var parsed = parseSqlConnectionString(connectionString, true, true);\n      return Object.entries(parsed).reduce(function (config, _ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        switch (key) {\n          case 'application name':\n            break;\n\n          case 'applicationintent':\n            Object.assign(config.options, {\n              readOnlyIntent: value === 'readonly'\n            });\n            break;\n\n          case 'asynchronous processing':\n            break;\n\n          case 'attachdbfilename':\n            break;\n\n          case 'authentication':\n            break;\n\n          case 'column encryption setting':\n            break;\n\n          case 'connection timeout':\n            Object.assign(config, {\n              connectionTimeout: value * 1000\n            });\n            break;\n\n          case 'connection lifetime':\n            break;\n\n          case 'connectretrycount':\n            break;\n\n          case 'connectretryinterval':\n            Object.assign(config.options, {\n              connectionRetryInterval: value * 1000\n            });\n            break;\n\n          case 'context connection':\n            break;\n\n          case 'current language':\n            Object.assign(config.options, {\n              language: value\n            });\n            break;\n\n          case 'data source':\n            {\n              var server = value;\n              var instanceName;\n              var port = 1433;\n\n              if (/^np:/i.test(server)) {\n                throw new Error('Connection via Named Pipes is not supported.');\n              }\n\n              if (/^tcp:/i.test(server)) {\n                server = server.substr(4);\n              }\n\n              if (/^(.*)\\\\(.*)$/.exec(server)) {\n                server = RegExp.$1;\n                instanceName = RegExp.$2;\n              }\n\n              if (/^(.*),(.*)$/.exec(server)) {\n                server = RegExp.$1.trim();\n                port = parseInt(RegExp.$2.trim(), 10);\n              }\n\n              if (server === '.' || server === '(.)' || server.toLowerCase() === '(localdb)' || server.toLowerCase() === '(local)') {\n                server = 'localhost';\n              }\n\n              Object.assign(config, {\n                port: port,\n                server: server\n              });\n              Object.assign(config.options, {\n                instanceName: instanceName\n              });\n              break;\n            }\n\n          case 'encrypt':\n            Object.assign(config.options, {\n              encrypt: !!value\n            });\n            break;\n\n          case 'enlist':\n            break;\n\n          case 'failover partner':\n            break;\n\n          case 'initial catalog':\n            Object.assign(config, {\n              database: value\n            });\n            break;\n\n          case 'integrated security':\n            break;\n\n          case 'max pool size':\n            Object.assign(config.pool, {\n              max: value\n            });\n            break;\n\n          case 'min pool size':\n            Object.assign(config.pool, {\n              min: value\n            });\n            break;\n\n          case 'multipleactiveresultsets':\n            break;\n\n          case 'multisubnetfailover':\n            Object.assign(config.options, {\n              multiSubnetFailover: value\n            });\n            break;\n\n          case 'network library':\n            break;\n\n          case 'packet size':\n            Object.assign(config.options, {\n              packetSize: value\n            });\n            break;\n\n          case 'password':\n            Object.assign(config, {\n              password: value\n            });\n            break;\n\n          case 'persist security info':\n            break;\n\n          case 'poolblockingperiod':\n            break;\n\n          case 'pooling':\n            break;\n\n          case 'replication':\n            break;\n\n          case 'transaction binding':\n            Object.assign(config.options, {\n              enableImplicitTransactions: value.toLowerCase() === 'implicit unbind'\n            });\n            break;\n\n          case 'transparentnetworkipresolution':\n            break;\n\n          case 'trustservercertificate':\n            Object.assign(config.options, {\n              trustServerCertificate: value\n            });\n            break;\n\n          case 'type system version':\n            break;\n\n          case 'user id':\n            {\n              var user = value;\n              var domain;\n\n              if (/^(.*)\\\\(.*)$/.exec(user)) {\n                domain = RegExp.$1;\n                user = RegExp.$2;\n              }\n\n              Object.assign(config, {\n                domain: domain,\n                user: user\n              });\n              break;\n            }\n\n          case 'user instance':\n            break;\n\n          case 'workstation id':\n            Object.assign(config.options, {\n              workstationId: value\n            });\n            break;\n\n          case 'request timeout':\n            Object.assign(config, {\n              requestTimeout: parseInt(value, 10)\n            });\n            break;\n\n          case 'stream':\n            Object.assign(config, {\n              stream: !!value\n            });\n            break;\n\n          case 'useutc':\n            Object.assign(config.options, {\n              useUTC: !!value\n            });\n            break;\n\n          case 'parsejson':\n            Object.assign(config, {\n              parseJSON: !!value\n            });\n            break;\n        }\n\n        return config;\n      }, {\n        options: {},\n        pool: {}\n      });\n    }\n    /**\r\n     * Acquire connection from this connection pool.\r\n     *\r\n     * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\r\n     * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\r\n     * @return {ConnectionPool|Promise}\r\n     */\n\n  }, {\n    key: \"acquire\",\n    value: function acquire(requester, callback) {\n      var _this2 = this;\n\n      var acquirePromise = shared.Promise.resolve(this._acquire().promise).catch(function (err) {\n        _this2.emit('error', err);\n\n        throw err;\n      });\n\n      if (typeof callback === 'function') {\n        acquirePromise.then(function (connection) {\n          return callback(null, connection, _this2.config);\n        }).catch(callback);\n        return this;\n      }\n\n      return acquirePromise;\n    }\n  }, {\n    key: \"_acquire\",\n    value: function _acquire() {\n      if (!this.pool) {\n        return shared.Promise.reject(new ConnectionError('Connection not yet open.', 'ENOTOPEN'));\n      } else if (this.pool.destroyed) {\n        return shared.Promise.reject(new ConnectionError('Connection is closing', 'ENOTOPEN'));\n      }\n\n      return this.pool.acquire();\n    }\n    /**\r\n     * Release connection back to the pool.\r\n     *\r\n     * @param {Connection} connection Previously acquired connection.\r\n     * @return {ConnectionPool}\r\n     */\n\n  }, {\n    key: \"release\",\n    value: function release(connection) {\n      debug('connection(%d): released', IDS.get(connection));\n\n      if (this.pool) {\n        this.pool.release(connection);\n      }\n\n      return this;\n    }\n    /**\r\n     * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\r\n     *\r\n     * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n     * @return {ConnectionPool|Promise}\r\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(callback) {\n      var _this3 = this;\n\n      if (typeof callback === 'function') {\n        this._connect(callback);\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        return _this3._connect(function (err) {\n          if (err) return reject(err);\n          resolve(_this3);\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {basicCallback} callback\r\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(callback) {\n      var _this4 = this;\n\n      if (this._connected) {\n        debug('pool(%d): already connected, executing connect callback immediately', IDS.get(this));\n        return setImmediate(callback, null, this);\n      }\n\n      this._connectStack.push(callback);\n\n      if (this._connecting) {\n        return;\n      }\n\n      this._connecting = true;\n      debug('pool(%d): connecting', IDS.get(this)); // create one test connection to check if everything is ok\n\n      this._poolCreate().then(function (connection) {\n        debug('pool(%d): connected', IDS.get(_this4));\n        _this4._healthy = true;\n        return _this4._poolDestroy(connection).then(function () {\n          // prepare pool\n          _this4.pool = new tarn.Pool(Object.assign({\n            create: function create() {\n              return _this4._poolCreate().then(function (connection) {\n                _this4._healthy = true;\n                return connection;\n              }).catch(function (err) {\n                if (_this4.pool.numUsed() + _this4.pool.numFree() <= 0) {\n                  _this4._healthy = false;\n                }\n\n                throw err;\n              });\n            },\n            validate: _this4._poolValidate.bind(_this4),\n            destroy: _this4._poolDestroy.bind(_this4),\n            max: 10,\n            min: 0,\n            idleTimeoutMillis: 30000,\n            propagateCreateError: true\n          }, _this4.config.pool));\n          var self = _this4;\n          Object.defineProperties(_this4.pool, {\n            size: {\n              get: function get() {\n                var message = 'the `size` property on pool is deprecated, access it directly on the `ConnectionPool`';\n                self.emit('debug', message);\n                process.emitWarning(message);\n                return self.size;\n              }\n            },\n            available: {\n              get: function get() {\n                var message = 'the `available` property on pool is deprecated, access it directly on the `ConnectionPool`';\n                self.emit('debug', message);\n                process.emitWarning(message);\n                return self.available;\n              }\n            },\n            pending: {\n              get: function get() {\n                var message = 'the `pending` property on pool is deprecate, access it directly on the `ConnectionPool`';\n                self.emit('debug', message);\n                process.emitWarning(message);\n                return self.pending;\n              }\n            },\n            borrowed: {\n              get: function get() {\n                var message = 'the `borrowed` property on pool is deprecated, access it directly on the `ConnectionPool`';\n                self.emit('debug', message);\n                process.emitWarning(message);\n                return self.borrowed;\n              }\n            }\n          });\n          _this4._connecting = false;\n          _this4._connected = true;\n        });\n      }).then(function () {\n        _this4._connectStack.forEach(function (cb) {\n          setImmediate(cb, null, _this4);\n        });\n      }).catch(function (err) {\n        _this4._connecting = false;\n\n        _this4._connectStack.forEach(function (cb) {\n          setImmediate(cb, err);\n        });\n      }).then(function () {\n        _this4._connectStack = [];\n      });\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates();\n    }\n  }, {\n    key: \"available\",\n    get: function get() {\n      return this.pool.numFree();\n    }\n  }, {\n    key: \"pending\",\n    get: function get() {\n      return this.pool.numPendingAcquires();\n    }\n  }, {\n    key: \"borrowed\",\n    get: function get() {\n      return this.pool.numUsed();\n    }\n    /**\r\n     * Close all active connections in the pool.\r\n     *\r\n     * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\r\n     * @return {ConnectionPool|Promise}\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      var _this5 = this;\n\n      if (typeof callback === 'function') {\n        this._close(callback);\n\n        return this;\n      }\n\n      return new shared.Promise(function (resolve, reject) {\n        _this5._close(function (err) {\n          if (err) return reject(err);\n          resolve(_this5);\n        });\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {basicCallback} callback\r\n     */\n\n  }, {\n    key: \"_close\",\n    value: function _close(callback) {\n      var _this6 = this;\n\n      // we don't allow pools in a connecting state to be closed because it means there are far too many\n      // edge cases to deal with\n      if (this._connecting) {\n        debug('pool(%d): close called while connecting', IDS.get(this));\n        setImmediate(callback, new ConnectionError('Cannot close a pool while it is connecting'));\n      }\n\n      if (!this.pool) {\n        debug('pool(%d): already closed, executing close callback immediately', IDS.get(this));\n        return setImmediate(callback, null);\n      }\n\n      this._closeStack.push(callback);\n\n      if (this.pool.destroyed) return;\n      this._connecting = this._connected = this._healthy = false;\n      this.pool.destroy().then(function () {\n        debug('pool(%d): pool closed, removing pool reference and executing close callbacks', IDS.get(_this6));\n        _this6.pool = null;\n\n        _this6._closeStack.forEach(function (cb) {\n          setImmediate(cb, null);\n        });\n      }).catch(function (err) {\n        _this6.pool = null;\n\n        _this6._closeStack.forEach(function (cb) {\n          setImmediate(cb, err);\n        });\n      }).then(function () {\n        _this6._closeStack = [];\n      });\n    }\n    /**\r\n     * Returns new request using this connection.\r\n     *\r\n     * @return {Request}\r\n     */\n\n  }, {\n    key: \"request\",\n    value: function request() {\n      return new shared.driver.Request(this);\n    }\n    /**\r\n     * Returns new transaction using this connection.\r\n     *\r\n     * @return {Transaction}\r\n     */\n\n  }, {\n    key: \"transaction\",\n    value: function transaction() {\n      return new shared.driver.Transaction(this);\n    }\n    /**\r\n     * Creates a new query using this connection from a tagged template string.\r\n     *\r\n     * @variation 1\r\n     * @param {Array} strings Array of string literals.\r\n     * @param {...*} keys Values.\r\n     * @return {Request}\r\n     */\n\n    /**\r\n     * Execute the SQL command.\r\n     *\r\n     * @variation 2\r\n     * @param {String} command T-SQL command to be executed.\r\n     * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Request|Promise}\r\n     */\n\n  }, {\n    key: \"query\",\n    value: function query() {\n      if (typeof arguments[0] === 'string') {\n        return new shared.driver.Request(this).query(arguments[0], arguments[1]);\n      }\n\n      var values = Array.prototype.slice.call(arguments);\n      var strings = values.shift();\n      return new shared.driver.Request(this)._template(strings, values, 'query');\n    }\n    /**\r\n     * Creates a new batch using this connection from a tagged template string.\r\n     *\r\n     * @variation 1\r\n     * @param {Array} strings Array of string literals.\r\n     * @param {...*} keys Values.\r\n     * @return {Request}\r\n     */\n\n    /**\r\n     * Execute the SQL command.\r\n     *\r\n     * @variation 2\r\n     * @param {String} command T-SQL command to be executed.\r\n     * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n     * @return {Request|Promise}\r\n     */\n\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      if (typeof arguments[0] === 'string') {\n        return new shared.driver.Request(this).batch(arguments[0], arguments[1]);\n      }\n\n      var values = Array.prototype.slice.call(arguments);\n      var strings = values.shift();\n      return new shared.driver.Request(this)._template(strings, values, 'batch');\n    }\n  }]);\n\n  return ConnectionPool;\n}(EventEmitter);\n\nmodule.exports = ConnectionPool;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/lib/base/connection-pool.js"],"names":["require","EventEmitter","debug","parseSqlConnectionString","tarn","IDS","ConnectionError","shared","deepclone","ConnectionPool","config","callback","add","get","_connectStack","_closeStack","_connected","_connecting","_healthy","parseConnectionString","ex","setImmediate","port","options","stream","parseJSON","arrayRowMode","validateConnection","exec","server","RegExp","$1","instanceName","$2","connect","connectionString","_parseConnectionString","parsed","Object","entries","reduce","key","value","assign","readOnlyIntent","connectionTimeout","connectionRetryInterval","language","test","Error","substr","trim","parseInt","toLowerCase","encrypt","database","pool","max","min","multiSubnetFailover","packetSize","password","enableImplicitTransactions","trustServerCertificate","user","domain","workstationId","requestTimeout","useUTC","requester","acquirePromise","Promise","resolve","_acquire","promise","catch","err","emit","then","connection","reject","destroyed","acquire","release","_connect","push","_poolCreate","_poolDestroy","Pool","create","numUsed","numFree","validate","_poolValidate","bind","destroy","idleTimeoutMillis","propagateCreateError","self","defineProperties","size","message","process","emitWarning","available","pending","borrowed","forEach","cb","numPendingCreates","numPendingAcquires","_close","driver","Request","Transaction","arguments","query","values","Array","prototype","slice","call","strings","shift","_template","batch","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst { EventEmitter } = require('events')\r\nconst debug = require('debug')('mssql:base')\r\nconst { parseSqlConnectionString } = require('@tediousjs/connection-string')\r\nconst tarn = require('tarn')\r\nconst { IDS } = require('../utils')\r\nconst ConnectionError = require('../error/connection-error')\r\nconst shared = require('../shared')\r\nconst deepclone = require('rfdc/default')\r\n\r\n/**\r\n * Class ConnectionPool.\r\n *\r\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\r\n *\r\n * @property {Boolean} connected If true, connection is established.\r\n * @property {Boolean} connecting If true, connection is being established.\r\n *\r\n * @fires ConnectionPool#connect\r\n * @fires ConnectionPool#close\r\n */\r\n\r\nclass ConnectionPool extends EventEmitter {\r\n  /**\r\n   * Create new Connection.\r\n   *\r\n   * @param {Object|String} config Connection configuration object or connection string.\r\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\r\n   */\r\n\r\n  constructor (config, callback) {\r\n    super()\r\n\r\n    IDS.add(this, 'ConnectionPool')\r\n    debug('pool(%d): created', IDS.get(this))\r\n\r\n    this._connectStack = []\r\n    this._closeStack = []\r\n\r\n    this._connected = false\r\n    this._connecting = false\r\n    this._healthy = false\r\n\r\n    if (typeof config === 'string') {\r\n      try {\r\n        this.config = this.parseConnectionString(config)\r\n      } catch (ex) {\r\n        if (typeof callback === 'function') {\r\n          return setImmediate(callback, ex)\r\n        }\r\n        throw ex\r\n      }\r\n    } else {\r\n      this.config = deepclone(config)\r\n    }\r\n\r\n    // set defaults\r\n    this.config.port = this.config.port || 1433\r\n    this.config.options = this.config.options || {}\r\n    this.config.stream = this.config.stream || false\r\n    this.config.parseJSON = this.config.parseJSON || false\r\n    this.config.arrayRowMode = this.config.arrayRowMode || false\r\n    this.config.validateConnection = 'validateConnection' in this.config ? this.config.validateConnection : true\r\n\r\n    if (/^(.*)\\\\(.*)$/.exec(this.config.server)) {\r\n      this.config.server = RegExp.$1\r\n      this.config.options.instanceName = RegExp.$2\r\n    }\r\n\r\n    if (typeof callback === 'function') {\r\n      this.connect(callback)\r\n    }\r\n  }\r\n\r\n  get connected () {\r\n    return this._connected\r\n  }\r\n\r\n  get connecting () {\r\n    return this._connecting\r\n  }\r\n\r\n  get healthy () {\r\n    return this._healthy\r\n  }\r\n\r\n  parseConnectionString (connectionString) {\r\n    return this._parseConnectionString(connectionString)\r\n  }\r\n\r\n  _parseConnectionString (connectionString) {\r\n    const parsed = parseSqlConnectionString(connectionString, true, true)\r\n    return Object.entries(parsed).reduce((config, [key, value]) => {\r\n      switch (key) {\r\n        case 'application name':\r\n          break\r\n        case 'applicationintent':\r\n          Object.assign(config.options, {\r\n            readOnlyIntent: value === 'readonly'\r\n          })\r\n          break\r\n        case 'asynchronous processing':\r\n          break\r\n        case 'attachdbfilename':\r\n          break\r\n        case 'authentication':\r\n          break\r\n        case 'column encryption setting':\r\n          break\r\n        case 'connection timeout':\r\n          Object.assign(config, {\r\n            connectionTimeout: value * 1000\r\n          })\r\n          break\r\n        case 'connection lifetime':\r\n          break\r\n        case 'connectretrycount':\r\n          break\r\n        case 'connectretryinterval':\r\n          Object.assign(config.options, {\r\n            connectionRetryInterval: value * 1000\r\n          })\r\n          break\r\n        case 'context connection':\r\n          break\r\n        case 'current language':\r\n          Object.assign(config.options, {\r\n            language: value\r\n          })\r\n          break\r\n        case 'data source':\r\n        {\r\n          let server = value\r\n          let instanceName\r\n          let port = 1433\r\n          if (/^np:/i.test(server)) {\r\n            throw new Error('Connection via Named Pipes is not supported.')\r\n          }\r\n          if (/^tcp:/i.test(server)) {\r\n            server = server.substr(4)\r\n          }\r\n          if (/^(.*)\\\\(.*)$/.exec(server)) {\r\n            server = RegExp.$1\r\n            instanceName = RegExp.$2\r\n          }\r\n          if (/^(.*),(.*)$/.exec(server)) {\r\n            server = RegExp.$1.trim()\r\n            port = parseInt(RegExp.$2.trim(), 10)\r\n          }\r\n          if (server === '.' || server === '(.)' || server.toLowerCase() === '(localdb)' || server.toLowerCase() === '(local)') {\r\n            server = 'localhost'\r\n          }\r\n          Object.assign(config, {\r\n            port,\r\n            server\r\n          })\r\n          Object.assign(config.options, {\r\n            instanceName\r\n          })\r\n          break\r\n        }\r\n        case 'encrypt':\r\n          Object.assign(config.options, {\r\n            encrypt: !!value\r\n          })\r\n          break\r\n        case 'enlist':\r\n          break\r\n        case 'failover partner':\r\n          break\r\n        case 'initial catalog':\r\n          Object.assign(config, {\r\n            database: value\r\n          })\r\n          break\r\n        case 'integrated security':\r\n          break\r\n        case 'max pool size':\r\n          Object.assign(config.pool, {\r\n            max: value\r\n          })\r\n          break\r\n        case 'min pool size':\r\n          Object.assign(config.pool, {\r\n            min: value\r\n          })\r\n          break\r\n        case 'multipleactiveresultsets':\r\n          break\r\n        case 'multisubnetfailover':\r\n          Object.assign(config.options, {\r\n            multiSubnetFailover: value\r\n          })\r\n          break\r\n        case 'network library':\r\n          break\r\n        case 'packet size':\r\n          Object.assign(config.options, {\r\n            packetSize: value\r\n          })\r\n          break\r\n        case 'password':\r\n          Object.assign(config, {\r\n            password: value\r\n          })\r\n          break\r\n        case 'persist security info':\r\n          break\r\n        case 'poolblockingperiod':\r\n          break\r\n        case 'pooling':\r\n          break\r\n        case 'replication':\r\n          break\r\n        case 'transaction binding':\r\n          Object.assign(config.options, {\r\n            enableImplicitTransactions: value.toLowerCase() === 'implicit unbind'\r\n          })\r\n          break\r\n        case 'transparentnetworkipresolution':\r\n          break\r\n        case 'trustservercertificate':\r\n          Object.assign(config.options, {\r\n            trustServerCertificate: value\r\n          })\r\n          break\r\n        case 'type system version':\r\n          break\r\n        case 'user id': {\r\n          let user = value\r\n          let domain\r\n          if (/^(.*)\\\\(.*)$/.exec(user)) {\r\n            domain = RegExp.$1\r\n            user = RegExp.$2\r\n          }\r\n          Object.assign(config, {\r\n            domain,\r\n            user\r\n          })\r\n          break\r\n        }\r\n        case 'user instance':\r\n          break\r\n        case 'workstation id':\r\n          Object.assign(config.options, {\r\n            workstationId: value\r\n          })\r\n          break\r\n        case 'request timeout':\r\n          Object.assign(config, {\r\n            requestTimeout: parseInt(value, 10)\r\n          })\r\n          break\r\n        case 'stream':\r\n          Object.assign(config, {\r\n            stream: !!value\r\n          })\r\n          break\r\n        case 'useutc':\r\n          Object.assign(config.options, {\r\n            useUTC: !!value\r\n          })\r\n          break\r\n        case 'parsejson':\r\n          Object.assign(config, {\r\n            parseJSON: !!value\r\n          })\r\n          break\r\n      }\r\n      return config\r\n    }, { options: {}, pool: {} })\r\n  }\r\n\r\n  /**\r\n   * Acquire connection from this connection pool.\r\n   *\r\n   * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\r\n   * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\r\n   * @return {ConnectionPool|Promise}\r\n   */\r\n\r\n  acquire (requester, callback) {\r\n    const acquirePromise = shared.Promise.resolve(this._acquire().promise).catch(err => {\r\n      this.emit('error', err)\r\n      throw err\r\n    })\r\n    if (typeof callback === 'function') {\r\n      acquirePromise.then(connection => callback(null, connection, this.config)).catch(callback)\r\n      return this\r\n    }\r\n\r\n    return acquirePromise\r\n  }\r\n\r\n  _acquire () {\r\n    if (!this.pool) {\r\n      return shared.Promise.reject(new ConnectionError('Connection not yet open.', 'ENOTOPEN'))\r\n    } else if (this.pool.destroyed) {\r\n      return shared.Promise.reject(new ConnectionError('Connection is closing', 'ENOTOPEN'))\r\n    }\r\n\r\n    return this.pool.acquire()\r\n  }\r\n\r\n  /**\r\n   * Release connection back to the pool.\r\n   *\r\n   * @param {Connection} connection Previously acquired connection.\r\n   * @return {ConnectionPool}\r\n   */\r\n\r\n  release (connection) {\r\n    debug('connection(%d): released', IDS.get(connection))\r\n\r\n    if (this.pool) {\r\n      this.pool.release(connection)\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n   * @return {ConnectionPool|Promise}\r\n   */\r\n\r\n  connect (callback) {\r\n    if (typeof callback === 'function') {\r\n      this._connect(callback)\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      return this._connect(err => {\r\n        if (err) return reject(err)\r\n        resolve(this)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {basicCallback} callback\r\n   */\r\n\r\n  _connect (callback) {\r\n    if (this._connected) {\r\n      debug('pool(%d): already connected, executing connect callback immediately', IDS.get(this))\r\n      return setImmediate(callback, null, this)\r\n    }\r\n\r\n    this._connectStack.push(callback)\r\n\r\n    if (this._connecting) {\r\n      return\r\n    }\r\n\r\n    this._connecting = true\r\n    debug('pool(%d): connecting', IDS.get(this))\r\n\r\n    // create one test connection to check if everything is ok\r\n    this._poolCreate().then((connection) => {\r\n      debug('pool(%d): connected', IDS.get(this))\r\n      this._healthy = true\r\n\r\n      return this._poolDestroy(connection).then(() => {\r\n        // prepare pool\r\n        this.pool = new tarn.Pool(\r\n          Object.assign({\r\n            create: () => this._poolCreate()\r\n              .then(connection => {\r\n                this._healthy = true\r\n                return connection\r\n              })\r\n              .catch(err => {\r\n                if (this.pool.numUsed() + this.pool.numFree() <= 0) {\r\n                  this._healthy = false\r\n                }\r\n                throw err\r\n              }),\r\n            validate: this._poolValidate.bind(this),\r\n            destroy: this._poolDestroy.bind(this),\r\n            max: 10,\r\n            min: 0,\r\n            idleTimeoutMillis: 30000,\r\n            propagateCreateError: true\r\n          }, this.config.pool)\r\n        )\r\n        const self = this\r\n        Object.defineProperties(this.pool, {\r\n          size: {\r\n            get: () => {\r\n              const message = 'the `size` property on pool is deprecated, access it directly on the `ConnectionPool`'\r\n              self.emit('debug', message)\r\n              process.emitWarning(message)\r\n              return self.size\r\n            }\r\n          },\r\n          available: {\r\n            get: () => {\r\n              const message = 'the `available` property on pool is deprecated, access it directly on the `ConnectionPool`'\r\n              self.emit('debug', message)\r\n              process.emitWarning(message)\r\n              return self.available\r\n            }\r\n          },\r\n          pending: {\r\n            get: () => {\r\n              const message = 'the `pending` property on pool is deprecate, access it directly on the `ConnectionPool`'\r\n              self.emit('debug', message)\r\n              process.emitWarning(message)\r\n              return self.pending\r\n            }\r\n          },\r\n          borrowed: {\r\n            get: () => {\r\n              const message = 'the `borrowed` property on pool is deprecated, access it directly on the `ConnectionPool`'\r\n              self.emit('debug', message)\r\n              process.emitWarning(message)\r\n              return self.borrowed\r\n            }\r\n          }\r\n        })\r\n\r\n        this._connecting = false\r\n        this._connected = true\r\n      })\r\n    }).then(() => {\r\n      this._connectStack.forEach((cb) => {\r\n        setImmediate(cb, null, this)\r\n      })\r\n    }).catch(err => {\r\n      this._connecting = false\r\n      this._connectStack.forEach((cb) => {\r\n        setImmediate(cb, err)\r\n      })\r\n    }).then(() => {\r\n      this._connectStack = []\r\n    })\r\n  }\r\n\r\n  get size () {\r\n    return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates()\r\n  }\r\n\r\n  get available () {\r\n    return this.pool.numFree()\r\n  }\r\n\r\n  get pending () {\r\n    return this.pool.numPendingAcquires()\r\n  }\r\n\r\n  get borrowed () {\r\n    return this.pool.numUsed()\r\n  }\r\n\r\n  /**\r\n   * Close all active connections in the pool.\r\n   *\r\n   * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {ConnectionPool|Promise}\r\n   */\r\n\r\n  close (callback) {\r\n    if (typeof callback === 'function') {\r\n      this._close(callback)\r\n      return this\r\n    }\r\n\r\n    return new shared.Promise((resolve, reject) => {\r\n      this._close(err => {\r\n        if (err) return reject(err)\r\n        resolve(this)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {basicCallback} callback\r\n   */\r\n\r\n  _close (callback) {\r\n    // we don't allow pools in a connecting state to be closed because it means there are far too many\r\n    // edge cases to deal with\r\n    if (this._connecting) {\r\n      debug('pool(%d): close called while connecting', IDS.get(this))\r\n      setImmediate(callback, new ConnectionError('Cannot close a pool while it is connecting'))\r\n    }\r\n\r\n    if (!this.pool) {\r\n      debug('pool(%d): already closed, executing close callback immediately', IDS.get(this))\r\n      return setImmediate(callback, null)\r\n    }\r\n\r\n    this._closeStack.push(callback)\r\n\r\n    if (this.pool.destroyed) return\r\n\r\n    this._connecting = this._connected = this._healthy = false\r\n\r\n    this.pool.destroy().then(() => {\r\n      debug('pool(%d): pool closed, removing pool reference and executing close callbacks', IDS.get(this))\r\n      this.pool = null\r\n      this._closeStack.forEach(cb => {\r\n        setImmediate(cb, null)\r\n      })\r\n    }).catch(err => {\r\n      this.pool = null\r\n      this._closeStack.forEach(cb => {\r\n        setImmediate(cb, err)\r\n      })\r\n    }).then(() => {\r\n      this._closeStack = []\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns new request using this connection.\r\n   *\r\n   * @return {Request}\r\n   */\r\n\r\n  request () {\r\n    return new shared.driver.Request(this)\r\n  }\r\n\r\n  /**\r\n   * Returns new transaction using this connection.\r\n   *\r\n   * @return {Transaction}\r\n   */\r\n\r\n  transaction () {\r\n    return new shared.driver.Transaction(this)\r\n  }\r\n\r\n  /**\r\n   * Creates a new query using this connection from a tagged template string.\r\n   *\r\n   * @variation 1\r\n   * @param {Array} strings Array of string literals.\r\n   * @param {...*} keys Values.\r\n   * @return {Request}\r\n   */\r\n\r\n  /**\r\n   * Execute the SQL command.\r\n   *\r\n   * @variation 2\r\n   * @param {String} command T-SQL command to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  query () {\r\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).query(arguments[0], arguments[1]) }\r\n\r\n    const values = Array.prototype.slice.call(arguments)\r\n    const strings = values.shift()\r\n\r\n    return new shared.driver.Request(this)._template(strings, values, 'query')\r\n  }\r\n\r\n  /**\r\n   * Creates a new batch using this connection from a tagged template string.\r\n   *\r\n   * @variation 1\r\n   * @param {Array} strings Array of string literals.\r\n   * @param {...*} keys Values.\r\n   * @return {Request}\r\n   */\r\n\r\n  /**\r\n   * Execute the SQL command.\r\n   *\r\n   * @variation 2\r\n   * @param {String} command T-SQL command to be executed.\r\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n   * @return {Request|Promise}\r\n   */\r\n\r\n  batch () {\r\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).batch(arguments[0], arguments[1]) }\r\n\r\n    const values = Array.prototype.slice.call(arguments)\r\n    const strings = values.shift()\r\n\r\n    return new shared.driver.Request(this)._template(strings, values, 'batch')\r\n  }\r\n}\r\n\r\nmodule.exports = ConnectionPool\r\n"]},"metadata":{},"sourceType":"script"}
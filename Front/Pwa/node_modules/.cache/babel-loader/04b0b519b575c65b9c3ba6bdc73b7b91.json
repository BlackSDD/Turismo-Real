{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _toConsumableArray = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _constants = _interopRequireDefault(require(\"constants\"));\n\nvar _tls = require(\"tls\");\n\nvar _stream = require(\"stream\");\n\nvar _msRestNodeauth = require(\"@azure/ms-rest-nodeauth\");\n\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\n\nvar _debug = _interopRequireDefault(require(\"./debug\"));\n\nvar _events = require(\"events\");\n\nvar _instanceLookup = require(\"./instance-lookup\");\n\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\n\nvar _packet = require(\"./packet\");\n\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\n\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\n\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\n\nvar _request = _interopRequireDefault(require(\"./request\"));\n\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\n\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\n\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\n\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\n\nvar _transaction = require(\"./transaction\");\n\nvar _errors = require(\"./errors\");\n\nvar _connector = require(\"./connector\");\n\nvar _library = require(\"./library\");\n\nvar _tdsVersions = require(\"./tds-versions\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _ntlm = require(\"./ntlm\");\n\nvar _depd = _interopRequireDefault(require(\"depd\"));\n\nvar _adalNode = require(\"adal-node\");\n\nvar _nodeAbortController = _interopRequireDefault(require(\"node-abort-controller\"));\n\nvar _dataType = require(\"./data-type\");\n\nvar _bulkLoadPayload = require(\"./bulk-load-payload\");\n\nvar _package = require(\"../package.json\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nvar deprecate = (0, _depd.default)('tedious');\n/**\r\n * @private\r\n */\n\nvar KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\r\n * @private\r\n */\n\nvar DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\r\n * @private\r\n */\n\nvar DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\r\n * @private\r\n */\n\nvar DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\r\n * @private\r\n */\n\nvar DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\r\n * @private\r\n */\n\nvar DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\r\n * @private\r\n */\n\nvar DEFAULT_TEXTSIZE = 2147483647;\n/**\r\n * @private\r\n */\n\nvar DEFAULT_DATEFIRST = 7;\n/**\r\n * @private\r\n */\n\nvar DEFAULT_PORT = 1433;\n/**\r\n * @private\r\n */\n\nvar DEFAULT_TDS_VERSION = '7_4';\n/**\r\n * @private\r\n */\n\nvar DEFAULT_LANGUAGE = 'us_english';\n/**\r\n * @private\r\n */\n\nvar DEFAULT_DATEFORMAT = 'mdy';\n/**\r\n * @private\r\n */\n\nvar CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n/**\r\n * A [[Connection]] instance represents a single connection to a database server.\r\n *\r\n * ```js\r\n * var Connection = require('tedious').Connection;\r\n * var config = {\r\n *  \"authentication\": {\r\n *    ...,\r\n *    \"options\": {...}\r\n *  },\r\n *  \"options\": {...}\r\n * };\r\n * var connection = new Connection(config);\r\n * ```\r\n *\r\n * Only one request at a time may be executed on a connection. Once a [[Request]]\r\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\r\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\r\n * [[Request]]'s completion callback is called.\r\n */\n\nvar Connection = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(Connection, _events$EventEmitter);\n\n  var _super = _createSuper(Connection);\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * @private\r\n   */\n\n  /**\r\n   * Note: be aware of the different options field:\r\n   * 1. config.authentication.options\r\n   * 2. config.options\r\n   *\r\n   * ```js\r\n   * const { Connection } = require('tedious');\r\n   *\r\n   * const config = {\r\n   *  \"authentication\": {\r\n   *    ...,\r\n   *    \"options\": {...}\r\n   *  },\r\n   *  \"options\": {...}\r\n   * };\r\n   *\r\n   * const connection = new Connection(config);\r\n   * ```\r\n   *\r\n   * @param config\r\n   */\n  function Connection(config) {\n    var _this;\n\n    _classCallCheck(this, Connection);\n\n    _this = _super.call(this);\n    _this.fedAuthRequired = void 0;\n    _this.fedAuthInfoToken = void 0;\n    _this.config = void 0;\n    _this.secureContext = void 0;\n    _this.inTransaction = void 0;\n    _this.transactionDescriptors = void 0;\n    _this.transactionDepth = void 0;\n    _this.isSqlBatch = void 0;\n    _this.curTransientRetryCount = void 0;\n    _this.transientErrorLookup = void 0;\n    _this.closed = void 0;\n    _this.loggedIn = void 0;\n    _this.loginError = void 0;\n    _this.debug = void 0;\n    _this.ntlmpacket = void 0;\n    _this.ntlmpacketBuffer = void 0;\n    _this.routingData = void 0;\n    _this.messageIo = void 0;\n    _this.state = void 0;\n    _this.resetConnectionOnNextRequest = void 0;\n    _this.attentionReceived = void 0;\n    _this.request = void 0;\n    _this.procReturnStatusValue = void 0;\n    _this.socket = void 0;\n    _this.messageBuffer = void 0;\n    _this.connectTimer = void 0;\n    _this.cancelTimer = void 0;\n    _this.requestTimer = void 0;\n    _this.retryTimer = void 0;\n    _this._cancelAfterRequestSent = void 0;\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    _this.fedAuthRequired = false;\n    _this.fedAuthInfoToken = undefined;\n    var authentication;\n\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      var type = config.authentication.type;\n      var options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        if (options.msiSecret !== undefined && typeof options.msiSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiSecret\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint,\n            msiSecret: options.msiSecret\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    _this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,\n        // Units: miliseconds\n        columnEncryptionSetting: false,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        encryptionKeyStoreProviders: undefined,\n        instanceName: undefined,\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        serverName: undefined,\n        serverSupportsColumnEncryption: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustedServerNameAE: undefined,\n        trustServerCertificate: true,\n        useColumnNames: false,\n        useUTC: true,\n        validateBulkLoadParameters: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        _this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        _this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        _this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        _this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        _this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        _this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n        _this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        _this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        _this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        _this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        _this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        _this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          _this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          _this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          _this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          _this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        _this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n\n        _this.config.options.encrypt = config.options.encrypt;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        _this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        _this.config.options.instanceName = config.options.instanceName;\n        _this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.isolationLevel, 'config.options.isolationLevel');\n        _this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        _this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        _this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        _this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        _this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        _this.config.options.port = config.options.port;\n        _this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        _this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        _this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        _this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        _this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        _this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        _this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        _this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        if (config.options.textsize > 2147483647) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\n        } else if (config.options.textsize < -1) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\n        }\n\n        _this.config.options.textsize = config.options.textsize | 0;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        _this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        _this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        _this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.validateBulkLoadParameters !== undefined) {\n        if (typeof config.options.validateBulkLoadParameters !== 'boolean') {\n          throw new TypeError('The \"config.options.validateBulkLoadParameters\" property must be of type boolean.');\n        }\n\n        if (config.options.validateBulkLoadParameters === false) {\n          deprecate('Setting the \"config.options.validateBulkLoadParameters\" to `false` is deprecated and will no longer work in the next major version of `tedious`. Set the value to `true` and update your use of BulkLoad functionality to silence this message.');\n        }\n\n        _this.config.options.validateBulkLoadParameters = config.options.validateBulkLoadParameters;\n      }\n\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n\n        _this.config.options.workstationId = config.options.workstationId;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        _this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    var credentialsDetails = _this.config.options.cryptoCredentialsDetails;\n\n    if (credentialsDetails.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      credentialsDetails = Object.create(credentialsDetails, {\n        secureOptions: {\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    _this.secureContext = (0, _tls.createSecureContext)(credentialsDetails);\n    _this.debug = _this.createDebug();\n    _this.inTransaction = false;\n    _this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n\n    _this.transactionDepth = 0;\n    _this.isSqlBatch = false;\n    _this.closed = false;\n    _this.loggedIn = false;\n    _this.messageBuffer = Buffer.alloc(0);\n    _this.curTransientRetryCount = 0;\n    _this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\n    _this.state = _this.STATE.INITIALIZED;\n\n    _this._cancelAfterRequestSent = function () {\n      _this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\n\n      _this.transitionTo(_this.STATE.SENT_ATTENTION);\n\n      _this.createCancelTimer();\n    };\n\n    return _this;\n  }\n\n  _createClass(Connection, [{\n    key: \"connect\",\n    value: function connect(connectListener) {\n      var _this2 = this;\n\n      if (this.state !== this.STATE.INITIALIZED) {\n        throw new _errors.ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n      }\n\n      if (connectListener) {\n        var onConnect = function onConnect(err) {\n          _this2.removeListener('error', onError);\n\n          connectListener(err);\n        };\n\n        var onError = function onError(err) {\n          _this2.removeListener('connect', onConnect);\n\n          connectListener(err);\n        };\n\n        this.once('connect', onConnect);\n        this.once('error', onError);\n      }\n\n      this.transitionTo(this.STATE.CONNECTING);\n    }\n    /**\r\n     * The server has reported that the charset has changed.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      return _get(_getPrototypeOf(Connection.prototype), \"on\", this).call(this, event, listener);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(Connection.prototype), \"emit\", this)).call.apply(_get2, [this, event].concat(args));\n    }\n    /**\r\n     * Closes the connection to the database.\r\n     *\r\n     * The [[Event_end]] will be emitted once the connection has been closed.\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.transitionTo(this.STATE.FINAL);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"initialiseConnection\",\n    value: function initialiseConnection() {\n      var _this3 = this;\n\n      var signal = this.createConnectTimer();\n\n      if (this.config.options.port) {\n        return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal);\n      } else {\n        return new _instanceLookup.InstanceLookup().instanceLookup({\n          server: this.config.server,\n          instanceName: this.config.options.instanceName,\n          timeout: this.config.options.connectTimeout,\n          signal: signal\n        }, function (err, port) {\n          if (err) {\n            if (err.name === 'AbortError') {\n              return;\n            }\n\n            _this3.emit('connect', (0, _errors.ConnectionError)(err.message, 'EINSTLOOKUP'));\n          } else {\n            _this3.connectOnPort(port, _this3.config.options.multiSubnetFailover, signal);\n          }\n        });\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"cleanupConnection\",\n    value: function cleanupConnection(cleanupType) {\n      var _this4 = this;\n\n      if (!this.closed) {\n        this.clearConnectTimer();\n        this.clearRequestTimer();\n        this.clearRetryTimer();\n        this.closeConnection();\n\n        if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n          this.emit('rerouting');\n        } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n          process.nextTick(function () {\n            _this4.emit('end');\n          });\n        }\n\n        var request = this.request;\n\n        if (request) {\n          var err = (0, _errors.RequestError)('Connection closed before request completed.', 'ECLOSE');\n          request.callback(err);\n          this.request = undefined;\n        }\n\n        this.closed = true;\n        this.loggedIn = false;\n        this.loginError = undefined;\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"createDebug\",\n    value: function createDebug() {\n      var _this5 = this;\n\n      var debug = new _debug.default(this.config.options.debug);\n      debug.on('debug', function (message) {\n        _this5.emit('debug', message);\n      });\n      return debug;\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"createTokenStreamParser\",\n    value: function createTokenStreamParser(message) {\n      var _this6 = this;\n\n      var tokenStreamParser = new _tokenStreamParser.Parser(message, this.debug, this.config.options);\n      tokenStreamParser.on('infoMessage', function (token) {\n        _this6.emit('infoMessage', token);\n      });\n      tokenStreamParser.on('sspichallenge', function (token) {\n        if (token.ntlmpacket) {\n          _this6.ntlmpacket = token.ntlmpacket;\n          _this6.ntlmpacketBuffer = token.ntlmpacketBuffer;\n        }\n\n        _this6.emit('sspichallenge', token);\n      });\n      tokenStreamParser.on('errorMessage', function (token) {\n        _this6.emit('errorMessage', token);\n\n        if (_this6.loggedIn) {\n          var request = _this6.request;\n\n          if (request) {\n            if (!request.canceled) {\n              var error = new _errors.RequestError(token.message, 'EREQUEST');\n              error.number = token.number;\n              error.state = token.state;\n              error.class = token.class;\n              error.serverName = token.serverName;\n              error.procName = token.procName;\n              error.lineNumber = token.lineNumber;\n              request.error = error;\n            }\n          }\n        } else {\n          var _error = (0, _errors.ConnectionError)(token.message, 'ELOGIN');\n\n          var isLoginErrorTransient = _this6.transientErrorLookup.isTransientError(token.number);\n\n          if (isLoginErrorTransient && _this6.curTransientRetryCount !== _this6.config.options.maxRetriesOnTransientErrors) {\n            _error.isTransient = true;\n          }\n\n          _this6.loginError = _error;\n        }\n      });\n      tokenStreamParser.on('databaseChange', function (token) {\n        _this6.emit('databaseChange', token.newValue);\n      });\n      tokenStreamParser.on('languageChange', function (token) {\n        _this6.emit('languageChange', token.newValue);\n      });\n      tokenStreamParser.on('charsetChange', function (token) {\n        _this6.emit('charsetChange', token.newValue);\n      });\n      tokenStreamParser.on('fedAuthInfo', function (token) {\n        _this6.dispatchEvent('fedAuthInfo', token);\n      });\n      tokenStreamParser.on('featureExtAck', function (token) {\n        _this6.dispatchEvent('featureExtAck', token);\n      });\n      tokenStreamParser.on('loginack', function (token) {\n        if (!token.tdsVersion) {\n          // unsupported TDS version\n          _this6.loginError = (0, _errors.ConnectionError)('Server responded with unknown TDS version.', 'ETDS');\n          _this6.loggedIn = false;\n          return;\n        }\n\n        if (!token.interface) {\n          // unsupported interface\n          _this6.loginError = (0, _errors.ConnectionError)('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n          _this6.loggedIn = false;\n          return;\n        } // use negotiated version\n\n\n        _this6.config.options.tdsVersion = token.tdsVersion;\n        _this6.loggedIn = true;\n      });\n      tokenStreamParser.on('routingChange', function (token) {\n        // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\n        var _token$newValue$serve = token.newValue.server.split('\\\\'),\n            _token$newValue$serve2 = _slicedToArray(_token$newValue$serve, 1),\n            server = _token$newValue$serve2[0];\n\n        _this6.routingData = {\n          server: server,\n          port: token.newValue.port\n        };\n      });\n      tokenStreamParser.on('packetSizeChange', function (token) {\n        _this6.messageIo.packetSize(token.newValue);\n      }); // A new top-level transaction was started. This is not fired\n      // for nested transactions.\n\n      tokenStreamParser.on('beginTransaction', function (token) {\n        _this6.transactionDescriptors.push(token.newValue);\n\n        _this6.inTransaction = true;\n      }); // A top-level transaction was committed. This is not fired\n      // for nested transactions.\n\n      tokenStreamParser.on('commitTransaction', function () {\n        _this6.transactionDescriptors.length = 1;\n        _this6.inTransaction = false;\n      }); // A top-level transaction was rolled back. This is not fired\n      // for nested transactions. This is also fired if a batch\n      // aborting error happened that caused a rollback.\n\n      tokenStreamParser.on('rollbackTransaction', function () {\n        _this6.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n        _this6.inTransaction = false;\n\n        _this6.emit('rollbackTransaction');\n      });\n      tokenStreamParser.on('columnMetadata', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            if (_this6.config.options.useColumnNames) {\n              var columns = {};\n\n              for (var j = 0, len = token.columns.length; j < len; j++) {\n                var col = token.columns[j];\n\n                if (columns[col.colName] == null) {\n                  columns[col.colName] = col;\n                }\n              }\n\n              request.emit('columnMetadata', columns);\n            } else {\n              request.emit('columnMetadata', token.columns);\n            }\n          }\n        } else {\n          _this6.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n\n          _this6.close();\n        }\n      });\n      tokenStreamParser.on('order', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            request.emit('order', token.orderColumns);\n          }\n        } else {\n          _this6.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n\n          _this6.close();\n        }\n      });\n      tokenStreamParser.on('row', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            if (_this6.config.options.rowCollectionOnRequestCompletion) {\n              request.rows.push(token.columns);\n            }\n\n            if (_this6.config.options.rowCollectionOnDone) {\n              request.rst.push(token.columns);\n            }\n\n            if (!request.canceled) {\n              request.emit('row', token.columns);\n            }\n          }\n        } else {\n          _this6.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n\n          _this6.close();\n        }\n      });\n      tokenStreamParser.on('returnStatus', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            // Keep value for passing in 'doneProc' event.\n            _this6.procReturnStatusValue = token.value;\n          }\n        }\n      });\n      tokenStreamParser.on('returnValue', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            request.emit('returnValue', token.paramName, token.value, token.metadata);\n          }\n        }\n      });\n      tokenStreamParser.on('doneProc', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            request.emit('doneProc', token.rowCount, token.more, _this6.procReturnStatusValue, request.rst);\n            _this6.procReturnStatusValue = undefined;\n\n            if (token.rowCount !== undefined) {\n              request.rowCount += token.rowCount;\n            }\n\n            if (_this6.config.options.rowCollectionOnDone) {\n              request.rst = [];\n            }\n          }\n        }\n      });\n      tokenStreamParser.on('doneInProc', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (!request.canceled) {\n            request.emit('doneInProc', token.rowCount, token.more, request.rst);\n\n            if (token.rowCount !== undefined) {\n              request.rowCount += token.rowCount;\n            }\n\n            if (_this6.config.options.rowCollectionOnDone) {\n              request.rst = [];\n            }\n          }\n        }\n      });\n      tokenStreamParser.on('done', function (token) {\n        var request = _this6.request;\n\n        if (request) {\n          if (token.attention) {\n            _this6.dispatchEvent('attention');\n          }\n\n          if (!request.canceled) {\n            if (token.sqlError && !request.error) {\n              // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n              request.error = (0, _errors.RequestError)('An unknown error has occurred.', 'UNKNOWN');\n            }\n\n            request.emit('done', token.rowCount, token.more, request.rst);\n\n            if (token.rowCount !== undefined) {\n              request.rowCount += token.rowCount;\n            }\n\n            if (_this6.config.options.rowCollectionOnDone) {\n              request.rst = [];\n            }\n          }\n        }\n      });\n      tokenStreamParser.on('resetConnection', function () {\n        _this6.emit('resetConnection');\n      });\n      return tokenStreamParser;\n    }\n  }, {\n    key: \"connectOnPort\",\n    value: function connectOnPort(port, multiSubnetFailover, signal) {\n      var _this7 = this;\n\n      var connectOpts = {\n        host: this.routingData ? this.routingData.server : this.config.server,\n        port: this.routingData ? this.routingData.port : port,\n        localAddress: this.config.options.localAddress\n      };\n      new _connector.Connector(connectOpts, signal, multiSubnetFailover).execute(function (err, socket) {\n        if (err) {\n          if (err.name === 'AbortError') {\n            return;\n          }\n\n          return _this7.socketError(err);\n        }\n\n        socket = socket;\n        socket.on('error', function (error) {\n          _this7.socketError(error);\n        });\n        socket.on('close', function () {\n          _this7.socketClose();\n        });\n        socket.on('end', function () {\n          _this7.socketEnd();\n        });\n        socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n        _this7.messageIo = new _messageIo.default(socket, _this7.config.options.packetSize, _this7.debug);\n\n        _this7.messageIo.on('data', function (message) {\n          _this7.dispatchEvent('message', message);\n        });\n\n        _this7.messageIo.on('secure', function (cleartext) {\n          _this7.emit('secure', cleartext);\n        });\n\n        _this7.messageIo.on('error', function (error) {\n          _this7.socketError(error);\n        });\n\n        _this7.socket = socket;\n\n        _this7.socketConnect();\n      });\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"closeConnection\",\n    value: function closeConnection() {\n      if (this.socket) {\n        this.socket.destroy();\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"createConnectTimer\",\n    value: function createConnectTimer() {\n      var _this8 = this;\n\n      var controller = new _nodeAbortController.default();\n      this.connectTimer = setTimeout(function () {\n        controller.abort();\n\n        _this8.connectTimeout();\n      }, this.config.options.connectTimeout);\n      return controller.signal;\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"createCancelTimer\",\n    value: function createCancelTimer() {\n      var _this9 = this;\n\n      this.clearCancelTimer();\n      var timeout = this.config.options.cancelTimeout;\n\n      if (timeout > 0) {\n        this.cancelTimer = setTimeout(function () {\n          _this9.cancelTimeout();\n        }, timeout);\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"createRequestTimer\",\n    value: function createRequestTimer() {\n      var _this10 = this;\n\n      this.clearRequestTimer(); // release old timer, just to be safe\n\n      var request = this.request;\n      var timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n\n      if (timeout) {\n        this.requestTimer = setTimeout(function () {\n          _this10.requestTimeout();\n        }, timeout);\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"createRetryTimer\",\n    value: function createRetryTimer() {\n      var _this11 = this;\n\n      this.clearRetryTimer();\n      this.retryTimer = setTimeout(function () {\n        _this11.retryTimeout();\n      }, this.config.options.connectionRetryInterval);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"connectTimeout\",\n    value: function connectTimeout() {\n      var message = \"Failed to connect to \".concat(this.config.server).concat(this.config.options.port ? \":\".concat(this.config.options.port) : \"\\\\\".concat(this.config.options.instanceName), \" in \").concat(this.config.options.connectTimeout, \"ms\");\n      this.debug.log(message);\n      this.emit('connect', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n      this.connectTimer = undefined;\n      this.dispatchEvent('connectTimeout');\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"cancelTimeout\",\n    value: function cancelTimeout() {\n      var message = \"Failed to cancel request in \".concat(this.config.options.cancelTimeout, \"ms\");\n      this.debug.log(message);\n      this.dispatchEvent('socketError', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"requestTimeout\",\n    value: function requestTimeout() {\n      this.requestTimer = undefined;\n      var request = this.request;\n      request.cancel();\n      var timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n      var message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n      request.error = (0, _errors.RequestError)(message, 'ETIMEOUT');\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"retryTimeout\",\n    value: function retryTimeout() {\n      this.retryTimer = undefined;\n      this.emit('retry');\n      this.transitionTo(this.STATE.CONNECTING);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"clearConnectTimer\",\n    value: function clearConnectTimer() {\n      if (this.connectTimer) {\n        clearTimeout(this.connectTimer);\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"clearCancelTimer\",\n    value: function clearCancelTimer() {\n      if (this.cancelTimer) {\n        clearTimeout(this.cancelTimer);\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"clearRequestTimer\",\n    value: function clearRequestTimer() {\n      if (this.requestTimer) {\n        clearTimeout(this.requestTimer);\n        this.requestTimer = undefined;\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"clearRetryTimer\",\n    value: function clearRetryTimer() {\n      if (this.retryTimer) {\n        clearTimeout(this.retryTimer);\n        this.retryTimer = undefined;\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"transitionTo\",\n    value: function transitionTo(newState) {\n      if (this.state === newState) {\n        this.debug.log('State is already ' + newState.name);\n        return;\n      }\n\n      if (this.state && this.state.exit) {\n        this.state.exit.call(this, newState);\n      }\n\n      this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n      this.state = newState;\n\n      if (this.state.enter) {\n        this.state.enter.apply(this);\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"getEventHandler\",\n    value: function getEventHandler(eventName) {\n      var handler = this.state.events[eventName];\n\n      if (!handler) {\n        throw new Error(\"No event '\".concat(eventName, \"' in state '\").concat(this.state.name, \"'\"));\n      }\n\n      return handler;\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(eventName) {\n      var handler = this.state.events[eventName];\n\n      if (handler) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        handler.apply(this, args);\n      } else {\n        this.emit('error', new Error(\"No event '\".concat(eventName, \"' in state '\").concat(this.state.name, \"'\")));\n        this.close();\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"socketError\",\n    value: function socketError(error) {\n      if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n        var message = \"Failed to connect to \".concat(this.config.server, \":\").concat(this.config.options.port, \" - \").concat(error.message);\n        this.debug.log(message);\n        this.emit('connect', (0, _errors.ConnectionError)(message, 'ESOCKET'));\n      } else {\n        var _message2 = \"Connection lost - \".concat(error.message);\n\n        this.debug.log(_message2);\n        this.emit('error', (0, _errors.ConnectionError)(_message2, 'ESOCKET'));\n      }\n\n      this.dispatchEvent('socketError', error);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"socketConnect\",\n    value: function socketConnect() {\n      this.closed = false;\n      this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n      this.dispatchEvent('socketConnect');\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"socketEnd\",\n    value: function socketEnd() {\n      this.debug.log('socket ended');\n\n      if (this.state !== this.STATE.FINAL) {\n        var error = new Error('socket hang up');\n        error.code = 'ECONNRESET';\n        this.socketError(error);\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"socketClose\",\n    value: function socketClose() {\n      this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n\n      if (this.state === this.STATE.REROUTING) {\n        this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\n        this.dispatchEvent('reconnect');\n      } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n        var server = this.routingData ? this.routingData.server : this.config.server;\n        var port = this.routingData ? this.routingData.port : this.config.options.port;\n        this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n        this.dispatchEvent('retry');\n      } else {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"sendPreLogin\",\n    value: function sendPreLogin() {\n      var _$exec;\n\n      var _ref = (_$exec = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(_package.version)) !== null && _$exec !== void 0 ? _$exec : ['0.0.0', '0', '0', '0'],\n          _ref2 = _slicedToArray(_ref, 4),\n          major = _ref2[1],\n          minor = _ref2[2],\n          build = _ref2[3];\n\n      var payload = new _preloginPayload.default({\n        encrypt: this.config.options.encrypt,\n        version: {\n          major: Number(major),\n          minor: Number(minor),\n          build: Number(build),\n          subbuild: 0\n        }\n      });\n      this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\n      this.debug.payload(function () {\n        return payload.toString('  ');\n      });\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"emptyMessageBuffer\",\n    value: function emptyMessageBuffer() {\n      this.messageBuffer = Buffer.alloc(0);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"addToMessageBuffer\",\n    value: function addToMessageBuffer(data) {\n      this.messageBuffer = Buffer.concat([this.messageBuffer, data]);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"sendLogin7Packet\",\n    value: function sendLogin7Packet() {\n      var payload = new _login7Payload.default({\n        tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\n        packetSize: this.config.options.packetSize,\n        clientProgVer: 0,\n        clientPid: process.pid,\n        connectionId: 0,\n        clientTimeZone: new Date().getTimezoneOffset(),\n        clientLcid: 0x00000409\n      });\n      var authentication = this.config.authentication;\n\n      switch (authentication.type) {\n        case 'azure-active-directory-password':\n          payload.fedAuth = {\n            type: 'ADAL',\n            echo: this.fedAuthRequired,\n            workflow: 'default'\n          };\n          break;\n\n        case 'azure-active-directory-access-token':\n          payload.fedAuth = {\n            type: 'SECURITYTOKEN',\n            echo: this.fedAuthRequired,\n            fedAuthToken: authentication.options.token\n          };\n          break;\n\n        case 'azure-active-directory-msi-vm':\n        case 'azure-active-directory-msi-app-service':\n        case 'azure-active-directory-service-principal-secret':\n          payload.fedAuth = {\n            type: 'ADAL',\n            echo: this.fedAuthRequired,\n            workflow: 'integrated'\n          };\n          break;\n\n        case 'ntlm':\n          payload.sspi = (0, _ntlm.createNTLMRequest)({\n            domain: authentication.options.domain\n          });\n          break;\n\n        default:\n          payload.userName = authentication.options.userName;\n          payload.password = authentication.options.password;\n      }\n\n      payload.hostname = this.config.options.workstationId || _os.default.hostname();\n      payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n      payload.appName = this.config.options.appName || 'Tedious';\n      payload.libraryName = _library.name;\n      payload.language = this.config.options.language;\n      payload.database = this.config.options.database;\n      payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n      payload.readOnlyIntent = this.config.options.readOnlyIntent;\n      payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n      this.routingData = undefined;\n      this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\n      this.debug.payload(function () {\n        return payload.toString('  ');\n      });\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"sendFedAuthTokenMessage\",\n    value: function sendFedAuthTokenMessage(token) {\n      var accessTokenLen = Buffer.byteLength(token, 'ucs2');\n      var data = Buffer.alloc(8 + accessTokenLen);\n      var offset = 0;\n      offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n      offset = data.writeUInt32LE(accessTokenLen, offset);\n      data.write(token, offset, 'ucs2');\n      this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\n\n      this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"sendInitialSql\",\n    value: function sendInitialSql() {\n      var payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n      var message = new _message.default({\n        type: _packet.TYPE.SQL_BATCH\n      });\n      this.messageIo.outgoingMessageStream.write(message);\n\n      _stream.Readable.from(payload).pipe(message);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"getInitialSql\",\n    value: function getInitialSql() {\n      var options = [];\n\n      if (this.config.options.enableAnsiNull === true) {\n        options.push('set ansi_nulls on');\n      } else if (this.config.options.enableAnsiNull === false) {\n        options.push('set ansi_nulls off');\n      }\n\n      if (this.config.options.enableAnsiNullDefault === true) {\n        options.push('set ansi_null_dflt_on on');\n      } else if (this.config.options.enableAnsiNullDefault === false) {\n        options.push('set ansi_null_dflt_on off');\n      }\n\n      if (this.config.options.enableAnsiPadding === true) {\n        options.push('set ansi_padding on');\n      } else if (this.config.options.enableAnsiPadding === false) {\n        options.push('set ansi_padding off');\n      }\n\n      if (this.config.options.enableAnsiWarnings === true) {\n        options.push('set ansi_warnings on');\n      } else if (this.config.options.enableAnsiWarnings === false) {\n        options.push('set ansi_warnings off');\n      }\n\n      if (this.config.options.enableArithAbort === true) {\n        options.push('set arithabort on');\n      } else if (this.config.options.enableArithAbort === false) {\n        options.push('set arithabort off');\n      }\n\n      if (this.config.options.enableConcatNullYieldsNull === true) {\n        options.push('set concat_null_yields_null on');\n      } else if (this.config.options.enableConcatNullYieldsNull === false) {\n        options.push('set concat_null_yields_null off');\n      }\n\n      if (this.config.options.enableCursorCloseOnCommit === true) {\n        options.push('set cursor_close_on_commit on');\n      } else if (this.config.options.enableCursorCloseOnCommit === false) {\n        options.push('set cursor_close_on_commit off');\n      }\n\n      if (this.config.options.datefirst !== null) {\n        options.push(\"set datefirst \".concat(this.config.options.datefirst));\n      }\n\n      if (this.config.options.dateFormat !== null) {\n        options.push(\"set dateformat \".concat(this.config.options.dateFormat));\n      }\n\n      if (this.config.options.enableImplicitTransactions === true) {\n        options.push('set implicit_transactions on');\n      } else if (this.config.options.enableImplicitTransactions === false) {\n        options.push('set implicit_transactions off');\n      }\n\n      if (this.config.options.language !== null) {\n        options.push(\"set language \".concat(this.config.options.language));\n      }\n\n      if (this.config.options.enableNumericRoundabort === true) {\n        options.push('set numeric_roundabort on');\n      } else if (this.config.options.enableNumericRoundabort === false) {\n        options.push('set numeric_roundabort off');\n      }\n\n      if (this.config.options.enableQuotedIdentifier === true) {\n        options.push('set quoted_identifier on');\n      } else if (this.config.options.enableQuotedIdentifier === false) {\n        options.push('set quoted_identifier off');\n      }\n\n      if (this.config.options.textsize !== null) {\n        options.push(\"set textsize \".concat(this.config.options.textsize));\n      }\n\n      if (this.config.options.connectionIsolationLevel !== null) {\n        options.push(\"set transaction isolation level \".concat(this.getIsolationLevelText(this.config.options.connectionIsolationLevel)));\n      }\n\n      if (this.config.options.abortTransactionOnError === true) {\n        options.push('set xact_abort on');\n      } else if (this.config.options.abortTransactionOnError === false) {\n        options.push('set xact_abort off');\n      }\n\n      return options.join('\\n');\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"processedInitialSql\",\n    value: function processedInitialSql() {\n      this.clearConnectTimer();\n      this.emit('connect');\n    }\n    /**\r\n     * Execute the SQL batch represented by [[Request]].\r\n     * There is no param support, and unlike [[Request.execSql]],\r\n     * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\r\n     *\r\n     * In almost all cases, [[Request.execSql]] will be a better choice.\r\n     *\r\n     * @param request A [[Request]] object representing the request.\r\n     */\n\n  }, {\n    key: \"execSqlBatch\",\n    value: function execSqlBatch(request) {\n      this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\r\n     *  Execute the SQL represented by [[Request]].\r\n     *\r\n     * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\r\n     * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\r\n     * for the first execution. This may also result in SQL server treating the request like a stored procedure\r\n     * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\r\n     * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\r\n     *\r\n     * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\r\n     * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\r\n     * See also [issue #24](https://github.com/pekim/tedious/issues/24)\r\n     *\r\n     * @param request A [[Request]] object representing the request.\r\n     */\n\n  }, {\n    key: \"execSql\",\n    value: function execSql(request) {\n      var _this12 = this;\n\n      try {\n        request.validateParameters();\n      } catch (error) {\n        request.error = error;\n        process.nextTick(function () {\n          _this12.debug.log(error.message);\n\n          request.callback(error);\n        });\n        return;\n      }\n\n      var parameters = [];\n      parameters.push({\n        type: _dataType.TYPES.NVarChar,\n        name: 'statement',\n        value: request.sqlTextOrProcedure,\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n\n      if (request.parameters.length) {\n        parameters.push({\n          type: _dataType.TYPES.NVarChar,\n          name: 'params',\n          value: request.makeParamsParameter(request.parameters),\n          output: false,\n          length: undefined,\n          precision: undefined,\n          scale: undefined\n        });\n        parameters.push.apply(parameters, _toConsumableArray(request.parameters));\n      }\n\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_executesql', parameters, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\r\n     * Creates a new BulkLoad instance.\r\n     *\r\n     * @param table The name of the table to bulk-insert into.\r\n     * @param options A set of bulk load options.\r\n     */\n\n  }, {\n    key: \"newBulkLoad\",\n    value: function newBulkLoad(table, callbackOrOptions, callback) {\n      var options;\n\n      if (callback === undefined) {\n        callback = callbackOrOptions;\n        options = {};\n      } else {\n        options = callbackOrOptions;\n      }\n\n      if (typeof options !== 'object') {\n        throw new TypeError('\"options\" argument must be an object');\n      }\n\n      return new _bulkLoad.default(table, this.config.options, options, callback);\n    }\n    /**\r\n     * Execute a [[BulkLoad]].\r\n     *\r\n     * ```js\r\n     * // We want to perform a bulk load into a table with the following format:\r\n     * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\r\n     *\r\n     * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\r\n     *   // ...\r\n     * });\r\n     *\r\n     * // First, we need to specify the columns that we want to write to,\r\n     * // and their definitions. These definitions must match the actual table,\r\n     * // otherwise the bulk load will fail.\r\n     * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\r\n     * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\r\n     * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\r\n     *\r\n     * // Now, we can specify each row to be written.\r\n     * //\r\n     * // Note that these rows are held in memory until the\r\n     * // bulk load was performed, so if you need to write a large\r\n     * // number of rows (e.g. by reading from a CSV file),\r\n     * // using a streaming bulk load is advisable to keep memory usage low.\r\n     * bulkLoad.addRow({ 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') });\r\n     * bulkLoad.addRow({ 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') });\r\n     *\r\n     * connection.execBulkLoad(bulkLoad);\r\n     * ```\r\n     *\r\n     * @param bulkLoad A previously created [[BulkLoad]].\r\n     *\r\n     * @deprecated Adding rows to a [[BulkLoad]] via [[BulkLoad.addRow]] or [[BulkLoad.getRowStream]]\r\n     *   is deprecated and will be removed in the future. You should migrate to calling [[Connection.execBulkLoad]]\r\n     *   with a `Iterable` or `AsyncIterable` as the second argument instead.\r\n     */\n\n  }, {\n    key: \"execBulkLoad\",\n    value: function execBulkLoad(bulkLoad, rows) {\n      var _this13 = this;\n\n      bulkLoad.executionStarted = true;\n\n      if (rows) {\n        if (bulkLoad.streamingMode) {\n          throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\n        }\n\n        if (bulkLoad.firstRowWritten) {\n          throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\n        }\n\n        var rowStream = _stream.Readable.from(rows); // Destroy the packet transform if an error happens in the row stream,\n        // e.g. if an error is thrown from within a generator or stream.\n\n\n        rowStream.on('error', function (err) {\n          bulkLoad.rowToPacketTransform.destroy(err);\n        }); // Destroy the row stream if an error happens in the packet transform,\n        // e.g. if the bulk load is cancelled.\n\n        bulkLoad.rowToPacketTransform.on('error', function (err) {\n          rowStream.destroy(err);\n        });\n        rowStream.pipe(bulkLoad.rowToPacketTransform);\n      } else if (!bulkLoad.streamingMode) {\n        // If the bulkload was not put into streaming mode by the user,\n        // we end the rowToPacketTransform here for them.\n        //\n        // If it was put into streaming mode, it's the user's responsibility\n        // to end the stream.\n        bulkLoad.rowToPacketTransform.end();\n      }\n\n      var onCancel = function onCancel() {\n        request.cancel();\n      };\n\n      var payload = new _bulkLoadPayload.BulkLoadPayload(bulkLoad);\n      var request = new _request.default(bulkLoad.getBulkInsertSql(), function (error) {\n        bulkLoad.removeListener('cancel', onCancel);\n\n        if (error) {\n          if (error.code === 'UNKNOWN') {\n            error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n          }\n\n          bulkLoad.error = error;\n          bulkLoad.callback(error);\n          return;\n        }\n\n        _this13.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD, payload);\n      });\n      bulkLoad.once('cancel', onCancel);\n      this.execSqlBatch(request);\n    }\n    /**\r\n     * Prepare the SQL represented by the request.\r\n     *\r\n     * The request can then be used in subsequent calls to\r\n     * [[execute]] and [[unprepare]]\r\n     *\r\n     * @param request A [[Request]] object representing the request.\r\n     *   Parameters only require a name and type. Parameter values are ignored.\r\n     */\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(request) {\n      var parameters = [];\n      parameters.push({\n        type: _dataType.TYPES.Int,\n        name: 'handle',\n        value: undefined,\n        output: true,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      parameters.push({\n        type: _dataType.TYPES.NVarChar,\n        name: 'params',\n        value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      parameters.push({\n        type: _dataType.TYPES.NVarChar,\n        name: 'stmt',\n        value: request.sqlTextOrProcedure,\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      request.preparing = true; // TODO: We need to clean up this event handler, otherwise this leaks memory\n\n      request.on('returnValue', function (name, value) {\n        if (name === 'handle') {\n          request.handle = value;\n        } else {\n          request.error = (0, _errors.RequestError)(\"Tedious > Unexpected output parameter \".concat(name, \" from sp_prepare\"));\n        }\n      });\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_prepare', parameters, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\r\n     * Release the SQL Server resources associated with a previously prepared request.\r\n     *\r\n     * @param request A [[Request]] object representing the request.\r\n     *   Parameters only require a name and type.\r\n     *   Parameter values are ignored.\r\n     */\n\n  }, {\n    key: \"unprepare\",\n    value: function unprepare(request) {\n      var parameters = [];\n      parameters.push({\n        type: _dataType.TYPES.Int,\n        name: 'handle',\n        // TODO: Abort if `request.handle` is not set\n        value: request.handle,\n        output: true,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_unprepare', parameters, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\r\n     * Execute previously prepared SQL, using the supplied parameters.\r\n     *\r\n     * @param request A previously prepared [[Request]].\r\n     * @param parameters  An object whose names correspond to the names of\r\n     *   parameters that were added to the [[Request]] before it was prepared.\r\n     *   The object's values are passed as the parameters' values when the\r\n     *   request is executed.\r\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(request, parameters) {\n      var _this14 = this;\n\n      var executeParameters = [];\n      executeParameters.push({\n        type: _dataType.TYPES.Int,\n        name: 'handle',\n        // TODO: Abort if `request.handle` is not set\n        value: request.handle,\n        output: true,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n\n      try {\n        for (var i = 0, len = request.parameters.length; i < len; i++) {\n          var parameter = request.parameters[i];\n          executeParameters.push(_objectSpread(_objectSpread({}, parameter), {}, {\n            value: parameter.type.validate(parameters ? parameters[parameter.name] : null)\n          }));\n        }\n      } catch (error) {\n        request.error = error;\n        process.nextTick(function () {\n          _this14.debug.log(error.message);\n\n          request.callback(error);\n        });\n        return;\n      }\n\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_execute', executeParameters, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\r\n     * Call a stored procedure represented by [[Request]].\r\n     *\r\n     * @param request A [[Request]] object representing the request.\r\n     */\n\n  }, {\n    key: \"callProcedure\",\n    value: function callProcedure(request) {\n      var _this15 = this;\n\n      try {\n        request.validateParameters();\n      } catch (error) {\n        request.error = error;\n        process.nextTick(function () {\n          _this15.debug.log(error.message);\n\n          request.callback(error);\n        });\n        return;\n      }\n\n      this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request.sqlTextOrProcedure, request.parameters, this.currentTransactionDescriptor(), this.config.options));\n    }\n    /**\r\n     * Start a transaction.\r\n     *\r\n     * @param callback\r\n     * @param name A string representing a name to associate with the transaction.\r\n     *   Optional, and defaults to an empty string. Required when `isolationLevel`\r\n     *   is present.\r\n     * @param isolationLevel The isolation level that the transaction is to be run with.\r\n     *\r\n     *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\r\n     *   * `READ_UNCOMMITTED`\r\n     *   * `READ_COMMITTED`\r\n     *   * `REPEATABLE_READ`\r\n     *   * `SERIALIZABLE`\r\n     *   * `SNAPSHOT`\r\n     *\r\n     *   Optional, and defaults to the Connection's isolation level.\r\n     */\n\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction(callback) {\n      var _this16 = this;\n\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var isolationLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.config.options.isolationLevel;\n      (0, _transaction.assertValidIsolationLevel)(isolationLevel, 'isolationLevel');\n      var transaction = new _transaction.Transaction(name, isolationLevel);\n\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, function (err) {\n          _this16.transactionDepth++;\n\n          if (_this16.transactionDepth === 1) {\n            _this16.inTransaction = true;\n          }\n\n          callback(err);\n        }));\n      }\n\n      var request = new _request.default(undefined, function (err) {\n        return callback(err, _this16.currentTransactionDescriptor());\n      });\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n    }\n    /**\r\n     * Commit a transaction.\r\n     *\r\n     * There should be an active transaction - that is, [[beginTransaction]]\r\n     * should have been previously called.\r\n     *\r\n     * @param callback\r\n     * @param name A string representing a name to associate with the transaction.\r\n     *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\r\n     */\n\n  }, {\n    key: \"commitTransaction\",\n    value: function commitTransaction(callback) {\n      var _this17 = this;\n\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var transaction = new _transaction.Transaction(name);\n\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, function (err) {\n          _this17.transactionDepth--;\n\n          if (_this17.transactionDepth === 0) {\n            _this17.inTransaction = false;\n          }\n\n          callback(err);\n        }));\n      }\n\n      var request = new _request.default(undefined, callback);\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n    }\n    /**\r\n     * Rollback a transaction.\r\n     *\r\n     * There should be an active transaction - that is, [[beginTransaction]]\r\n     * should have been previously called.\r\n     *\r\n     * @param callback\r\n     * @param name A string representing a name to associate with the transaction.\r\n     *   Optional, and defaults to an empty string.\r\n     *   Required when `isolationLevel` is present.\r\n     */\n\n  }, {\n    key: \"rollbackTransaction\",\n    value: function rollbackTransaction(callback) {\n      var _this18 = this;\n\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var transaction = new _transaction.Transaction(name);\n\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, function (err) {\n          _this18.transactionDepth--;\n\n          if (_this18.transactionDepth === 0) {\n            _this18.inTransaction = false;\n          }\n\n          callback(err);\n        }));\n      }\n\n      var request = new _request.default(undefined, callback);\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n    }\n    /**\r\n     * Set a savepoint within a transaction.\r\n     *\r\n     * There should be an active transaction - that is, [[beginTransaction]]\r\n     * should have been previously called.\r\n     *\r\n     * @param callback\r\n     * @param name A string representing a name to associate with the transaction.\\\r\n     *   Optional, and defaults to an empty string.\r\n     *   Required when `isolationLevel` is present.\r\n     */\n\n  }, {\n    key: \"saveTransaction\",\n    value: function saveTransaction(callback, name) {\n      var _this19 = this;\n\n      var transaction = new _transaction.Transaction(name);\n\n      if (this.config.options.tdsVersion < '7_2') {\n        return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, function (err) {\n          _this19.transactionDepth++;\n          callback(err);\n        }));\n      }\n\n      var request = new _request.default(undefined, callback);\n      return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n    }\n    /**\r\n     * Run the given callback after starting a transaction, and commit or\r\n     * rollback the transaction afterwards.\r\n     *\r\n     * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\r\n     * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\r\n     * use of database transactions and automatically handle transaction nesting.\r\n     *\r\n     * @param cb\r\n     * @param isolationLevel\r\n     *   The isolation level that the transaction is to be run with.\r\n     *\r\n     *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\r\n     *   * `READ_UNCOMMITTED`\r\n     *   * `READ_COMMITTED`\r\n     *   * `REPEATABLE_READ`\r\n     *   * `SERIALIZABLE`\r\n     *   * `SNAPSHOT`\r\n     *\r\n     *   Optional, and defaults to the Connection's isolation level.\r\n     */\n\n  }, {\n    key: \"transaction\",\n    value: function transaction(cb, isolationLevel) {\n      var _this20 = this;\n\n      if (typeof cb !== 'function') {\n        throw new TypeError('`cb` must be a function');\n      }\n\n      var useSavepoint = this.inTransaction;\n\n      var name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\n\n      var txDone = function txDone(err, done) {\n        for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n          args[_key3 - 2] = arguments[_key3];\n        }\n\n        if (err) {\n          if (_this20.inTransaction && _this20.state === _this20.STATE.LOGGED_IN) {\n            _this20.rollbackTransaction(function (txErr) {\n              done.apply(void 0, [txErr || err].concat(args));\n            }, name);\n          } else {\n            done.apply(void 0, [err].concat(args));\n          }\n        } else if (useSavepoint) {\n          if (_this20.config.options.tdsVersion < '7_2') {\n            _this20.transactionDepth--;\n          }\n\n          done.apply(void 0, [null].concat(args));\n        } else {\n          _this20.commitTransaction(function (txErr) {\n            done.apply(void 0, [txErr].concat(args));\n          }, name);\n        }\n      };\n\n      if (useSavepoint) {\n        return this.saveTransaction(function (err) {\n          if (err) {\n            return cb(err);\n          }\n\n          if (isolationLevel) {\n            return _this20.execSqlBatch(new _request.default('SET transaction isolation level ' + _this20.getIsolationLevelText(isolationLevel), function (err) {\n              return cb(err, txDone);\n            }));\n          } else {\n            return cb(null, txDone);\n          }\n        }, name);\n      } else {\n        return this.beginTransaction(function (err) {\n          if (err) {\n            return cb(err);\n          }\n\n          return cb(null, txDone);\n        }, name, isolationLevel);\n      }\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(request, packetType, payload) {\n      var _this21 = this;\n\n      if (this.state !== this.STATE.LOGGED_IN) {\n        var message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n        this.debug.log(message);\n        request.callback((0, _errors.RequestError)(message, 'EINVALIDSTATE'));\n      } else if (request.canceled) {\n        process.nextTick(function () {\n          request.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n        });\n      } else {\n        if (packetType === _packet.TYPE.SQL_BATCH) {\n          this.isSqlBatch = true;\n        } else {\n          this.isSqlBatch = false;\n        }\n\n        this.request = request;\n        request.connection = this;\n        request.rowCount = 0;\n        request.rows = [];\n        request.rst = [];\n\n        var onCancel = function onCancel() {\n          payloadStream.unpipe(_message3); // set the ignore bit and end the message.\n\n          _message3.ignore = true;\n\n          _message3.end();\n\n          if (request instanceof _request.default && request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            request.resume();\n          }\n        };\n\n        request.once('cancel', onCancel);\n        this.createRequestTimer();\n\n        var _message3 = new _message.default({\n          type: packetType,\n          resetConnection: this.resetConnectionOnNextRequest\n        });\n\n        this.messageIo.outgoingMessageStream.write(_message3);\n        this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n\n        _message3.once('finish', function () {\n          request.removeListener('cancel', onCancel);\n          request.once('cancel', _this21._cancelAfterRequestSent);\n          _this21.resetConnectionOnNextRequest = false;\n\n          _this21.debug.payload(function () {\n            return payload.toString('  ');\n          });\n        });\n\n        var payloadStream = _stream.Readable.from(payload);\n\n        payloadStream.once('error', function (error) {\n          var _request$error;\n\n          payloadStream.unpipe(_message3); // Only set a request error if no error was set yet.\n\n          (_request$error = request.error) !== null && _request$error !== void 0 ? _request$error : request.error = error;\n          payloadStream.unpipe(_message3);\n          _message3.ignore = true;\n\n          _message3.end();\n        });\n        payloadStream.pipe(_message3);\n      }\n    }\n    /**\r\n     * Cancel currently executed request.\r\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this.request) {\n        return false;\n      }\n\n      if (this.request.canceled) {\n        return false;\n      }\n\n      this.request.cancel();\n      return true;\n    }\n    /**\r\n     * Reset the connection to its initial state.\r\n     * Can be useful for connection pool implementations.\r\n     *\r\n     * @param callback\r\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(callback) {\n      var _this22 = this;\n\n      var request = new _request.default(this.getInitialSql(), function (err) {\n        if (_this22.config.options.tdsVersion < '7_2') {\n          _this22.inTransaction = false;\n        }\n\n        callback(err);\n      });\n      this.resetConnectionOnNextRequest = true;\n      this.execSqlBatch(request);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"currentTransactionDescriptor\",\n    value: function currentTransactionDescriptor() {\n      return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"getIsolationLevelText\",\n    value: function getIsolationLevelText(isolationLevel) {\n      switch (isolationLevel) {\n        case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\n          return 'read uncommitted';\n\n        case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\n          return 'repeatable read';\n\n        case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\n          return 'serializable';\n\n        case _transaction.ISOLATION_LEVEL.SNAPSHOT:\n          return 'snapshot';\n\n        default:\n          return 'read committed';\n      }\n    }\n  }]);\n\n  return Connection;\n}(_events.EventEmitter);\n\nvar _default = Connection;\nexports.default = _default;\nmodule.exports = Connection;\nvar authenticationCache = new _adalNode.MemoryCache();\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function enter() {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      socketConnect: function socketConnect() {\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function enter() {\n      this.emptyMessageBuffer();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      message: function message(_message4) {\n        var _this23 = this;\n\n        _message4.on('data', function (data) {\n          _this23.addToMessageBuffer(data);\n        });\n\n        _message4.once('end', function () {\n          var preloginPayload = new _preloginPayload.default(_this23.messageBuffer);\n\n          _this23.debug.payload(function () {\n            return preloginPayload.toString('  ');\n          });\n\n          if (preloginPayload.fedAuthRequired === 1) {\n            _this23.fedAuthRequired = true;\n          }\n\n          if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n            var _this$routingData$ser, _this$routingData;\n\n            if (!_this23.config.options.encrypt) {\n              _this23.emit('connect', (0, _errors.ConnectionError)(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n\n              return _this23.close();\n            }\n\n            _this23.messageIo.startTls(_this23.secureContext, (_this$routingData$ser = (_this$routingData = _this23.routingData) === null || _this$routingData === void 0 ? void 0 : _this$routingData.server) !== null && _this$routingData$ser !== void 0 ? _this$routingData$ser : _this23.config.server, _this23.config.options.trustServerCertificate);\n\n            _this23.transitionTo(_this23.STATE.SENT_TLSSSLNEGOTIATION);\n          } else {\n            _this23.sendLogin7Packet();\n\n            var authentication = _this23.config.authentication;\n\n            if (authentication.type === 'ntlm') {\n              _this23.transitionTo(_this23.STATE.SENT_LOGIN7_WITH_NTLM);\n            } else {\n              _this23.transitionTo(_this23.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            }\n          }\n        });\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function enter() {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function message() {},\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function reconnect() {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function enter() {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function message() {},\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function retry() {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      message: function message(_message5) {\n        var _this24 = this;\n\n        _message5.on('data', function (data) {\n          _this24.messageIo.tlsHandshakeData(data);\n        });\n\n        _message5.once('end', function () {\n          if (_this24.messageIo.tlsNegotiationComplete) {\n            _this24.sendLogin7Packet();\n\n            var authentication = _this24.config.authentication;\n\n            if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n              _this24.transitionTo(_this24.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n            } else if (authentication.type === 'ntlm') {\n              _this24.transitionTo(_this24.STATE.SENT_LOGIN7_WITH_NTLM);\n            } else {\n              _this24.transitionTo(_this24.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            }\n          }\n        });\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      featureExtAck: function featureExtAck(token) {\n        var authentication = this.config.authentication;\n\n        if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n          if (token.fedAuth === undefined) {\n            this.loginError = (0, _errors.ConnectionError)('Did not receive Active Directory authentication acknowledgement');\n            this.loggedIn = false;\n          } else if (token.fedAuth.length !== 0) {\n            this.loginError = (0, _errors.ConnectionError)(\"Active Directory authentication acknowledgment for \".concat(authentication.type, \" authentication method includes extra data\"));\n            this.loggedIn = false;\n          }\n        } else if (token.fedAuth === undefined) {\n          this.loginError = (0, _errors.ConnectionError)('Received acknowledgement for unknown feature');\n          this.loggedIn = false;\n        } else {\n          this.loginError = (0, _errors.ConnectionError)('Did not request Active Directory authentication, but received the acknowledgment');\n          this.loggedIn = false;\n        }\n      },\n      message: function message(_message6) {\n        var _this25 = this;\n\n        var tokenStreamParser = this.createTokenStreamParser(_message6);\n        tokenStreamParser.once('end', function () {\n          if (_this25.loggedIn) {\n            if (_this25.routingData) {\n              _this25.transitionTo(_this25.STATE.REROUTING);\n            } else {\n              _this25.transitionTo(_this25.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (_this25.loginError) {\n            if (_this25.loginError.isTransient) {\n              _this25.debug.log('Initiating retry on transient error');\n\n              _this25.transitionTo(_this25.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              _this25.emit('connect', _this25.loginError);\n\n              _this25.transitionTo(_this25.STATE.FINAL);\n            }\n          } else {\n            _this25.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n\n            _this25.transitionTo(_this25.STATE.FINAL);\n          }\n        });\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      message: function message(_message7) {\n        var _this26 = this;\n\n        var tokenStreamParser = this.createTokenStreamParser(_message7);\n        tokenStreamParser.once('end', function () {\n          if (_this26.ntlmpacket) {\n            var authentication = _this26.config.authentication;\n            var payload = new _ntlmPayload.default({\n              domain: authentication.options.domain,\n              userName: authentication.options.userName,\n              password: authentication.options.password,\n              ntlmpacket: _this26.ntlmpacket\n            });\n\n            _this26.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\n\n            _this26.debug.payload(function () {\n              return payload.toString('  ');\n            });\n\n            _this26.ntlmpacket = undefined;\n          } else if (_this26.loggedIn) {\n            if (_this26.routingData) {\n              _this26.transitionTo(_this26.STATE.REROUTING);\n            } else {\n              _this26.transitionTo(_this26.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (_this26.loginError) {\n            if (_this26.loginError.isTransient) {\n              _this26.debug.log('Initiating retry on transient error');\n\n              _this26.transitionTo(_this26.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              _this26.emit('connect', _this26.loginError);\n\n              _this26.transitionTo(_this26.STATE.FINAL);\n            }\n          } else {\n            _this26.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n\n            _this26.transitionTo(_this26.STATE.FINAL);\n          }\n        });\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      fedAuthInfo: function fedAuthInfo(token) {\n        this.fedAuthInfoToken = token;\n      },\n      message: function message(_message8) {\n        var _this27 = this;\n\n        var tokenStreamParser = this.createTokenStreamParser(_message8);\n        tokenStreamParser.once('end', function () {\n          if (_this27.loggedIn) {\n            if (_this27.routingData) {\n              _this27.transitionTo(_this27.STATE.REROUTING);\n            } else {\n              _this27.transitionTo(_this27.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n\n            return;\n          }\n\n          var fedAuthInfoToken = _this27.fedAuthInfoToken;\n\n          if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n            var authentication = _this27.config.authentication;\n\n            var getToken = function getToken(callback) {\n              var getTokenFromCredentials = function getTokenFromCredentials(err, credentials) {\n                if (err) {\n                  return callback(err);\n                }\n\n                credentials.getToken().then(function (tokenResponse) {\n                  callback(null, tokenResponse.accessToken);\n                }, callback);\n              };\n\n              if (authentication.type === 'azure-active-directory-password') {\n                var _authentication$optio;\n\n                var credentials = new _msRestNodeauth.UserTokenCredentials('7f98cb04-cd1e-40df-9140-3bf7e2cea4db', (_authentication$optio = authentication.options.domain) !== null && _authentication$optio !== void 0 ? _authentication$optio : 'common', authentication.options.userName, authentication.options.password, fedAuthInfoToken.spn, undefined, // environment\n                authenticationCache);\n                getTokenFromCredentials(undefined, credentials);\n              } else if (authentication.type === 'azure-active-directory-msi-vm') {\n                (0, _msRestNodeauth.loginWithVmMSI)({\n                  clientId: authentication.options.clientId,\n                  msiEndpoint: authentication.options.msiEndpoint,\n                  resource: fedAuthInfoToken.spn\n                }, getTokenFromCredentials);\n              } else if (authentication.type === 'azure-active-directory-msi-app-service') {\n                (0, _msRestNodeauth.loginWithAppServiceMSI)({\n                  msiEndpoint: authentication.options.msiEndpoint,\n                  msiSecret: authentication.options.msiSecret,\n                  resource: fedAuthInfoToken.spn,\n                  clientId: authentication.options.clientId\n                }, getTokenFromCredentials);\n              } else if (authentication.type === 'azure-active-directory-service-principal-secret') {\n                var _credentials = new _msRestNodeauth.ApplicationTokenCredentials(authentication.options.clientId, authentication.options.tenantId, // domain\n                authentication.options.clientSecret, fedAuthInfoToken.spn, undefined, // environment\n                authenticationCache);\n\n                getTokenFromCredentials(undefined, _credentials);\n              }\n            };\n\n            getToken(function (err, token) {\n              if (err) {\n                _this27.loginError = (0, _errors.ConnectionError)('Security token could not be authenticated or authorized.', 'EFEDAUTH');\n\n                _this27.emit('connect', _this27.loginError);\n\n                _this27.transitionTo(_this27.STATE.FINAL);\n\n                return;\n              }\n\n              _this27.sendFedAuthTokenMessage(token);\n            });\n          } else if (_this27.loginError) {\n            if (_this27.loginError.isTransient) {\n              _this27.debug.log('Initiating retry on transient error');\n\n              _this27.transitionTo(_this27.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              _this27.emit('connect', _this27.loginError);\n\n              _this27.transitionTo(_this27.STATE.FINAL);\n            }\n          } else {\n            _this27.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n\n            _this27.transitionTo(_this27.STATE.FINAL);\n          }\n        });\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function enter() {\n      this.sendInitialSql();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      message: function message(_message9) {\n        var _this28 = this;\n\n        var tokenStreamParser = this.createTokenStreamParser(_message9);\n        tokenStreamParser.once('end', function () {\n          _this28.transitionTo(_this28.STATE.LOGGED_IN);\n\n          _this28.processedInitialSql();\n        });\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    exit: function exit(nextState) {\n      this.clearRequestTimer();\n    },\n    events: {\n      socketError: function socketError(err) {\n        var sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      message: function message(_message10) {\n        var _this29 = this;\n\n        var _this$request2, _this$request9; // request timer is stopped on first data package\n\n\n        this.clearRequestTimer();\n        var tokenStreamParser = this.createTokenStreamParser(_message10);\n\n        var onResume = function onResume() {\n          tokenStreamParser.resume();\n        };\n\n        var onPause = function onPause() {\n          var _this$request;\n\n          tokenStreamParser.pause();\n          (_this$request = _this29.request) === null || _this$request === void 0 ? void 0 : _this$request.once('resume', onResume);\n        };\n\n        (_this$request2 = this.request) === null || _this$request2 === void 0 ? void 0 : _this$request2.on('pause', onPause);\n\n        if (this.request instanceof _request.default && this.request.paused) {\n          onPause();\n        }\n\n        var onCancel = function onCancel() {\n          var _this$request3, _this$request4;\n\n          tokenStreamParser.removeListener('end', onEndOfMessage);\n\n          if (_this29.request instanceof _request.default && _this29.request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            _this29.request.resume();\n          }\n\n          (_this$request3 = _this29.request) === null || _this$request3 === void 0 ? void 0 : _this$request3.removeListener('pause', onPause);\n          (_this$request4 = _this29.request) === null || _this$request4 === void 0 ? void 0 : _this$request4.removeListener('resume', onResume);\n        };\n\n        var onEndOfMessage = function onEndOfMessage() {\n          var _this$request5, _this$request6, _this$request7, _this$request8;\n\n          (_this$request5 = _this29.request) === null || _this$request5 === void 0 ? void 0 : _this$request5.removeListener('cancel', _this29._cancelAfterRequestSent);\n          (_this$request6 = _this29.request) === null || _this$request6 === void 0 ? void 0 : _this$request6.removeListener('cancel', onCancel);\n          (_this$request7 = _this29.request) === null || _this$request7 === void 0 ? void 0 : _this$request7.removeListener('pause', onPause);\n          (_this$request8 = _this29.request) === null || _this$request8 === void 0 ? void 0 : _this$request8.removeListener('resume', onResume);\n\n          _this29.transitionTo(_this29.STATE.LOGGED_IN);\n\n          var sqlRequest = _this29.request;\n          _this29.request = undefined;\n\n          if (_this29.config.options.tdsVersion < '7_2' && sqlRequest.error && _this29.isSqlBatch) {\n            _this29.inTransaction = false;\n          }\n\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n        };\n\n        tokenStreamParser.once('end', onEndOfMessage);\n        (_this$request9 = this.request) === null || _this$request9 === void 0 ? void 0 : _this$request9.once('cancel', onCancel);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function enter() {\n      this.attentionReceived = false;\n    },\n    events: {\n      socketError: function socketError(err) {\n        var sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      attention: function attention() {\n        this.attentionReceived = true;\n      },\n      message: function message(_message11) {\n        var _this30 = this;\n\n        var tokenStreamParser = this.createTokenStreamParser(_message11);\n        tokenStreamParser.once('end', function () {\n          // 3.2.5.7 Sent Attention State\n          // Discard any data contained in the response, until we receive the attention response\n          if (_this30.attentionReceived) {\n            _this30.attentionReceived = false;\n\n            _this30.clearCancelTimer();\n\n            var sqlRequest = _this30.request;\n            _this30.request = undefined;\n\n            _this30.transitionTo(_this30.STATE.LOGGED_IN);\n\n            if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n              sqlRequest.callback(sqlRequest.error);\n            } else {\n              sqlRequest.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n            }\n          }\n        });\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function enter() {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      loginFailed: function loginFailed() {// Do nothing. The connection was probably closed by the client code.\n      },\n      connectTimeout: function connectTimeout() {// Do nothing, as the timer should be cleaned up.\n      },\n      message: function message() {// Do nothing\n      },\n      socketError: function socketError() {// Do nothing\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/connection.js"],"names":["Object","defineProperty","exports","value","default","_crypto","_interopRequireDefault","require","_os","_constants","_tls","_stream","_msRestNodeauth","_bulkLoad","_debug","_events","_instanceLookup","_transientErrorLookup","_packet","_preloginPayload","_login7Payload","_ntlmPayload","_request","_rpcrequestPayload","_sqlbatchPayload","_messageIo","_tokenStreamParser","_transaction","_errors","_connector","_library","_tdsVersions","_message","_ntlm","_depd","_adalNode","_nodeAbortController","_dataType","_bulkLoadPayload","_package","obj","__esModule","deprecate","KEEP_ALIVE_INITIAL_DELAY","DEFAULT_CONNECT_TIMEOUT","DEFAULT_CLIENT_REQUEST_TIMEOUT","DEFAULT_CANCEL_TIMEOUT","DEFAULT_CONNECT_RETRY_INTERVAL","DEFAULT_PACKET_SIZE","DEFAULT_TEXTSIZE","DEFAULT_DATEFIRST","DEFAULT_PORT","DEFAULT_TDS_VERSION","DEFAULT_LANGUAGE","DEFAULT_DATEFORMAT","CLEANUP_TYPE","NORMAL","REDIRECT","RETRY","Connection","config","fedAuthRequired","fedAuthInfoToken","secureContext","inTransaction","transactionDescriptors","transactionDepth","isSqlBatch","curTransientRetryCount","transientErrorLookup","closed","loggedIn","loginError","debug","ntlmpacket","ntlmpacketBuffer","routingData","messageIo","state","resetConnectionOnNextRequest","attentionReceived","request","procReturnStatusValue","socket","messageBuffer","connectTimer","cancelTimer","requestTimer","retryTimer","_cancelAfterRequestSent","TypeError","server","undefined","authentication","type","options","domain","userName","password","toUpperCase","token","clientId","msiEndpoint","msiSecret","clientSecret","tenantId","abortTransactionOnError","appName","camelCaseColumns","cancelTimeout","columnEncryptionKeyCacheTTL","columnEncryptionSetting","columnNameReplacer","connectionRetryInterval","connectTimeout","connectionIsolationLevel","ISOLATION_LEVEL","READ_COMMITTED","cryptoCredentialsDetails","database","datefirst","dateFormat","data","packet","payload","enableAnsiNull","enableAnsiNullDefault","enableAnsiPadding","enableAnsiWarnings","enableArithAbort","enableConcatNullYieldsNull","enableCursorCloseOnCommit","enableImplicitTransactions","enableNumericRoundabort","enableQuotedIdentifier","encrypt","fallbackToDefaultDb","encryptionKeyStoreProviders","instanceName","isolationLevel","language","localAddress","maxRetriesOnTransientErrors","multiSubnetFailover","packetSize","port","readOnlyIntent","requestTimeout","rowCollectionOnDone","rowCollectionOnRequestCompletion","serverName","serverSupportsColumnEncryption","tdsVersion","textsize","trustedServerNameAE","trustServerCertificate","useColumnNames","useUTC","validateBulkLoadParameters","workstationId","lowerCaseGuids","Error","assertValidIsolationLevel","RangeError","credentialsDetails","secureOptions","create","SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","createSecureContext","createDebug","Buffer","from","alloc","TransientErrorLookup","STATE","INITIALIZED","sendMessage","TYPE","ATTENTION","transitionTo","SENT_ATTENTION","createCancelTimer","connectListener","ConnectionError","name","onConnect","err","removeListener","onError","once","CONNECTING","event","listener","args","FINAL","signal","createConnectTimer","connectOnPort","InstanceLookup","instanceLookup","timeout","emit","message","cleanupType","clearConnectTimer","clearRequestTimer","clearRetryTimer","closeConnection","process","nextTick","RequestError","callback","on","tokenStreamParser","Parser","canceled","error","number","class","procName","lineNumber","isLoginErrorTransient","isTransientError","isTransient","newValue","dispatchEvent","interface","split","push","length","columns","j","len","col","colName","close","orderColumns","rows","rst","paramName","metadata","rowCount","more","attention","sqlError","connectOpts","host","Connector","execute","socketError","socketClose","socketEnd","setKeepAlive","cleartext","socketConnect","destroy","controller","setTimeout","abort","clearCancelTimer","retryTimeout","log","cancel","clearTimeout","newState","exit","call","enter","apply","eventName","handler","events","SENT_TLSSSLNEGOTIATION","code","REROUTING","TRANSIENT_FAILURE_RETRY","_$exec","exec","version","major","minor","build","Number","subbuild","PRELOGIN","toString","concat","versions","clientProgVer","clientPid","pid","connectionId","clientTimeZone","Date","getTimezoneOffset","clientLcid","fedAuth","echo","workflow","fedAuthToken","sspi","createNTLMRequest","hostname","libraryName","initDbFatal","LOGIN7","toBuffer","accessTokenLen","byteLength","offset","writeUInt32LE","write","FEDAUTH_TOKEN","SENT_LOGIN7_WITH_STANDARD_LOGIN","getInitialSql","currentTransactionDescriptor","SQL_BATCH","outgoingMessageStream","Readable","pipe","getIsolationLevelText","join","makeRequest","sqlTextOrProcedure","validateParameters","parameters","TYPES","NVarChar","output","precision","scale","makeParamsParameter","RPC_REQUEST","table","callbackOrOptions","bulkLoad","executionStarted","streamingMode","firstRowWritten","rowStream","rowToPacketTransform","end","onCancel","BulkLoadPayload","getBulkInsertSql","BULK_LOAD","execSqlBatch","Int","preparing","handle","executeParameters","i","parameter","validate","transaction","Transaction","isolationLevelToTSQL","TRANSACTION_MANAGER","beginPayload","commitPayload","rollbackPayload","savePayload","cb","useSavepoint","randomBytes","txDone","done","LOGGED_IN","rollbackTransaction","txErr","commitTransaction","saveTransaction","beginTransaction","packetType","connection","payloadStream","unpipe","ignore","paused","resume","createRequestTimer","resetConnection","SENT_CLIENT_REQUEST","_request$error","READ_UNCOMMITTED","REPEATABLE_READ","SERIALIZABLE","SNAPSHOT","EventEmitter","_default","module","authenticationCache","MemoryCache","prototype","initialiseConnection","sendPreLogin","SENT_PRELOGIN","emptyMessageBuffer","addToMessageBuffer","preloginPayload","encryptionString","_this$routingData$ser","_this$routingData","startTls","sendLogin7Packet","SENT_LOGIN7_WITH_NTLM","cleanupConnection","reconnect","retry","createRetryTimer","tlsHandshakeData","tlsNegotiationComplete","SENT_LOGIN7_WITH_FEDAUTH","featureExtAck","createTokenStreamParser","LOGGED_IN_SENDING_INITIAL_SQL","NTLMAUTH_PKT","fedAuthInfo","stsurl","spn","getToken","getTokenFromCredentials","credentials","then","tokenResponse","accessToken","_authentication$optio","UserTokenCredentials","loginWithVmMSI","resource","loginWithAppServiceMSI","ApplicationTokenCredentials","sendFedAuthTokenMessage","sendInitialSql","processedInitialSql","nextState","sqlRequest","_this$request2","_this$request9","onResume","onPause","_this$request","pause","_this$request3","_this$request4","onEndOfMessage","_this$request5","_this$request6","_this$request7","_this$request8","loginFailed"],"mappings":"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AACA;AACA;;AAEA,IAAMC,mBAAmB,GAAG,IAAI,IAAhC;AACA;AACA;AACA;;AAEA,IAAMC,gBAAgB,GAAG,UAAzB;AACA;AACA;AACA;;AAEA,IAAMC,iBAAiB,GAAG,CAA1B;AACA;AACA;AACA;;AAEA,IAAMC,YAAY,GAAG,IAArB;AACA;AACA;AACA;;AAEA,IAAMC,mBAAmB,GAAG,KAA5B;AACA;AACA;AACA;;AAEA,IAAMC,gBAAgB,GAAG,YAAzB;AACA;AACA;AACA;;AAEA,IAAMC,kBAAkB,GAAG,KAA3B;AAEA;AACA;AACA;;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CADW;AAEnBC,EAAAA,QAAQ,EAAE,CAFS;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,U;;;;;AACJ;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,sBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB;AACA,UAAKC,eAAL,GAAuB,KAAK,CAA5B;AACA,UAAKC,gBAAL,GAAwB,KAAK,CAA7B;AACA,UAAKF,MAAL,GAAc,KAAK,CAAnB;AACA,UAAKG,aAAL,GAAqB,KAAK,CAA1B;AACA,UAAKC,aAAL,GAAqB,KAAK,CAA1B;AACA,UAAKC,sBAAL,GAA8B,KAAK,CAAnC;AACA,UAAKC,gBAAL,GAAwB,KAAK,CAA7B;AACA,UAAKC,UAAL,GAAkB,KAAK,CAAvB;AACA,UAAKC,sBAAL,GAA8B,KAAK,CAAnC;AACA,UAAKC,oBAAL,GAA4B,KAAK,CAAjC;AACA,UAAKC,MAAL,GAAc,KAAK,CAAnB;AACA,UAAKC,QAAL,GAAgB,KAAK,CAArB;AACA,UAAKC,UAAL,GAAkB,KAAK,CAAvB;AACA,UAAKC,KAAL,GAAa,KAAK,CAAlB;AACA,UAAKC,UAAL,GAAkB,KAAK,CAAvB;AACA,UAAKC,gBAAL,GAAwB,KAAK,CAA7B;AACA,UAAKC,WAAL,GAAmB,KAAK,CAAxB;AACA,UAAKC,SAAL,GAAiB,KAAK,CAAtB;AACA,UAAKC,KAAL,GAAa,KAAK,CAAlB;AACA,UAAKC,4BAAL,GAAoC,KAAK,CAAzC;AACA,UAAKC,iBAAL,GAAyB,KAAK,CAA9B;AACA,UAAKC,OAAL,GAAe,KAAK,CAApB;AACA,UAAKC,qBAAL,GAA6B,KAAK,CAAlC;AACA,UAAKC,MAAL,GAAc,KAAK,CAAnB;AACA,UAAKC,aAAL,GAAqB,KAAK,CAA1B;AACA,UAAKC,YAAL,GAAoB,KAAK,CAAzB;AACA,UAAKC,WAAL,GAAmB,KAAK,CAAxB;AACA,UAAKC,YAAL,GAAoB,KAAK,CAAzB;AACA,UAAKC,UAAL,GAAkB,KAAK,CAAvB;AACA,UAAKC,uBAAL,GAA+B,KAAK,CAApC;;AAEA,QAAI,OAAO7B,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,IAA7C,EAAmD;AACjD,YAAM,IAAI8B,SAAJ,CAAc,+DAAd,CAAN;AACD;;AAED,QAAI,OAAO9B,MAAM,CAAC+B,MAAd,KAAyB,QAA7B,EAAuC;AACrC,YAAM,IAAID,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,UAAK7B,eAAL,GAAuB,KAAvB;AACA,UAAKC,gBAAL,GAAwB8B,SAAxB;AACA,QAAIC,cAAJ;;AAEA,QAAIjC,MAAM,CAACiC,cAAP,KAA0BD,SAA9B,EAAyC;AACvC,UAAI,OAAOhC,MAAM,CAACiC,cAAd,KAAiC,QAAjC,IAA6CjC,MAAM,CAACiC,cAAP,KAA0B,IAA3E,EAAiF;AAC/E,cAAM,IAAIH,SAAJ,CAAc,8DAAd,CAAN;AACD;;AAED,UAAMI,IAAI,GAAGlC,MAAM,CAACiC,cAAP,CAAsBC,IAAnC;AACA,UAAMC,OAAO,GAAGnC,MAAM,CAACiC,cAAP,CAAsBE,OAAtB,KAAkCH,SAAlC,GAA8C,EAA9C,GAAmDhC,MAAM,CAACiC,cAAP,CAAsBE,OAAzF;;AAEA,UAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,cAAM,IAAIJ,SAAJ,CAAc,mEAAd,CAAN;AACD;;AAED,UAAII,IAAI,KAAK,SAAT,IAAsBA,IAAI,KAAK,MAA/B,IAAyCA,IAAI,KAAK,iCAAlD,IAAuFA,IAAI,KAAK,qCAAhG,IAAyIA,IAAI,KAAK,+BAAlJ,IAAqLA,IAAI,KAAK,wCAA9L,IAA0OA,IAAI,KAAK,iDAAvP,EAA0S;AACxS,cAAM,IAAIJ,SAAJ,CAAc,gQAAd,CAAN;AACD;;AAED,UAAI,OAAOK,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACnD,cAAM,IAAIL,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,UAAII,IAAI,KAAK,MAAb,EAAqB;AACnB,YAAI,OAAOC,OAAO,CAACC,MAAf,KAA0B,QAA9B,EAAwC;AACtC,gBAAM,IAAIN,SAAJ,CAAc,6EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACE,QAAR,KAAqBL,SAArB,IAAkC,OAAOG,OAAO,CAACE,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIP,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACG,QAAR,KAAqBN,SAArB,IAAkC,OAAOG,OAAO,CAACG,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIR,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,MADS;AAEfC,UAAAA,OAAO,EAAE;AACPE,YAAAA,QAAQ,EAAEF,OAAO,CAACE,QADX;AAEPC,YAAAA,QAAQ,EAAEH,OAAO,CAACG,QAFX;AAGPF,YAAAA,MAAM,EAAED,OAAO,CAACC,MAAR,IAAkBD,OAAO,CAACC,MAAR,CAAeG,WAAf;AAHnB;AAFM,SAAjB;AAQD,OArBD,MAqBO,IAAIL,IAAI,KAAK,iCAAb,EAAgD;AACrD,YAAIC,OAAO,CAACE,QAAR,KAAqBL,SAArB,IAAkC,OAAOG,OAAO,CAACE,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIP,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACG,QAAR,KAAqBN,SAArB,IAAkC,OAAOG,OAAO,CAACG,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIR,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,iCADS;AAEfC,UAAAA,OAAO,EAAE;AACPE,YAAAA,QAAQ,EAAEF,OAAO,CAACE,QADX;AAEPC,YAAAA,QAAQ,EAAEH,OAAO,CAACG,QAFX;AAGPF,YAAAA,MAAM,EAAED,OAAO,CAACC;AAHT;AAFM,SAAjB;AAQD,OAjBM,MAiBA,IAAIF,IAAI,KAAK,qCAAb,EAAoD;AACzD,YAAI,OAAOC,OAAO,CAACK,KAAf,KAAyB,QAA7B,EAAuC;AACrC,gBAAM,IAAIV,SAAJ,CAAc,4EAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,qCADS;AAEfC,UAAAA,OAAO,EAAE;AACPK,YAAAA,KAAK,EAAEL,OAAO,CAACK;AADR;AAFM,SAAjB;AAMD,OAXM,MAWA,IAAIN,IAAI,KAAK,+BAAb,EAA8C;AACnD,YAAIC,OAAO,CAACM,QAAR,KAAqBT,SAArB,IAAkC,OAAOG,OAAO,CAACM,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIX,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACO,WAAR,KAAwBV,SAAxB,IAAqC,OAAOG,OAAO,CAACO,WAAf,KAA+B,QAAxE,EAAkF;AAChF,gBAAM,IAAIZ,SAAJ,CAAc,kFAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,+BADS;AAEfC,UAAAA,OAAO,EAAE;AACPM,YAAAA,QAAQ,EAAEN,OAAO,CAACM,QADX;AAEPC,YAAAA,WAAW,EAAEP,OAAO,CAACO;AAFd;AAFM,SAAjB;AAOD,OAhBM,MAgBA,IAAIR,IAAI,KAAK,wCAAb,EAAuD;AAC5D,YAAIC,OAAO,CAACM,QAAR,KAAqBT,SAArB,IAAkC,OAAOG,OAAO,CAACM,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIX,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACO,WAAR,KAAwBV,SAAxB,IAAqC,OAAOG,OAAO,CAACO,WAAf,KAA+B,QAAxE,EAAkF;AAChF,gBAAM,IAAIZ,SAAJ,CAAc,kFAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACQ,SAAR,KAAsBX,SAAtB,IAAmC,OAAOG,OAAO,CAACQ,SAAf,KAA6B,QAApE,EAA8E;AAC5E,gBAAM,IAAIb,SAAJ,CAAc,gFAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,wCADS;AAEfC,UAAAA,OAAO,EAAE;AACPM,YAAAA,QAAQ,EAAEN,OAAO,CAACM,QADX;AAEPC,YAAAA,WAAW,EAAEP,OAAO,CAACO,WAFd;AAGPC,YAAAA,SAAS,EAAER,OAAO,CAACQ;AAHZ;AAFM,SAAjB;AAQD,OArBM,MAqBA,IAAIT,IAAI,KAAK,iDAAb,EAAgE;AACrE,YAAI,OAAOC,OAAO,CAACM,QAAf,KAA4B,QAAhC,EAA0C;AACxC,gBAAM,IAAIX,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAI,OAAOK,OAAO,CAACS,YAAf,KAAgC,QAApC,EAA8C;AAC5C,gBAAM,IAAId,SAAJ,CAAc,mFAAd,CAAN;AACD;;AAED,YAAI,OAAOK,OAAO,CAACU,QAAf,KAA4B,QAAhC,EAA0C;AACxC,gBAAM,IAAIf,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,iDADS;AAEfC,UAAAA,OAAO,EAAE;AACPM,YAAAA,QAAQ,EAAEN,OAAO,CAACM,QADX;AAEPG,YAAAA,YAAY,EAAET,OAAO,CAACS,YAFf;AAGPC,YAAAA,QAAQ,EAAEV,OAAO,CAACU;AAHX;AAFM,SAAjB;AAQD,OArBM,MAqBA;AACL,YAAIV,OAAO,CAACE,QAAR,KAAqBL,SAArB,IAAkC,OAAOG,OAAO,CAACE,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIP,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAIK,OAAO,CAACG,QAAR,KAAqBN,SAArB,IAAkC,OAAOG,OAAO,CAACG,QAAf,KAA4B,QAAlE,EAA4E;AAC1E,gBAAM,IAAIR,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAEDG,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAE,SADS;AAEfC,UAAAA,OAAO,EAAE;AACPE,YAAAA,QAAQ,EAAEF,OAAO,CAACE,QADX;AAEPC,YAAAA,QAAQ,EAAEH,OAAO,CAACG;AAFX;AAFM,SAAjB;AAOD;AACF,KAhJD,MAgJO;AACLL,MAAAA,cAAc,GAAG;AACfC,QAAAA,IAAI,EAAE,SADS;AAEfC,QAAAA,OAAO,EAAE;AACPE,UAAAA,QAAQ,EAAEL,SADH;AAEPM,UAAAA,QAAQ,EAAEN;AAFH;AAFM,OAAjB;AAOD;;AAED,UAAKhC,MAAL,GAAc;AACZ+B,MAAAA,MAAM,EAAE/B,MAAM,CAAC+B,MADH;AAEZE,MAAAA,cAAc,EAAEA,cAFJ;AAGZE,MAAAA,OAAO,EAAE;AACPW,QAAAA,uBAAuB,EAAE,KADlB;AAEPC,QAAAA,OAAO,EAAEf,SAFF;AAGPgB,QAAAA,gBAAgB,EAAE,KAHX;AAIPC,QAAAA,aAAa,EAAE/D,sBAJR;AAKPgE,QAAAA,2BAA2B,EAAE,IAAI,EAAJ,GAAS,EAAT,GAAc,IALpC;AAMP;AACAC,QAAAA,uBAAuB,EAAE,KAPlB;AAQPC,QAAAA,kBAAkB,EAAEpB,SARb;AASPqB,QAAAA,uBAAuB,EAAElE,8BATlB;AAUPmE,QAAAA,cAAc,EAAEtE,uBAVT;AAWPuE,QAAAA,wBAAwB,EAAExF,YAAY,CAACyF,eAAb,CAA6BC,cAXhD;AAYPC,QAAAA,wBAAwB,EAAE,EAZnB;AAaPC,QAAAA,QAAQ,EAAE3B,SAbH;AAcP4B,QAAAA,SAAS,EAAEtE,iBAdJ;AAePuE,QAAAA,UAAU,EAAEnE,kBAfL;AAgBPmB,QAAAA,KAAK,EAAE;AACLiD,UAAAA,IAAI,EAAE,KADD;AAELC,UAAAA,MAAM,EAAE,KAFH;AAGLC,UAAAA,OAAO,EAAE,KAHJ;AAILxB,UAAAA,KAAK,EAAE;AAJF,SAhBA;AAsBPyB,QAAAA,cAAc,EAAE,IAtBT;AAuBPC,QAAAA,qBAAqB,EAAE,IAvBhB;AAwBPC,QAAAA,iBAAiB,EAAE,IAxBZ;AAyBPC,QAAAA,kBAAkB,EAAE,IAzBb;AA0BPC,QAAAA,gBAAgB,EAAE,IA1BX;AA2BPC,QAAAA,0BAA0B,EAAE,IA3BrB;AA4BPC,QAAAA,yBAAyB,EAAE,IA5BpB;AA6BPC,QAAAA,0BAA0B,EAAE,KA7BrB;AA8BPC,QAAAA,uBAAuB,EAAE,KA9BlB;AA+BPC,QAAAA,sBAAsB,EAAE,IA/BjB;AAgCPC,QAAAA,OAAO,EAAE,IAhCF;AAiCPC,QAAAA,mBAAmB,EAAE,KAjCd;AAkCPC,QAAAA,2BAA2B,EAAE7C,SAlCtB;AAmCP8C,QAAAA,YAAY,EAAE9C,SAnCP;AAoCP+C,QAAAA,cAAc,EAAEhH,YAAY,CAACyF,eAAb,CAA6BC,cApCtC;AAqCPuB,QAAAA,QAAQ,EAAEvF,gBArCH;AAsCPwF,QAAAA,YAAY,EAAEjD,SAtCP;AAuCPkD,QAAAA,2BAA2B,EAAE,CAvCtB;AAwCPC,QAAAA,mBAAmB,EAAE,KAxCd;AAyCPC,QAAAA,UAAU,EAAEhG,mBAzCL;AA0CPiG,QAAAA,IAAI,EAAE9F,YA1CC;AA2CP+F,QAAAA,cAAc,EAAE,KA3CT;AA4CPC,QAAAA,cAAc,EAAEtG,8BA5CT;AA6CPuG,QAAAA,mBAAmB,EAAE,KA7Cd;AA8CPC,QAAAA,gCAAgC,EAAE,KA9C3B;AA+CPC,QAAAA,UAAU,EAAE1D,SA/CL;AAgDP2D,QAAAA,8BAA8B,EAAE,KAhDzB;AAiDPC,QAAAA,UAAU,EAAEpG,mBAjDL;AAkDPqG,QAAAA,QAAQ,EAAExG,gBAlDH;AAmDPyG,QAAAA,mBAAmB,EAAE9D,SAnDd;AAoDP+D,QAAAA,sBAAsB,EAAE,IApDjB;AAqDPC,QAAAA,cAAc,EAAE,KArDT;AAsDPC,QAAAA,MAAM,EAAE,IAtDD;AAuDPC,QAAAA,0BAA0B,EAAE,IAvDrB;AAwDPC,QAAAA,aAAa,EAAEnE,SAxDR;AAyDPoE,QAAAA,cAAc,EAAE;AAzDT;AAHG,KAAd;;AAgEA,QAAIpG,MAAM,CAACmC,OAAX,EAAoB;AAClB,UAAInC,MAAM,CAACmC,OAAP,CAAekD,IAAf,IAAuBrF,MAAM,CAACmC,OAAP,CAAe2C,YAA1C,EAAwD;AACtD,cAAM,IAAIuB,KAAJ,CAAU,uDAAuDrG,MAAM,CAACmC,OAAP,CAAekD,IAAtE,GAA6E,OAA7E,GAAuFrF,MAAM,CAACmC,OAAP,CAAe2C,YAAtG,GAAqH,WAA/H,CAAN;AACD;;AAED,UAAI9E,MAAM,CAACmC,OAAP,CAAeW,uBAAf,KAA2Cd,SAA/C,EAA0D;AACxD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeW,uBAAtB,KAAkD,SAAlD,IAA+D9C,MAAM,CAACmC,OAAP,CAAeW,uBAAf,KAA2C,IAA9G,EAAoH;AAClH,gBAAM,IAAIhB,SAAJ,CAAc,uFAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBW,uBAApB,GAA8C9C,MAAM,CAACmC,OAAP,CAAeW,uBAA7D;AACD;;AAED,UAAI9C,MAAM,CAACmC,OAAP,CAAeY,OAAf,KAA2Bf,SAA/B,EAA0C;AACxC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeY,OAAtB,KAAkC,QAAtC,EAAgD;AAC9C,gBAAM,IAAIjB,SAAJ,CAAc,+DAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBY,OAApB,GAA8B/C,MAAM,CAACmC,OAAP,CAAeY,OAA7C;AACD;;AAED,UAAI/C,MAAM,CAACmC,OAAP,CAAea,gBAAf,KAAoChB,SAAxC,EAAmD;AACjD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAea,gBAAtB,KAA2C,SAA/C,EAA0D;AACxD,gBAAM,IAAIlB,SAAJ,CAAc,yEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBa,gBAApB,GAAuChD,MAAM,CAACmC,OAAP,CAAea,gBAAtD;AACD;;AAED,UAAIhD,MAAM,CAACmC,OAAP,CAAec,aAAf,KAAiCjB,SAArC,EAAgD;AAC9C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAec,aAAtB,KAAwC,QAA5C,EAAsD;AACpD,gBAAM,IAAInB,SAAJ,CAAc,qEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBc,aAApB,GAAoCjD,MAAM,CAACmC,OAAP,CAAec,aAAnD;AACD;;AAED,UAAIjD,MAAM,CAACmC,OAAP,CAAeiB,kBAAnB,EAAuC;AACrC,YAAI,OAAOpD,MAAM,CAACmC,OAAP,CAAeiB,kBAAtB,KAA6C,UAAjD,EAA6D;AAC3D,gBAAM,IAAItB,SAAJ,CAAc,uEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBiB,kBAApB,GAAyCpD,MAAM,CAACmC,OAAP,CAAeiB,kBAAxD;AACD;;AAED,UAAIpD,MAAM,CAACmC,OAAP,CAAemB,cAAf,KAAkCtB,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAemB,cAAtB,KAAyC,QAA7C,EAAuD;AACrD,gBAAM,IAAIxB,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBmB,cAApB,GAAqCtD,MAAM,CAACmC,OAAP,CAAemB,cAApD;AACD;;AAED,UAAItD,MAAM,CAACmC,OAAP,CAAeoB,wBAAf,KAA4CvB,SAAhD,EAA2D;AACzD,SAAC,GAAGjE,YAAY,CAACuI,yBAAjB,EAA4CtG,MAAM,CAACmC,OAAP,CAAeoB,wBAA3D,EAAqF,yCAArF;AACA,cAAKvD,MAAL,CAAYmC,OAAZ,CAAoBoB,wBAApB,GAA+CvD,MAAM,CAACmC,OAAP,CAAeoB,wBAA9D;AACD;;AAED,UAAIvD,MAAM,CAACmC,OAAP,CAAemB,cAAf,KAAkCtB,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAemB,cAAtB,KAAyC,QAA7C,EAAuD;AACrD,gBAAM,IAAIxB,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBmB,cAApB,GAAqCtD,MAAM,CAACmC,OAAP,CAAemB,cAApD;AACD;;AAED,UAAItD,MAAM,CAACmC,OAAP,CAAeuB,wBAAf,KAA4C1B,SAAhD,EAA2D;AACzD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeuB,wBAAtB,KAAmD,QAAnD,IAA+D1D,MAAM,CAACmC,OAAP,CAAeuB,wBAAf,KAA4C,IAA/G,EAAqH;AACnH,gBAAM,IAAI5B,SAAJ,CAAc,gFAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBuB,wBAApB,GAA+C1D,MAAM,CAACmC,OAAP,CAAeuB,wBAA9D;AACD;;AAED,UAAI1D,MAAM,CAACmC,OAAP,CAAewB,QAAf,KAA4B3B,SAAhC,EAA2C;AACzC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAewB,QAAtB,KAAmC,QAAvC,EAAiD;AAC/C,gBAAM,IAAI7B,SAAJ,CAAc,gEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBwB,QAApB,GAA+B3D,MAAM,CAACmC,OAAP,CAAewB,QAA9C;AACD;;AAED,UAAI3D,MAAM,CAACmC,OAAP,CAAeyB,SAAf,KAA6B5B,SAAjC,EAA4C;AAC1C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeyB,SAAtB,KAAoC,QAApC,IAAgD5D,MAAM,CAACmC,OAAP,CAAeyB,SAAf,KAA6B,IAAjF,EAAuF;AACrF,gBAAM,IAAI9B,SAAJ,CAAc,iEAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAeyB,SAAf,KAA6B,IAA7B,KAAsC5D,MAAM,CAACmC,OAAP,CAAeyB,SAAf,GAA2B,CAA3B,IAAgC5D,MAAM,CAACmC,OAAP,CAAeyB,SAAf,GAA2B,CAAjG,CAAJ,EAAyG;AACvG,gBAAM,IAAI2C,UAAJ,CAAe,+DAAf,CAAN;AACD;;AAED,cAAKvG,MAAL,CAAYmC,OAAZ,CAAoByB,SAApB,GAAgC5D,MAAM,CAACmC,OAAP,CAAeyB,SAA/C;AACD;;AAED,UAAI5D,MAAM,CAACmC,OAAP,CAAe0B,UAAf,KAA8B7B,SAAlC,EAA6C;AAC3C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe0B,UAAtB,KAAqC,QAArC,IAAiD7D,MAAM,CAACmC,OAAP,CAAe0B,UAAf,KAA8B,IAAnF,EAAyF;AACvF,gBAAM,IAAI/B,SAAJ,CAAc,0EAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB0B,UAApB,GAAiC7D,MAAM,CAACmC,OAAP,CAAe0B,UAAhD;AACD;;AAED,UAAI7D,MAAM,CAACmC,OAAP,CAAetB,KAAnB,EAA0B;AACxB,YAAIb,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBiD,IAArB,KAA8B9B,SAAlC,EAA6C;AAC3C,cAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBiD,IAA5B,KAAqC,SAAzC,EAAoD;AAClD,kBAAM,IAAIhC,SAAJ,CAAc,mEAAd,CAAN;AACD;;AAED,gBAAK9B,MAAL,CAAYmC,OAAZ,CAAoBtB,KAApB,CAA0BiD,IAA1B,GAAiC9D,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBiD,IAAtD;AACD;;AAED,YAAI9D,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBkD,MAArB,KAAgC/B,SAApC,EAA+C;AAC7C,cAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBkD,MAA5B,KAAuC,SAA3C,EAAsD;AACpD,kBAAM,IAAIjC,SAAJ,CAAc,qEAAd,CAAN;AACD;;AAED,gBAAK9B,MAAL,CAAYmC,OAAZ,CAAoBtB,KAApB,CAA0BkD,MAA1B,GAAmC/D,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBkD,MAAxD;AACD;;AAED,YAAI/D,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBmD,OAArB,KAAiChC,SAArC,EAAgD;AAC9C,cAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBmD,OAA5B,KAAwC,SAA5C,EAAuD;AACrD,kBAAM,IAAIlC,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,gBAAK9B,MAAL,CAAYmC,OAAZ,CAAoBtB,KAApB,CAA0BmD,OAA1B,GAAoChE,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqBmD,OAAzD;AACD;;AAED,YAAIhE,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqB2B,KAArB,KAA+BR,SAAnC,EAA8C;AAC5C,cAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqB2B,KAA5B,KAAsC,SAA1C,EAAqD;AACnD,kBAAM,IAAIV,SAAJ,CAAc,oEAAd,CAAN;AACD;;AAED,gBAAK9B,MAAL,CAAYmC,OAAZ,CAAoBtB,KAApB,CAA0B2B,KAA1B,GAAkCxC,MAAM,CAACmC,OAAP,CAAetB,KAAf,CAAqB2B,KAAvD;AACD;AACF;;AAED,UAAIxC,MAAM,CAACmC,OAAP,CAAe8B,cAAf,KAAkCjC,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe8B,cAAtB,KAAyC,SAAzC,IAAsDjE,MAAM,CAACmC,OAAP,CAAe8B,cAAf,KAAkC,IAA5F,EAAkG;AAChG,gBAAM,IAAInC,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB8B,cAApB,GAAqCjE,MAAM,CAACmC,OAAP,CAAe8B,cAApD;AACD;;AAED,UAAIjE,MAAM,CAACmC,OAAP,CAAe+B,qBAAf,KAAyClC,SAA7C,EAAwD;AACtD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe+B,qBAAtB,KAAgD,SAAhD,IAA6DlE,MAAM,CAACmC,OAAP,CAAe+B,qBAAf,KAAyC,IAA1G,EAAgH;AAC9G,gBAAM,IAAIpC,SAAJ,CAAc,sFAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB+B,qBAApB,GAA4ClE,MAAM,CAACmC,OAAP,CAAe+B,qBAA3D;AACD;;AAED,UAAIlE,MAAM,CAACmC,OAAP,CAAegC,iBAAf,KAAqCnC,SAAzC,EAAoD;AAClD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAegC,iBAAtB,KAA4C,SAA5C,IAAyDnE,MAAM,CAACmC,OAAP,CAAegC,iBAAf,KAAqC,IAAlG,EAAwG;AACtG,gBAAM,IAAIrC,SAAJ,CAAc,kFAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBgC,iBAApB,GAAwCnE,MAAM,CAACmC,OAAP,CAAegC,iBAAvD;AACD;;AAED,UAAInE,MAAM,CAACmC,OAAP,CAAeiC,kBAAf,KAAsCpC,SAA1C,EAAqD;AACnD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeiC,kBAAtB,KAA6C,SAA7C,IAA0DpE,MAAM,CAACmC,OAAP,CAAeiC,kBAAf,KAAsC,IAApG,EAA0G;AACxG,gBAAM,IAAItC,SAAJ,CAAc,mFAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBiC,kBAApB,GAAyCpE,MAAM,CAACmC,OAAP,CAAeiC,kBAAxD;AACD;;AAED,UAAIpE,MAAM,CAACmC,OAAP,CAAekC,gBAAf,KAAoCrC,SAAxC,EAAmD;AACjD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAekC,gBAAtB,KAA2C,SAA3C,IAAwDrE,MAAM,CAACmC,OAAP,CAAekC,gBAAf,KAAoC,IAAhG,EAAsG;AACpG,gBAAM,IAAIvC,SAAJ,CAAc,iFAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBkC,gBAApB,GAAuCrE,MAAM,CAACmC,OAAP,CAAekC,gBAAtD;AACD;;AAED,UAAIrE,MAAM,CAACmC,OAAP,CAAemC,0BAAf,KAA8CtC,SAAlD,EAA6D;AAC3D,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAemC,0BAAtB,KAAqD,SAArD,IAAkEtE,MAAM,CAACmC,OAAP,CAAemC,0BAAf,KAA8C,IAApH,EAA0H;AACxH,gBAAM,IAAIxC,SAAJ,CAAc,2FAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBmC,0BAApB,GAAiDtE,MAAM,CAACmC,OAAP,CAAemC,0BAAhE;AACD;;AAED,UAAItE,MAAM,CAACmC,OAAP,CAAeoC,yBAAf,KAA6CvC,SAAjD,EAA4D;AAC1D,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeoC,yBAAtB,KAAoD,SAApD,IAAiEvE,MAAM,CAACmC,OAAP,CAAeoC,yBAAf,KAA6C,IAAlH,EAAwH;AACtH,gBAAM,IAAIzC,SAAJ,CAAc,0FAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBoC,yBAApB,GAAgDvE,MAAM,CAACmC,OAAP,CAAeoC,yBAA/D;AACD;;AAED,UAAIvE,MAAM,CAACmC,OAAP,CAAeqC,0BAAf,KAA8CxC,SAAlD,EAA6D;AAC3D,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeqC,0BAAtB,KAAqD,SAArD,IAAkExE,MAAM,CAACmC,OAAP,CAAeqC,0BAAf,KAA8C,IAApH,EAA0H;AACxH,gBAAM,IAAI1C,SAAJ,CAAc,2FAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBqC,0BAApB,GAAiDxE,MAAM,CAACmC,OAAP,CAAeqC,0BAAhE;AACD;;AAED,UAAIxE,MAAM,CAACmC,OAAP,CAAesC,uBAAf,KAA2CzC,SAA/C,EAA0D;AACxD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAesC,uBAAtB,KAAkD,SAAlD,IAA+DzE,MAAM,CAACmC,OAAP,CAAesC,uBAAf,KAA2C,IAA9G,EAAoH;AAClH,gBAAM,IAAI3C,SAAJ,CAAc,wFAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBsC,uBAApB,GAA8CzE,MAAM,CAACmC,OAAP,CAAesC,uBAA7D;AACD;;AAED,UAAIzE,MAAM,CAACmC,OAAP,CAAeuC,sBAAf,KAA0C1C,SAA9C,EAAyD;AACvD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeuC,sBAAtB,KAAiD,SAAjD,IAA8D1E,MAAM,CAACmC,OAAP,CAAeuC,sBAAf,KAA0C,IAA5G,EAAkH;AAChH,gBAAM,IAAI5C,SAAJ,CAAc,uFAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBuC,sBAApB,GAA6C1E,MAAM,CAACmC,OAAP,CAAeuC,sBAA5D;AACD;;AAED,UAAI1E,MAAM,CAACmC,OAAP,CAAewC,OAAf,KAA2B3C,SAA/B,EAA0C;AACxC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAewC,OAAtB,KAAkC,SAAtC,EAAiD;AAC/C,gBAAM,IAAI7C,SAAJ,CAAc,gEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBwC,OAApB,GAA8B3E,MAAM,CAACmC,OAAP,CAAewC,OAA7C;AACD;;AAED,UAAI3E,MAAM,CAACmC,OAAP,CAAeyC,mBAAf,KAAuC5C,SAA3C,EAAsD;AACpD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeyC,mBAAtB,KAA8C,SAAlD,EAA6D;AAC3D,gBAAM,IAAI9C,SAAJ,CAAc,4EAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoByC,mBAApB,GAA0C5E,MAAM,CAACmC,OAAP,CAAeyC,mBAAzD;AACD;;AAED,UAAI5E,MAAM,CAACmC,OAAP,CAAe2C,YAAf,KAAgC9C,SAApC,EAA+C;AAC7C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe2C,YAAtB,KAAuC,QAA3C,EAAqD;AACnD,gBAAM,IAAIhD,SAAJ,CAAc,oEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB2C,YAApB,GAAmC9E,MAAM,CAACmC,OAAP,CAAe2C,YAAlD;AACA,cAAK9E,MAAL,CAAYmC,OAAZ,CAAoBkD,IAApB,GAA2BrD,SAA3B;AACD;;AAED,UAAIhC,MAAM,CAACmC,OAAP,CAAe4C,cAAf,KAAkC/C,SAAtC,EAAiD;AAC/C,SAAC,GAAGjE,YAAY,CAACuI,yBAAjB,EAA4CtG,MAAM,CAACmC,OAAP,CAAe4C,cAA3D,EAA2E,+BAA3E;AACA,cAAK/E,MAAL,CAAYmC,OAAZ,CAAoB4C,cAApB,GAAqC/E,MAAM,CAACmC,OAAP,CAAe4C,cAApD;AACD;;AAED,UAAI/E,MAAM,CAACmC,OAAP,CAAe6C,QAAf,KAA4BhD,SAAhC,EAA2C;AACzC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe6C,QAAtB,KAAmC,QAAnC,IAA+ChF,MAAM,CAACmC,OAAP,CAAe6C,QAAf,KAA4B,IAA/E,EAAqF;AACnF,gBAAM,IAAIlD,SAAJ,CAAc,wEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB6C,QAApB,GAA+BhF,MAAM,CAACmC,OAAP,CAAe6C,QAA9C;AACD;;AAED,UAAIhF,MAAM,CAACmC,OAAP,CAAe8C,YAAf,KAAgCjD,SAApC,EAA+C;AAC7C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe8C,YAAtB,KAAuC,QAA3C,EAAqD;AACnD,gBAAM,IAAInD,SAAJ,CAAc,oEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB8C,YAApB,GAAmCjF,MAAM,CAACmC,OAAP,CAAe8C,YAAlD;AACD;;AAED,UAAIjF,MAAM,CAACmC,OAAP,CAAegD,mBAAf,KAAuCnD,SAA3C,EAAsD;AACpD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAegD,mBAAtB,KAA8C,SAAlD,EAA6D;AAC3D,gBAAM,IAAIrD,SAAJ,CAAc,4EAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBgD,mBAApB,GAA0CnF,MAAM,CAACmC,OAAP,CAAegD,mBAAzD;AACD;;AAED,UAAInF,MAAM,CAACmC,OAAP,CAAeiD,UAAf,KAA8BpD,SAAlC,EAA6C;AAC3C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeiD,UAAtB,KAAqC,QAAzC,EAAmD;AACjD,gBAAM,IAAItD,SAAJ,CAAc,kEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBiD,UAApB,GAAiCpF,MAAM,CAACmC,OAAP,CAAeiD,UAAhD;AACD;;AAED,UAAIpF,MAAM,CAACmC,OAAP,CAAekD,IAAf,KAAwBrD,SAA5B,EAAuC;AACrC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAekD,IAAtB,KAA+B,QAAnC,EAA6C;AAC3C,gBAAM,IAAIvD,SAAJ,CAAc,4DAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAekD,IAAf,IAAuB,CAAvB,IAA4BrF,MAAM,CAACmC,OAAP,CAAekD,IAAf,IAAuB,KAAvD,EAA8D;AAC5D,gBAAM,IAAIkB,UAAJ,CAAe,4DAAf,CAAN;AACD;;AAED,cAAKvG,MAAL,CAAYmC,OAAZ,CAAoBkD,IAApB,GAA2BrF,MAAM,CAACmC,OAAP,CAAekD,IAA1C;AACA,cAAKrF,MAAL,CAAYmC,OAAZ,CAAoB2C,YAApB,GAAmC9C,SAAnC;AACD;;AAED,UAAIhC,MAAM,CAACmC,OAAP,CAAemD,cAAf,KAAkCtD,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAemD,cAAtB,KAAyC,SAA7C,EAAwD;AACtD,gBAAM,IAAIxD,SAAJ,CAAc,uEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBmD,cAApB,GAAqCtF,MAAM,CAACmC,OAAP,CAAemD,cAApD;AACD;;AAED,UAAItF,MAAM,CAACmC,OAAP,CAAeoD,cAAf,KAAkCvD,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeoD,cAAtB,KAAyC,QAA7C,EAAuD;AACrD,gBAAM,IAAIzD,SAAJ,CAAc,sEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBoD,cAApB,GAAqCvF,MAAM,CAACmC,OAAP,CAAeoD,cAApD;AACD;;AAED,UAAIvF,MAAM,CAACmC,OAAP,CAAe+C,2BAAf,KAA+ClD,SAAnD,EAA8D;AAC5D,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe+C,2BAAtB,KAAsD,QAA1D,EAAoE;AAClE,gBAAM,IAAIpD,SAAJ,CAAc,mFAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAe+C,2BAAf,GAA6C,CAAjD,EAAoD;AAClD,gBAAM,IAAIpD,SAAJ,CAAc,4FAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB+C,2BAApB,GAAkDlF,MAAM,CAACmC,OAAP,CAAe+C,2BAAjE;AACD;;AAED,UAAIlF,MAAM,CAACmC,OAAP,CAAekB,uBAAf,KAA2CrB,SAA/C,EAA0D;AACxD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAekB,uBAAtB,KAAkD,QAAtD,EAAgE;AAC9D,gBAAM,IAAIvB,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAekB,uBAAf,IAA0C,CAA9C,EAAiD;AAC/C,gBAAM,IAAIvB,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBkB,uBAApB,GAA8CrD,MAAM,CAACmC,OAAP,CAAekB,uBAA7D;AACD;;AAED,UAAIrD,MAAM,CAACmC,OAAP,CAAeqD,mBAAf,KAAuCxD,SAA3C,EAAsD;AACpD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeqD,mBAAtB,KAA8C,SAAlD,EAA6D;AAC3D,gBAAM,IAAI1D,SAAJ,CAAc,4EAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBqD,mBAApB,GAA0CxF,MAAM,CAACmC,OAAP,CAAeqD,mBAAzD;AACD;;AAED,UAAIxF,MAAM,CAACmC,OAAP,CAAesD,gCAAf,KAAoDzD,SAAxD,EAAmE;AACjE,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAesD,gCAAtB,KAA2D,SAA/D,EAA0E;AACxE,gBAAM,IAAI3D,SAAJ,CAAc,yFAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBsD,gCAApB,GAAuDzF,MAAM,CAACmC,OAAP,CAAesD,gCAAtE;AACD;;AAED,UAAIzF,MAAM,CAACmC,OAAP,CAAeyD,UAAf,KAA8B5D,SAAlC,EAA6C;AAC3C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeyD,UAAtB,KAAqC,QAAzC,EAAmD;AACjD,gBAAM,IAAI9D,SAAJ,CAAc,kEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC5F,MAAM,CAACmC,OAAP,CAAeyD,UAAhD;AACD;;AAED,UAAI5F,MAAM,CAACmC,OAAP,CAAe0D,QAAf,KAA4B7D,SAAhC,EAA2C;AACzC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe0D,QAAtB,KAAmC,QAAnC,IAA+C7F,MAAM,CAACmC,OAAP,CAAe0D,QAAf,KAA4B,IAA/E,EAAqF;AACnF,gBAAM,IAAI/D,SAAJ,CAAc,wEAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAe0D,QAAf,GAA0B,UAA9B,EAA0C;AACxC,gBAAM,IAAI/D,SAAJ,CAAc,kEAAd,CAAN;AACD,SAFD,MAEO,IAAI9B,MAAM,CAACmC,OAAP,CAAe0D,QAAf,GAA0B,CAAC,CAA/B,EAAkC;AACvC,gBAAM,IAAI/D,SAAJ,CAAc,0DAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB0D,QAApB,GAA+B7F,MAAM,CAACmC,OAAP,CAAe0D,QAAf,GAA0B,CAAzD;AACD;;AAED,UAAI7F,MAAM,CAACmC,OAAP,CAAe4D,sBAAf,KAA0C/D,SAA9C,EAAyD;AACvD,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe4D,sBAAtB,KAAiD,SAArD,EAAgE;AAC9D,gBAAM,IAAIjE,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB4D,sBAApB,GAA6C/F,MAAM,CAACmC,OAAP,CAAe4D,sBAA5D;AACD;;AAED,UAAI/F,MAAM,CAACmC,OAAP,CAAe6D,cAAf,KAAkChE,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe6D,cAAtB,KAAyC,SAA7C,EAAwD;AACtD,gBAAM,IAAIlE,SAAJ,CAAc,uEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB6D,cAApB,GAAqChG,MAAM,CAACmC,OAAP,CAAe6D,cAApD;AACD;;AAED,UAAIhG,MAAM,CAACmC,OAAP,CAAe8D,MAAf,KAA0BjE,SAA9B,EAAyC;AACvC,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe8D,MAAtB,KAAiC,SAArC,EAAgD;AAC9C,gBAAM,IAAInE,SAAJ,CAAc,+DAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoB8D,MAApB,GAA6BjG,MAAM,CAACmC,OAAP,CAAe8D,MAA5C;AACD;;AAED,UAAIjG,MAAM,CAACmC,OAAP,CAAe+D,0BAAf,KAA8ClE,SAAlD,EAA6D;AAC3D,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAe+D,0BAAtB,KAAqD,SAAzD,EAAoE;AAClE,gBAAM,IAAIpE,SAAJ,CAAc,mFAAd,CAAN;AACD;;AAED,YAAI9B,MAAM,CAACmC,OAAP,CAAe+D,0BAAf,KAA8C,KAAlD,EAAyD;AACvDpH,UAAAA,SAAS,CAAC,iPAAD,CAAT;AACD;;AAED,cAAKkB,MAAL,CAAYmC,OAAZ,CAAoB+D,0BAApB,GAAiDlG,MAAM,CAACmC,OAAP,CAAe+D,0BAAhE;AACD;;AAED,UAAIlG,MAAM,CAACmC,OAAP,CAAegE,aAAf,KAAiCnE,SAArC,EAAgD;AAC9C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAegE,aAAtB,KAAwC,QAA5C,EAAsD;AACpD,gBAAM,IAAIrE,SAAJ,CAAc,qEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBgE,aAApB,GAAoCnG,MAAM,CAACmC,OAAP,CAAegE,aAAnD;AACD;;AAED,UAAInG,MAAM,CAACmC,OAAP,CAAeiE,cAAf,KAAkCpE,SAAtC,EAAiD;AAC/C,YAAI,OAAOhC,MAAM,CAACmC,OAAP,CAAeiE,cAAtB,KAAyC,SAA7C,EAAwD;AACtD,gBAAM,IAAItE,SAAJ,CAAc,uEAAd,CAAN;AACD;;AAED,cAAK9B,MAAL,CAAYmC,OAAZ,CAAoBiE,cAApB,GAAqCpG,MAAM,CAACmC,OAAP,CAAeiE,cAApD;AACD;AACF;;AAED,QAAII,kBAAkB,GAAG,MAAKxG,MAAL,CAAYmC,OAAZ,CAAoBuB,wBAA7C;;AAEA,QAAI8C,kBAAkB,CAACC,aAAnB,KAAqCzE,SAAzC,EAAoD;AAClD;AACA;AACA;AACA;AACA;AACAwE,MAAAA,kBAAkB,GAAGpK,MAAM,CAACsK,MAAP,CAAcF,kBAAd,EAAkC;AACrDC,QAAAA,aAAa,EAAE;AACblK,UAAAA,KAAK,EAAEM,UAAU,CAACL,OAAX,CAAmBmK;AADb;AADsC,OAAlC,CAArB;AAKD;;AAED,UAAKxG,aAAL,GAAqB,CAAC,GAAGrD,IAAI,CAAC8J,mBAAT,EAA8BJ,kBAA9B,CAArB;AACA,UAAK3F,KAAL,GAAa,MAAKgG,WAAL,EAAb;AACA,UAAKzG,aAAL,GAAqB,KAArB;AACA,UAAKC,sBAAL,GAA8B,CAACyG,MAAM,CAACC,IAAP,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAZ,CAAD,CAA9B,CA/rBkB,CA+rBqD;AACvE;AACA;AACA;AACA;;AAEA,UAAKzG,gBAAL,GAAwB,CAAxB;AACA,UAAKC,UAAL,GAAkB,KAAlB;AACA,UAAKG,MAAL,GAAc,KAAd;AACA,UAAKC,QAAL,GAAgB,KAAhB;AACA,UAAKa,aAAL,GAAqBsF,MAAM,CAACE,KAAP,CAAa,CAAb,CAArB;AACA,UAAKxG,sBAAL,GAA8B,CAA9B;AACA,UAAKC,oBAAL,GAA4B,IAAIpD,qBAAqB,CAAC4J,oBAA1B,EAA5B;AACA,UAAK/F,KAAL,GAAa,MAAKgG,KAAL,CAAWC,WAAxB;;AAEA,UAAKtF,uBAAL,GAA+B,YAAM;AACnC,YAAKZ,SAAL,CAAemG,WAAf,CAA2B9J,OAAO,CAAC+J,IAAR,CAAaC,SAAxC;;AACA,YAAKC,YAAL,CAAkB,MAAKL,KAAL,CAAWM,cAA7B;;AACA,YAAKC,iBAAL;AACD,KAJD;;AA9sBkB;AAmtBnB;;;;WAED,iBAAQC,eAAR,EAAyB;AAAA;;AACvB,UAAI,KAAKxG,KAAL,KAAe,KAAKgG,KAAL,CAAWC,WAA9B,EAA2C;AACzC,cAAM,IAAInJ,OAAO,CAAC2J,eAAZ,CAA4B,sDAAsD,KAAKzG,KAAL,CAAW0G,IAAjE,GAAwE,UAApG,CAAN;AACD;;AAED,UAAIF,eAAJ,EAAqB;AACnB,YAAMG,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG,EAAI;AACvB,UAAA,MAAI,CAACC,cAAL,CAAoB,OAApB,EAA6BC,OAA7B;;AACAN,UAAAA,eAAe,CAACI,GAAD,CAAf;AACD,SAHD;;AAKA,YAAME,OAAO,GAAG,SAAVA,OAAU,CAAAF,GAAG,EAAI;AACrB,UAAA,MAAI,CAACC,cAAL,CAAoB,SAApB,EAA+BF,SAA/B;;AACAH,UAAAA,eAAe,CAACI,GAAD,CAAf;AACD,SAHD;;AAKA,aAAKG,IAAL,CAAU,SAAV,EAAqBJ,SAArB;AACA,aAAKI,IAAL,CAAU,OAAV,EAAmBD,OAAnB;AACD;;AAED,WAAKT,YAAL,CAAkB,KAAKL,KAAL,CAAWgB,UAA7B;AACD;AACD;AACF;AACA;;;;WAGE,YAAGC,KAAH,EAAUC,QAAV,EAAoB;AAClB,gFAAgBD,KAAhB,EAAuBC,QAAvB;AACD;AACD;AACF;AACA;;;;WAGE,cAAKD,KAAL,EAAqB;AAAA;;AAAA,wCAANE,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACnB,0GAAkBF,KAAlB,SAA4BE,IAA5B;AACD;AACD;AACF;AACA;AACA;AACA;;;;WAGE,iBAAQ;AACN,WAAKd,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD;AACD;AACF;AACA;;;;WAGE,gCAAuB;AAAA;;AACrB,UAAMC,MAAM,GAAG,KAAKC,kBAAL,EAAf;;AAEA,UAAI,KAAKxI,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAxB,EAA8B;AAC5B,eAAO,KAAKoD,aAAL,CAAmB,KAAKzI,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAvC,EAA6C,KAAKrF,MAAL,CAAYmC,OAAZ,CAAoBgD,mBAAjE,EAAsFoD,MAAtF,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAInL,eAAe,CAACsL,cAApB,GAAqCC,cAArC,CAAoD;AACzD5G,UAAAA,MAAM,EAAE,KAAK/B,MAAL,CAAY+B,MADqC;AAEzD+C,UAAAA,YAAY,EAAE,KAAK9E,MAAL,CAAYmC,OAAZ,CAAoB2C,YAFuB;AAGzD8D,UAAAA,OAAO,EAAE,KAAK5I,MAAL,CAAYmC,OAAZ,CAAoBmB,cAH4B;AAIzDiF,UAAAA,MAAM,EAAEA;AAJiD,SAApD,EAKJ,UAACT,GAAD,EAAMzC,IAAN,EAAe;AAChB,cAAIyC,GAAJ,EAAS;AACP,gBAAIA,GAAG,CAACF,IAAJ,KAAa,YAAjB,EAA+B;AAC7B;AACD;;AAED,YAAA,MAAI,CAACiB,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAG7K,OAAO,CAAC2J,eAAZ,EAA6BG,GAAG,CAACgB,OAAjC,EAA0C,aAA1C,CAArB;AACD,WAND,MAMO;AACL,YAAA,MAAI,CAACL,aAAL,CAAmBpD,IAAnB,EAAyB,MAAI,CAACrF,MAAL,CAAYmC,OAAZ,CAAoBgD,mBAA7C,EAAkEoD,MAAlE;AACD;AACF,SAfM,CAAP;AAgBD;AACF;AACD;AACF;AACA;;;;WAGE,2BAAkBQ,WAAlB,EAA+B;AAAA;;AAC7B,UAAI,CAAC,KAAKrI,MAAV,EAAkB;AAChB,aAAKsI,iBAAL;AACA,aAAKC,iBAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;;AAEA,YAAIJ,WAAW,KAAKpJ,YAAY,CAACE,QAAjC,EAA2C;AACzC,eAAKgJ,IAAL,CAAU,WAAV;AACD,SAFD,MAEO,IAAIE,WAAW,KAAKpJ,YAAY,CAACG,KAAjC,EAAwC;AAC7CsJ,UAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACrB,YAAA,MAAI,CAACR,IAAL,CAAU,KAAV;AACD,WAFD;AAGD;;AAED,YAAMxH,OAAO,GAAG,KAAKA,OAArB;;AAEA,YAAIA,OAAJ,EAAa;AACX,cAAMyG,GAAG,GAAG,CAAC,GAAG9J,OAAO,CAACsL,YAAZ,EAA0B,6CAA1B,EAAyE,QAAzE,CAAZ;AACAjI,UAAAA,OAAO,CAACkI,QAAR,CAAiBzB,GAAjB;AACA,eAAKzG,OAAL,GAAeW,SAAf;AACD;;AAED,aAAKtB,MAAL,GAAc,IAAd;AACA,aAAKC,QAAL,GAAgB,KAAhB;AACA,aAAKC,UAAL,GAAkBoB,SAAlB;AACD;AACF;AACD;AACF;AACA;;;;WAGE,uBAAc;AAAA;;AACZ,UAAMnB,KAAK,GAAG,IAAI3D,MAAM,CAACV,OAAX,CAAmB,KAAKwD,MAAL,CAAYmC,OAAZ,CAAoBtB,KAAvC,CAAd;AACAA,MAAAA,KAAK,CAAC2I,EAAN,CAAS,OAAT,EAAkB,UAAAV,OAAO,EAAI;AAC3B,QAAA,MAAI,CAACD,IAAL,CAAU,OAAV,EAAmBC,OAAnB;AACD,OAFD;AAGA,aAAOjI,KAAP;AACD;AACD;AACF;AACA;;;;WAGE,iCAAwBiI,OAAxB,EAAiC;AAAA;;AAC/B,UAAMW,iBAAiB,GAAG,IAAI3L,kBAAkB,CAAC4L,MAAvB,CAA8BZ,OAA9B,EAAuC,KAAKjI,KAA5C,EAAmD,KAAKb,MAAL,CAAYmC,OAA/D,CAA1B;AACAsH,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,aAArB,EAAoC,UAAAhH,KAAK,EAAI;AAC3C,QAAA,MAAI,CAACqG,IAAL,CAAU,aAAV,EAAyBrG,KAAzB;AACD,OAFD;AAGAiH,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,eAArB,EAAsC,UAAAhH,KAAK,EAAI;AAC7C,YAAIA,KAAK,CAAC1B,UAAV,EAAsB;AACpB,UAAA,MAAI,CAACA,UAAL,GAAkB0B,KAAK,CAAC1B,UAAxB;AACA,UAAA,MAAI,CAACC,gBAAL,GAAwByB,KAAK,CAACzB,gBAA9B;AACD;;AAED,QAAA,MAAI,CAAC8H,IAAL,CAAU,eAAV,EAA2BrG,KAA3B;AACD,OAPD;AAQAiH,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,cAArB,EAAqC,UAAAhH,KAAK,EAAI;AAC5C,QAAA,MAAI,CAACqG,IAAL,CAAU,cAAV,EAA0BrG,KAA1B;;AAEA,YAAI,MAAI,CAAC7B,QAAT,EAAmB;AACjB,cAAMU,OAAO,GAAG,MAAI,CAACA,OAArB;;AAEA,cAAIA,OAAJ,EAAa;AACX,gBAAI,CAACA,OAAO,CAACsI,QAAb,EAAuB;AACrB,kBAAMC,KAAK,GAAG,IAAI5L,OAAO,CAACsL,YAAZ,CAAyB9G,KAAK,CAACsG,OAA/B,EAAwC,UAAxC,CAAd;AACAc,cAAAA,KAAK,CAACC,MAAN,GAAerH,KAAK,CAACqH,MAArB;AACAD,cAAAA,KAAK,CAAC1I,KAAN,GAAcsB,KAAK,CAACtB,KAApB;AACA0I,cAAAA,KAAK,CAACE,KAAN,GAActH,KAAK,CAACsH,KAApB;AACAF,cAAAA,KAAK,CAAClE,UAAN,GAAmBlD,KAAK,CAACkD,UAAzB;AACAkE,cAAAA,KAAK,CAACG,QAAN,GAAiBvH,KAAK,CAACuH,QAAvB;AACAH,cAAAA,KAAK,CAACI,UAAN,GAAmBxH,KAAK,CAACwH,UAAzB;AACA3I,cAAAA,OAAO,CAACuI,KAAR,GAAgBA,KAAhB;AACD;AACF;AACF,SAfD,MAeO;AACL,cAAMA,MAAK,GAAG,CAAC,GAAG5L,OAAO,CAAC2J,eAAZ,EAA6BnF,KAAK,CAACsG,OAAnC,EAA4C,QAA5C,CAAd;;AACA,cAAMmB,qBAAqB,GAAG,MAAI,CAACxJ,oBAAL,CAA0ByJ,gBAA1B,CAA2C1H,KAAK,CAACqH,MAAjD,CAA9B;;AAEA,cAAII,qBAAqB,IAAI,MAAI,CAACzJ,sBAAL,KAAgC,MAAI,CAACR,MAAL,CAAYmC,OAAZ,CAAoB+C,2BAAjF,EAA8G;AAC5G0E,YAAAA,MAAK,CAACO,WAAN,GAAoB,IAApB;AACD;;AAED,UAAA,MAAI,CAACvJ,UAAL,GAAkBgJ,MAAlB;AACD;AACF,OA5BD;AA6BAH,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,gBAArB,EAAuC,UAAAhH,KAAK,EAAI;AAC9C,QAAA,MAAI,CAACqG,IAAL,CAAU,gBAAV,EAA4BrG,KAAK,CAAC4H,QAAlC;AACD,OAFD;AAGAX,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,gBAArB,EAAuC,UAAAhH,KAAK,EAAI;AAC9C,QAAA,MAAI,CAACqG,IAAL,CAAU,gBAAV,EAA4BrG,KAAK,CAAC4H,QAAlC;AACD,OAFD;AAGAX,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,eAArB,EAAsC,UAAAhH,KAAK,EAAI;AAC7C,QAAA,MAAI,CAACqG,IAAL,CAAU,eAAV,EAA2BrG,KAAK,CAAC4H,QAAjC;AACD,OAFD;AAGAX,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,aAArB,EAAoC,UAAAhH,KAAK,EAAI;AAC3C,QAAA,MAAI,CAAC6H,aAAL,CAAmB,aAAnB,EAAkC7H,KAAlC;AACD,OAFD;AAGAiH,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,eAArB,EAAsC,UAAAhH,KAAK,EAAI;AAC7C,QAAA,MAAI,CAAC6H,aAAL,CAAmB,eAAnB,EAAoC7H,KAApC;AACD,OAFD;AAGAiH,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,UAArB,EAAiC,UAAAhH,KAAK,EAAI;AACxC,YAAI,CAACA,KAAK,CAACoD,UAAX,EAAuB;AACrB;AACA,UAAA,MAAI,CAAChF,UAAL,GAAkB,CAAC,GAAG5C,OAAO,CAAC2J,eAAZ,EAA6B,4CAA7B,EAA2E,MAA3E,CAAlB;AACA,UAAA,MAAI,CAAChH,QAAL,GAAgB,KAAhB;AACA;AACD;;AAED,YAAI,CAAC6B,KAAK,CAAC8H,SAAX,EAAsB;AACpB;AACA,UAAA,MAAI,CAAC1J,UAAL,GAAkB,CAAC,GAAG5C,OAAO,CAAC2J,eAAZ,EAA6B,8CAA7B,EAA6E,mBAA7E,CAAlB;AACA,UAAA,MAAI,CAAChH,QAAL,GAAgB,KAAhB;AACA;AACD,SAbuC,CAatC;;;AAGF,QAAA,MAAI,CAACX,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiCpD,KAAK,CAACoD,UAAvC;AACA,QAAA,MAAI,CAACjF,QAAL,GAAgB,IAAhB;AACD,OAlBD;AAmBA8I,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,eAArB,EAAsC,UAAAhH,KAAK,EAAI;AAC7C;AAD6C,oCAE5BA,KAAK,CAAC4H,QAAN,CAAerI,MAAf,CAAsBwI,KAAtB,CAA4B,IAA5B,CAF4B;AAAA;AAAA,YAEtCxI,MAFsC;;AAG7C,QAAA,MAAI,CAACf,WAAL,GAAmB;AACjBe,UAAAA,MAAM,EAANA,MADiB;AAEjBsD,UAAAA,IAAI,EAAE7C,KAAK,CAAC4H,QAAN,CAAe/E;AAFJ,SAAnB;AAID,OAPD;AAQAoE,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,kBAArB,EAAyC,UAAAhH,KAAK,EAAI;AAChD,QAAA,MAAI,CAACvB,SAAL,CAAemE,UAAf,CAA0B5C,KAAK,CAAC4H,QAAhC;AACD,OAFD,EApF+B,CAsF3B;AACJ;;AAEAX,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,kBAArB,EAAyC,UAAAhH,KAAK,EAAI;AAChD,QAAA,MAAI,CAACnC,sBAAL,CAA4BmK,IAA5B,CAAiChI,KAAK,CAAC4H,QAAvC;;AACA,QAAA,MAAI,CAAChK,aAAL,GAAqB,IAArB;AACD,OAHD,EAzF+B,CA4F3B;AACJ;;AAEAqJ,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,mBAArB,EAA0C,YAAM;AAC9C,QAAA,MAAI,CAACnJ,sBAAL,CAA4BoK,MAA5B,GAAqC,CAArC;AACA,QAAA,MAAI,CAACrK,aAAL,GAAqB,KAArB;AACD,OAHD,EA/F+B,CAkG3B;AACJ;AACA;;AAEAqJ,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,qBAArB,EAA4C,YAAM;AAChD,QAAA,MAAI,CAACnJ,sBAAL,CAA4BoK,MAA5B,GAAqC,CAArC,CADgD,CACR;;AAExC,QAAA,MAAI,CAACrK,aAAL,GAAqB,KAArB;;AACA,QAAA,MAAI,CAACyI,IAAL,CAAU,qBAAV;AACD,OALD;AAMAY,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,gBAArB,EAAuC,UAAAhH,KAAK,EAAI;AAC9C,YAAMnB,OAAO,GAAG,MAAI,CAACA,OAArB;;AAEA,YAAIA,OAAJ,EAAa;AACX,cAAI,CAACA,OAAO,CAACsI,QAAb,EAAuB;AACrB,gBAAI,MAAI,CAAC3J,MAAL,CAAYmC,OAAZ,CAAoB6D,cAAxB,EAAwC;AACtC,kBAAM0E,OAAO,GAAG,EAAhB;;AAEA,mBAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGpI,KAAK,CAACkI,OAAN,CAAcD,MAApC,EAA4CE,CAAC,GAAGC,GAAhD,EAAqDD,CAAC,EAAtD,EAA0D;AACxD,oBAAME,GAAG,GAAGrI,KAAK,CAACkI,OAAN,CAAcC,CAAd,CAAZ;;AAEA,oBAAID,OAAO,CAACG,GAAG,CAACC,OAAL,CAAP,IAAwB,IAA5B,EAAkC;AAChCJ,kBAAAA,OAAO,CAACG,GAAG,CAACC,OAAL,CAAP,GAAuBD,GAAvB;AACD;AACF;;AAEDxJ,cAAAA,OAAO,CAACwH,IAAR,CAAa,gBAAb,EAA+B6B,OAA/B;AACD,aAZD,MAYO;AACLrJ,cAAAA,OAAO,CAACwH,IAAR,CAAa,gBAAb,EAA+BrG,KAAK,CAACkI,OAArC;AACD;AACF;AACF,SAlBD,MAkBO;AACL,UAAA,MAAI,CAAC7B,IAAL,CAAU,OAAV,EAAmB,IAAIxC,KAAJ,CAAU,6DAAV,CAAnB;;AACA,UAAA,MAAI,CAAC0E,KAAL;AACD;AACF,OAzBD;AA0BAtB,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,OAArB,EAA8B,UAAAhH,KAAK,EAAI;AACrC,YAAMnB,OAAO,GAAG,MAAI,CAACA,OAArB;;AAEA,YAAIA,OAAJ,EAAa;AACX,cAAI,CAACA,OAAO,CAACsI,QAAb,EAAuB;AACrBtI,YAAAA,OAAO,CAACwH,IAAR,CAAa,OAAb,EAAsBrG,KAAK,CAACwI,YAA5B;AACD;AACF,SAJD,MAIO;AACL,UAAA,MAAI,CAACnC,IAAL,CAAU,OAAV,EAAmB,IAAIxC,KAAJ,CAAU,oDAAV,CAAnB;;AACA,UAAA,MAAI,CAAC0E,KAAL;AACD;AACF,OAXD;AAYAtB,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,KAArB,EAA4B,UAAAhH,KAAK,EAAI;AACnC,YAAMnB,OAAO,GAAG,MAAI,CAACA,OAArB;;AAEA,YAAIA,OAAJ,EAAa;AACX,cAAI,CAACA,OAAO,CAACsI,QAAb,EAAuB;AACrB,gBAAI,MAAI,CAAC3J,MAAL,CAAYmC,OAAZ,CAAoBsD,gCAAxB,EAA0D;AACxDpE,cAAAA,OAAO,CAAC4J,IAAR,CAAaT,IAAb,CAAkBhI,KAAK,CAACkI,OAAxB;AACD;;AAED,gBAAI,MAAI,CAAC1K,MAAL,CAAYmC,OAAZ,CAAoBqD,mBAAxB,EAA6C;AAC3CnE,cAAAA,OAAO,CAAC6J,GAAR,CAAYV,IAAZ,CAAiBhI,KAAK,CAACkI,OAAvB;AACD;;AAED,gBAAI,CAACrJ,OAAO,CAACsI,QAAb,EAAuB;AACrBtI,cAAAA,OAAO,CAACwH,IAAR,CAAa,KAAb,EAAoBrG,KAAK,CAACkI,OAA1B;AACD;AACF;AACF,SAdD,MAcO;AACL,UAAA,MAAI,CAAC7B,IAAL,CAAU,OAAV,EAAmB,IAAIxC,KAAJ,CAAU,kDAAV,CAAnB;;AACA,UAAA,MAAI,CAAC0E,KAAL;AACD;AACF,OArBD;AAsBAtB,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,cAArB,EAAqC,UAAAhH,KAAK,EAAI;AAC5C,YAAMnB,OAAO,GAAG,MAAI,CAACA,OAArB;;AAEA,YAAIA,OAAJ,EAAa;AACX,cAAI,CAACA,OAAO,CAACsI,QAAb,EAAuB;AACrB;AACA,YAAA,MAAI,CAACrI,qBAAL,GAA6BkB,KAAK,CAACjG,KAAnC;AACD;AACF;AACF,OATD;AAUAkN,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,aAArB,EAAoC,UAAAhH,KAAK,EAAI;AAC3C,YAAMnB,OAAO,GAAG,MAAI,CAACA,OAArB;;AAEA,YAAIA,OAAJ,EAAa;AACX,cAAI,CAACA,OAAO,CAACsI,QAAb,EAAuB;AACrBtI,YAAAA,OAAO,CAACwH,IAAR,CAAa,aAAb,EAA4BrG,KAAK,CAAC2I,SAAlC,EAA6C3I,KAAK,CAACjG,KAAnD,EAA0DiG,KAAK,CAAC4I,QAAhE;AACD;AACF;AACF,OARD;AASA3B,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,UAArB,EAAiC,UAAAhH,KAAK,EAAI;AACxC,YAAMnB,OAAO,GAAG,MAAI,CAACA,OAArB;;AAEA,YAAIA,OAAJ,EAAa;AACX,cAAI,CAACA,OAAO,CAACsI,QAAb,EAAuB;AACrBtI,YAAAA,OAAO,CAACwH,IAAR,CAAa,UAAb,EAAyBrG,KAAK,CAAC6I,QAA/B,EAAyC7I,KAAK,CAAC8I,IAA/C,EAAqD,MAAI,CAAChK,qBAA1D,EAAiFD,OAAO,CAAC6J,GAAzF;AACA,YAAA,MAAI,CAAC5J,qBAAL,GAA6BU,SAA7B;;AAEA,gBAAIQ,KAAK,CAAC6I,QAAN,KAAmBrJ,SAAvB,EAAkC;AAChCX,cAAAA,OAAO,CAACgK,QAAR,IAAoB7I,KAAK,CAAC6I,QAA1B;AACD;;AAED,gBAAI,MAAI,CAACrL,MAAL,CAAYmC,OAAZ,CAAoBqD,mBAAxB,EAA6C;AAC3CnE,cAAAA,OAAO,CAAC6J,GAAR,GAAc,EAAd;AACD;AACF;AACF;AACF,OAjBD;AAkBAzB,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,YAArB,EAAmC,UAAAhH,KAAK,EAAI;AAC1C,YAAMnB,OAAO,GAAG,MAAI,CAACA,OAArB;;AAEA,YAAIA,OAAJ,EAAa;AACX,cAAI,CAACA,OAAO,CAACsI,QAAb,EAAuB;AACrBtI,YAAAA,OAAO,CAACwH,IAAR,CAAa,YAAb,EAA2BrG,KAAK,CAAC6I,QAAjC,EAA2C7I,KAAK,CAAC8I,IAAjD,EAAuDjK,OAAO,CAAC6J,GAA/D;;AAEA,gBAAI1I,KAAK,CAAC6I,QAAN,KAAmBrJ,SAAvB,EAAkC;AAChCX,cAAAA,OAAO,CAACgK,QAAR,IAAoB7I,KAAK,CAAC6I,QAA1B;AACD;;AAED,gBAAI,MAAI,CAACrL,MAAL,CAAYmC,OAAZ,CAAoBqD,mBAAxB,EAA6C;AAC3CnE,cAAAA,OAAO,CAAC6J,GAAR,GAAc,EAAd;AACD;AACF;AACF;AACF,OAhBD;AAiBAzB,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,MAArB,EAA6B,UAAAhH,KAAK,EAAI;AACpC,YAAMnB,OAAO,GAAG,MAAI,CAACA,OAArB;;AAEA,YAAIA,OAAJ,EAAa;AACX,cAAImB,KAAK,CAAC+I,SAAV,EAAqB;AACnB,YAAA,MAAI,CAAClB,aAAL,CAAmB,WAAnB;AACD;;AAED,cAAI,CAAChJ,OAAO,CAACsI,QAAb,EAAuB;AACrB,gBAAInH,KAAK,CAACgJ,QAAN,IAAkB,CAACnK,OAAO,CAACuI,KAA/B,EAAsC;AACpC;AACAvI,cAAAA,OAAO,CAACuI,KAAR,GAAgB,CAAC,GAAG5L,OAAO,CAACsL,YAAZ,EAA0B,gCAA1B,EAA4D,SAA5D,CAAhB;AACD;;AAEDjI,YAAAA,OAAO,CAACwH,IAAR,CAAa,MAAb,EAAqBrG,KAAK,CAAC6I,QAA3B,EAAqC7I,KAAK,CAAC8I,IAA3C,EAAiDjK,OAAO,CAAC6J,GAAzD;;AAEA,gBAAI1I,KAAK,CAAC6I,QAAN,KAAmBrJ,SAAvB,EAAkC;AAChCX,cAAAA,OAAO,CAACgK,QAAR,IAAoB7I,KAAK,CAAC6I,QAA1B;AACD;;AAED,gBAAI,MAAI,CAACrL,MAAL,CAAYmC,OAAZ,CAAoBqD,mBAAxB,EAA6C;AAC3CnE,cAAAA,OAAO,CAAC6J,GAAR,GAAc,EAAd;AACD;AACF;AACF;AACF,OAzBD;AA0BAzB,MAAAA,iBAAiB,CAACD,EAAlB,CAAqB,iBAArB,EAAwC,YAAM;AAC5C,QAAA,MAAI,CAACX,IAAL,CAAU,iBAAV;AACD,OAFD;AAGA,aAAOY,iBAAP;AACD;;;WAED,uBAAcpE,IAAd,EAAoBF,mBAApB,EAAyCoD,MAAzC,EAAiD;AAAA;;AAC/C,UAAMkD,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,KAAK1K,WAAL,GAAmB,KAAKA,WAAL,CAAiBe,MAApC,GAA6C,KAAK/B,MAAL,CAAY+B,MAD7C;AAElBsD,QAAAA,IAAI,EAAE,KAAKrE,WAAL,GAAmB,KAAKA,WAAL,CAAiBqE,IAApC,GAA2CA,IAF/B;AAGlBJ,QAAAA,YAAY,EAAE,KAAKjF,MAAL,CAAYmC,OAAZ,CAAoB8C;AAHhB,OAApB;AAKA,UAAIhH,UAAU,CAAC0N,SAAf,CAAyBF,WAAzB,EAAsClD,MAAtC,EAA8CpD,mBAA9C,EAAmEyG,OAAnE,CAA2E,UAAC9D,GAAD,EAAMvG,MAAN,EAAiB;AAC1F,YAAIuG,GAAJ,EAAS;AACP,cAAIA,GAAG,CAACF,IAAJ,KAAa,YAAjB,EAA+B;AAC7B;AACD;;AAED,iBAAO,MAAI,CAACiE,WAAL,CAAiB/D,GAAjB,CAAP;AACD;;AAEDvG,QAAAA,MAAM,GAAGA,MAAT;AACAA,QAAAA,MAAM,CAACiI,EAAP,CAAU,OAAV,EAAmB,UAAAI,KAAK,EAAI;AAC1B,UAAA,MAAI,CAACiC,WAAL,CAAiBjC,KAAjB;AACD,SAFD;AAGArI,QAAAA,MAAM,CAACiI,EAAP,CAAU,OAAV,EAAmB,YAAM;AACvB,UAAA,MAAI,CAACsC,WAAL;AACD,SAFD;AAGAvK,QAAAA,MAAM,CAACiI,EAAP,CAAU,KAAV,EAAiB,YAAM;AACrB,UAAA,MAAI,CAACuC,SAAL;AACD,SAFD;AAGAxK,QAAAA,MAAM,CAACyK,YAAP,CAAoB,IAApB,EAA0BjN,wBAA1B;AACA,QAAA,MAAI,CAACkC,SAAL,GAAiB,IAAIpD,UAAU,CAACrB,OAAf,CAAuB+E,MAAvB,EAA+B,MAAI,CAACvB,MAAL,CAAYmC,OAAZ,CAAoBiD,UAAnD,EAA+D,MAAI,CAACvE,KAApE,CAAjB;;AACA,QAAA,MAAI,CAACI,SAAL,CAAeuI,EAAf,CAAkB,MAAlB,EAA0B,UAAAV,OAAO,EAAI;AACnC,UAAA,MAAI,CAACuB,aAAL,CAAmB,SAAnB,EAA8BvB,OAA9B;AACD,SAFD;;AAGA,QAAA,MAAI,CAAC7H,SAAL,CAAeuI,EAAf,CAAkB,QAAlB,EAA4B,UAAAyC,SAAS,EAAI;AACvC,UAAA,MAAI,CAACpD,IAAL,CAAU,QAAV,EAAoBoD,SAApB;AACD,SAFD;;AAGA,QAAA,MAAI,CAAChL,SAAL,CAAeuI,EAAf,CAAkB,OAAlB,EAA2B,UAAAI,KAAK,EAAI;AAClC,UAAA,MAAI,CAACiC,WAAL,CAAiBjC,KAAjB;AACD,SAFD;;AAGA,QAAA,MAAI,CAACrI,MAAL,GAAcA,MAAd;;AACA,QAAA,MAAI,CAAC2K,aAAL;AACD,OAhCD;AAiCD;AACD;AACF;AACA;;;;WAGE,2BAAkB;AAChB,UAAI,KAAK3K,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAY4K,OAAZ;AACD;AACF;AACD;AACF;AACA;;;;WAGE,8BAAqB;AAAA;;AACnB,UAAMC,UAAU,GAAG,IAAI5N,oBAAoB,CAAChC,OAAzB,EAAnB;AACA,WAAKiF,YAAL,GAAoB4K,UAAU,CAAC,YAAM;AACnCD,QAAAA,UAAU,CAACE,KAAX;;AACA,QAAA,MAAI,CAAChJ,cAAL;AACD,OAH6B,EAG3B,KAAKtD,MAAL,CAAYmC,OAAZ,CAAoBmB,cAHO,CAA9B;AAIA,aAAO8I,UAAU,CAAC7D,MAAlB;AACD;AACD;AACF;AACA;;;;WAGE,6BAAoB;AAAA;;AAClB,WAAKgE,gBAAL;AACA,UAAM3D,OAAO,GAAG,KAAK5I,MAAL,CAAYmC,OAAZ,CAAoBc,aAApC;;AAEA,UAAI2F,OAAO,GAAG,CAAd,EAAiB;AACf,aAAKlH,WAAL,GAAmB2K,UAAU,CAAC,YAAM;AAClC,UAAA,MAAI,CAACpJ,aAAL;AACD,SAF4B,EAE1B2F,OAF0B,CAA7B;AAGD;AACF;AACD;AACF;AACA;;;;WAGE,8BAAqB;AAAA;;AACnB,WAAKK,iBAAL,GADmB,CACO;;AAE1B,UAAM5H,OAAO,GAAG,KAAKA,OAArB;AACA,UAAMuH,OAAO,GAAGvH,OAAO,CAACuH,OAAR,KAAoB5G,SAApB,GAAgCX,OAAO,CAACuH,OAAxC,GAAkD,KAAK5I,MAAL,CAAYmC,OAAZ,CAAoBoD,cAAtF;;AAEA,UAAIqD,OAAJ,EAAa;AACX,aAAKjH,YAAL,GAAoB0K,UAAU,CAAC,YAAM;AACnC,UAAA,OAAI,CAAC9G,cAAL;AACD,SAF6B,EAE3BqD,OAF2B,CAA9B;AAGD;AACF;AACD;AACF;AACA;;;;WAGE,4BAAmB;AAAA;;AACjB,WAAKM,eAAL;AACA,WAAKtH,UAAL,GAAkByK,UAAU,CAAC,YAAM;AACjC,QAAA,OAAI,CAACG,YAAL;AACD,OAF2B,EAEzB,KAAKxM,MAAL,CAAYmC,OAAZ,CAAoBkB,uBAFK,CAA5B;AAGD;AACD;AACF;AACA;;;;WAGE,0BAAiB;AACf,UAAMyF,OAAO,kCAA2B,KAAK9I,MAAL,CAAY+B,MAAvC,SAAgD,KAAK/B,MAAL,CAAYmC,OAAZ,CAAoBkD,IAApB,cAA+B,KAAKrF,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAnD,gBAAiE,KAAKrF,MAAL,CAAYmC,OAAZ,CAAoB2C,YAArF,CAAhD,iBAA0J,KAAK9E,MAAL,CAAYmC,OAAZ,CAAoBmB,cAA9K,OAAb;AACA,WAAKzC,KAAL,CAAW4L,GAAX,CAAe3D,OAAf;AACA,WAAKD,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAG7K,OAAO,CAAC2J,eAAZ,EAA6BmB,OAA7B,EAAsC,UAAtC,CAArB;AACA,WAAKrH,YAAL,GAAoBO,SAApB;AACA,WAAKqI,aAAL,CAAmB,gBAAnB;AACD;AACD;AACF;AACA;;;;WAGE,yBAAgB;AACd,UAAMvB,OAAO,yCAAkC,KAAK9I,MAAL,CAAYmC,OAAZ,CAAoBc,aAAtD,OAAb;AACA,WAAKpC,KAAL,CAAW4L,GAAX,CAAe3D,OAAf;AACA,WAAKuB,aAAL,CAAmB,aAAnB,EAAkC,CAAC,GAAGrM,OAAO,CAAC2J,eAAZ,EAA6BmB,OAA7B,EAAsC,UAAtC,CAAlC;AACD;AACD;AACF;AACA;;;;WAGE,0BAAiB;AACf,WAAKnH,YAAL,GAAoBK,SAApB;AACA,UAAMX,OAAO,GAAG,KAAKA,OAArB;AACAA,MAAAA,OAAO,CAACqL,MAAR;AACA,UAAM9D,OAAO,GAAGvH,OAAO,CAACuH,OAAR,KAAoB5G,SAApB,GAAgCX,OAAO,CAACuH,OAAxC,GAAkD,KAAK5I,MAAL,CAAYmC,OAAZ,CAAoBoD,cAAtF;AACA,UAAMuD,OAAO,GAAG,4CAA4CF,OAA5C,GAAsD,IAAtE;AACAvH,MAAAA,OAAO,CAACuI,KAAR,GAAgB,CAAC,GAAG5L,OAAO,CAACsL,YAAZ,EAA0BR,OAA1B,EAAmC,UAAnC,CAAhB;AACD;AACD;AACF;AACA;;;;WAGE,wBAAe;AACb,WAAKlH,UAAL,GAAkBI,SAAlB;AACA,WAAK6G,IAAL,CAAU,OAAV;AACA,WAAKtB,YAAL,CAAkB,KAAKL,KAAL,CAAWgB,UAA7B;AACD;AACD;AACF;AACA;;;;WAGE,6BAAoB;AAClB,UAAI,KAAKzG,YAAT,EAAuB;AACrBkL,QAAAA,YAAY,CAAC,KAAKlL,YAAN,CAAZ;AACD;AACF;AACD;AACF;AACA;;;;WAGE,4BAAmB;AACjB,UAAI,KAAKC,WAAT,EAAsB;AACpBiL,QAAAA,YAAY,CAAC,KAAKjL,WAAN,CAAZ;AACD;AACF;AACD;AACF;AACA;;;;WAGE,6BAAoB;AAClB,UAAI,KAAKC,YAAT,EAAuB;AACrBgL,QAAAA,YAAY,CAAC,KAAKhL,YAAN,CAAZ;AACA,aAAKA,YAAL,GAAoBK,SAApB;AACD;AACF;AACD;AACF;AACA;;;;WAGE,2BAAkB;AAChB,UAAI,KAAKJ,UAAT,EAAqB;AACnB+K,QAAAA,YAAY,CAAC,KAAK/K,UAAN,CAAZ;AACA,aAAKA,UAAL,GAAkBI,SAAlB;AACD;AACF;AACD;AACF;AACA;;;;WAGE,sBAAa4K,QAAb,EAAuB;AACrB,UAAI,KAAK1L,KAAL,KAAe0L,QAAnB,EAA6B;AAC3B,aAAK/L,KAAL,CAAW4L,GAAX,CAAe,sBAAsBG,QAAQ,CAAChF,IAA9C;AACA;AACD;;AAED,UAAI,KAAK1G,KAAL,IAAc,KAAKA,KAAL,CAAW2L,IAA7B,EAAmC;AACjC,aAAK3L,KAAL,CAAW2L,IAAX,CAAgBC,IAAhB,CAAqB,IAArB,EAA2BF,QAA3B;AACD;;AAED,WAAK/L,KAAL,CAAW4L,GAAX,CAAe,oBAAoB,KAAKvL,KAAL,GAAa,KAAKA,KAAL,CAAW0G,IAAxB,GAA+B,WAAnD,IAAkE,MAAlE,GAA2EgF,QAAQ,CAAChF,IAAnG;AACA,WAAK1G,KAAL,GAAa0L,QAAb;;AAEA,UAAI,KAAK1L,KAAL,CAAW6L,KAAf,EAAsB;AACpB,aAAK7L,KAAL,CAAW6L,KAAX,CAAiBC,KAAjB,CAAuB,IAAvB;AACD;AACF;AACD;AACF;AACA;;;;WAGE,yBAAgBC,SAAhB,EAA2B;AACzB,UAAMC,OAAO,GAAG,KAAKhM,KAAL,CAAWiM,MAAX,CAAkBF,SAAlB,CAAhB;;AAEA,UAAI,CAACC,OAAL,EAAc;AACZ,cAAM,IAAI7G,KAAJ,qBAAuB4G,SAAvB,yBAA+C,KAAK/L,KAAL,CAAW0G,IAA1D,OAAN;AACD;;AAED,aAAOsF,OAAP;AACD;AACD;AACF;AACA;;;;WAGE,uBAAcD,SAAd,EAAkC;AAChC,UAAMC,OAAO,GAAG,KAAKhM,KAAL,CAAWiM,MAAX,CAAkBF,SAAlB,CAAhB;;AAEA,UAAIC,OAAJ,EAAa;AAAA,2CAHa7E,IAGb;AAHaA,UAAAA,IAGb;AAAA;;AACX6E,QAAAA,OAAO,CAACF,KAAR,CAAc,IAAd,EAAoB3E,IAApB;AACD,OAFD,MAEO;AACL,aAAKQ,IAAL,CAAU,OAAV,EAAmB,IAAIxC,KAAJ,qBAAuB4G,SAAvB,yBAA+C,KAAK/L,KAAL,CAAW0G,IAA1D,OAAnB;AACA,aAAKmD,KAAL;AACD;AACF;AACD;AACF;AACA;;;;WAGE,qBAAYnB,KAAZ,EAAmB;AACjB,UAAI,KAAK1I,KAAL,KAAe,KAAKgG,KAAL,CAAWgB,UAA1B,IAAwC,KAAKhH,KAAL,KAAe,KAAKgG,KAAL,CAAWkG,sBAAtE,EAA8F;AAC5F,YAAMtE,OAAO,kCAA2B,KAAK9I,MAAL,CAAY+B,MAAvC,cAAiD,KAAK/B,MAAL,CAAYmC,OAAZ,CAAoBkD,IAArE,gBAA+EuE,KAAK,CAACd,OAArF,CAAb;AACA,aAAKjI,KAAL,CAAW4L,GAAX,CAAe3D,OAAf;AACA,aAAKD,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAG7K,OAAO,CAAC2J,eAAZ,EAA6BmB,OAA7B,EAAsC,SAAtC,CAArB;AACD,OAJD,MAIO;AACL,YAAMA,SAAO,+BAAwBc,KAAK,CAACd,OAA9B,CAAb;;AACA,aAAKjI,KAAL,CAAW4L,GAAX,CAAe3D,SAAf;AACA,aAAKD,IAAL,CAAU,OAAV,EAAmB,CAAC,GAAG7K,OAAO,CAAC2J,eAAZ,EAA6BmB,SAA7B,EAAsC,SAAtC,CAAnB;AACD;;AAED,WAAKuB,aAAL,CAAmB,aAAnB,EAAkCT,KAAlC;AACD;AACD;AACF;AACA;;;;WAGE,yBAAgB;AACd,WAAKlJ,MAAL,GAAc,KAAd;AACA,WAAKG,KAAL,CAAW4L,GAAX,CAAe,kBAAkB,KAAKzM,MAAL,CAAY+B,MAA9B,GAAuC,GAAvC,GAA6C,KAAK/B,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAhF;AACA,WAAKgF,aAAL,CAAmB,eAAnB;AACD;AACD;AACF;AACA;;;;WAGE,qBAAY;AACV,WAAKxJ,KAAL,CAAW4L,GAAX,CAAe,cAAf;;AAEA,UAAI,KAAKvL,KAAL,KAAe,KAAKgG,KAAL,CAAWoB,KAA9B,EAAqC;AACnC,YAAMsB,KAAK,GAAG,IAAIvD,KAAJ,CAAU,gBAAV,CAAd;AACAuD,QAAAA,KAAK,CAACyD,IAAN,GAAa,YAAb;AACA,aAAKxB,WAAL,CAAiBjC,KAAjB;AACD;AACF;AACD;AACF;AACA;;;;WAGE,uBAAc;AACZ,WAAK/I,KAAL,CAAW4L,GAAX,CAAe,mBAAmB,KAAKzM,MAAL,CAAY+B,MAA/B,GAAwC,GAAxC,GAA8C,KAAK/B,MAAL,CAAYmC,OAAZ,CAAoBkD,IAAlE,GAAyE,SAAxF;;AAEA,UAAI,KAAKnE,KAAL,KAAe,KAAKgG,KAAL,CAAWoG,SAA9B,EAAyC;AACvC,aAAKzM,KAAL,CAAW4L,GAAX,CAAe,kBAAkB,KAAKzL,WAAL,CAAiBe,MAAnC,GAA4C,GAA5C,GAAkD,KAAKf,WAAL,CAAiBqE,IAAlF;AACA,aAAKgF,aAAL,CAAmB,WAAnB;AACD,OAHD,MAGO,IAAI,KAAKnJ,KAAL,KAAe,KAAKgG,KAAL,CAAWqG,uBAA9B,EAAuD;AAC5D,YAAMxL,MAAM,GAAG,KAAKf,WAAL,GAAmB,KAAKA,WAAL,CAAiBe,MAApC,GAA6C,KAAK/B,MAAL,CAAY+B,MAAxE;AACA,YAAMsD,IAAI,GAAG,KAAKrE,WAAL,GAAmB,KAAKA,WAAL,CAAiBqE,IAApC,GAA2C,KAAKrF,MAAL,CAAYmC,OAAZ,CAAoBkD,IAA5E;AACA,aAAKxE,KAAL,CAAW4L,GAAX,CAAe,iDAAiD1K,MAAjD,GAA0D,GAA1D,GAAgEsD,IAA/E;AACA,aAAKgF,aAAL,CAAmB,OAAnB;AACD,OALM,MAKA;AACL,aAAK9C,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD;AACF;AACD;AACF;AACA;;;;WAGE,wBAAe;AACb,UAAIkF,MAAJ;;AADa,iBAGmB,CAACA,MAAM,GAAG,uBAAuBC,IAAvB,CAA4B9O,QAAQ,CAAC+O,OAArC,CAAV,MAA6D,IAA7D,IAAqEF,MAAM,KAAK,KAAK,CAArF,GAAyFA,MAAzF,GAAkG,CAAC,OAAD,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,CAHrH;AAAA;AAAA,UAGJG,KAHI;AAAA,UAGGC,KAHH;AAAA,UAGUC,KAHV;;AAIb,UAAM7J,OAAO,GAAG,IAAIzG,gBAAgB,CAACf,OAArB,CAA6B;AAC3CmI,QAAAA,OAAO,EAAE,KAAK3E,MAAL,CAAYmC,OAAZ,CAAoBwC,OADc;AAE3C+I,QAAAA,OAAO,EAAE;AACPC,UAAAA,KAAK,EAAEG,MAAM,CAACH,KAAD,CADN;AAEPC,UAAAA,KAAK,EAAEE,MAAM,CAACF,KAAD,CAFN;AAGPC,UAAAA,KAAK,EAAEC,MAAM,CAACD,KAAD,CAHN;AAIPE,UAAAA,QAAQ,EAAE;AAJH;AAFkC,OAA7B,CAAhB;AASA,WAAK9M,SAAL,CAAemG,WAAf,CAA2B9J,OAAO,CAAC+J,IAAR,CAAa2G,QAAxC,EAAkDhK,OAAO,CAACF,IAA1D;AACA,WAAKjD,KAAL,CAAWmD,OAAX,CAAmB,YAAY;AAC7B,eAAOA,OAAO,CAACiK,QAAR,CAAiB,IAAjB,CAAP;AACD,OAFD;AAGD;AACD;AACF;AACA;;;;WAGE,8BAAqB;AACnB,WAAKzM,aAAL,GAAqBsF,MAAM,CAACE,KAAP,CAAa,CAAb,CAArB;AACD;AACD;AACF;AACA;;;;WAGE,4BAAmBlD,IAAnB,EAAyB;AACvB,WAAKtC,aAAL,GAAqBsF,MAAM,CAACoH,MAAP,CAAc,CAAC,KAAK1M,aAAN,EAAqBsC,IAArB,CAAd,CAArB;AACD;AACD;AACF;AACA;;;;WAGE,4BAAmB;AACjB,UAAME,OAAO,GAAG,IAAIxG,cAAc,CAAChB,OAAnB,CAA2B;AACzCoJ,QAAAA,UAAU,EAAEzH,YAAY,CAACgQ,QAAb,CAAsB,KAAKnO,MAAL,CAAYmC,OAAZ,CAAoByD,UAA1C,CAD6B;AAEzCR,QAAAA,UAAU,EAAE,KAAKpF,MAAL,CAAYmC,OAAZ,CAAoBiD,UAFS;AAGzCgJ,QAAAA,aAAa,EAAE,CAH0B;AAIzCC,QAAAA,SAAS,EAAEjF,OAAO,CAACkF,GAJsB;AAKzCC,QAAAA,YAAY,EAAE,CAL2B;AAMzCC,QAAAA,cAAc,EAAE,IAAIC,IAAJ,GAAWC,iBAAX,EANyB;AAOzCC,QAAAA,UAAU,EAAE;AAP6B,OAA3B,CAAhB;AADiB,UAWf1M,cAXe,GAYb,KAAKjC,MAZQ,CAWfiC,cAXe;;AAcjB,cAAQA,cAAc,CAACC,IAAvB;AACE,aAAK,iCAAL;AACE8B,UAAAA,OAAO,CAAC4K,OAAR,GAAkB;AAChB1M,YAAAA,IAAI,EAAE,MADU;AAEhB2M,YAAAA,IAAI,EAAE,KAAK5O,eAFK;AAGhB6O,YAAAA,QAAQ,EAAE;AAHM,WAAlB;AAKA;;AAEF,aAAK,qCAAL;AACE9K,UAAAA,OAAO,CAAC4K,OAAR,GAAkB;AAChB1M,YAAAA,IAAI,EAAE,eADU;AAEhB2M,YAAAA,IAAI,EAAE,KAAK5O,eAFK;AAGhB8O,YAAAA,YAAY,EAAE9M,cAAc,CAACE,OAAf,CAAuBK;AAHrB,WAAlB;AAKA;;AAEF,aAAK,+BAAL;AACA,aAAK,wCAAL;AACA,aAAK,iDAAL;AACEwB,UAAAA,OAAO,CAAC4K,OAAR,GAAkB;AAChB1M,YAAAA,IAAI,EAAE,MADU;AAEhB2M,YAAAA,IAAI,EAAE,KAAK5O,eAFK;AAGhB6O,YAAAA,QAAQ,EAAE;AAHM,WAAlB;AAKA;;AAEF,aAAK,MAAL;AACE9K,UAAAA,OAAO,CAACgL,IAAR,GAAe,CAAC,GAAG3Q,KAAK,CAAC4Q,iBAAV,EAA6B;AAC1C7M,YAAAA,MAAM,EAAEH,cAAc,CAACE,OAAf,CAAuBC;AADW,WAA7B,CAAf;AAGA;;AAEF;AACE4B,UAAAA,OAAO,CAAC3B,QAAR,GAAmBJ,cAAc,CAACE,OAAf,CAAuBE,QAA1C;AACA2B,UAAAA,OAAO,CAAC1B,QAAR,GAAmBL,cAAc,CAACE,OAAf,CAAuBG,QAA1C;AAnCJ;;AAsCA0B,MAAAA,OAAO,CAACkL,QAAR,GAAmB,KAAKlP,MAAL,CAAYmC,OAAZ,CAAoBgE,aAApB,IAAqCvJ,GAAG,CAACJ,OAAJ,CAAY0S,QAAZ,EAAxD;AACAlL,MAAAA,OAAO,CAAC0B,UAAR,GAAqB,KAAK1E,WAAL,GAAmB,KAAKA,WAAL,CAAiBe,MAApC,GAA6C,KAAK/B,MAAL,CAAY+B,MAA9E;AACAiC,MAAAA,OAAO,CAACjB,OAAR,GAAkB,KAAK/C,MAAL,CAAYmC,OAAZ,CAAoBY,OAApB,IAA+B,SAAjD;AACAiB,MAAAA,OAAO,CAACmL,WAAR,GAAsBjR,QAAQ,CAAC0J,IAA/B;AACA5D,MAAAA,OAAO,CAACgB,QAAR,GAAmB,KAAKhF,MAAL,CAAYmC,OAAZ,CAAoB6C,QAAvC;AACAhB,MAAAA,OAAO,CAACL,QAAR,GAAmB,KAAK3D,MAAL,CAAYmC,OAAZ,CAAoBwB,QAAvC;AACAK,MAAAA,OAAO,CAACvB,QAAR,GAAmBqE,MAAM,CAACC,IAAP,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAZ,CAAnB;AACA/C,MAAAA,OAAO,CAACsB,cAAR,GAAyB,KAAKtF,MAAL,CAAYmC,OAAZ,CAAoBmD,cAA7C;AACAtB,MAAAA,OAAO,CAACoL,WAAR,GAAsB,CAAC,KAAKpP,MAAL,CAAYmC,OAAZ,CAAoByC,mBAA3C;AACA,WAAK5D,WAAL,GAAmBgB,SAAnB;AACA,WAAKf,SAAL,CAAemG,WAAf,CAA2B9J,OAAO,CAAC+J,IAAR,CAAagI,MAAxC,EAAgDrL,OAAO,CAACsL,QAAR,EAAhD;AACA,WAAKzO,KAAL,CAAWmD,OAAX,CAAmB,YAAY;AAC7B,eAAOA,OAAO,CAACiK,QAAR,CAAiB,IAAjB,CAAP;AACD,OAFD;AAGD;AACD;AACF;AACA;;;;WAGE,iCAAwBzL,KAAxB,EAA+B;AAC7B,UAAM+M,cAAc,GAAGzI,MAAM,CAAC0I,UAAP,CAAkBhN,KAAlB,EAAyB,MAAzB,CAAvB;AACA,UAAMsB,IAAI,GAAGgD,MAAM,CAACE,KAAP,CAAa,IAAIuI,cAAjB,CAAb;AACA,UAAIE,MAAM,GAAG,CAAb;AACAA,MAAAA,MAAM,GAAG3L,IAAI,CAAC4L,aAAL,CAAmBH,cAAc,GAAG,CAApC,EAAuCE,MAAvC,CAAT;AACAA,MAAAA,MAAM,GAAG3L,IAAI,CAAC4L,aAAL,CAAmBH,cAAnB,EAAmCE,MAAnC,CAAT;AACA3L,MAAAA,IAAI,CAAC6L,KAAL,CAAWnN,KAAX,EAAkBiN,MAAlB,EAA0B,MAA1B;AACA,WAAKxO,SAAL,CAAemG,WAAf,CAA2B9J,OAAO,CAAC+J,IAAR,CAAauI,aAAxC,EAAuD9L,IAAvD,EAP6B,CAOiC;;AAE9D,WAAKyD,YAAL,CAAkB,KAAKL,KAAL,CAAW2I,+BAA7B;AACD;AACD;AACF;AACA;;;;WAGE,0BAAiB;AACf,UAAM7L,OAAO,GAAG,IAAIpG,gBAAgB,CAACpB,OAArB,CAA6B,KAAKsT,aAAL,EAA7B,EAAmD,KAAKC,4BAAL,EAAnD,EAAwF,KAAK/P,MAAL,CAAYmC,OAApG,CAAhB;AACA,UAAM2G,OAAO,GAAG,IAAI1K,QAAQ,CAAC5B,OAAb,CAAqB;AACnC0F,QAAAA,IAAI,EAAE5E,OAAO,CAAC+J,IAAR,CAAa2I;AADgB,OAArB,CAAhB;AAGA,WAAK/O,SAAL,CAAegP,qBAAf,CAAqCN,KAArC,CAA2C7G,OAA3C;;AAEA/L,MAAAA,OAAO,CAACmT,QAAR,CAAiBnJ,IAAjB,CAAsB/C,OAAtB,EAA+BmM,IAA/B,CAAoCrH,OAApC;AACD;AACD;AACF;AACA;;;;WAGE,yBAAgB;AACd,UAAM3G,OAAO,GAAG,EAAhB;;AAEA,UAAI,KAAKnC,MAAL,CAAYmC,OAAZ,CAAoB8B,cAApB,KAAuC,IAA3C,EAAiD;AAC/C9B,QAAAA,OAAO,CAACqI,IAAR,CAAa,mBAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoB8B,cAApB,KAAuC,KAA3C,EAAkD;AACvD9B,QAAAA,OAAO,CAACqI,IAAR,CAAa,oBAAb;AACD;;AAED,UAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoB+B,qBAApB,KAA8C,IAAlD,EAAwD;AACtD/B,QAAAA,OAAO,CAACqI,IAAR,CAAa,0BAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoB+B,qBAApB,KAA8C,KAAlD,EAAyD;AAC9D/B,QAAAA,OAAO,CAACqI,IAAR,CAAa,2BAAb;AACD;;AAED,UAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBgC,iBAApB,KAA0C,IAA9C,EAAoD;AAClDhC,QAAAA,OAAO,CAACqI,IAAR,CAAa,qBAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBgC,iBAApB,KAA0C,KAA9C,EAAqD;AAC1DhC,QAAAA,OAAO,CAACqI,IAAR,CAAa,sBAAb;AACD;;AAED,UAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBiC,kBAApB,KAA2C,IAA/C,EAAqD;AACnDjC,QAAAA,OAAO,CAACqI,IAAR,CAAa,sBAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBiC,kBAApB,KAA2C,KAA/C,EAAsD;AAC3DjC,QAAAA,OAAO,CAACqI,IAAR,CAAa,uBAAb;AACD;;AAED,UAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBkC,gBAApB,KAAyC,IAA7C,EAAmD;AACjDlC,QAAAA,OAAO,CAACqI,IAAR,CAAa,mBAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBkC,gBAApB,KAAyC,KAA7C,EAAoD;AACzDlC,QAAAA,OAAO,CAACqI,IAAR,CAAa,oBAAb;AACD;;AAED,UAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBmC,0BAApB,KAAmD,IAAvD,EAA6D;AAC3DnC,QAAAA,OAAO,CAACqI,IAAR,CAAa,gCAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBmC,0BAApB,KAAmD,KAAvD,EAA8D;AACnEnC,QAAAA,OAAO,CAACqI,IAAR,CAAa,iCAAb;AACD;;AAED,UAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBoC,yBAApB,KAAkD,IAAtD,EAA4D;AAC1DpC,QAAAA,OAAO,CAACqI,IAAR,CAAa,+BAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBoC,yBAApB,KAAkD,KAAtD,EAA6D;AAClEpC,QAAAA,OAAO,CAACqI,IAAR,CAAa,gCAAb;AACD;;AAED,UAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoByB,SAApB,KAAkC,IAAtC,EAA4C;AAC1CzB,QAAAA,OAAO,CAACqI,IAAR,yBAA8B,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoByB,SAAlD;AACD;;AAED,UAAI,KAAK5D,MAAL,CAAYmC,OAAZ,CAAoB0B,UAApB,KAAmC,IAAvC,EAA6C;AAC3C1B,QAAAA,OAAO,CAACqI,IAAR,0BAA+B,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoB0B,UAAnD;AACD;;AAED,UAAI,KAAK7D,MAAL,CAAYmC,OAAZ,CAAoBqC,0BAApB,KAAmD,IAAvD,EAA6D;AAC3DrC,QAAAA,OAAO,CAACqI,IAAR,CAAa,8BAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBqC,0BAApB,KAAmD,KAAvD,EAA8D;AACnErC,QAAAA,OAAO,CAACqI,IAAR,CAAa,+BAAb;AACD;;AAED,UAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoB6C,QAApB,KAAiC,IAArC,EAA2C;AACzC7C,QAAAA,OAAO,CAACqI,IAAR,wBAA6B,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoB6C,QAAjD;AACD;;AAED,UAAI,KAAKhF,MAAL,CAAYmC,OAAZ,CAAoBsC,uBAApB,KAAgD,IAApD,EAA0D;AACxDtC,QAAAA,OAAO,CAACqI,IAAR,CAAa,2BAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBsC,uBAApB,KAAgD,KAApD,EAA2D;AAChEtC,QAAAA,OAAO,CAACqI,IAAR,CAAa,4BAAb;AACD;;AAED,UAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBuC,sBAApB,KAA+C,IAAnD,EAAyD;AACvDvC,QAAAA,OAAO,CAACqI,IAAR,CAAa,0BAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBuC,sBAApB,KAA+C,KAAnD,EAA0D;AAC/DvC,QAAAA,OAAO,CAACqI,IAAR,CAAa,2BAAb;AACD;;AAED,UAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoB0D,QAApB,KAAiC,IAArC,EAA2C;AACzC1D,QAAAA,OAAO,CAACqI,IAAR,wBAA6B,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoB0D,QAAjD;AACD;;AAED,UAAI,KAAK7F,MAAL,CAAYmC,OAAZ,CAAoBoB,wBAApB,KAAiD,IAArD,EAA2D;AACzDpB,QAAAA,OAAO,CAACqI,IAAR,2CAAgD,KAAK4F,qBAAL,CAA2B,KAAKpQ,MAAL,CAAYmC,OAAZ,CAAoBoB,wBAA/C,CAAhD;AACD;;AAED,UAAI,KAAKvD,MAAL,CAAYmC,OAAZ,CAAoBW,uBAApB,KAAgD,IAApD,EAA0D;AACxDX,QAAAA,OAAO,CAACqI,IAAR,CAAa,mBAAb;AACD,OAFD,MAEO,IAAI,KAAKxK,MAAL,CAAYmC,OAAZ,CAAoBW,uBAApB,KAAgD,KAApD,EAA2D;AAChEX,QAAAA,OAAO,CAACqI,IAAR,CAAa,oBAAb;AACD;;AAED,aAAOrI,OAAO,CAACkO,IAAR,CAAa,IAAb,CAAP;AACD;AACD;AACF;AACA;;;;WAGE,+BAAsB;AACpB,WAAKrH,iBAAL;AACA,WAAKH,IAAL,CAAU,SAAV;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,sBAAaxH,OAAb,EAAsB;AACpB,WAAKiP,WAAL,CAAiBjP,OAAjB,EAA0B/D,OAAO,CAAC+J,IAAR,CAAa2I,SAAvC,EAAkD,IAAIpS,gBAAgB,CAACpB,OAArB,CAA6B6E,OAAO,CAACkP,kBAArC,EAAyD,KAAKR,4BAAL,EAAzD,EAA8F,KAAK/P,MAAL,CAAYmC,OAA1G,CAAlD;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,iBAAQd,OAAR,EAAiB;AAAA;;AACf,UAAI;AACFA,QAAAA,OAAO,CAACmP,kBAAR;AACD,OAFD,CAEE,OAAO5G,KAAP,EAAc;AACdvI,QAAAA,OAAO,CAACuI,KAAR,GAAgBA,KAAhB;AACAR,QAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACrB,UAAA,OAAI,CAACxI,KAAL,CAAW4L,GAAX,CAAe7C,KAAK,CAACd,OAArB;;AACAzH,UAAAA,OAAO,CAACkI,QAAR,CAAiBK,KAAjB;AACD,SAHD;AAIA;AACD;;AAED,UAAM6G,UAAU,GAAG,EAAnB;AACAA,MAAAA,UAAU,CAACjG,IAAX,CAAgB;AACdtI,QAAAA,IAAI,EAAEzD,SAAS,CAACiS,KAAV,CAAgBC,QADR;AAEd/I,QAAAA,IAAI,EAAE,WAFQ;AAGdrL,QAAAA,KAAK,EAAE8E,OAAO,CAACkP,kBAHD;AAIdK,QAAAA,MAAM,EAAE,KAJM;AAKdnG,QAAAA,MAAM,EAAEzI,SALM;AAMd6O,QAAAA,SAAS,EAAE7O,SANG;AAOd8O,QAAAA,KAAK,EAAE9O;AAPO,OAAhB;;AAUA,UAAIX,OAAO,CAACoP,UAAR,CAAmBhG,MAAvB,EAA+B;AAC7BgG,QAAAA,UAAU,CAACjG,IAAX,CAAgB;AACdtI,UAAAA,IAAI,EAAEzD,SAAS,CAACiS,KAAV,CAAgBC,QADR;AAEd/I,UAAAA,IAAI,EAAE,QAFQ;AAGdrL,UAAAA,KAAK,EAAE8E,OAAO,CAAC0P,mBAAR,CAA4B1P,OAAO,CAACoP,UAApC,CAHO;AAIdG,UAAAA,MAAM,EAAE,KAJM;AAKdnG,UAAAA,MAAM,EAAEzI,SALM;AAMd6O,UAAAA,SAAS,EAAE7O,SANG;AAOd8O,UAAAA,KAAK,EAAE9O;AAPO,SAAhB;AASAyO,QAAAA,UAAU,CAACjG,IAAX,OAAAiG,UAAU,qBAASpP,OAAO,CAACoP,UAAjB,EAAV;AACD;;AAED,WAAKH,WAAL,CAAiBjP,OAAjB,EAA0B/D,OAAO,CAAC+J,IAAR,CAAa2J,WAAvC,EAAoD,IAAIrT,kBAAkB,CAACnB,OAAvB,CAA+B,eAA/B,EAAgDiU,UAAhD,EAA4D,KAAKV,4BAAL,EAA5D,EAAiG,KAAK/P,MAAL,CAAYmC,OAA7G,CAApD;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;;WAGE,qBAAY8O,KAAZ,EAAmBC,iBAAnB,EAAsC3H,QAAtC,EAAgD;AAC9C,UAAIpH,OAAJ;;AAEA,UAAIoH,QAAQ,KAAKvH,SAAjB,EAA4B;AAC1BuH,QAAAA,QAAQ,GAAG2H,iBAAX;AACA/O,QAAAA,OAAO,GAAG,EAAV;AACD,OAHD,MAGO;AACLA,QAAAA,OAAO,GAAG+O,iBAAV;AACD;;AAED,UAAI,OAAO/O,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,cAAM,IAAIL,SAAJ,CAAc,sCAAd,CAAN;AACD;;AAED,aAAO,IAAI7E,SAAS,CAACT,OAAd,CAAsByU,KAAtB,EAA6B,KAAKjR,MAAL,CAAYmC,OAAzC,EAAkDA,OAAlD,EAA2DoH,QAA3D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,sBAAa4H,QAAb,EAAuBlG,IAAvB,EAA6B;AAAA;;AAC3BkG,MAAAA,QAAQ,CAACC,gBAAT,GAA4B,IAA5B;;AAEA,UAAInG,IAAJ,EAAU;AACR,YAAIkG,QAAQ,CAACE,aAAb,EAA4B;AAC1B,gBAAM,IAAIhL,KAAJ,CAAU,yFAAV,CAAN;AACD;;AAED,YAAI8K,QAAQ,CAACG,eAAb,EAA8B;AAC5B,gBAAM,IAAIjL,KAAJ,CAAU,8FAAV,CAAN;AACD;;AAED,YAAMkL,SAAS,GAAGxU,OAAO,CAACmT,QAAR,CAAiBnJ,IAAjB,CAAsBkE,IAAtB,CAAlB,CATQ,CASuC;AAC/C;;;AAGAsG,QAAAA,SAAS,CAAC/H,EAAV,CAAa,OAAb,EAAsB,UAAA1B,GAAG,EAAI;AAC3BqJ,UAAAA,QAAQ,CAACK,oBAAT,CAA8BrF,OAA9B,CAAsCrE,GAAtC;AACD,SAFD,EAbQ,CAeJ;AACJ;;AAEAqJ,QAAAA,QAAQ,CAACK,oBAAT,CAA8BhI,EAA9B,CAAiC,OAAjC,EAA0C,UAAA1B,GAAG,EAAI;AAC/CyJ,UAAAA,SAAS,CAACpF,OAAV,CAAkBrE,GAAlB;AACD,SAFD;AAGAyJ,QAAAA,SAAS,CAACpB,IAAV,CAAegB,QAAQ,CAACK,oBAAxB;AACD,OAtBD,MAsBO,IAAI,CAACL,QAAQ,CAACE,aAAd,EAA6B;AAClC;AACA;AACA;AACA;AACA;AACAF,QAAAA,QAAQ,CAACK,oBAAT,CAA8BC,GAA9B;AACD;;AAED,UAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBrQ,QAAAA,OAAO,CAACqL,MAAR;AACD,OAFD;;AAIA,UAAM1I,OAAO,GAAG,IAAItF,gBAAgB,CAACiT,eAArB,CAAqCR,QAArC,CAAhB;AACA,UAAM9P,OAAO,GAAG,IAAI3D,QAAQ,CAAClB,OAAb,CAAqB2U,QAAQ,CAACS,gBAAT,EAArB,EAAkD,UAAAhI,KAAK,EAAI;AACzEuH,QAAAA,QAAQ,CAACpJ,cAAT,CAAwB,QAAxB,EAAkC2J,QAAlC;;AAEA,YAAI9H,KAAJ,EAAW;AACT,cAAIA,KAAK,CAACyD,IAAN,KAAe,SAAnB,EAA8B;AAC5BzD,YAAAA,KAAK,CAACd,OAAN,IAAiB,8HAAjB;AACD;;AAEDqI,UAAAA,QAAQ,CAACvH,KAAT,GAAiBA,KAAjB;AACAuH,UAAAA,QAAQ,CAAC5H,QAAT,CAAkBK,KAAlB;AACA;AACD;;AAED,QAAA,OAAI,CAAC0G,WAAL,CAAiBa,QAAjB,EAA2B7T,OAAO,CAAC+J,IAAR,CAAawK,SAAxC,EAAmD7N,OAAnD;AACD,OAde,CAAhB;AAeAmN,MAAAA,QAAQ,CAAClJ,IAAT,CAAc,QAAd,EAAwByJ,QAAxB;AACA,WAAKI,YAAL,CAAkBzQ,OAAlB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,iBAAQA,OAAR,EAAiB;AACf,UAAMoP,UAAU,GAAG,EAAnB;AACAA,MAAAA,UAAU,CAACjG,IAAX,CAAgB;AACdtI,QAAAA,IAAI,EAAEzD,SAAS,CAACiS,KAAV,CAAgBqB,GADR;AAEdnK,QAAAA,IAAI,EAAE,QAFQ;AAGdrL,QAAAA,KAAK,EAAEyF,SAHO;AAId4O,QAAAA,MAAM,EAAE,IAJM;AAKdnG,QAAAA,MAAM,EAAEzI,SALM;AAMd6O,QAAAA,SAAS,EAAE7O,SANG;AAOd8O,QAAAA,KAAK,EAAE9O;AAPO,OAAhB;AASAyO,MAAAA,UAAU,CAACjG,IAAX,CAAgB;AACdtI,QAAAA,IAAI,EAAEzD,SAAS,CAACiS,KAAV,CAAgBC,QADR;AAEd/I,QAAAA,IAAI,EAAE,QAFQ;AAGdrL,QAAAA,KAAK,EAAE8E,OAAO,CAACoP,UAAR,CAAmBhG,MAAnB,GAA4BpJ,OAAO,CAAC0P,mBAAR,CAA4B1P,OAAO,CAACoP,UAApC,CAA5B,GAA8E,IAHvE;AAIdG,QAAAA,MAAM,EAAE,KAJM;AAKdnG,QAAAA,MAAM,EAAEzI,SALM;AAMd6O,QAAAA,SAAS,EAAE7O,SANG;AAOd8O,QAAAA,KAAK,EAAE9O;AAPO,OAAhB;AASAyO,MAAAA,UAAU,CAACjG,IAAX,CAAgB;AACdtI,QAAAA,IAAI,EAAEzD,SAAS,CAACiS,KAAV,CAAgBC,QADR;AAEd/I,QAAAA,IAAI,EAAE,MAFQ;AAGdrL,QAAAA,KAAK,EAAE8E,OAAO,CAACkP,kBAHD;AAIdK,QAAAA,MAAM,EAAE,KAJM;AAKdnG,QAAAA,MAAM,EAAEzI,SALM;AAMd6O,QAAAA,SAAS,EAAE7O,SANG;AAOd8O,QAAAA,KAAK,EAAE9O;AAPO,OAAhB;AASAX,MAAAA,OAAO,CAAC2Q,SAAR,GAAoB,IAApB,CA7Be,CA6BW;;AAE1B3Q,MAAAA,OAAO,CAACmI,EAAR,CAAW,aAAX,EAA0B,UAAC5B,IAAD,EAAOrL,KAAP,EAAiB;AACzC,YAAIqL,IAAI,KAAK,QAAb,EAAuB;AACrBvG,UAAAA,OAAO,CAAC4Q,MAAR,GAAiB1V,KAAjB;AACD,SAFD,MAEO;AACL8E,UAAAA,OAAO,CAACuI,KAAR,GAAgB,CAAC,GAAG5L,OAAO,CAACsL,YAAZ,kDAAmE1B,IAAnE,sBAAhB;AACD;AACF,OAND;AAOA,WAAK0I,WAAL,CAAiBjP,OAAjB,EAA0B/D,OAAO,CAAC+J,IAAR,CAAa2J,WAAvC,EAAoD,IAAIrT,kBAAkB,CAACnB,OAAvB,CAA+B,YAA/B,EAA6CiU,UAA7C,EAAyD,KAAKV,4BAAL,EAAzD,EAA8F,KAAK/P,MAAL,CAAYmC,OAA1G,CAApD;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;;WAGE,mBAAUd,OAAV,EAAmB;AACjB,UAAMoP,UAAU,GAAG,EAAnB;AACAA,MAAAA,UAAU,CAACjG,IAAX,CAAgB;AACdtI,QAAAA,IAAI,EAAEzD,SAAS,CAACiS,KAAV,CAAgBqB,GADR;AAEdnK,QAAAA,IAAI,EAAE,QAFQ;AAGd;AACArL,QAAAA,KAAK,EAAE8E,OAAO,CAAC4Q,MAJD;AAKdrB,QAAAA,MAAM,EAAE,IALM;AAMdnG,QAAAA,MAAM,EAAEzI,SANM;AAOd6O,QAAAA,SAAS,EAAE7O,SAPG;AAQd8O,QAAAA,KAAK,EAAE9O;AARO,OAAhB;AAUA,WAAKsO,WAAL,CAAiBjP,OAAjB,EAA0B/D,OAAO,CAAC+J,IAAR,CAAa2J,WAAvC,EAAoD,IAAIrT,kBAAkB,CAACnB,OAAvB,CAA+B,cAA/B,EAA+CiU,UAA/C,EAA2D,KAAKV,4BAAL,EAA3D,EAAgG,KAAK/P,MAAL,CAAYmC,OAA5G,CAApD;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,iBAAQd,OAAR,EAAiBoP,UAAjB,EAA6B;AAAA;;AAC3B,UAAMyB,iBAAiB,GAAG,EAA1B;AACAA,MAAAA,iBAAiB,CAAC1H,IAAlB,CAAuB;AACrBtI,QAAAA,IAAI,EAAEzD,SAAS,CAACiS,KAAV,CAAgBqB,GADD;AAErBnK,QAAAA,IAAI,EAAE,QAFe;AAGrB;AACArL,QAAAA,KAAK,EAAE8E,OAAO,CAAC4Q,MAJM;AAKrBrB,QAAAA,MAAM,EAAE,IALa;AAMrBnG,QAAAA,MAAM,EAAEzI,SANa;AAOrB6O,QAAAA,SAAS,EAAE7O,SAPU;AAQrB8O,QAAAA,KAAK,EAAE9O;AARc,OAAvB;;AAWA,UAAI;AACF,aAAK,IAAImQ,CAAC,GAAG,CAAR,EAAWvH,GAAG,GAAGvJ,OAAO,CAACoP,UAAR,CAAmBhG,MAAzC,EAAiD0H,CAAC,GAAGvH,GAArD,EAA0DuH,CAAC,EAA3D,EAA+D;AAC7D,cAAMC,SAAS,GAAG/Q,OAAO,CAACoP,UAAR,CAAmB0B,CAAnB,CAAlB;AACAD,UAAAA,iBAAiB,CAAC1H,IAAlB,iCAA4B4H,SAA5B;AACE7V,YAAAA,KAAK,EAAE6V,SAAS,CAAClQ,IAAV,CAAemQ,QAAf,CAAwB5B,UAAU,GAAGA,UAAU,CAAC2B,SAAS,CAACxK,IAAX,CAAb,GAAgC,IAAlE;AADT;AAGD;AACF,OAPD,CAOE,OAAOgC,KAAP,EAAc;AACdvI,QAAAA,OAAO,CAACuI,KAAR,GAAgBA,KAAhB;AACAR,QAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACrB,UAAA,OAAI,CAACxI,KAAL,CAAW4L,GAAX,CAAe7C,KAAK,CAACd,OAArB;;AACAzH,UAAAA,OAAO,CAACkI,QAAR,CAAiBK,KAAjB;AACD,SAHD;AAIA;AACD;;AAED,WAAK0G,WAAL,CAAiBjP,OAAjB,EAA0B/D,OAAO,CAAC+J,IAAR,CAAa2J,WAAvC,EAAoD,IAAIrT,kBAAkB,CAACnB,OAAvB,CAA+B,YAA/B,EAA6C0V,iBAA7C,EAAgE,KAAKnC,4BAAL,EAAhE,EAAqG,KAAK/P,MAAL,CAAYmC,OAAjH,CAApD;AACD;AACD;AACF;AACA;AACA;AACA;;;;WAGE,uBAAcd,OAAd,EAAuB;AAAA;;AACrB,UAAI;AACFA,QAAAA,OAAO,CAACmP,kBAAR;AACD,OAFD,CAEE,OAAO5G,KAAP,EAAc;AACdvI,QAAAA,OAAO,CAACuI,KAAR,GAAgBA,KAAhB;AACAR,QAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACrB,UAAA,OAAI,CAACxI,KAAL,CAAW4L,GAAX,CAAe7C,KAAK,CAACd,OAArB;;AACAzH,UAAAA,OAAO,CAACkI,QAAR,CAAiBK,KAAjB;AACD,SAHD;AAIA;AACD;;AAED,WAAK0G,WAAL,CAAiBjP,OAAjB,EAA0B/D,OAAO,CAAC+J,IAAR,CAAa2J,WAAvC,EAAoD,IAAIrT,kBAAkB,CAACnB,OAAvB,CAA+B6E,OAAO,CAACkP,kBAAvC,EAA2DlP,OAAO,CAACoP,UAAnE,EAA+E,KAAKV,4BAAL,EAA/E,EAAoH,KAAK/P,MAAL,CAAYmC,OAAhI,CAApD;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,0BAAiBoH,QAAjB,EAA2F;AAAA;;AAAA,UAAhE3B,IAAgE,uEAAzD,EAAyD;AAAA,UAArD7C,cAAqD,uEAApC,KAAK/E,MAAL,CAAYmC,OAAZ,CAAoB4C,cAAgB;AACzF,OAAC,GAAGhH,YAAY,CAACuI,yBAAjB,EAA4CvB,cAA5C,EAA4D,gBAA5D;AACA,UAAMuN,WAAW,GAAG,IAAIvU,YAAY,CAACwU,WAAjB,CAA6B3K,IAA7B,EAAmC7C,cAAnC,CAApB;;AAEA,UAAI,KAAK/E,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,eAAO,KAAKkM,YAAL,CAAkB,IAAIpU,QAAQ,CAAClB,OAAb,CAAqB,qCAAqC8V,WAAW,CAACE,oBAAZ,EAArC,GAA0E,cAA1E,GAA2FF,WAAW,CAAC1K,IAA5H,EAAkI,UAAAE,GAAG,EAAI;AAChK,UAAA,OAAI,CAACxH,gBAAL;;AAEA,cAAI,OAAI,CAACA,gBAAL,KAA0B,CAA9B,EAAiC;AAC/B,YAAA,OAAI,CAACF,aAAL,GAAqB,IAArB;AACD;;AAEDmJ,UAAAA,QAAQ,CAACzB,GAAD,CAAR;AACD,SARwB,CAAlB,CAAP;AASD;;AAED,UAAMzG,OAAO,GAAG,IAAI3D,QAAQ,CAAClB,OAAb,CAAqBwF,SAArB,EAAgC,UAAA8F,GAAG,EAAI;AACrD,eAAOyB,QAAQ,CAACzB,GAAD,EAAM,OAAI,CAACiI,4BAAL,EAAN,CAAf;AACD,OAFe,CAAhB;AAGA,aAAO,KAAKO,WAAL,CAAiBjP,OAAjB,EAA0B/D,OAAO,CAAC+J,IAAR,CAAaoL,mBAAvC,EAA4DH,WAAW,CAACI,YAAZ,CAAyB,KAAK3C,4BAAL,EAAzB,CAA5D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,2BAAkBxG,QAAlB,EAAuC;AAAA;;AAAA,UAAX3B,IAAW,uEAAJ,EAAI;AACrC,UAAM0K,WAAW,GAAG,IAAIvU,YAAY,CAACwU,WAAjB,CAA6B3K,IAA7B,CAApB;;AAEA,UAAI,KAAK5H,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,eAAO,KAAKkM,YAAL,CAAkB,IAAIpU,QAAQ,CAAClB,OAAb,CAAqB,iBAAiB8V,WAAW,CAAC1K,IAAlD,EAAwD,UAAAE,GAAG,EAAI;AACtF,UAAA,OAAI,CAACxH,gBAAL;;AAEA,cAAI,OAAI,CAACA,gBAAL,KAA0B,CAA9B,EAAiC;AAC/B,YAAA,OAAI,CAACF,aAAL,GAAqB,KAArB;AACD;;AAEDmJ,UAAAA,QAAQ,CAACzB,GAAD,CAAR;AACD,SARwB,CAAlB,CAAP;AASD;;AAED,UAAMzG,OAAO,GAAG,IAAI3D,QAAQ,CAAClB,OAAb,CAAqBwF,SAArB,EAAgCuH,QAAhC,CAAhB;AACA,aAAO,KAAK+G,WAAL,CAAiBjP,OAAjB,EAA0B/D,OAAO,CAAC+J,IAAR,CAAaoL,mBAAvC,EAA4DH,WAAW,CAACK,aAAZ,CAA0B,KAAK5C,4BAAL,EAA1B,CAA5D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,6BAAoBxG,QAApB,EAAyC;AAAA;;AAAA,UAAX3B,IAAW,uEAAJ,EAAI;AACvC,UAAM0K,WAAW,GAAG,IAAIvU,YAAY,CAACwU,WAAjB,CAA6B3K,IAA7B,CAApB;;AAEA,UAAI,KAAK5H,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,eAAO,KAAKkM,YAAL,CAAkB,IAAIpU,QAAQ,CAAClB,OAAb,CAAqB,mBAAmB8V,WAAW,CAAC1K,IAApD,EAA0D,UAAAE,GAAG,EAAI;AACxF,UAAA,OAAI,CAACxH,gBAAL;;AAEA,cAAI,OAAI,CAACA,gBAAL,KAA0B,CAA9B,EAAiC;AAC/B,YAAA,OAAI,CAACF,aAAL,GAAqB,KAArB;AACD;;AAEDmJ,UAAAA,QAAQ,CAACzB,GAAD,CAAR;AACD,SARwB,CAAlB,CAAP;AASD;;AAED,UAAMzG,OAAO,GAAG,IAAI3D,QAAQ,CAAClB,OAAb,CAAqBwF,SAArB,EAAgCuH,QAAhC,CAAhB;AACA,aAAO,KAAK+G,WAAL,CAAiBjP,OAAjB,EAA0B/D,OAAO,CAAC+J,IAAR,CAAaoL,mBAAvC,EAA4DH,WAAW,CAACM,eAAZ,CAA4B,KAAK7C,4BAAL,EAA5B,CAA5D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,yBAAgBxG,QAAhB,EAA0B3B,IAA1B,EAAgC;AAAA;;AAC9B,UAAM0K,WAAW,GAAG,IAAIvU,YAAY,CAACwU,WAAjB,CAA6B3K,IAA7B,CAApB;;AAEA,UAAI,KAAK5H,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,eAAO,KAAKkM,YAAL,CAAkB,IAAIpU,QAAQ,CAAClB,OAAb,CAAqB,eAAe8V,WAAW,CAAC1K,IAAhD,EAAsD,UAAAE,GAAG,EAAI;AACpF,UAAA,OAAI,CAACxH,gBAAL;AACAiJ,UAAAA,QAAQ,CAACzB,GAAD,CAAR;AACD,SAHwB,CAAlB,CAAP;AAID;;AAED,UAAMzG,OAAO,GAAG,IAAI3D,QAAQ,CAAClB,OAAb,CAAqBwF,SAArB,EAAgCuH,QAAhC,CAAhB;AACA,aAAO,KAAK+G,WAAL,CAAiBjP,OAAjB,EAA0B/D,OAAO,CAAC+J,IAAR,CAAaoL,mBAAvC,EAA4DH,WAAW,CAACO,WAAZ,CAAwB,KAAK9C,4BAAL,EAAxB,CAA5D,CAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAGE,qBAAY+C,EAAZ,EAAgB/N,cAAhB,EAAgC;AAAA;;AAC9B,UAAI,OAAO+N,EAAP,KAAc,UAAlB,EAA8B;AAC5B,cAAM,IAAIhR,SAAJ,CAAc,yBAAd,CAAN;AACD;;AAED,UAAMiR,YAAY,GAAG,KAAK3S,aAA1B;;AAEA,UAAMwH,IAAI,GAAG,cAAcnL,OAAO,CAACD,OAAR,CAAgBwW,WAAhB,CAA4B,EAA5B,EAAgC/E,QAAhC,CAAyC,KAAzC,CAA3B;;AAEA,UAAMgF,MAAM,GAAG,SAATA,MAAS,CAACnL,GAAD,EAAMoL,IAAN,EAAwB;AAAA,2CAAT7K,IAAS;AAATA,UAAAA,IAAS;AAAA;;AACrC,YAAIP,GAAJ,EAAS;AACP,cAAI,OAAI,CAAC1H,aAAL,IAAsB,OAAI,CAACc,KAAL,KAAe,OAAI,CAACgG,KAAL,CAAWiM,SAApD,EAA+D;AAC7D,YAAA,OAAI,CAACC,mBAAL,CAAyB,UAAAC,KAAK,EAAI;AAChCH,cAAAA,IAAI,MAAJ,UAAKG,KAAK,IAAIvL,GAAd,SAAsBO,IAAtB;AACD,aAFD,EAEGT,IAFH;AAGD,WAJD,MAIO;AACLsL,YAAAA,IAAI,MAAJ,UAAKpL,GAAL,SAAaO,IAAb;AACD;AACF,SARD,MAQO,IAAI0K,YAAJ,EAAkB;AACvB,cAAI,OAAI,CAAC/S,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,YAAA,OAAI,CAACtF,gBAAL;AACD;;AAED4S,UAAAA,IAAI,MAAJ,UAAK,IAAL,SAAc7K,IAAd;AACD,SANM,MAMA;AACL,UAAA,OAAI,CAACiL,iBAAL,CAAuB,UAAAD,KAAK,EAAI;AAC9BH,YAAAA,IAAI,MAAJ,UAAKG,KAAL,SAAehL,IAAf;AACD,WAFD,EAEGT,IAFH;AAGD;AACF,OApBD;;AAsBA,UAAImL,YAAJ,EAAkB;AAChB,eAAO,KAAKQ,eAAL,CAAqB,UAAAzL,GAAG,EAAI;AACjC,cAAIA,GAAJ,EAAS;AACP,mBAAOgL,EAAE,CAAChL,GAAD,CAAT;AACD;;AAED,cAAI/C,cAAJ,EAAoB;AAClB,mBAAO,OAAI,CAAC+M,YAAL,CAAkB,IAAIpU,QAAQ,CAAClB,OAAb,CAAqB,qCAAqC,OAAI,CAAC4T,qBAAL,CAA2BrL,cAA3B,CAA1D,EAAsG,UAAA+C,GAAG,EAAI;AACpI,qBAAOgL,EAAE,CAAChL,GAAD,EAAMmL,MAAN,CAAT;AACD,aAFwB,CAAlB,CAAP;AAGD,WAJD,MAIO;AACL,mBAAOH,EAAE,CAAC,IAAD,EAAOG,MAAP,CAAT;AACD;AACF,SAZM,EAYJrL,IAZI,CAAP;AAaD,OAdD,MAcO;AACL,eAAO,KAAK4L,gBAAL,CAAsB,UAAA1L,GAAG,EAAI;AAClC,cAAIA,GAAJ,EAAS;AACP,mBAAOgL,EAAE,CAAChL,GAAD,CAAT;AACD;;AAED,iBAAOgL,EAAE,CAAC,IAAD,EAAOG,MAAP,CAAT;AACD,SANM,EAMJrL,IANI,EAME7C,cANF,CAAP;AAOD;AACF;AACD;AACF;AACA;;;;WAGE,qBAAY1D,OAAZ,EAAqBoS,UAArB,EAAiCzP,OAAjC,EAA0C;AAAA;;AACxC,UAAI,KAAK9C,KAAL,KAAe,KAAKgG,KAAL,CAAWiM,SAA9B,EAAyC;AACvC,YAAMrK,OAAO,GAAG,sCAAsC,KAAK5B,KAAL,CAAWiM,SAAX,CAAqBvL,IAA3D,GAAkE,kBAAlE,GAAuF,KAAK1G,KAAL,CAAW0G,IAAlG,GAAyG,QAAzH;AACA,aAAK/G,KAAL,CAAW4L,GAAX,CAAe3D,OAAf;AACAzH,QAAAA,OAAO,CAACkI,QAAR,CAAiB,CAAC,GAAGvL,OAAO,CAACsL,YAAZ,EAA0BR,OAA1B,EAAmC,eAAnC,CAAjB;AACD,OAJD,MAIO,IAAIzH,OAAO,CAACsI,QAAZ,EAAsB;AAC3BP,QAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACrBhI,UAAAA,OAAO,CAACkI,QAAR,CAAiB,CAAC,GAAGvL,OAAO,CAACsL,YAAZ,EAA0B,WAA1B,EAAuC,SAAvC,CAAjB;AACD,SAFD;AAGD,OAJM,MAIA;AACL,YAAImK,UAAU,KAAKnW,OAAO,CAAC+J,IAAR,CAAa2I,SAAhC,EAA2C;AACzC,eAAKzP,UAAL,GAAkB,IAAlB;AACD,SAFD,MAEO;AACL,eAAKA,UAAL,GAAkB,KAAlB;AACD;;AAED,aAAKc,OAAL,GAAeA,OAAf;AACAA,QAAAA,OAAO,CAACqS,UAAR,GAAqB,IAArB;AACArS,QAAAA,OAAO,CAACgK,QAAR,GAAmB,CAAnB;AACAhK,QAAAA,OAAO,CAAC4J,IAAR,GAAe,EAAf;AACA5J,QAAAA,OAAO,CAAC6J,GAAR,GAAc,EAAd;;AAEA,YAAMwG,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBiC,UAAAA,aAAa,CAACC,MAAd,CAAqB9K,SAArB,EADqB,CACU;;AAE/BA,UAAAA,SAAO,CAAC+K,MAAR,GAAiB,IAAjB;;AACA/K,UAAAA,SAAO,CAAC2I,GAAR;;AAEA,cAAIpQ,OAAO,YAAY3D,QAAQ,CAAClB,OAA5B,IAAuC6E,OAAO,CAACyS,MAAnD,EAA2D;AACzD;AACAzS,YAAAA,OAAO,CAAC0S,MAAR;AACD;AACF,SAVD;;AAYA1S,QAAAA,OAAO,CAAC4G,IAAR,CAAa,QAAb,EAAuByJ,QAAvB;AACA,aAAKsC,kBAAL;;AACA,YAAMlL,SAAO,GAAG,IAAI1K,QAAQ,CAAC5B,OAAb,CAAqB;AACnC0F,UAAAA,IAAI,EAAEuR,UAD6B;AAEnCQ,UAAAA,eAAe,EAAE,KAAK9S;AAFa,SAArB,CAAhB;;AAIA,aAAKF,SAAL,CAAegP,qBAAf,CAAqCN,KAArC,CAA2C7G,SAA3C;AACA,aAAKvB,YAAL,CAAkB,KAAKL,KAAL,CAAWgN,mBAA7B;;AACApL,QAAAA,SAAO,CAACb,IAAR,CAAa,QAAb,EAAuB,YAAM;AAC3B5G,UAAAA,OAAO,CAAC0G,cAAR,CAAuB,QAAvB,EAAiC2J,QAAjC;AACArQ,UAAAA,OAAO,CAAC4G,IAAR,CAAa,QAAb,EAAuB,OAAI,CAACpG,uBAA5B;AACA,UAAA,OAAI,CAACV,4BAAL,GAAoC,KAApC;;AACA,UAAA,OAAI,CAACN,KAAL,CAAWmD,OAAX,CAAmB,YAAY;AAC7B,mBAAOA,OAAO,CAACiK,QAAR,CAAiB,IAAjB,CAAP;AACD,WAFD;AAGD,SAPD;;AASA,YAAM0F,aAAa,GAAG5W,OAAO,CAACmT,QAAR,CAAiBnJ,IAAjB,CAAsB/C,OAAtB,CAAtB;;AAEA2P,QAAAA,aAAa,CAAC1L,IAAd,CAAmB,OAAnB,EAA4B,UAAA2B,KAAK,EAAI;AACnC,cAAIuK,cAAJ;;AAEAR,UAAAA,aAAa,CAACC,MAAd,CAAqB9K,SAArB,EAHmC,CAGJ;;AAE/B,WAACqL,cAAc,GAAG9S,OAAO,CAACuI,KAA1B,MAAqC,IAArC,IAA6CuK,cAAc,KAAK,KAAK,CAArE,GAAyEA,cAAzE,GAA0F9S,OAAO,CAACuI,KAAR,GAAgBA,KAA1G;AACA+J,UAAAA,aAAa,CAACC,MAAd,CAAqB9K,SAArB;AACAA,UAAAA,SAAO,CAAC+K,MAAR,GAAiB,IAAjB;;AACA/K,UAAAA,SAAO,CAAC2I,GAAR;AACD,SATD;AAUAkC,QAAAA,aAAa,CAACxD,IAAd,CAAmBrH,SAAnB;AACD;AACF;AACD;AACF;AACA;;;;WAGE,kBAAS;AACP,UAAI,CAAC,KAAKzH,OAAV,EAAmB;AACjB,eAAO,KAAP;AACD;;AAED,UAAI,KAAKA,OAAL,CAAasI,QAAjB,EAA2B;AACzB,eAAO,KAAP;AACD;;AAED,WAAKtI,OAAL,CAAaqL,MAAb;AACA,aAAO,IAAP;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;;WAGE,eAAMnD,QAAN,EAAgB;AAAA;;AACd,UAAMlI,OAAO,GAAG,IAAI3D,QAAQ,CAAClB,OAAb,CAAqB,KAAKsT,aAAL,EAArB,EAA2C,UAAAhI,GAAG,EAAI;AAChE,YAAI,OAAI,CAAC9H,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAArC,EAA4C;AAC1C,UAAA,OAAI,CAACxF,aAAL,GAAqB,KAArB;AACD;;AAEDmJ,QAAAA,QAAQ,CAACzB,GAAD,CAAR;AACD,OANe,CAAhB;AAOA,WAAK3G,4BAAL,GAAoC,IAApC;AACA,WAAK2Q,YAAL,CAAkBzQ,OAAlB;AACD;AACD;AACF;AACA;;;;WAGE,wCAA+B;AAC7B,aAAO,KAAKhB,sBAAL,CAA4B,KAAKA,sBAAL,CAA4BoK,MAA5B,GAAqC,CAAjE,CAAP;AACD;AACD;AACF;AACA;;;;WAGE,+BAAsB1F,cAAtB,EAAsC;AACpC,cAAQA,cAAR;AACE,aAAKhH,YAAY,CAACyF,eAAb,CAA6B4Q,gBAAlC;AACE,iBAAO,kBAAP;;AAEF,aAAKrW,YAAY,CAACyF,eAAb,CAA6B6Q,eAAlC;AACE,iBAAO,iBAAP;;AAEF,aAAKtW,YAAY,CAACyF,eAAb,CAA6B8Q,YAAlC;AACE,iBAAO,cAAP;;AAEF,aAAKvW,YAAY,CAACyF,eAAb,CAA6B+Q,QAAlC;AACE,iBAAO,UAAP;;AAEF;AACE,iBAAO,gBAAP;AAdJ;AAgBD;;;;EAp6EsBpX,OAAO,CAACqX,Y;;AAw6EjC,IAAIC,QAAQ,GAAG1U,UAAf;AACAzD,OAAO,CAACE,OAAR,GAAkBiY,QAAlB;AACAC,MAAM,CAACpY,OAAP,GAAiByD,UAAjB;AACA,IAAM4U,mBAAmB,GAAG,IAAIpW,SAAS,CAACqW,WAAd,EAA5B;AACA7U,UAAU,CAAC8U,SAAX,CAAqB3N,KAArB,GAA6B;AAC3BC,EAAAA,WAAW,EAAE;AACXS,IAAAA,IAAI,EAAE,aADK;AAEXuF,IAAAA,MAAM,EAAE;AAFG,GADc;AAK3BjF,EAAAA,UAAU,EAAE;AACVN,IAAAA,IAAI,EAAE,YADI;AAEVmF,IAAAA,KAAK,EAAE,iBAAY;AACjB,WAAK+H,oBAAL;AACD,KAJS;AAKV3H,IAAAA,MAAM,EAAE;AACNtB,MAAAA,WAAW,EAAE,uBAAY;AACvB,aAAKtE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAHK;AAINhF,MAAAA,cAAc,EAAE,0BAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OANK;AAON4D,MAAAA,aAAa,EAAE,yBAAY;AACzB,aAAK6I,YAAL;AACA,aAAKxN,YAAL,CAAkB,KAAKL,KAAL,CAAW8N,aAA7B;AACD;AAVK;AALE,GALe;AAuB3BA,EAAAA,aAAa,EAAE;AACbpN,IAAAA,IAAI,EAAE,cADO;AAEbmF,IAAAA,KAAK,EAAE,iBAAY;AACjB,WAAKkI,kBAAL;AACD,KAJY;AAKb9H,IAAAA,MAAM,EAAE;AACNtB,MAAAA,WAAW,EAAE,uBAAY;AACvB,aAAKtE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAHK;AAINhF,MAAAA,cAAc,EAAE,0BAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OANK;AAONQ,MAAAA,OAAO,EAAE,iBAAUA,SAAV,EAAmB;AAAA;;AAC1BA,QAAAA,SAAO,CAACU,EAAR,CAAW,MAAX,EAAmB,UAAA1F,IAAI,EAAI;AACzB,UAAA,OAAI,CAACoR,kBAAL,CAAwBpR,IAAxB;AACD,SAFD;;AAGAgF,QAAAA,SAAO,CAACb,IAAR,CAAa,KAAb,EAAoB,YAAM;AACxB,cAAMkN,eAAe,GAAG,IAAI5X,gBAAgB,CAACf,OAArB,CAA6B,OAAI,CAACgF,aAAlC,CAAxB;;AACA,UAAA,OAAI,CAACX,KAAL,CAAWmD,OAAX,CAAmB,YAAY;AAC7B,mBAAOmR,eAAe,CAAClH,QAAhB,CAAyB,IAAzB,CAAP;AACD,WAFD;;AAIA,cAAIkH,eAAe,CAAClV,eAAhB,KAAoC,CAAxC,EAA2C;AACzC,YAAA,OAAI,CAACA,eAAL,GAAuB,IAAvB;AACD;;AAED,cAAIkV,eAAe,CAACC,gBAAhB,KAAqC,IAArC,IAA6CD,eAAe,CAACC,gBAAhB,KAAqC,KAAtF,EAA6F;AAC3F,gBAAIC,qBAAJ,EAA2BC,iBAA3B;;AAEA,gBAAI,CAAC,OAAI,CAACtV,MAAL,CAAYmC,OAAZ,CAAoBwC,OAAzB,EAAkC;AAChC,cAAA,OAAI,CAACkE,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAG7K,OAAO,CAAC2J,eAAZ,EAA6B,kEAA7B,EAAiG,UAAjG,CAArB;;AACA,qBAAO,OAAI,CAACoD,KAAL,EAAP;AACD;;AAED,YAAA,OAAI,CAAC9J,SAAL,CAAesU,QAAf,CAAwB,OAAI,CAACpV,aAA7B,EAA4C,CAACkV,qBAAqB,GAAG,CAACC,iBAAiB,GAAG,OAAI,CAACtU,WAA1B,MAA2C,IAA3C,IAAmDsU,iBAAiB,KAAK,KAAK,CAA9E,GAAkF,KAAK,CAAvF,GAA2FA,iBAAiB,CAACvT,MAAtI,MAAkJ,IAAlJ,IAA0JsT,qBAAqB,KAAK,KAAK,CAAzL,GAA6LA,qBAA7L,GAAqN,OAAI,CAACrV,MAAL,CAAY+B,MAA7Q,EAAqR,OAAI,CAAC/B,MAAL,CAAYmC,OAAZ,CAAoB4D,sBAAzS;;AACA,YAAA,OAAI,CAACwB,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWkG,sBAA7B;AACD,WAVD,MAUO;AACL,YAAA,OAAI,CAACoI,gBAAL;;AADK,gBAGHvT,cAHG,GAID,OAAI,CAACjC,MAJJ,CAGHiC,cAHG;;AAML,gBAAIA,cAAc,CAACC,IAAf,KAAwB,MAA5B,EAAoC;AAClC,cAAA,OAAI,CAACqF,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWuO,qBAA7B;AACD,aAFD,MAEO;AACL,cAAA,OAAI,CAAClO,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAW2I,+BAA7B;AACD;AACF;AACF,SAhCD;AAiCD;AA5CK;AALK,GAvBY;AA2E3BvC,EAAAA,SAAS,EAAE;AACT1F,IAAAA,IAAI,EAAE,WADG;AAETmF,IAAAA,KAAK,EAAE,iBAAY;AACjB,WAAK2I,iBAAL,CAAuB/V,YAAY,CAACE,QAApC;AACD,KAJQ;AAKTsN,IAAAA,MAAM,EAAE;AACNrE,MAAAA,OAAO,EAAE,mBAAY,CAAE,CADjB;AAEN+C,MAAAA,WAAW,EAAE,uBAAY;AACvB,aAAKtE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAJK;AAKNhF,MAAAA,cAAc,EAAE,0BAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAPK;AAQNqN,MAAAA,SAAS,EAAE,qBAAY;AACrB,aAAKpO,YAAL,CAAkB,KAAKL,KAAL,CAAWgB,UAA7B;AACD;AAVK;AALC,GA3EgB;AA6F3BqF,EAAAA,uBAAuB,EAAE;AACvB3F,IAAAA,IAAI,EAAE,yBADiB;AAEvBmF,IAAAA,KAAK,EAAE,iBAAY;AACjB,WAAKvM,sBAAL;AACA,WAAKkV,iBAAL,CAAuB/V,YAAY,CAACG,KAApC;AACD,KALsB;AAMvBqN,IAAAA,MAAM,EAAE;AACNrE,MAAAA,OAAO,EAAE,mBAAY,CAAE,CADjB;AAEN+C,MAAAA,WAAW,EAAE,uBAAY;AACvB,aAAKtE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAJK;AAKNhF,MAAAA,cAAc,EAAE,0BAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAPK;AAQNsN,MAAAA,KAAK,EAAE,iBAAY;AACjB,aAAKC,gBAAL;AACD;AAVK;AANe,GA7FE;AAgH3BzI,EAAAA,sBAAsB,EAAE;AACtBxF,IAAAA,IAAI,EAAE,uBADgB;AAEtBuF,IAAAA,MAAM,EAAE;AACNtB,MAAAA,WAAW,EAAE,uBAAY;AACvB,aAAKtE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAHK;AAINhF,MAAAA,cAAc,EAAE,0BAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OANK;AAONQ,MAAAA,OAAO,EAAE,iBAAUA,SAAV,EAAmB;AAAA;;AAC1BA,QAAAA,SAAO,CAACU,EAAR,CAAW,MAAX,EAAmB,UAAA1F,IAAI,EAAI;AACzB,UAAA,OAAI,CAAC7C,SAAL,CAAe6U,gBAAf,CAAgChS,IAAhC;AACD,SAFD;;AAGAgF,QAAAA,SAAO,CAACb,IAAR,CAAa,KAAb,EAAoB,YAAM;AACxB,cAAI,OAAI,CAAChH,SAAL,CAAe8U,sBAAnB,EAA2C;AACzC,YAAA,OAAI,CAACP,gBAAL;;AADyC,gBAGvCvT,cAHuC,GAIrC,OAAI,CAACjC,MAJgC,CAGvCiC,cAHuC;;AAMzC,gBAAIA,cAAc,CAACC,IAAf,KAAwB,iCAAxB,IAA6DD,cAAc,CAACC,IAAf,KAAwB,+BAArF,IAAwHD,cAAc,CAACC,IAAf,KAAwB,wCAAhJ,IAA4LD,cAAc,CAACC,IAAf,KAAwB,iDAAxN,EAA2Q;AACzQ,cAAA,OAAI,CAACqF,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAW8O,wBAA7B;AACD,aAFD,MAEO,IAAI/T,cAAc,CAACC,IAAf,KAAwB,MAA5B,EAAoC;AACzC,cAAA,OAAI,CAACqF,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWuO,qBAA7B;AACD,aAFM,MAEA;AACL,cAAA,OAAI,CAAClO,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAW2I,+BAA7B;AACD;AACF;AACF,SAfD;AAgBD;AA3BK;AAFc,GAhHG;AAgJ3BA,EAAAA,+BAA+B,EAAE;AAC/BjI,IAAAA,IAAI,EAAE,6BADyB;AAE/BuF,IAAAA,MAAM,EAAE;AACNtB,MAAAA,WAAW,EAAE,uBAAY;AACvB,aAAKtE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAHK;AAINhF,MAAAA,cAAc,EAAE,0BAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OANK;AAON2N,MAAAA,aAAa,EAAE,uBAAUzT,KAAV,EAAiB;AAAA,YAE5BP,cAF4B,GAG1B,KAAKjC,MAHqB,CAE5BiC,cAF4B;;AAK9B,YAAIA,cAAc,CAACC,IAAf,KAAwB,iCAAxB,IAA6DD,cAAc,CAACC,IAAf,KAAwB,qCAArF,IAA8HD,cAAc,CAACC,IAAf,KAAwB,+BAAtJ,IAAyLD,cAAc,CAACC,IAAf,KAAwB,wCAAjN,IAA6PD,cAAc,CAACC,IAAf,KAAwB,iDAAzR,EAA4U;AAC1U,cAAIM,KAAK,CAACoM,OAAN,KAAkB5M,SAAtB,EAAiC;AAC/B,iBAAKpB,UAAL,GAAkB,CAAC,GAAG5C,OAAO,CAAC2J,eAAZ,EAA6B,iEAA7B,CAAlB;AACA,iBAAKhH,QAAL,GAAgB,KAAhB;AACD,WAHD,MAGO,IAAI6B,KAAK,CAACoM,OAAN,CAAcnE,MAAd,KAAyB,CAA7B,EAAgC;AACrC,iBAAK7J,UAAL,GAAkB,CAAC,GAAG5C,OAAO,CAAC2J,eAAZ,+DAAmF1F,cAAc,CAACC,IAAlG,gDAAlB;AACA,iBAAKvB,QAAL,GAAgB,KAAhB;AACD;AACF,SARD,MAQO,IAAI6B,KAAK,CAACoM,OAAN,KAAkB5M,SAAtB,EAAiC;AACtC,eAAKpB,UAAL,GAAkB,CAAC,GAAG5C,OAAO,CAAC2J,eAAZ,EAA6B,8CAA7B,CAAlB;AACA,eAAKhH,QAAL,GAAgB,KAAhB;AACD,SAHM,MAGA;AACL,eAAKC,UAAL,GAAkB,CAAC,GAAG5C,OAAO,CAAC2J,eAAZ,EAA6B,kFAA7B,CAAlB;AACA,eAAKhH,QAAL,GAAgB,KAAhB;AACD;AACF,OA3BK;AA4BNmI,MAAAA,OAAO,EAAE,iBAAUA,SAAV,EAAmB;AAAA;;AAC1B,YAAMW,iBAAiB,GAAG,KAAKyM,uBAAL,CAA6BpN,SAA7B,CAA1B;AACAW,QAAAA,iBAAiB,CAACxB,IAAlB,CAAuB,KAAvB,EAA8B,YAAM;AAClC,cAAI,OAAI,CAACtH,QAAT,EAAmB;AACjB,gBAAI,OAAI,CAACK,WAAT,EAAsB;AACpB,cAAA,OAAI,CAACuG,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWoG,SAA7B;AACD,aAFD,MAEO;AACL,cAAA,OAAI,CAAC/F,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWiP,6BAA7B;AACD;AACF,WAND,MAMO,IAAI,OAAI,CAACvV,UAAT,EAAqB;AAC1B,gBAAI,OAAI,CAACA,UAAL,CAAgBuJ,WAApB,EAAiC;AAC/B,cAAA,OAAI,CAACtJ,KAAL,CAAW4L,GAAX,CAAe,qCAAf;;AACA,cAAA,OAAI,CAAClF,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWqG,uBAA7B;AACD,aAHD,MAGO;AACL,cAAA,OAAI,CAAC1E,IAAL,CAAU,SAAV,EAAqB,OAAI,CAACjI,UAA1B;;AACA,cAAA,OAAI,CAAC2G,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWoB,KAA7B;AACD;AACF,WARM,MAQA;AACL,YAAA,OAAI,CAACO,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAG7K,OAAO,CAAC2J,eAAZ,EAA6B,eAA7B,EAA8C,QAA9C,CAArB;;AACA,YAAA,OAAI,CAACJ,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWoB,KAA7B;AACD;AACF,SAnBD;AAoBD;AAlDK;AAFuB,GAhJN;AAuM3BmN,EAAAA,qBAAqB,EAAE;AACrB7N,IAAAA,IAAI,EAAE,yBADe;AAErBuF,IAAAA,MAAM,EAAE;AACNtB,MAAAA,WAAW,EAAE,uBAAY;AACvB,aAAKtE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAHK;AAINhF,MAAAA,cAAc,EAAE,0BAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OANK;AAONQ,MAAAA,OAAO,EAAE,iBAAUA,SAAV,EAAmB;AAAA;;AAC1B,YAAMW,iBAAiB,GAAG,KAAKyM,uBAAL,CAA6BpN,SAA7B,CAA1B;AACAW,QAAAA,iBAAiB,CAACxB,IAAlB,CAAuB,KAAvB,EAA8B,YAAM;AAClC,cAAI,OAAI,CAACnH,UAAT,EAAqB;AACnB,gBAAMmB,cAAc,GAAG,OAAI,CAACjC,MAAL,CAAYiC,cAAnC;AACA,gBAAM+B,OAAO,GAAG,IAAIvG,YAAY,CAACjB,OAAjB,CAAyB;AACvC4F,cAAAA,MAAM,EAAEH,cAAc,CAACE,OAAf,CAAuBC,MADQ;AAEvCC,cAAAA,QAAQ,EAAEJ,cAAc,CAACE,OAAf,CAAuBE,QAFM;AAGvCC,cAAAA,QAAQ,EAAEL,cAAc,CAACE,OAAf,CAAuBG,QAHM;AAIvCxB,cAAAA,UAAU,EAAE,OAAI,CAACA;AAJsB,aAAzB,CAAhB;;AAMA,YAAA,OAAI,CAACG,SAAL,CAAemG,WAAf,CAA2B9J,OAAO,CAAC+J,IAAR,CAAa+O,YAAxC,EAAsDpS,OAAO,CAACF,IAA9D;;AACA,YAAA,OAAI,CAACjD,KAAL,CAAWmD,OAAX,CAAmB,YAAY;AAC7B,qBAAOA,OAAO,CAACiK,QAAR,CAAiB,IAAjB,CAAP;AACD,aAFD;;AAGA,YAAA,OAAI,CAACnN,UAAL,GAAkBkB,SAAlB;AACD,WAbD,MAaO,IAAI,OAAI,CAACrB,QAAT,EAAmB;AACxB,gBAAI,OAAI,CAACK,WAAT,EAAsB;AACpB,cAAA,OAAI,CAACuG,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWoG,SAA7B;AACD,aAFD,MAEO;AACL,cAAA,OAAI,CAAC/F,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWiP,6BAA7B;AACD;AACF,WANM,MAMA,IAAI,OAAI,CAACvV,UAAT,EAAqB;AAC1B,gBAAI,OAAI,CAACA,UAAL,CAAgBuJ,WAApB,EAAiC;AAC/B,cAAA,OAAI,CAACtJ,KAAL,CAAW4L,GAAX,CAAe,qCAAf;;AACA,cAAA,OAAI,CAAClF,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWqG,uBAA7B;AACD,aAHD,MAGO;AACL,cAAA,OAAI,CAAC1E,IAAL,CAAU,SAAV,EAAqB,OAAI,CAACjI,UAA1B;;AACA,cAAA,OAAI,CAAC2G,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWoB,KAA7B;AACD;AACF,WARM,MAQA;AACL,YAAA,OAAI,CAACO,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAG7K,OAAO,CAAC2J,eAAZ,EAA6B,eAA7B,EAA8C,QAA9C,CAArB;;AACA,YAAA,OAAI,CAACJ,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWoB,KAA7B;AACD;AACF,SAhCD;AAiCD;AA1CK;AAFa,GAvMI;AAsP3B0N,EAAAA,wBAAwB,EAAE;AACxBpO,IAAAA,IAAI,EAAE,uBADkB;AAExBuF,IAAAA,MAAM,EAAE;AACNtB,MAAAA,WAAW,EAAE,uBAAY;AACvB,aAAKtE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAHK;AAINhF,MAAAA,cAAc,EAAE,0BAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OANK;AAON+N,MAAAA,WAAW,EAAE,qBAAU7T,KAAV,EAAiB;AAC5B,aAAKtC,gBAAL,GAAwBsC,KAAxB;AACD,OATK;AAUNsG,MAAAA,OAAO,EAAE,iBAAUA,SAAV,EAAmB;AAAA;;AAC1B,YAAMW,iBAAiB,GAAG,KAAKyM,uBAAL,CAA6BpN,SAA7B,CAA1B;AACAW,QAAAA,iBAAiB,CAACxB,IAAlB,CAAuB,KAAvB,EAA8B,YAAM;AAClC,cAAI,OAAI,CAACtH,QAAT,EAAmB;AACjB,gBAAI,OAAI,CAACK,WAAT,EAAsB;AACpB,cAAA,OAAI,CAACuG,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWoG,SAA7B;AACD,aAFD,MAEO;AACL,cAAA,OAAI,CAAC/F,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWiP,6BAA7B;AACD;;AAED;AACD;;AAED,cAAMjW,gBAAgB,GAAG,OAAI,CAACA,gBAA9B;;AAEA,cAAIA,gBAAgB,IAAIA,gBAAgB,CAACoW,MAArC,IAA+CpW,gBAAgB,CAACqW,GAApE,EAAyE;AACvE,gBAAMtU,cAAc,GAAG,OAAI,CAACjC,MAAL,CAAYiC,cAAnC;;AAEA,gBAAMuU,QAAQ,GAAG,SAAXA,QAAW,CAAAjN,QAAQ,EAAI;AAC3B,kBAAMkN,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAC3O,GAAD,EAAM4O,WAAN,EAAsB;AACpD,oBAAI5O,GAAJ,EAAS;AACP,yBAAOyB,QAAQ,CAACzB,GAAD,CAAf;AACD;;AAED4O,gBAAAA,WAAW,CAACF,QAAZ,GAAuBG,IAAvB,CAA4B,UAAAC,aAAa,EAAI;AAC3CrN,kBAAAA,QAAQ,CAAC,IAAD,EAAOqN,aAAa,CAACC,WAArB,CAAR;AACD,iBAFD,EAEGtN,QAFH;AAGD,eARD;;AAUA,kBAAItH,cAAc,CAACC,IAAf,KAAwB,iCAA5B,EAA+D;AAC7D,oBAAI4U,qBAAJ;;AAEA,oBAAMJ,WAAW,GAAG,IAAI1Z,eAAe,CAAC+Z,oBAApB,CAAyC,sCAAzC,EAAiF,CAACD,qBAAqB,GAAG7U,cAAc,CAACE,OAAf,CAAuBC,MAAhD,MAA4D,IAA5D,IAAoE0U,qBAAqB,KAAK,KAAK,CAAnG,GAAuGA,qBAAvG,GAA+H,QAAhN,EAA0N7U,cAAc,CAACE,OAAf,CAAuBE,QAAjP,EAA2PJ,cAAc,CAACE,OAAf,CAAuBG,QAAlR,EAA4RpC,gBAAgB,CAACqW,GAA7S,EAAkTvU,SAAlT,EAA6T;AACjV2S,gBAAAA,mBADoB,CAApB;AAEA8B,gBAAAA,uBAAuB,CAACzU,SAAD,EAAY0U,WAAZ,CAAvB;AACD,eAND,MAMO,IAAIzU,cAAc,CAACC,IAAf,KAAwB,+BAA5B,EAA6D;AAClE,iBAAC,GAAGlF,eAAe,CAACga,cAApB,EAAoC;AAClCvU,kBAAAA,QAAQ,EAAER,cAAc,CAACE,OAAf,CAAuBM,QADC;AAElCC,kBAAAA,WAAW,EAAET,cAAc,CAACE,OAAf,CAAuBO,WAFF;AAGlCuU,kBAAAA,QAAQ,EAAE/W,gBAAgB,CAACqW;AAHO,iBAApC,EAIGE,uBAJH;AAKD,eANM,MAMA,IAAIxU,cAAc,CAACC,IAAf,KAAwB,wCAA5B,EAAsE;AAC3E,iBAAC,GAAGlF,eAAe,CAACka,sBAApB,EAA4C;AAC1CxU,kBAAAA,WAAW,EAAET,cAAc,CAACE,OAAf,CAAuBO,WADM;AAE1CC,kBAAAA,SAAS,EAAEV,cAAc,CAACE,OAAf,CAAuBQ,SAFQ;AAG1CsU,kBAAAA,QAAQ,EAAE/W,gBAAgB,CAACqW,GAHe;AAI1C9T,kBAAAA,QAAQ,EAAER,cAAc,CAACE,OAAf,CAAuBM;AAJS,iBAA5C,EAKGgU,uBALH;AAMD,eAPM,MAOA,IAAIxU,cAAc,CAACC,IAAf,KAAwB,iDAA5B,EAA+E;AACpF,oBAAMwU,YAAW,GAAG,IAAI1Z,eAAe,CAACma,2BAApB,CAAgDlV,cAAc,CAACE,OAAf,CAAuBM,QAAvE,EAAiFR,cAAc,CAACE,OAAf,CAAuBU,QAAxG,EAAkH;AACtIZ,gBAAAA,cAAc,CAACE,OAAf,CAAuBS,YADH,EACiB1C,gBAAgB,CAACqW,GADlC,EACuCvU,SADvC,EACkD;AACtE2S,gBAAAA,mBAFoB,CAApB;;AAGA8B,gBAAAA,uBAAuB,CAACzU,SAAD,EAAY0U,YAAZ,CAAvB;AACD;AACF,aApCD;;AAsCAF,YAAAA,QAAQ,CAAC,UAAC1O,GAAD,EAAMtF,KAAN,EAAgB;AACvB,kBAAIsF,GAAJ,EAAS;AACP,gBAAA,OAAI,CAAClH,UAAL,GAAkB,CAAC,GAAG5C,OAAO,CAAC2J,eAAZ,EAA6B,0DAA7B,EAAyF,UAAzF,CAAlB;;AACA,gBAAA,OAAI,CAACkB,IAAL,CAAU,SAAV,EAAqB,OAAI,CAACjI,UAA1B;;AACA,gBAAA,OAAI,CAAC2G,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWoB,KAA7B;;AACA;AACD;;AAED,cAAA,OAAI,CAAC8O,uBAAL,CAA6B5U,KAA7B;AACD,aATO,CAAR;AAUD,WAnDD,MAmDO,IAAI,OAAI,CAAC5B,UAAT,EAAqB;AAC1B,gBAAI,OAAI,CAACA,UAAL,CAAgBuJ,WAApB,EAAiC;AAC/B,cAAA,OAAI,CAACtJ,KAAL,CAAW4L,GAAX,CAAe,qCAAf;;AACA,cAAA,OAAI,CAAClF,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWqG,uBAA7B;AACD,aAHD,MAGO;AACL,cAAA,OAAI,CAAC1E,IAAL,CAAU,SAAV,EAAqB,OAAI,CAACjI,UAA1B;;AACA,cAAA,OAAI,CAAC2G,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWoB,KAA7B;AACD;AACF,WARM,MAQA;AACL,YAAA,OAAI,CAACO,IAAL,CAAU,SAAV,EAAqB,CAAC,GAAG7K,OAAO,CAAC2J,eAAZ,EAA6B,eAA7B,EAA8C,QAA9C,CAArB;;AACA,YAAA,OAAI,CAACJ,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWoB,KAA7B;AACD;AACF,SA5ED;AA6ED;AAzFK;AAFgB,GAtPC;AAoV3B6N,EAAAA,6BAA6B,EAAE;AAC7BvO,IAAAA,IAAI,EAAE,2BADuB;AAE7BmF,IAAAA,KAAK,EAAE,iBAAY;AACjB,WAAKsK,cAAL;AACD,KAJ4B;AAK7BlK,IAAAA,MAAM,EAAE;AACNtB,MAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,aAAKtE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OAHK;AAINhF,MAAAA,cAAc,EAAE,0BAAY;AAC1B,aAAKiE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD,OANK;AAONQ,MAAAA,OAAO,EAAE,iBAAUA,SAAV,EAAmB;AAAA;;AAC1B,YAAMW,iBAAiB,GAAG,KAAKyM,uBAAL,CAA6BpN,SAA7B,CAA1B;AACAW,QAAAA,iBAAiB,CAACxB,IAAlB,CAAuB,KAAvB,EAA8B,YAAM;AAClC,UAAA,OAAI,CAACV,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWiM,SAA7B;;AACA,UAAA,OAAI,CAACmE,mBAAL;AACD,SAHD;AAID;AAbK;AALqB,GApVJ;AAyW3BnE,EAAAA,SAAS,EAAE;AACTvL,IAAAA,IAAI,EAAE,UADG;AAETuF,IAAAA,MAAM,EAAE;AACNtB,MAAAA,WAAW,EAAE,uBAAY;AACvB,aAAKtE,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACD;AAHK;AAFC,GAzWgB;AAiX3B4L,EAAAA,mBAAmB,EAAE;AACnBtM,IAAAA,IAAI,EAAE,mBADa;AAEnBiF,IAAAA,IAAI,EAAE,cAAU0K,SAAV,EAAqB;AACzB,WAAKtO,iBAAL;AACD,KAJkB;AAKnBkE,IAAAA,MAAM,EAAE;AACNtB,MAAAA,WAAW,EAAE,qBAAU/D,GAAV,EAAe;AAC1B,YAAM0P,UAAU,GAAG,KAAKnW,OAAxB;AACA,aAAKA,OAAL,GAAeW,SAAf;AACA,aAAKuF,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACAkP,QAAAA,UAAU,CAACjO,QAAX,CAAoBzB,GAApB;AACD,OANK;AAONgB,MAAAA,OAAO,EAAE,iBAAUA,UAAV,EAAmB;AAAA;;AAC1B,YAAI2O,cAAJ,EAAoBC,cAApB,CAD0B,CAG1B;;;AACA,aAAKzO,iBAAL;AACA,YAAMQ,iBAAiB,GAAG,KAAKyM,uBAAL,CAA6BpN,UAA7B,CAA1B;;AAEA,YAAM6O,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBlO,UAAAA,iBAAiB,CAACsK,MAAlB;AACD,SAFD;;AAIA,YAAM6D,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,cAAIC,aAAJ;;AAEApO,UAAAA,iBAAiB,CAACqO,KAAlB;AACA,WAACD,aAAa,GAAG,OAAI,CAACxW,OAAtB,MAAmC,IAAnC,IAA2CwW,aAAa,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,aAAa,CAAC5P,IAAd,CAAmB,QAAnB,EAA6B0P,QAA7B,CAA/E;AACD,SALD;;AAOA,SAACF,cAAc,GAAG,KAAKpW,OAAvB,MAAoC,IAApC,IAA4CoW,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAACjO,EAAf,CAAkB,OAAlB,EAA2BoO,OAA3B,CAAjF;;AAEA,YAAI,KAAKvW,OAAL,YAAwB3D,QAAQ,CAAClB,OAAjC,IAA4C,KAAK6E,OAAL,CAAayS,MAA7D,EAAqE;AACnE8D,UAAAA,OAAO;AACR;;AAED,YAAMlG,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,cAAIqG,cAAJ,EAAoBC,cAApB;;AAEAvO,UAAAA,iBAAiB,CAAC1B,cAAlB,CAAiC,KAAjC,EAAwCkQ,cAAxC;;AAEA,cAAI,OAAI,CAAC5W,OAAL,YAAwB3D,QAAQ,CAAClB,OAAjC,IAA4C,OAAI,CAAC6E,OAAL,CAAayS,MAA7D,EAAqE;AACnE;AACA,YAAA,OAAI,CAACzS,OAAL,CAAa0S,MAAb;AACD;;AAED,WAACgE,cAAc,GAAG,OAAI,CAAC1W,OAAvB,MAAoC,IAApC,IAA4C0W,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAAChQ,cAAf,CAA8B,OAA9B,EAAuC6P,OAAvC,CAAjF;AACA,WAACI,cAAc,GAAG,OAAI,CAAC3W,OAAvB,MAAoC,IAApC,IAA4C2W,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAACjQ,cAAf,CAA8B,QAA9B,EAAwC4P,QAAxC,CAAjF;AACD,SAZD;;AAcA,YAAMM,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,cAAIC,cAAJ,EAAoBC,cAApB,EAAoCC,cAApC,EAAoDC,cAApD;;AAEA,WAACH,cAAc,GAAG,OAAI,CAAC7W,OAAvB,MAAoC,IAApC,IAA4C6W,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAACnQ,cAAf,CAA8B,QAA9B,EAAwC,OAAI,CAAClG,uBAA7C,CAAjF;AACA,WAACsW,cAAc,GAAG,OAAI,CAAC9W,OAAvB,MAAoC,IAApC,IAA4C8W,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAACpQ,cAAf,CAA8B,QAA9B,EAAwC2J,QAAxC,CAAjF;AACA,WAAC0G,cAAc,GAAG,OAAI,CAAC/W,OAAvB,MAAoC,IAApC,IAA4C+W,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAACrQ,cAAf,CAA8B,OAA9B,EAAuC6P,OAAvC,CAAjF;AACA,WAACS,cAAc,GAAG,OAAI,CAAChX,OAAvB,MAAoC,IAApC,IAA4CgX,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAACtQ,cAAf,CAA8B,QAA9B,EAAwC4P,QAAxC,CAAjF;;AACA,UAAA,OAAI,CAACpQ,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWiM,SAA7B;;AACA,cAAMqE,UAAU,GAAG,OAAI,CAACnW,OAAxB;AACA,UAAA,OAAI,CAACA,OAAL,GAAeW,SAAf;;AAEA,cAAI,OAAI,CAAChC,MAAL,CAAYmC,OAAZ,CAAoByD,UAApB,GAAiC,KAAjC,IAA0C4R,UAAU,CAAC5N,KAArD,IAA8D,OAAI,CAACrJ,UAAvE,EAAmF;AACjF,YAAA,OAAI,CAACH,aAAL,GAAqB,KAArB;AACD;;AAEDoX,UAAAA,UAAU,CAACjO,QAAX,CAAoBiO,UAAU,CAAC5N,KAA/B,EAAsC4N,UAAU,CAACnM,QAAjD,EAA2DmM,UAAU,CAACvM,IAAtE;AACD,SAhBD;;AAkBAxB,QAAAA,iBAAiB,CAACxB,IAAlB,CAAuB,KAAvB,EAA8BgQ,cAA9B;AACA,SAACP,cAAc,GAAG,KAAKrW,OAAvB,MAAoC,IAApC,IAA4CqW,cAAc,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,cAAc,CAACzP,IAAf,CAAoB,QAApB,EAA8ByJ,QAA9B,CAAjF;AACD;AAjEK;AALW,GAjXM;AA0b3BlK,EAAAA,cAAc,EAAE;AACdI,IAAAA,IAAI,EAAE,eADQ;AAEdmF,IAAAA,KAAK,EAAE,iBAAY;AACjB,WAAK3L,iBAAL,GAAyB,KAAzB;AACD,KAJa;AAKd+L,IAAAA,MAAM,EAAE;AACNtB,MAAAA,WAAW,EAAE,qBAAU/D,GAAV,EAAe;AAC1B,YAAM0P,UAAU,GAAG,KAAKnW,OAAxB;AACA,aAAKA,OAAL,GAAeW,SAAf;AACA,aAAKuF,YAAL,CAAkB,KAAKL,KAAL,CAAWoB,KAA7B;AACAkP,QAAAA,UAAU,CAACjO,QAAX,CAAoBzB,GAApB;AACD,OANK;AAONyD,MAAAA,SAAS,EAAE,qBAAY;AACrB,aAAKnK,iBAAL,GAAyB,IAAzB;AACD,OATK;AAUN0H,MAAAA,OAAO,EAAE,iBAAUA,UAAV,EAAmB;AAAA;;AAC1B,YAAMW,iBAAiB,GAAG,KAAKyM,uBAAL,CAA6BpN,UAA7B,CAA1B;AACAW,QAAAA,iBAAiB,CAACxB,IAAlB,CAAuB,KAAvB,EAA8B,YAAM;AAClC;AACA;AACA,cAAI,OAAI,CAAC7G,iBAAT,EAA4B;AAC1B,YAAA,OAAI,CAACA,iBAAL,GAAyB,KAAzB;;AACA,YAAA,OAAI,CAACmL,gBAAL;;AACA,gBAAMiL,UAAU,GAAG,OAAI,CAACnW,OAAxB;AACA,YAAA,OAAI,CAACA,OAAL,GAAeW,SAAf;;AACA,YAAA,OAAI,CAACuF,YAAL,CAAkB,OAAI,CAACL,KAAL,CAAWiM,SAA7B;;AAEA,gBAAIqE,UAAU,CAAC5N,KAAX,IAAoB4N,UAAU,CAAC5N,KAAX,YAA4B5L,OAAO,CAACsL,YAAxD,IAAwEkO,UAAU,CAAC5N,KAAX,CAAiByD,IAAjB,KAA0B,UAAtG,EAAkH;AAChHmK,cAAAA,UAAU,CAACjO,QAAX,CAAoBiO,UAAU,CAAC5N,KAA/B;AACD,aAFD,MAEO;AACL4N,cAAAA,UAAU,CAACjO,QAAX,CAAoB,CAAC,GAAGvL,OAAO,CAACsL,YAAZ,EAA0B,WAA1B,EAAuC,SAAvC,CAApB;AACD;AACF;AACF,SAhBD;AAiBD;AA7BK;AALM,GA1bW;AA+d3BhB,EAAAA,KAAK,EAAE;AACLV,IAAAA,IAAI,EAAE,OADD;AAELmF,IAAAA,KAAK,EAAE,iBAAY;AACjB,WAAK2I,iBAAL,CAAuB/V,YAAY,CAACC,MAApC;AACD,KAJI;AAKLuN,IAAAA,MAAM,EAAE;AACNmL,MAAAA,WAAW,EAAE,uBAAY,CAAC;AACzB,OAFK;AAGNhV,MAAAA,cAAc,EAAE,0BAAY,CAAC;AAC5B,OAJK;AAKNwF,MAAAA,OAAO,EAAE,mBAAY,CAAC;AACrB,OANK;AAON+C,MAAAA,WAAW,EAAE,uBAAY,CAAC;AACzB;AARK;AALH;AA/doB,CAA7B","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\r\n\r\nvar _os = _interopRequireDefault(require(\"os\"));\r\n\r\nvar _constants = _interopRequireDefault(require(\"constants\"));\r\n\r\nvar _tls = require(\"tls\");\r\n\r\nvar _stream = require(\"stream\");\r\n\r\nvar _msRestNodeauth = require(\"@azure/ms-rest-nodeauth\");\r\n\r\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\r\n\r\nvar _debug = _interopRequireDefault(require(\"./debug\"));\r\n\r\nvar _events = require(\"events\");\r\n\r\nvar _instanceLookup = require(\"./instance-lookup\");\r\n\r\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\r\n\r\nvar _packet = require(\"./packet\");\r\n\r\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\r\n\r\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\r\n\r\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\r\n\r\nvar _request = _interopRequireDefault(require(\"./request\"));\r\n\r\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\r\n\r\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\r\n\r\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\r\n\r\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\r\n\r\nvar _transaction = require(\"./transaction\");\r\n\r\nvar _errors = require(\"./errors\");\r\n\r\nvar _connector = require(\"./connector\");\r\n\r\nvar _library = require(\"./library\");\r\n\r\nvar _tdsVersions = require(\"./tds-versions\");\r\n\r\nvar _message = _interopRequireDefault(require(\"./message\"));\r\n\r\nvar _ntlm = require(\"./ntlm\");\r\n\r\nvar _depd = _interopRequireDefault(require(\"depd\"));\r\n\r\nvar _adalNode = require(\"adal-node\");\r\n\r\nvar _nodeAbortController = _interopRequireDefault(require(\"node-abort-controller\"));\r\n\r\nvar _dataType = require(\"./data-type\");\r\n\r\nvar _bulkLoadPayload = require(\"./bulk-load-payload\");\r\n\r\nvar _package = require(\"../package.json\");\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst deprecate = (0, _depd.default)('tedious');\r\n\r\n/**\r\n * @private\r\n */\r\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_TEXTSIZE = 2147483647;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_DATEFIRST = 7;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_PORT = 1433;\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_TDS_VERSION = '7_4';\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_LANGUAGE = 'us_english';\r\n/**\r\n * @private\r\n */\r\n\r\nconst DEFAULT_DATEFORMAT = 'mdy';\r\n\r\n/**\r\n * @private\r\n */\r\nconst CLEANUP_TYPE = {\r\n  NORMAL: 0,\r\n  REDIRECT: 1,\r\n  RETRY: 2\r\n};\r\n\r\n/**\r\n * A [[Connection]] instance represents a single connection to a database server.\r\n *\r\n * ```js\r\n * var Connection = require('tedious').Connection;\r\n * var config = {\r\n *  \"authentication\": {\r\n *    ...,\r\n *    \"options\": {...}\r\n *  },\r\n *  \"options\": {...}\r\n * };\r\n * var connection = new Connection(config);\r\n * ```\r\n *\r\n * Only one request at a time may be executed on a connection. Once a [[Request]]\r\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\r\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\r\n * [[Request]]'s completion callback is called.\r\n */\r\nclass Connection extends _events.EventEmitter {\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * Note: be aware of the different options field:\r\n   * 1. config.authentication.options\r\n   * 2. config.options\r\n   *\r\n   * ```js\r\n   * const { Connection } = require('tedious');\r\n   *\r\n   * const config = {\r\n   *  \"authentication\": {\r\n   *    ...,\r\n   *    \"options\": {...}\r\n   *  },\r\n   *  \"options\": {...}\r\n   * };\r\n   *\r\n   * const connection = new Connection(config);\r\n   * ```\r\n   *\r\n   * @param config\r\n   */\r\n  constructor(config) {\r\n    super();\r\n    this.fedAuthRequired = void 0;\r\n    this.fedAuthInfoToken = void 0;\r\n    this.config = void 0;\r\n    this.secureContext = void 0;\r\n    this.inTransaction = void 0;\r\n    this.transactionDescriptors = void 0;\r\n    this.transactionDepth = void 0;\r\n    this.isSqlBatch = void 0;\r\n    this.curTransientRetryCount = void 0;\r\n    this.transientErrorLookup = void 0;\r\n    this.closed = void 0;\r\n    this.loggedIn = void 0;\r\n    this.loginError = void 0;\r\n    this.debug = void 0;\r\n    this.ntlmpacket = void 0;\r\n    this.ntlmpacketBuffer = void 0;\r\n    this.routingData = void 0;\r\n    this.messageIo = void 0;\r\n    this.state = void 0;\r\n    this.resetConnectionOnNextRequest = void 0;\r\n    this.attentionReceived = void 0;\r\n    this.request = void 0;\r\n    this.procReturnStatusValue = void 0;\r\n    this.socket = void 0;\r\n    this.messageBuffer = void 0;\r\n    this.connectTimer = void 0;\r\n    this.cancelTimer = void 0;\r\n    this.requestTimer = void 0;\r\n    this.retryTimer = void 0;\r\n    this._cancelAfterRequestSent = void 0;\r\n\r\n    if (typeof config !== 'object' || config === null) {\r\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\r\n    }\r\n\r\n    if (typeof config.server !== 'string') {\r\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\r\n    }\r\n\r\n    this.fedAuthRequired = false;\r\n    this.fedAuthInfoToken = undefined;\r\n    let authentication;\r\n\r\n    if (config.authentication !== undefined) {\r\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\r\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\r\n      }\r\n\r\n      const type = config.authentication.type;\r\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\r\n\r\n      if (typeof type !== 'string') {\r\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\r\n      }\r\n\r\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret') {\r\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\r\n      }\r\n\r\n      if (typeof options !== 'object' || options === null) {\r\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\r\n      }\r\n\r\n      if (type === 'ntlm') {\r\n        if (typeof options.domain !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\r\n        }\r\n\r\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\r\n        }\r\n\r\n        if (options.password !== undefined && typeof options.password !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'ntlm',\r\n          options: {\r\n            userName: options.userName,\r\n            password: options.password,\r\n            domain: options.domain && options.domain.toUpperCase()\r\n          }\r\n        };\r\n      } else if (type === 'azure-active-directory-password') {\r\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\r\n        }\r\n\r\n        if (options.password !== undefined && typeof options.password !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'azure-active-directory-password',\r\n          options: {\r\n            userName: options.userName,\r\n            password: options.password,\r\n            domain: options.domain\r\n          }\r\n        };\r\n      } else if (type === 'azure-active-directory-access-token') {\r\n        if (typeof options.token !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'azure-active-directory-access-token',\r\n          options: {\r\n            token: options.token\r\n          }\r\n        };\r\n      } else if (type === 'azure-active-directory-msi-vm') {\r\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\r\n        }\r\n\r\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'azure-active-directory-msi-vm',\r\n          options: {\r\n            clientId: options.clientId,\r\n            msiEndpoint: options.msiEndpoint\r\n          }\r\n        };\r\n      } else if (type === 'azure-active-directory-msi-app-service') {\r\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\r\n        }\r\n\r\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\r\n        }\r\n\r\n        if (options.msiSecret !== undefined && typeof options.msiSecret !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.msiSecret\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'azure-active-directory-msi-app-service',\r\n          options: {\r\n            clientId: options.clientId,\r\n            msiEndpoint: options.msiEndpoint,\r\n            msiSecret: options.msiSecret\r\n          }\r\n        };\r\n      } else if (type === 'azure-active-directory-service-principal-secret') {\r\n        if (typeof options.clientId !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\r\n        }\r\n\r\n        if (typeof options.clientSecret !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\r\n        }\r\n\r\n        if (typeof options.tenantId !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'azure-active-directory-service-principal-secret',\r\n          options: {\r\n            clientId: options.clientId,\r\n            clientSecret: options.clientSecret,\r\n            tenantId: options.tenantId\r\n          }\r\n        };\r\n      } else {\r\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\r\n        }\r\n\r\n        if (options.password !== undefined && typeof options.password !== 'string') {\r\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\r\n        }\r\n\r\n        authentication = {\r\n          type: 'default',\r\n          options: {\r\n            userName: options.userName,\r\n            password: options.password\r\n          }\r\n        };\r\n      }\r\n    } else {\r\n      authentication = {\r\n        type: 'default',\r\n        options: {\r\n          userName: undefined,\r\n          password: undefined\r\n        }\r\n      };\r\n    }\r\n\r\n    this.config = {\r\n      server: config.server,\r\n      authentication: authentication,\r\n      options: {\r\n        abortTransactionOnError: false,\r\n        appName: undefined,\r\n        camelCaseColumns: false,\r\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\r\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,\r\n        // Units: miliseconds\r\n        columnEncryptionSetting: false,\r\n        columnNameReplacer: undefined,\r\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\r\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\r\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\r\n        cryptoCredentialsDetails: {},\r\n        database: undefined,\r\n        datefirst: DEFAULT_DATEFIRST,\r\n        dateFormat: DEFAULT_DATEFORMAT,\r\n        debug: {\r\n          data: false,\r\n          packet: false,\r\n          payload: false,\r\n          token: false\r\n        },\r\n        enableAnsiNull: true,\r\n        enableAnsiNullDefault: true,\r\n        enableAnsiPadding: true,\r\n        enableAnsiWarnings: true,\r\n        enableArithAbort: true,\r\n        enableConcatNullYieldsNull: true,\r\n        enableCursorCloseOnCommit: null,\r\n        enableImplicitTransactions: false,\r\n        enableNumericRoundabort: false,\r\n        enableQuotedIdentifier: true,\r\n        encrypt: true,\r\n        fallbackToDefaultDb: false,\r\n        encryptionKeyStoreProviders: undefined,\r\n        instanceName: undefined,\r\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\r\n        language: DEFAULT_LANGUAGE,\r\n        localAddress: undefined,\r\n        maxRetriesOnTransientErrors: 3,\r\n        multiSubnetFailover: false,\r\n        packetSize: DEFAULT_PACKET_SIZE,\r\n        port: DEFAULT_PORT,\r\n        readOnlyIntent: false,\r\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\r\n        rowCollectionOnDone: false,\r\n        rowCollectionOnRequestCompletion: false,\r\n        serverName: undefined,\r\n        serverSupportsColumnEncryption: false,\r\n        tdsVersion: DEFAULT_TDS_VERSION,\r\n        textsize: DEFAULT_TEXTSIZE,\r\n        trustedServerNameAE: undefined,\r\n        trustServerCertificate: true,\r\n        useColumnNames: false,\r\n        useUTC: true,\r\n        validateBulkLoadParameters: true,\r\n        workstationId: undefined,\r\n        lowerCaseGuids: false\r\n      }\r\n    };\r\n\r\n    if (config.options) {\r\n      if (config.options.port && config.options.instanceName) {\r\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\r\n      }\r\n\r\n      if (config.options.abortTransactionOnError !== undefined) {\r\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\r\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\r\n        }\r\n\r\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\r\n      }\r\n\r\n      if (config.options.appName !== undefined) {\r\n        if (typeof config.options.appName !== 'string') {\r\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.appName = config.options.appName;\r\n      }\r\n\r\n      if (config.options.camelCaseColumns !== undefined) {\r\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\r\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\r\n      }\r\n\r\n      if (config.options.cancelTimeout !== undefined) {\r\n        if (typeof config.options.cancelTimeout !== 'number') {\r\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\r\n        }\r\n\r\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\r\n      }\r\n\r\n      if (config.options.columnNameReplacer) {\r\n        if (typeof config.options.columnNameReplacer !== 'function') {\r\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\r\n        }\r\n\r\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\r\n      }\r\n\r\n      if (config.options.connectTimeout !== undefined) {\r\n        if (typeof config.options.connectTimeout !== 'number') {\r\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\r\n        }\r\n\r\n        this.config.options.connectTimeout = config.options.connectTimeout;\r\n      }\r\n\r\n      if (config.options.connectionIsolationLevel !== undefined) {\r\n        (0, _transaction.assertValidIsolationLevel)(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\r\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\r\n      }\r\n\r\n      if (config.options.connectTimeout !== undefined) {\r\n        if (typeof config.options.connectTimeout !== 'number') {\r\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\r\n        }\r\n\r\n        this.config.options.connectTimeout = config.options.connectTimeout;\r\n      }\r\n\r\n      if (config.options.cryptoCredentialsDetails !== undefined) {\r\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\r\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\r\n        }\r\n\r\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\r\n      }\r\n\r\n      if (config.options.database !== undefined) {\r\n        if (typeof config.options.database !== 'string') {\r\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.database = config.options.database;\r\n      }\r\n\r\n      if (config.options.datefirst !== undefined) {\r\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\r\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\r\n        }\r\n\r\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\r\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\r\n        }\r\n\r\n        this.config.options.datefirst = config.options.datefirst;\r\n      }\r\n\r\n      if (config.options.dateFormat !== undefined) {\r\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\r\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\r\n        }\r\n\r\n        this.config.options.dateFormat = config.options.dateFormat;\r\n      }\r\n\r\n      if (config.options.debug) {\r\n        if (config.options.debug.data !== undefined) {\r\n          if (typeof config.options.debug.data !== 'boolean') {\r\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\r\n          }\r\n\r\n          this.config.options.debug.data = config.options.debug.data;\r\n        }\r\n\r\n        if (config.options.debug.packet !== undefined) {\r\n          if (typeof config.options.debug.packet !== 'boolean') {\r\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\r\n          }\r\n\r\n          this.config.options.debug.packet = config.options.debug.packet;\r\n        }\r\n\r\n        if (config.options.debug.payload !== undefined) {\r\n          if (typeof config.options.debug.payload !== 'boolean') {\r\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\r\n          }\r\n\r\n          this.config.options.debug.payload = config.options.debug.payload;\r\n        }\r\n\r\n        if (config.options.debug.token !== undefined) {\r\n          if (typeof config.options.debug.token !== 'boolean') {\r\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\r\n          }\r\n\r\n          this.config.options.debug.token = config.options.debug.token;\r\n        }\r\n      }\r\n\r\n      if (config.options.enableAnsiNull !== undefined) {\r\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\r\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\r\n      }\r\n\r\n      if (config.options.enableAnsiNullDefault !== undefined) {\r\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\r\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\r\n      }\r\n\r\n      if (config.options.enableAnsiPadding !== undefined) {\r\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\r\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\r\n      }\r\n\r\n      if (config.options.enableAnsiWarnings !== undefined) {\r\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\r\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\r\n      }\r\n\r\n      if (config.options.enableArithAbort !== undefined) {\r\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\r\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\r\n      }\r\n\r\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\r\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\r\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\r\n      }\r\n\r\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\r\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\r\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\r\n      }\r\n\r\n      if (config.options.enableImplicitTransactions !== undefined) {\r\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\r\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\r\n      }\r\n\r\n      if (config.options.enableNumericRoundabort !== undefined) {\r\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\r\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\r\n      }\r\n\r\n      if (config.options.enableQuotedIdentifier !== undefined) {\r\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\r\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\r\n        }\r\n\r\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\r\n      }\r\n\r\n      if (config.options.encrypt !== undefined) {\r\n        if (typeof config.options.encrypt !== 'boolean') {\r\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.encrypt = config.options.encrypt;\r\n      }\r\n\r\n      if (config.options.fallbackToDefaultDb !== undefined) {\r\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\r\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\r\n      }\r\n\r\n      if (config.options.instanceName !== undefined) {\r\n        if (typeof config.options.instanceName !== 'string') {\r\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.instanceName = config.options.instanceName;\r\n        this.config.options.port = undefined;\r\n      }\r\n\r\n      if (config.options.isolationLevel !== undefined) {\r\n        (0, _transaction.assertValidIsolationLevel)(config.options.isolationLevel, 'config.options.isolationLevel');\r\n        this.config.options.isolationLevel = config.options.isolationLevel;\r\n      }\r\n\r\n      if (config.options.language !== undefined) {\r\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\r\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\r\n        }\r\n\r\n        this.config.options.language = config.options.language;\r\n      }\r\n\r\n      if (config.options.localAddress !== undefined) {\r\n        if (typeof config.options.localAddress !== 'string') {\r\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.localAddress = config.options.localAddress;\r\n      }\r\n\r\n      if (config.options.multiSubnetFailover !== undefined) {\r\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\r\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\r\n      }\r\n\r\n      if (config.options.packetSize !== undefined) {\r\n        if (typeof config.options.packetSize !== 'number') {\r\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\r\n        }\r\n\r\n        this.config.options.packetSize = config.options.packetSize;\r\n      }\r\n\r\n      if (config.options.port !== undefined) {\r\n        if (typeof config.options.port !== 'number') {\r\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\r\n        }\r\n\r\n        if (config.options.port <= 0 || config.options.port >= 65536) {\r\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\r\n        }\r\n\r\n        this.config.options.port = config.options.port;\r\n        this.config.options.instanceName = undefined;\r\n      }\r\n\r\n      if (config.options.readOnlyIntent !== undefined) {\r\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\r\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\r\n      }\r\n\r\n      if (config.options.requestTimeout !== undefined) {\r\n        if (typeof config.options.requestTimeout !== 'number') {\r\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\r\n        }\r\n\r\n        this.config.options.requestTimeout = config.options.requestTimeout;\r\n      }\r\n\r\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\r\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\r\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\r\n        }\r\n\r\n        if (config.options.maxRetriesOnTransientErrors < 0) {\r\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\r\n        }\r\n\r\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\r\n      }\r\n\r\n      if (config.options.connectionRetryInterval !== undefined) {\r\n        if (typeof config.options.connectionRetryInterval !== 'number') {\r\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\r\n        }\r\n\r\n        if (config.options.connectionRetryInterval <= 0) {\r\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\r\n        }\r\n\r\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\r\n      }\r\n\r\n      if (config.options.rowCollectionOnDone !== undefined) {\r\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\r\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\r\n      }\r\n\r\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\r\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\r\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\r\n      }\r\n\r\n      if (config.options.tdsVersion !== undefined) {\r\n        if (typeof config.options.tdsVersion !== 'string') {\r\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.tdsVersion = config.options.tdsVersion;\r\n      }\r\n\r\n      if (config.options.textsize !== undefined) {\r\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\r\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\r\n        }\r\n\r\n        if (config.options.textsize > 2147483647) {\r\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\r\n        } else if (config.options.textsize < -1) {\r\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\r\n        }\r\n\r\n        this.config.options.textsize = config.options.textsize | 0;\r\n      }\r\n\r\n      if (config.options.trustServerCertificate !== undefined) {\r\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\r\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\r\n      }\r\n\r\n      if (config.options.useColumnNames !== undefined) {\r\n        if (typeof config.options.useColumnNames !== 'boolean') {\r\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.useColumnNames = config.options.useColumnNames;\r\n      }\r\n\r\n      if (config.options.useUTC !== undefined) {\r\n        if (typeof config.options.useUTC !== 'boolean') {\r\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.useUTC = config.options.useUTC;\r\n      }\r\n\r\n      if (config.options.validateBulkLoadParameters !== undefined) {\r\n        if (typeof config.options.validateBulkLoadParameters !== 'boolean') {\r\n          throw new TypeError('The \"config.options.validateBulkLoadParameters\" property must be of type boolean.');\r\n        }\r\n\r\n        if (config.options.validateBulkLoadParameters === false) {\r\n          deprecate('Setting the \"config.options.validateBulkLoadParameters\" to `false` is deprecated and will no longer work in the next major version of `tedious`. Set the value to `true` and update your use of BulkLoad functionality to silence this message.');\r\n        }\r\n\r\n        this.config.options.validateBulkLoadParameters = config.options.validateBulkLoadParameters;\r\n      }\r\n\r\n      if (config.options.workstationId !== undefined) {\r\n        if (typeof config.options.workstationId !== 'string') {\r\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\r\n        }\r\n\r\n        this.config.options.workstationId = config.options.workstationId;\r\n      }\r\n\r\n      if (config.options.lowerCaseGuids !== undefined) {\r\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\r\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\r\n        }\r\n\r\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\r\n      }\r\n    }\r\n\r\n    let credentialsDetails = this.config.options.cryptoCredentialsDetails;\r\n\r\n    if (credentialsDetails.secureOptions === undefined) {\r\n      // If the caller has not specified their own `secureOptions`,\r\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\r\n      // Older SQL Server instances running on older Windows versions have\r\n      // trouble with the BEAST workaround in OpenSSL.\r\n      // As BEAST is a browser specific exploit, we can just disable this option here.\r\n      credentialsDetails = Object.create(credentialsDetails, {\r\n        secureOptions: {\r\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\r\n        }\r\n      });\r\n    }\r\n\r\n    this.secureContext = (0, _tls.createSecureContext)(credentialsDetails);\r\n    this.debug = this.createDebug();\r\n    this.inTransaction = false;\r\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\r\n    // events are utilized to maintain inTransaction property state which in\r\n    // turn is used in managing transactions. These events are only fired for\r\n    // TDS version 7.2 and beyond. The properties below are used to emulate\r\n    // equivalent behavior for TDS versions before 7.2.\r\n\r\n    this.transactionDepth = 0;\r\n    this.isSqlBatch = false;\r\n    this.closed = false;\r\n    this.loggedIn = false;\r\n    this.messageBuffer = Buffer.alloc(0);\r\n    this.curTransientRetryCount = 0;\r\n    this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\r\n    this.state = this.STATE.INITIALIZED;\r\n\r\n    this._cancelAfterRequestSent = () => {\r\n      this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\r\n      this.transitionTo(this.STATE.SENT_ATTENTION);\r\n      this.createCancelTimer();\r\n    };\r\n  }\r\n\r\n  connect(connectListener) {\r\n    if (this.state !== this.STATE.INITIALIZED) {\r\n      throw new _errors.ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\r\n    }\r\n\r\n    if (connectListener) {\r\n      const onConnect = err => {\r\n        this.removeListener('error', onError);\r\n        connectListener(err);\r\n      };\r\n\r\n      const onError = err => {\r\n        this.removeListener('connect', onConnect);\r\n        connectListener(err);\r\n      };\r\n\r\n      this.once('connect', onConnect);\r\n      this.once('error', onError);\r\n    }\r\n\r\n    this.transitionTo(this.STATE.CONNECTING);\r\n  }\r\n  /**\r\n   * The server has reported that the charset has changed.\r\n   */\r\n\r\n\r\n  on(event, listener) {\r\n    return super.on(event, listener);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  emit(event, ...args) {\r\n    return super.emit(event, ...args);\r\n  }\r\n  /**\r\n   * Closes the connection to the database.\r\n   *\r\n   * The [[Event_end]] will be emitted once the connection has been closed.\r\n   */\r\n\r\n\r\n  close() {\r\n    this.transitionTo(this.STATE.FINAL);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  initialiseConnection() {\r\n    const signal = this.createConnectTimer();\r\n\r\n    if (this.config.options.port) {\r\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal);\r\n    } else {\r\n      return new _instanceLookup.InstanceLookup().instanceLookup({\r\n        server: this.config.server,\r\n        instanceName: this.config.options.instanceName,\r\n        timeout: this.config.options.connectTimeout,\r\n        signal: signal\r\n      }, (err, port) => {\r\n        if (err) {\r\n          if (err.name === 'AbortError') {\r\n            return;\r\n          }\r\n\r\n          this.emit('connect', (0, _errors.ConnectionError)(err.message, 'EINSTLOOKUP'));\r\n        } else {\r\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  cleanupConnection(cleanupType) {\r\n    if (!this.closed) {\r\n      this.clearConnectTimer();\r\n      this.clearRequestTimer();\r\n      this.clearRetryTimer();\r\n      this.closeConnection();\r\n\r\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\r\n        this.emit('rerouting');\r\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\r\n        process.nextTick(() => {\r\n          this.emit('end');\r\n        });\r\n      }\r\n\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        const err = (0, _errors.RequestError)('Connection closed before request completed.', 'ECLOSE');\r\n        request.callback(err);\r\n        this.request = undefined;\r\n      }\r\n\r\n      this.closed = true;\r\n      this.loggedIn = false;\r\n      this.loginError = undefined;\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createDebug() {\r\n    const debug = new _debug.default(this.config.options.debug);\r\n    debug.on('debug', message => {\r\n      this.emit('debug', message);\r\n    });\r\n    return debug;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createTokenStreamParser(message) {\r\n    const tokenStreamParser = new _tokenStreamParser.Parser(message, this.debug, this.config.options);\r\n    tokenStreamParser.on('infoMessage', token => {\r\n      this.emit('infoMessage', token);\r\n    });\r\n    tokenStreamParser.on('sspichallenge', token => {\r\n      if (token.ntlmpacket) {\r\n        this.ntlmpacket = token.ntlmpacket;\r\n        this.ntlmpacketBuffer = token.ntlmpacketBuffer;\r\n      }\r\n\r\n      this.emit('sspichallenge', token);\r\n    });\r\n    tokenStreamParser.on('errorMessage', token => {\r\n      this.emit('errorMessage', token);\r\n\r\n      if (this.loggedIn) {\r\n        const request = this.request;\r\n\r\n        if (request) {\r\n          if (!request.canceled) {\r\n            const error = new _errors.RequestError(token.message, 'EREQUEST');\r\n            error.number = token.number;\r\n            error.state = token.state;\r\n            error.class = token.class;\r\n            error.serverName = token.serverName;\r\n            error.procName = token.procName;\r\n            error.lineNumber = token.lineNumber;\r\n            request.error = error;\r\n          }\r\n        }\r\n      } else {\r\n        const error = (0, _errors.ConnectionError)(token.message, 'ELOGIN');\r\n        const isLoginErrorTransient = this.transientErrorLookup.isTransientError(token.number);\r\n\r\n        if (isLoginErrorTransient && this.curTransientRetryCount !== this.config.options.maxRetriesOnTransientErrors) {\r\n          error.isTransient = true;\r\n        }\r\n\r\n        this.loginError = error;\r\n      }\r\n    });\r\n    tokenStreamParser.on('databaseChange', token => {\r\n      this.emit('databaseChange', token.newValue);\r\n    });\r\n    tokenStreamParser.on('languageChange', token => {\r\n      this.emit('languageChange', token.newValue);\r\n    });\r\n    tokenStreamParser.on('charsetChange', token => {\r\n      this.emit('charsetChange', token.newValue);\r\n    });\r\n    tokenStreamParser.on('fedAuthInfo', token => {\r\n      this.dispatchEvent('fedAuthInfo', token);\r\n    });\r\n    tokenStreamParser.on('featureExtAck', token => {\r\n      this.dispatchEvent('featureExtAck', token);\r\n    });\r\n    tokenStreamParser.on('loginack', token => {\r\n      if (!token.tdsVersion) {\r\n        // unsupported TDS version\r\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unknown TDS version.', 'ETDS');\r\n        this.loggedIn = false;\r\n        return;\r\n      }\r\n\r\n      if (!token.interface) {\r\n        // unsupported interface\r\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\r\n        this.loggedIn = false;\r\n        return;\r\n      } // use negotiated version\r\n\r\n\r\n      this.config.options.tdsVersion = token.tdsVersion;\r\n      this.loggedIn = true;\r\n    });\r\n    tokenStreamParser.on('routingChange', token => {\r\n      // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\r\n      const [server] = token.newValue.server.split('\\\\');\r\n      this.routingData = {\r\n        server,\r\n        port: token.newValue.port\r\n      };\r\n    });\r\n    tokenStreamParser.on('packetSizeChange', token => {\r\n      this.messageIo.packetSize(token.newValue);\r\n    }); // A new top-level transaction was started. This is not fired\r\n    // for nested transactions.\r\n\r\n    tokenStreamParser.on('beginTransaction', token => {\r\n      this.transactionDescriptors.push(token.newValue);\r\n      this.inTransaction = true;\r\n    }); // A top-level transaction was committed. This is not fired\r\n    // for nested transactions.\r\n\r\n    tokenStreamParser.on('commitTransaction', () => {\r\n      this.transactionDescriptors.length = 1;\r\n      this.inTransaction = false;\r\n    }); // A top-level transaction was rolled back. This is not fired\r\n    // for nested transactions. This is also fired if a batch\r\n    // aborting error happened that caused a rollback.\r\n\r\n    tokenStreamParser.on('rollbackTransaction', () => {\r\n      this.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\r\n\r\n      this.inTransaction = false;\r\n      this.emit('rollbackTransaction');\r\n    });\r\n    tokenStreamParser.on('columnMetadata', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          if (this.config.options.useColumnNames) {\r\n            const columns = {};\r\n\r\n            for (let j = 0, len = token.columns.length; j < len; j++) {\r\n              const col = token.columns[j];\r\n\r\n              if (columns[col.colName] == null) {\r\n                columns[col.colName] = col;\r\n              }\r\n            }\r\n\r\n            request.emit('columnMetadata', columns);\r\n          } else {\r\n            request.emit('columnMetadata', token.columns);\r\n          }\r\n        }\r\n      } else {\r\n        this.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\r\n        this.close();\r\n      }\r\n    });\r\n    tokenStreamParser.on('order', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          request.emit('order', token.orderColumns);\r\n        }\r\n      } else {\r\n        this.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\r\n        this.close();\r\n      }\r\n    });\r\n    tokenStreamParser.on('row', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          if (this.config.options.rowCollectionOnRequestCompletion) {\r\n            request.rows.push(token.columns);\r\n          }\r\n\r\n          if (this.config.options.rowCollectionOnDone) {\r\n            request.rst.push(token.columns);\r\n          }\r\n\r\n          if (!request.canceled) {\r\n            request.emit('row', token.columns);\r\n          }\r\n        }\r\n      } else {\r\n        this.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\r\n        this.close();\r\n      }\r\n    });\r\n    tokenStreamParser.on('returnStatus', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          // Keep value for passing in 'doneProc' event.\r\n          this.procReturnStatusValue = token.value;\r\n        }\r\n      }\r\n    });\r\n    tokenStreamParser.on('returnValue', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          request.emit('returnValue', token.paramName, token.value, token.metadata);\r\n        }\r\n      }\r\n    });\r\n    tokenStreamParser.on('doneProc', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          request.emit('doneProc', token.rowCount, token.more, this.procReturnStatusValue, request.rst);\r\n          this.procReturnStatusValue = undefined;\r\n\r\n          if (token.rowCount !== undefined) {\r\n            request.rowCount += token.rowCount;\r\n          }\r\n\r\n          if (this.config.options.rowCollectionOnDone) {\r\n            request.rst = [];\r\n          }\r\n        }\r\n      }\r\n    });\r\n    tokenStreamParser.on('doneInProc', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (!request.canceled) {\r\n          request.emit('doneInProc', token.rowCount, token.more, request.rst);\r\n\r\n          if (token.rowCount !== undefined) {\r\n            request.rowCount += token.rowCount;\r\n          }\r\n\r\n          if (this.config.options.rowCollectionOnDone) {\r\n            request.rst = [];\r\n          }\r\n        }\r\n      }\r\n    });\r\n    tokenStreamParser.on('done', token => {\r\n      const request = this.request;\r\n\r\n      if (request) {\r\n        if (token.attention) {\r\n          this.dispatchEvent('attention');\r\n        }\r\n\r\n        if (!request.canceled) {\r\n          if (token.sqlError && !request.error) {\r\n            // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\r\n            request.error = (0, _errors.RequestError)('An unknown error has occurred.', 'UNKNOWN');\r\n          }\r\n\r\n          request.emit('done', token.rowCount, token.more, request.rst);\r\n\r\n          if (token.rowCount !== undefined) {\r\n            request.rowCount += token.rowCount;\r\n          }\r\n\r\n          if (this.config.options.rowCollectionOnDone) {\r\n            request.rst = [];\r\n          }\r\n        }\r\n      }\r\n    });\r\n    tokenStreamParser.on('resetConnection', () => {\r\n      this.emit('resetConnection');\r\n    });\r\n    return tokenStreamParser;\r\n  }\r\n\r\n  connectOnPort(port, multiSubnetFailover, signal) {\r\n    const connectOpts = {\r\n      host: this.routingData ? this.routingData.server : this.config.server,\r\n      port: this.routingData ? this.routingData.port : port,\r\n      localAddress: this.config.options.localAddress\r\n    };\r\n    new _connector.Connector(connectOpts, signal, multiSubnetFailover).execute((err, socket) => {\r\n      if (err) {\r\n        if (err.name === 'AbortError') {\r\n          return;\r\n        }\r\n\r\n        return this.socketError(err);\r\n      }\r\n\r\n      socket = socket;\r\n      socket.on('error', error => {\r\n        this.socketError(error);\r\n      });\r\n      socket.on('close', () => {\r\n        this.socketClose();\r\n      });\r\n      socket.on('end', () => {\r\n        this.socketEnd();\r\n      });\r\n      socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\r\n      this.messageIo = new _messageIo.default(socket, this.config.options.packetSize, this.debug);\r\n      this.messageIo.on('data', message => {\r\n        this.dispatchEvent('message', message);\r\n      });\r\n      this.messageIo.on('secure', cleartext => {\r\n        this.emit('secure', cleartext);\r\n      });\r\n      this.messageIo.on('error', error => {\r\n        this.socketError(error);\r\n      });\r\n      this.socket = socket;\r\n      this.socketConnect();\r\n    });\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  closeConnection() {\r\n    if (this.socket) {\r\n      this.socket.destroy();\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createConnectTimer() {\r\n    const controller = new _nodeAbortController.default();\r\n    this.connectTimer = setTimeout(() => {\r\n      controller.abort();\r\n      this.connectTimeout();\r\n    }, this.config.options.connectTimeout);\r\n    return controller.signal;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createCancelTimer() {\r\n    this.clearCancelTimer();\r\n    const timeout = this.config.options.cancelTimeout;\r\n\r\n    if (timeout > 0) {\r\n      this.cancelTimer = setTimeout(() => {\r\n        this.cancelTimeout();\r\n      }, timeout);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createRequestTimer() {\r\n    this.clearRequestTimer(); // release old timer, just to be safe\r\n\r\n    const request = this.request;\r\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\r\n\r\n    if (timeout) {\r\n      this.requestTimer = setTimeout(() => {\r\n        this.requestTimeout();\r\n      }, timeout);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  createRetryTimer() {\r\n    this.clearRetryTimer();\r\n    this.retryTimer = setTimeout(() => {\r\n      this.retryTimeout();\r\n    }, this.config.options.connectionRetryInterval);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  connectTimeout() {\r\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\r\n    this.debug.log(message);\r\n    this.emit('connect', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\r\n    this.connectTimer = undefined;\r\n    this.dispatchEvent('connectTimeout');\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  cancelTimeout() {\r\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\r\n    this.debug.log(message);\r\n    this.dispatchEvent('socketError', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  requestTimeout() {\r\n    this.requestTimer = undefined;\r\n    const request = this.request;\r\n    request.cancel();\r\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\r\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\r\n    request.error = (0, _errors.RequestError)(message, 'ETIMEOUT');\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  retryTimeout() {\r\n    this.retryTimer = undefined;\r\n    this.emit('retry');\r\n    this.transitionTo(this.STATE.CONNECTING);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  clearConnectTimer() {\r\n    if (this.connectTimer) {\r\n      clearTimeout(this.connectTimer);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  clearCancelTimer() {\r\n    if (this.cancelTimer) {\r\n      clearTimeout(this.cancelTimer);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  clearRequestTimer() {\r\n    if (this.requestTimer) {\r\n      clearTimeout(this.requestTimer);\r\n      this.requestTimer = undefined;\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  clearRetryTimer() {\r\n    if (this.retryTimer) {\r\n      clearTimeout(this.retryTimer);\r\n      this.retryTimer = undefined;\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  transitionTo(newState) {\r\n    if (this.state === newState) {\r\n      this.debug.log('State is already ' + newState.name);\r\n      return;\r\n    }\r\n\r\n    if (this.state && this.state.exit) {\r\n      this.state.exit.call(this, newState);\r\n    }\r\n\r\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\r\n    this.state = newState;\r\n\r\n    if (this.state.enter) {\r\n      this.state.enter.apply(this);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getEventHandler(eventName) {\r\n    const handler = this.state.events[eventName];\r\n\r\n    if (!handler) {\r\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\r\n    }\r\n\r\n    return handler;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  dispatchEvent(eventName, ...args) {\r\n    const handler = this.state.events[eventName];\r\n\r\n    if (handler) {\r\n      handler.apply(this, args);\r\n    } else {\r\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\r\n      this.close();\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  socketError(error) {\r\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\r\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\r\n      this.debug.log(message);\r\n      this.emit('connect', (0, _errors.ConnectionError)(message, 'ESOCKET'));\r\n    } else {\r\n      const message = `Connection lost - ${error.message}`;\r\n      this.debug.log(message);\r\n      this.emit('error', (0, _errors.ConnectionError)(message, 'ESOCKET'));\r\n    }\r\n\r\n    this.dispatchEvent('socketError', error);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  socketConnect() {\r\n    this.closed = false;\r\n    this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\r\n    this.dispatchEvent('socketConnect');\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  socketEnd() {\r\n    this.debug.log('socket ended');\r\n\r\n    if (this.state !== this.STATE.FINAL) {\r\n      const error = new Error('socket hang up');\r\n      error.code = 'ECONNRESET';\r\n      this.socketError(error);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  socketClose() {\r\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\r\n\r\n    if (this.state === this.STATE.REROUTING) {\r\n      this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\r\n      this.dispatchEvent('reconnect');\r\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\r\n      const server = this.routingData ? this.routingData.server : this.config.server;\r\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\r\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\r\n      this.dispatchEvent('retry');\r\n    } else {\r\n      this.transitionTo(this.STATE.FINAL);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  sendPreLogin() {\r\n    var _$exec;\r\n\r\n    const [, major, minor, build] = (_$exec = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(_package.version)) !== null && _$exec !== void 0 ? _$exec : ['0.0.0', '0', '0', '0'];\r\n    const payload = new _preloginPayload.default({\r\n      encrypt: this.config.options.encrypt,\r\n      version: {\r\n        major: Number(major),\r\n        minor: Number(minor),\r\n        build: Number(build),\r\n        subbuild: 0\r\n      }\r\n    });\r\n    this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\r\n    this.debug.payload(function () {\r\n      return payload.toString('  ');\r\n    });\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  emptyMessageBuffer() {\r\n    this.messageBuffer = Buffer.alloc(0);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  addToMessageBuffer(data) {\r\n    this.messageBuffer = Buffer.concat([this.messageBuffer, data]);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  sendLogin7Packet() {\r\n    const payload = new _login7Payload.default({\r\n      tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\r\n      packetSize: this.config.options.packetSize,\r\n      clientProgVer: 0,\r\n      clientPid: process.pid,\r\n      connectionId: 0,\r\n      clientTimeZone: new Date().getTimezoneOffset(),\r\n      clientLcid: 0x00000409\r\n    });\r\n    const {\r\n      authentication\r\n    } = this.config;\r\n\r\n    switch (authentication.type) {\r\n      case 'azure-active-directory-password':\r\n        payload.fedAuth = {\r\n          type: 'ADAL',\r\n          echo: this.fedAuthRequired,\r\n          workflow: 'default'\r\n        };\r\n        break;\r\n\r\n      case 'azure-active-directory-access-token':\r\n        payload.fedAuth = {\r\n          type: 'SECURITYTOKEN',\r\n          echo: this.fedAuthRequired,\r\n          fedAuthToken: authentication.options.token\r\n        };\r\n        break;\r\n\r\n      case 'azure-active-directory-msi-vm':\r\n      case 'azure-active-directory-msi-app-service':\r\n      case 'azure-active-directory-service-principal-secret':\r\n        payload.fedAuth = {\r\n          type: 'ADAL',\r\n          echo: this.fedAuthRequired,\r\n          workflow: 'integrated'\r\n        };\r\n        break;\r\n\r\n      case 'ntlm':\r\n        payload.sspi = (0, _ntlm.createNTLMRequest)({\r\n          domain: authentication.options.domain\r\n        });\r\n        break;\r\n\r\n      default:\r\n        payload.userName = authentication.options.userName;\r\n        payload.password = authentication.options.password;\r\n    }\r\n\r\n    payload.hostname = this.config.options.workstationId || _os.default.hostname();\r\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\r\n    payload.appName = this.config.options.appName || 'Tedious';\r\n    payload.libraryName = _library.name;\r\n    payload.language = this.config.options.language;\r\n    payload.database = this.config.options.database;\r\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\r\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\r\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\r\n    this.routingData = undefined;\r\n    this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\r\n    this.debug.payload(function () {\r\n      return payload.toString('  ');\r\n    });\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  sendFedAuthTokenMessage(token) {\r\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\r\n    const data = Buffer.alloc(8 + accessTokenLen);\r\n    let offset = 0;\r\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\r\n    offset = data.writeUInt32LE(accessTokenLen, offset);\r\n    data.write(token, offset, 'ucs2');\r\n    this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\r\n\r\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  sendInitialSql() {\r\n    const payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\r\n    const message = new _message.default({\r\n      type: _packet.TYPE.SQL_BATCH\r\n    });\r\n    this.messageIo.outgoingMessageStream.write(message);\r\n\r\n    _stream.Readable.from(payload).pipe(message);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getInitialSql() {\r\n    const options = [];\r\n\r\n    if (this.config.options.enableAnsiNull === true) {\r\n      options.push('set ansi_nulls on');\r\n    } else if (this.config.options.enableAnsiNull === false) {\r\n      options.push('set ansi_nulls off');\r\n    }\r\n\r\n    if (this.config.options.enableAnsiNullDefault === true) {\r\n      options.push('set ansi_null_dflt_on on');\r\n    } else if (this.config.options.enableAnsiNullDefault === false) {\r\n      options.push('set ansi_null_dflt_on off');\r\n    }\r\n\r\n    if (this.config.options.enableAnsiPadding === true) {\r\n      options.push('set ansi_padding on');\r\n    } else if (this.config.options.enableAnsiPadding === false) {\r\n      options.push('set ansi_padding off');\r\n    }\r\n\r\n    if (this.config.options.enableAnsiWarnings === true) {\r\n      options.push('set ansi_warnings on');\r\n    } else if (this.config.options.enableAnsiWarnings === false) {\r\n      options.push('set ansi_warnings off');\r\n    }\r\n\r\n    if (this.config.options.enableArithAbort === true) {\r\n      options.push('set arithabort on');\r\n    } else if (this.config.options.enableArithAbort === false) {\r\n      options.push('set arithabort off');\r\n    }\r\n\r\n    if (this.config.options.enableConcatNullYieldsNull === true) {\r\n      options.push('set concat_null_yields_null on');\r\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\r\n      options.push('set concat_null_yields_null off');\r\n    }\r\n\r\n    if (this.config.options.enableCursorCloseOnCommit === true) {\r\n      options.push('set cursor_close_on_commit on');\r\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\r\n      options.push('set cursor_close_on_commit off');\r\n    }\r\n\r\n    if (this.config.options.datefirst !== null) {\r\n      options.push(`set datefirst ${this.config.options.datefirst}`);\r\n    }\r\n\r\n    if (this.config.options.dateFormat !== null) {\r\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\r\n    }\r\n\r\n    if (this.config.options.enableImplicitTransactions === true) {\r\n      options.push('set implicit_transactions on');\r\n    } else if (this.config.options.enableImplicitTransactions === false) {\r\n      options.push('set implicit_transactions off');\r\n    }\r\n\r\n    if (this.config.options.language !== null) {\r\n      options.push(`set language ${this.config.options.language}`);\r\n    }\r\n\r\n    if (this.config.options.enableNumericRoundabort === true) {\r\n      options.push('set numeric_roundabort on');\r\n    } else if (this.config.options.enableNumericRoundabort === false) {\r\n      options.push('set numeric_roundabort off');\r\n    }\r\n\r\n    if (this.config.options.enableQuotedIdentifier === true) {\r\n      options.push('set quoted_identifier on');\r\n    } else if (this.config.options.enableQuotedIdentifier === false) {\r\n      options.push('set quoted_identifier off');\r\n    }\r\n\r\n    if (this.config.options.textsize !== null) {\r\n      options.push(`set textsize ${this.config.options.textsize}`);\r\n    }\r\n\r\n    if (this.config.options.connectionIsolationLevel !== null) {\r\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\r\n    }\r\n\r\n    if (this.config.options.abortTransactionOnError === true) {\r\n      options.push('set xact_abort on');\r\n    } else if (this.config.options.abortTransactionOnError === false) {\r\n      options.push('set xact_abort off');\r\n    }\r\n\r\n    return options.join('\\n');\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  processedInitialSql() {\r\n    this.clearConnectTimer();\r\n    this.emit('connect');\r\n  }\r\n  /**\r\n   * Execute the SQL batch represented by [[Request]].\r\n   * There is no param support, and unlike [[Request.execSql]],\r\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\r\n   *\r\n   * In almost all cases, [[Request.execSql]] will be a better choice.\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   */\r\n\r\n\r\n  execSqlBatch(request) {\r\n    this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   *  Execute the SQL represented by [[Request]].\r\n   *\r\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\r\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\r\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\r\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\r\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\r\n   *\r\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\r\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\r\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   */\r\n\r\n\r\n  execSql(request) {\r\n    try {\r\n      request.validateParameters();\r\n    } catch (error) {\r\n      request.error = error;\r\n      process.nextTick(() => {\r\n        this.debug.log(error.message);\r\n        request.callback(error);\r\n      });\r\n      return;\r\n    }\r\n\r\n    const parameters = [];\r\n    parameters.push({\r\n      type: _dataType.TYPES.NVarChar,\r\n      name: 'statement',\r\n      value: request.sqlTextOrProcedure,\r\n      output: false,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n\r\n    if (request.parameters.length) {\r\n      parameters.push({\r\n        type: _dataType.TYPES.NVarChar,\r\n        name: 'params',\r\n        value: request.makeParamsParameter(request.parameters),\r\n        output: false,\r\n        length: undefined,\r\n        precision: undefined,\r\n        scale: undefined\r\n      });\r\n      parameters.push(...request.parameters);\r\n    }\r\n\r\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_executesql', parameters, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   * Creates a new BulkLoad instance.\r\n   *\r\n   * @param table The name of the table to bulk-insert into.\r\n   * @param options A set of bulk load options.\r\n   */\r\n\r\n\r\n  newBulkLoad(table, callbackOrOptions, callback) {\r\n    let options;\r\n\r\n    if (callback === undefined) {\r\n      callback = callbackOrOptions;\r\n      options = {};\r\n    } else {\r\n      options = callbackOrOptions;\r\n    }\r\n\r\n    if (typeof options !== 'object') {\r\n      throw new TypeError('\"options\" argument must be an object');\r\n    }\r\n\r\n    return new _bulkLoad.default(table, this.config.options, options, callback);\r\n  }\r\n  /**\r\n   * Execute a [[BulkLoad]].\r\n   *\r\n   * ```js\r\n   * // We want to perform a bulk load into a table with the following format:\r\n   * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\r\n   *\r\n   * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\r\n   *   // ...\r\n   * });\r\n   *\r\n   * // First, we need to specify the columns that we want to write to,\r\n   * // and their definitions. These definitions must match the actual table,\r\n   * // otherwise the bulk load will fail.\r\n   * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\r\n   * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\r\n   * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\r\n   *\r\n   * // Now, we can specify each row to be written.\r\n   * //\r\n   * // Note that these rows are held in memory until the\r\n   * // bulk load was performed, so if you need to write a large\r\n   * // number of rows (e.g. by reading from a CSV file),\r\n   * // using a streaming bulk load is advisable to keep memory usage low.\r\n   * bulkLoad.addRow({ 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') });\r\n   * bulkLoad.addRow({ 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') });\r\n   *\r\n   * connection.execBulkLoad(bulkLoad);\r\n   * ```\r\n   *\r\n   * @param bulkLoad A previously created [[BulkLoad]].\r\n   *\r\n   * @deprecated Adding rows to a [[BulkLoad]] via [[BulkLoad.addRow]] or [[BulkLoad.getRowStream]]\r\n   *   is deprecated and will be removed in the future. You should migrate to calling [[Connection.execBulkLoad]]\r\n   *   with a `Iterable` or `AsyncIterable` as the second argument instead.\r\n   */\r\n\r\n\r\n  execBulkLoad(bulkLoad, rows) {\r\n    bulkLoad.executionStarted = true;\r\n\r\n    if (rows) {\r\n      if (bulkLoad.streamingMode) {\r\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\r\n      }\r\n\r\n      if (bulkLoad.firstRowWritten) {\r\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\r\n      }\r\n\r\n      const rowStream = _stream.Readable.from(rows); // Destroy the packet transform if an error happens in the row stream,\r\n      // e.g. if an error is thrown from within a generator or stream.\r\n\r\n\r\n      rowStream.on('error', err => {\r\n        bulkLoad.rowToPacketTransform.destroy(err);\r\n      }); // Destroy the row stream if an error happens in the packet transform,\r\n      // e.g. if the bulk load is cancelled.\r\n\r\n      bulkLoad.rowToPacketTransform.on('error', err => {\r\n        rowStream.destroy(err);\r\n      });\r\n      rowStream.pipe(bulkLoad.rowToPacketTransform);\r\n    } else if (!bulkLoad.streamingMode) {\r\n      // If the bulkload was not put into streaming mode by the user,\r\n      // we end the rowToPacketTransform here for them.\r\n      //\r\n      // If it was put into streaming mode, it's the user's responsibility\r\n      // to end the stream.\r\n      bulkLoad.rowToPacketTransform.end();\r\n    }\r\n\r\n    const onCancel = () => {\r\n      request.cancel();\r\n    };\r\n\r\n    const payload = new _bulkLoadPayload.BulkLoadPayload(bulkLoad);\r\n    const request = new _request.default(bulkLoad.getBulkInsertSql(), error => {\r\n      bulkLoad.removeListener('cancel', onCancel);\r\n\r\n      if (error) {\r\n        if (error.code === 'UNKNOWN') {\r\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\r\n        }\r\n\r\n        bulkLoad.error = error;\r\n        bulkLoad.callback(error);\r\n        return;\r\n      }\r\n\r\n      this.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD, payload);\r\n    });\r\n    bulkLoad.once('cancel', onCancel);\r\n    this.execSqlBatch(request);\r\n  }\r\n  /**\r\n   * Prepare the SQL represented by the request.\r\n   *\r\n   * The request can then be used in subsequent calls to\r\n   * [[execute]] and [[unprepare]]\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   *   Parameters only require a name and type. Parameter values are ignored.\r\n   */\r\n\r\n\r\n  prepare(request) {\r\n    const parameters = [];\r\n    parameters.push({\r\n      type: _dataType.TYPES.Int,\r\n      name: 'handle',\r\n      value: undefined,\r\n      output: true,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n    parameters.push({\r\n      type: _dataType.TYPES.NVarChar,\r\n      name: 'params',\r\n      value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\r\n      output: false,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n    parameters.push({\r\n      type: _dataType.TYPES.NVarChar,\r\n      name: 'stmt',\r\n      value: request.sqlTextOrProcedure,\r\n      output: false,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n    request.preparing = true; // TODO: We need to clean up this event handler, otherwise this leaks memory\r\n\r\n    request.on('returnValue', (name, value) => {\r\n      if (name === 'handle') {\r\n        request.handle = value;\r\n      } else {\r\n        request.error = (0, _errors.RequestError)(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\r\n      }\r\n    });\r\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_prepare', parameters, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   * Release the SQL Server resources associated with a previously prepared request.\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   *   Parameters only require a name and type.\r\n   *   Parameter values are ignored.\r\n   */\r\n\r\n\r\n  unprepare(request) {\r\n    const parameters = [];\r\n    parameters.push({\r\n      type: _dataType.TYPES.Int,\r\n      name: 'handle',\r\n      // TODO: Abort if `request.handle` is not set\r\n      value: request.handle,\r\n      output: true,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_unprepare', parameters, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   * Execute previously prepared SQL, using the supplied parameters.\r\n   *\r\n   * @param request A previously prepared [[Request]].\r\n   * @param parameters  An object whose names correspond to the names of\r\n   *   parameters that were added to the [[Request]] before it was prepared.\r\n   *   The object's values are passed as the parameters' values when the\r\n   *   request is executed.\r\n   */\r\n\r\n\r\n  execute(request, parameters) {\r\n    const executeParameters = [];\r\n    executeParameters.push({\r\n      type: _dataType.TYPES.Int,\r\n      name: 'handle',\r\n      // TODO: Abort if `request.handle` is not set\r\n      value: request.handle,\r\n      output: true,\r\n      length: undefined,\r\n      precision: undefined,\r\n      scale: undefined\r\n    });\r\n\r\n    try {\r\n      for (let i = 0, len = request.parameters.length; i < len; i++) {\r\n        const parameter = request.parameters[i];\r\n        executeParameters.push({ ...parameter,\r\n          value: parameter.type.validate(parameters ? parameters[parameter.name] : null)\r\n        });\r\n      }\r\n    } catch (error) {\r\n      request.error = error;\r\n      process.nextTick(() => {\r\n        this.debug.log(error.message);\r\n        request.callback(error);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_execute', executeParameters, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   * Call a stored procedure represented by [[Request]].\r\n   *\r\n   * @param request A [[Request]] object representing the request.\r\n   */\r\n\r\n\r\n  callProcedure(request) {\r\n    try {\r\n      request.validateParameters();\r\n    } catch (error) {\r\n      request.error = error;\r\n      process.nextTick(() => {\r\n        this.debug.log(error.message);\r\n        request.callback(error);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request.sqlTextOrProcedure, request.parameters, this.currentTransactionDescriptor(), this.config.options));\r\n  }\r\n  /**\r\n   * Start a transaction.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\r\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\r\n   *   is present.\r\n   * @param isolationLevel The isolation level that the transaction is to be run with.\r\n   *\r\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\r\n   *   * `READ_UNCOMMITTED`\r\n   *   * `READ_COMMITTED`\r\n   *   * `REPEATABLE_READ`\r\n   *   * `SERIALIZABLE`\r\n   *   * `SNAPSHOT`\r\n   *\r\n   *   Optional, and defaults to the Connection's isolation level.\r\n   */\r\n\r\n\r\n  beginTransaction(callback, name = '', isolationLevel = this.config.options.isolationLevel) {\r\n    (0, _transaction.assertValidIsolationLevel)(isolationLevel, 'isolationLevel');\r\n    const transaction = new _transaction.Transaction(name, isolationLevel);\r\n\r\n    if (this.config.options.tdsVersion < '7_2') {\r\n      return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, err => {\r\n        this.transactionDepth++;\r\n\r\n        if (this.transactionDepth === 1) {\r\n          this.inTransaction = true;\r\n        }\r\n\r\n        callback(err);\r\n      }));\r\n    }\r\n\r\n    const request = new _request.default(undefined, err => {\r\n      return callback(err, this.currentTransactionDescriptor());\r\n    });\r\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\r\n  }\r\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * There should be an active transaction - that is, [[beginTransaction]]\r\n   * should have been previously called.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\r\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\r\n   */\r\n\r\n\r\n  commitTransaction(callback, name = '') {\r\n    const transaction = new _transaction.Transaction(name);\r\n\r\n    if (this.config.options.tdsVersion < '7_2') {\r\n      return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, err => {\r\n        this.transactionDepth--;\r\n\r\n        if (this.transactionDepth === 0) {\r\n          this.inTransaction = false;\r\n        }\r\n\r\n        callback(err);\r\n      }));\r\n    }\r\n\r\n    const request = new _request.default(undefined, callback);\r\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\r\n  }\r\n  /**\r\n   * Rollback a transaction.\r\n   *\r\n   * There should be an active transaction - that is, [[beginTransaction]]\r\n   * should have been previously called.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\r\n   *   Optional, and defaults to an empty string.\r\n   *   Required when `isolationLevel` is present.\r\n   */\r\n\r\n\r\n  rollbackTransaction(callback, name = '') {\r\n    const transaction = new _transaction.Transaction(name);\r\n\r\n    if (this.config.options.tdsVersion < '7_2') {\r\n      return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, err => {\r\n        this.transactionDepth--;\r\n\r\n        if (this.transactionDepth === 0) {\r\n          this.inTransaction = false;\r\n        }\r\n\r\n        callback(err);\r\n      }));\r\n    }\r\n\r\n    const request = new _request.default(undefined, callback);\r\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\r\n  }\r\n  /**\r\n   * Set a savepoint within a transaction.\r\n   *\r\n   * There should be an active transaction - that is, [[beginTransaction]]\r\n   * should have been previously called.\r\n   *\r\n   * @param callback\r\n   * @param name A string representing a name to associate with the transaction.\\\r\n   *   Optional, and defaults to an empty string.\r\n   *   Required when `isolationLevel` is present.\r\n   */\r\n\r\n\r\n  saveTransaction(callback, name) {\r\n    const transaction = new _transaction.Transaction(name);\r\n\r\n    if (this.config.options.tdsVersion < '7_2') {\r\n      return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, err => {\r\n        this.transactionDepth++;\r\n        callback(err);\r\n      }));\r\n    }\r\n\r\n    const request = new _request.default(undefined, callback);\r\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\r\n  }\r\n  /**\r\n   * Run the given callback after starting a transaction, and commit or\r\n   * rollback the transaction afterwards.\r\n   *\r\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\r\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\r\n   * use of database transactions and automatically handle transaction nesting.\r\n   *\r\n   * @param cb\r\n   * @param isolationLevel\r\n   *   The isolation level that the transaction is to be run with.\r\n   *\r\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\r\n   *   * `READ_UNCOMMITTED`\r\n   *   * `READ_COMMITTED`\r\n   *   * `REPEATABLE_READ`\r\n   *   * `SERIALIZABLE`\r\n   *   * `SNAPSHOT`\r\n   *\r\n   *   Optional, and defaults to the Connection's isolation level.\r\n   */\r\n\r\n\r\n  transaction(cb, isolationLevel) {\r\n    if (typeof cb !== 'function') {\r\n      throw new TypeError('`cb` must be a function');\r\n    }\r\n\r\n    const useSavepoint = this.inTransaction;\r\n\r\n    const name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\r\n\r\n    const txDone = (err, done, ...args) => {\r\n      if (err) {\r\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\r\n          this.rollbackTransaction(txErr => {\r\n            done(txErr || err, ...args);\r\n          }, name);\r\n        } else {\r\n          done(err, ...args);\r\n        }\r\n      } else if (useSavepoint) {\r\n        if (this.config.options.tdsVersion < '7_2') {\r\n          this.transactionDepth--;\r\n        }\r\n\r\n        done(null, ...args);\r\n      } else {\r\n        this.commitTransaction(txErr => {\r\n          done(txErr, ...args);\r\n        }, name);\r\n      }\r\n    };\r\n\r\n    if (useSavepoint) {\r\n      return this.saveTransaction(err => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n\r\n        if (isolationLevel) {\r\n          return this.execSqlBatch(new _request.default('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), err => {\r\n            return cb(err, txDone);\r\n          }));\r\n        } else {\r\n          return cb(null, txDone);\r\n        }\r\n      }, name);\r\n    } else {\r\n      return this.beginTransaction(err => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n\r\n        return cb(null, txDone);\r\n      }, name, isolationLevel);\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  makeRequest(request, packetType, payload) {\r\n    if (this.state !== this.STATE.LOGGED_IN) {\r\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\r\n      this.debug.log(message);\r\n      request.callback((0, _errors.RequestError)(message, 'EINVALIDSTATE'));\r\n    } else if (request.canceled) {\r\n      process.nextTick(() => {\r\n        request.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\r\n      });\r\n    } else {\r\n      if (packetType === _packet.TYPE.SQL_BATCH) {\r\n        this.isSqlBatch = true;\r\n      } else {\r\n        this.isSqlBatch = false;\r\n      }\r\n\r\n      this.request = request;\r\n      request.connection = this;\r\n      request.rowCount = 0;\r\n      request.rows = [];\r\n      request.rst = [];\r\n\r\n      const onCancel = () => {\r\n        payloadStream.unpipe(message); // set the ignore bit and end the message.\r\n\r\n        message.ignore = true;\r\n        message.end();\r\n\r\n        if (request instanceof _request.default && request.paused) {\r\n          // resume the request if it was paused so we can read the remaining tokens\r\n          request.resume();\r\n        }\r\n      };\r\n\r\n      request.once('cancel', onCancel);\r\n      this.createRequestTimer();\r\n      const message = new _message.default({\r\n        type: packetType,\r\n        resetConnection: this.resetConnectionOnNextRequest\r\n      });\r\n      this.messageIo.outgoingMessageStream.write(message);\r\n      this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\r\n      message.once('finish', () => {\r\n        request.removeListener('cancel', onCancel);\r\n        request.once('cancel', this._cancelAfterRequestSent);\r\n        this.resetConnectionOnNextRequest = false;\r\n        this.debug.payload(function () {\r\n          return payload.toString('  ');\r\n        });\r\n      });\r\n\r\n      const payloadStream = _stream.Readable.from(payload);\r\n\r\n      payloadStream.once('error', error => {\r\n        var _request$error;\r\n\r\n        payloadStream.unpipe(message); // Only set a request error if no error was set yet.\r\n\r\n        (_request$error = request.error) !== null && _request$error !== void 0 ? _request$error : request.error = error;\r\n        payloadStream.unpipe(message);\r\n        message.ignore = true;\r\n        message.end();\r\n      });\r\n      payloadStream.pipe(message);\r\n    }\r\n  }\r\n  /**\r\n   * Cancel currently executed request.\r\n   */\r\n\r\n\r\n  cancel() {\r\n    if (!this.request) {\r\n      return false;\r\n    }\r\n\r\n    if (this.request.canceled) {\r\n      return false;\r\n    }\r\n\r\n    this.request.cancel();\r\n    return true;\r\n  }\r\n  /**\r\n   * Reset the connection to its initial state.\r\n   * Can be useful for connection pool implementations.\r\n   *\r\n   * @param callback\r\n   */\r\n\r\n\r\n  reset(callback) {\r\n    const request = new _request.default(this.getInitialSql(), err => {\r\n      if (this.config.options.tdsVersion < '7_2') {\r\n        this.inTransaction = false;\r\n      }\r\n\r\n      callback(err);\r\n    });\r\n    this.resetConnectionOnNextRequest = true;\r\n    this.execSqlBatch(request);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  currentTransactionDescriptor() {\r\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  getIsolationLevelText(isolationLevel) {\r\n    switch (isolationLevel) {\r\n      case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\r\n        return 'read uncommitted';\r\n\r\n      case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\r\n        return 'repeatable read';\r\n\r\n      case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\r\n        return 'serializable';\r\n\r\n      case _transaction.ISOLATION_LEVEL.SNAPSHOT:\r\n        return 'snapshot';\r\n\r\n      default:\r\n        return 'read committed';\r\n    }\r\n  }\r\n\r\n}\r\n\r\nvar _default = Connection;\r\nexports.default = _default;\r\nmodule.exports = Connection;\r\nconst authenticationCache = new _adalNode.MemoryCache();\r\nConnection.prototype.STATE = {\r\n  INITIALIZED: {\r\n    name: 'Initialized',\r\n    events: {}\r\n  },\r\n  CONNECTING: {\r\n    name: 'Connecting',\r\n    enter: function () {\r\n      this.initialiseConnection();\r\n    },\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      socketConnect: function () {\r\n        this.sendPreLogin();\r\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\r\n      }\r\n    }\r\n  },\r\n  SENT_PRELOGIN: {\r\n    name: 'SentPrelogin',\r\n    enter: function () {\r\n      this.emptyMessageBuffer();\r\n    },\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      message: function (message) {\r\n        message.on('data', data => {\r\n          this.addToMessageBuffer(data);\r\n        });\r\n        message.once('end', () => {\r\n          const preloginPayload = new _preloginPayload.default(this.messageBuffer);\r\n          this.debug.payload(function () {\r\n            return preloginPayload.toString('  ');\r\n          });\r\n\r\n          if (preloginPayload.fedAuthRequired === 1) {\r\n            this.fedAuthRequired = true;\r\n          }\r\n\r\n          if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\r\n            var _this$routingData$ser, _this$routingData;\r\n\r\n            if (!this.config.options.encrypt) {\r\n              this.emit('connect', (0, _errors.ConnectionError)(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\r\n              return this.close();\r\n            }\r\n\r\n            this.messageIo.startTls(this.secureContext, (_this$routingData$ser = (_this$routingData = this.routingData) === null || _this$routingData === void 0 ? void 0 : _this$routingData.server) !== null && _this$routingData$ser !== void 0 ? _this$routingData$ser : this.config.server, this.config.options.trustServerCertificate);\r\n            this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\r\n          } else {\r\n            this.sendLogin7Packet();\r\n            const {\r\n              authentication\r\n            } = this.config;\r\n\r\n            if (authentication.type === 'ntlm') {\r\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\r\n            } else {\r\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  REROUTING: {\r\n    name: 'ReRouting',\r\n    enter: function () {\r\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\r\n    },\r\n    events: {\r\n      message: function () {},\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      reconnect: function () {\r\n        this.transitionTo(this.STATE.CONNECTING);\r\n      }\r\n    }\r\n  },\r\n  TRANSIENT_FAILURE_RETRY: {\r\n    name: 'TRANSIENT_FAILURE_RETRY',\r\n    enter: function () {\r\n      this.curTransientRetryCount++;\r\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\r\n    },\r\n    events: {\r\n      message: function () {},\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      retry: function () {\r\n        this.createRetryTimer();\r\n      }\r\n    }\r\n  },\r\n  SENT_TLSSSLNEGOTIATION: {\r\n    name: 'SentTLSSSLNegotiation',\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      message: function (message) {\r\n        message.on('data', data => {\r\n          this.messageIo.tlsHandshakeData(data);\r\n        });\r\n        message.once('end', () => {\r\n          if (this.messageIo.tlsNegotiationComplete) {\r\n            this.sendLogin7Packet();\r\n            const {\r\n              authentication\r\n            } = this.config;\r\n\r\n            if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\r\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\r\n            } else if (authentication.type === 'ntlm') {\r\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\r\n            } else {\r\n              this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\r\n    name: 'SentLogin7WithStandardLogin',\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      featureExtAck: function (token) {\r\n        const {\r\n          authentication\r\n        } = this.config;\r\n\r\n        if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\r\n          if (token.fedAuth === undefined) {\r\n            this.loginError = (0, _errors.ConnectionError)('Did not receive Active Directory authentication acknowledgement');\r\n            this.loggedIn = false;\r\n          } else if (token.fedAuth.length !== 0) {\r\n            this.loginError = (0, _errors.ConnectionError)(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\r\n            this.loggedIn = false;\r\n          }\r\n        } else if (token.fedAuth === undefined) {\r\n          this.loginError = (0, _errors.ConnectionError)('Received acknowledgement for unknown feature');\r\n          this.loggedIn = false;\r\n        } else {\r\n          this.loginError = (0, _errors.ConnectionError)('Did not request Active Directory authentication, but received the acknowledgment');\r\n          this.loggedIn = false;\r\n        }\r\n      },\r\n      message: function (message) {\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n        tokenStreamParser.once('end', () => {\r\n          if (this.loggedIn) {\r\n            if (this.routingData) {\r\n              this.transitionTo(this.STATE.REROUTING);\r\n            } else {\r\n              this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\r\n            }\r\n          } else if (this.loginError) {\r\n            if (this.loginError.isTransient) {\r\n              this.debug.log('Initiating retry on transient error');\r\n              this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\r\n            } else {\r\n              this.emit('connect', this.loginError);\r\n              this.transitionTo(this.STATE.FINAL);\r\n            }\r\n          } else {\r\n            this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\r\n            this.transitionTo(this.STATE.FINAL);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  SENT_LOGIN7_WITH_NTLM: {\r\n    name: 'SentLogin7WithNTLMLogin',\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      message: function (message) {\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n        tokenStreamParser.once('end', () => {\r\n          if (this.ntlmpacket) {\r\n            const authentication = this.config.authentication;\r\n            const payload = new _ntlmPayload.default({\r\n              domain: authentication.options.domain,\r\n              userName: authentication.options.userName,\r\n              password: authentication.options.password,\r\n              ntlmpacket: this.ntlmpacket\r\n            });\r\n            this.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\r\n            this.debug.payload(function () {\r\n              return payload.toString('  ');\r\n            });\r\n            this.ntlmpacket = undefined;\r\n          } else if (this.loggedIn) {\r\n            if (this.routingData) {\r\n              this.transitionTo(this.STATE.REROUTING);\r\n            } else {\r\n              this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\r\n            }\r\n          } else if (this.loginError) {\r\n            if (this.loginError.isTransient) {\r\n              this.debug.log('Initiating retry on transient error');\r\n              this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\r\n            } else {\r\n              this.emit('connect', this.loginError);\r\n              this.transitionTo(this.STATE.FINAL);\r\n            }\r\n          } else {\r\n            this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\r\n            this.transitionTo(this.STATE.FINAL);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  SENT_LOGIN7_WITH_FEDAUTH: {\r\n    name: 'SentLogin7Withfedauth',\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      fedAuthInfo: function (token) {\r\n        this.fedAuthInfoToken = token;\r\n      },\r\n      message: function (message) {\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n        tokenStreamParser.once('end', () => {\r\n          if (this.loggedIn) {\r\n            if (this.routingData) {\r\n              this.transitionTo(this.STATE.REROUTING);\r\n            } else {\r\n              this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          const fedAuthInfoToken = this.fedAuthInfoToken;\r\n\r\n          if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\r\n            const authentication = this.config.authentication;\r\n\r\n            const getToken = callback => {\r\n              const getTokenFromCredentials = (err, credentials) => {\r\n                if (err) {\r\n                  return callback(err);\r\n                }\r\n\r\n                credentials.getToken().then(tokenResponse => {\r\n                  callback(null, tokenResponse.accessToken);\r\n                }, callback);\r\n              };\r\n\r\n              if (authentication.type === 'azure-active-directory-password') {\r\n                var _authentication$optio;\r\n\r\n                const credentials = new _msRestNodeauth.UserTokenCredentials('7f98cb04-cd1e-40df-9140-3bf7e2cea4db', (_authentication$optio = authentication.options.domain) !== null && _authentication$optio !== void 0 ? _authentication$optio : 'common', authentication.options.userName, authentication.options.password, fedAuthInfoToken.spn, undefined, // environment\r\n                authenticationCache);\r\n                getTokenFromCredentials(undefined, credentials);\r\n              } else if (authentication.type === 'azure-active-directory-msi-vm') {\r\n                (0, _msRestNodeauth.loginWithVmMSI)({\r\n                  clientId: authentication.options.clientId,\r\n                  msiEndpoint: authentication.options.msiEndpoint,\r\n                  resource: fedAuthInfoToken.spn\r\n                }, getTokenFromCredentials);\r\n              } else if (authentication.type === 'azure-active-directory-msi-app-service') {\r\n                (0, _msRestNodeauth.loginWithAppServiceMSI)({\r\n                  msiEndpoint: authentication.options.msiEndpoint,\r\n                  msiSecret: authentication.options.msiSecret,\r\n                  resource: fedAuthInfoToken.spn,\r\n                  clientId: authentication.options.clientId\r\n                }, getTokenFromCredentials);\r\n              } else if (authentication.type === 'azure-active-directory-service-principal-secret') {\r\n                const credentials = new _msRestNodeauth.ApplicationTokenCredentials(authentication.options.clientId, authentication.options.tenantId, // domain\r\n                authentication.options.clientSecret, fedAuthInfoToken.spn, undefined, // environment\r\n                authenticationCache);\r\n                getTokenFromCredentials(undefined, credentials);\r\n              }\r\n            };\r\n\r\n            getToken((err, token) => {\r\n              if (err) {\r\n                this.loginError = (0, _errors.ConnectionError)('Security token could not be authenticated or authorized.', 'EFEDAUTH');\r\n                this.emit('connect', this.loginError);\r\n                this.transitionTo(this.STATE.FINAL);\r\n                return;\r\n              }\r\n\r\n              this.sendFedAuthTokenMessage(token);\r\n            });\r\n          } else if (this.loginError) {\r\n            if (this.loginError.isTransient) {\r\n              this.debug.log('Initiating retry on transient error');\r\n              this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\r\n            } else {\r\n              this.emit('connect', this.loginError);\r\n              this.transitionTo(this.STATE.FINAL);\r\n            }\r\n          } else {\r\n            this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\r\n            this.transitionTo(this.STATE.FINAL);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  LOGGED_IN_SENDING_INITIAL_SQL: {\r\n    name: 'LoggedInSendingInitialSql',\r\n    enter: function () {\r\n      this.sendInitialSql();\r\n    },\r\n    events: {\r\n      socketError: function socketError() {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      connectTimeout: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      },\r\n      message: function (message) {\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n        tokenStreamParser.once('end', () => {\r\n          this.transitionTo(this.STATE.LOGGED_IN);\r\n          this.processedInitialSql();\r\n        });\r\n      }\r\n    }\r\n  },\r\n  LOGGED_IN: {\r\n    name: 'LoggedIn',\r\n    events: {\r\n      socketError: function () {\r\n        this.transitionTo(this.STATE.FINAL);\r\n      }\r\n    }\r\n  },\r\n  SENT_CLIENT_REQUEST: {\r\n    name: 'SentClientRequest',\r\n    exit: function (nextState) {\r\n      this.clearRequestTimer();\r\n    },\r\n    events: {\r\n      socketError: function (err) {\r\n        const sqlRequest = this.request;\r\n        this.request = undefined;\r\n        this.transitionTo(this.STATE.FINAL);\r\n        sqlRequest.callback(err);\r\n      },\r\n      message: function (message) {\r\n        var _this$request2, _this$request9;\r\n\r\n        // request timer is stopped on first data package\r\n        this.clearRequestTimer();\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n\r\n        const onResume = () => {\r\n          tokenStreamParser.resume();\r\n        };\r\n\r\n        const onPause = () => {\r\n          var _this$request;\r\n\r\n          tokenStreamParser.pause();\r\n          (_this$request = this.request) === null || _this$request === void 0 ? void 0 : _this$request.once('resume', onResume);\r\n        };\r\n\r\n        (_this$request2 = this.request) === null || _this$request2 === void 0 ? void 0 : _this$request2.on('pause', onPause);\r\n\r\n        if (this.request instanceof _request.default && this.request.paused) {\r\n          onPause();\r\n        }\r\n\r\n        const onCancel = () => {\r\n          var _this$request3, _this$request4;\r\n\r\n          tokenStreamParser.removeListener('end', onEndOfMessage);\r\n\r\n          if (this.request instanceof _request.default && this.request.paused) {\r\n            // resume the request if it was paused so we can read the remaining tokens\r\n            this.request.resume();\r\n          }\r\n\r\n          (_this$request3 = this.request) === null || _this$request3 === void 0 ? void 0 : _this$request3.removeListener('pause', onPause);\r\n          (_this$request4 = this.request) === null || _this$request4 === void 0 ? void 0 : _this$request4.removeListener('resume', onResume);\r\n        };\r\n\r\n        const onEndOfMessage = () => {\r\n          var _this$request5, _this$request6, _this$request7, _this$request8;\r\n\r\n          (_this$request5 = this.request) === null || _this$request5 === void 0 ? void 0 : _this$request5.removeListener('cancel', this._cancelAfterRequestSent);\r\n          (_this$request6 = this.request) === null || _this$request6 === void 0 ? void 0 : _this$request6.removeListener('cancel', onCancel);\r\n          (_this$request7 = this.request) === null || _this$request7 === void 0 ? void 0 : _this$request7.removeListener('pause', onPause);\r\n          (_this$request8 = this.request) === null || _this$request8 === void 0 ? void 0 : _this$request8.removeListener('resume', onResume);\r\n          this.transitionTo(this.STATE.LOGGED_IN);\r\n          const sqlRequest = this.request;\r\n          this.request = undefined;\r\n\r\n          if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\r\n            this.inTransaction = false;\r\n          }\r\n\r\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\r\n        };\r\n\r\n        tokenStreamParser.once('end', onEndOfMessage);\r\n        (_this$request9 = this.request) === null || _this$request9 === void 0 ? void 0 : _this$request9.once('cancel', onCancel);\r\n      }\r\n    }\r\n  },\r\n  SENT_ATTENTION: {\r\n    name: 'SentAttention',\r\n    enter: function () {\r\n      this.attentionReceived = false;\r\n    },\r\n    events: {\r\n      socketError: function (err) {\r\n        const sqlRequest = this.request;\r\n        this.request = undefined;\r\n        this.transitionTo(this.STATE.FINAL);\r\n        sqlRequest.callback(err);\r\n      },\r\n      attention: function () {\r\n        this.attentionReceived = true;\r\n      },\r\n      message: function (message) {\r\n        const tokenStreamParser = this.createTokenStreamParser(message);\r\n        tokenStreamParser.once('end', () => {\r\n          // 3.2.5.7 Sent Attention State\r\n          // Discard any data contained in the response, until we receive the attention response\r\n          if (this.attentionReceived) {\r\n            this.attentionReceived = false;\r\n            this.clearCancelTimer();\r\n            const sqlRequest = this.request;\r\n            this.request = undefined;\r\n            this.transitionTo(this.STATE.LOGGED_IN);\r\n\r\n            if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\r\n              sqlRequest.callback(sqlRequest.error);\r\n            } else {\r\n              sqlRequest.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  },\r\n  FINAL: {\r\n    name: 'Final',\r\n    enter: function () {\r\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\r\n    },\r\n    events: {\r\n      loginFailed: function () {// Do nothing. The connection was probably closed by the client code.\r\n      },\r\n      connectTimeout: function () {// Do nothing, as the timer should be cleaned up.\r\n      },\r\n      message: function () {// Do nothing\r\n      },\r\n      socketError: function () {// Do nothing\r\n      }\r\n    }\r\n  }\r\n};"]},"metadata":{},"sourceType":"script"}
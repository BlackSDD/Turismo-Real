{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tokenCredentialsBase_1 = require(\"./tokenCredentialsBase\");\n\nconst authConstants_1 = require(\"../util/authConstants\");\n\nclass DeviceTokenCredentials extends tokenCredentialsBase_1.TokenCredentialsBase {\n  /**\r\n   * Creates a new DeviceTokenCredentials object that gets a new access token using userCodeInfo (contains user_code, device_code)\r\n   * for authenticating user on device.\r\n   *\r\n   * When this credential is used, the script will provide a url and code. The user needs to copy the url and the code, paste it\r\n   * in a browser and authenticate over there. If successful, the script will get the access token.\r\n   *\r\n   *\r\n   * @param clientId - The active directory application client id.\r\n   * @param domain - The domain or tenant id containing this application. Default value is \"common\"\r\n   * @param username - The user name for account in the form: \"user@example.com\".\r\n   * @param tokenAudience - The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\r\n   * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\r\n   * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\r\n   * for an example.\r\n   * @param environment - The azure environment to authenticate with. Default environment is \"Azure\" popularly known as \"Public Azure Cloud\".\r\n   * @param tokenCache - The token cache. Default value is the MemoryCache object from adal.\r\n   */\n  constructor(clientId, domain, username, tokenAudience, environment, tokenCache) {\n    if (!username) {\n      username = \"user@example.com\";\n    }\n\n    if (!domain) {\n      domain = authConstants_1.AuthConstants.AAD_COMMON_TENANT;\n    }\n\n    if (!clientId) {\n      clientId = authConstants_1.AuthConstants.DEFAULT_ADAL_CLIENT_ID;\n    }\n\n    super(clientId, domain, tokenAudience, environment, tokenCache);\n    this.username = username;\n  }\n\n  getToken() {\n    // For device auth, this is just getTokenFromCache.\n    return this.getTokenFromCache(this.username);\n  }\n\n}\n\nexports.DeviceTokenCredentials = DeviceTokenCredentials;","map":{"version":3,"sources":["../../../lib/credentials/deviceTokenCredentials.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,MAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAGA,MAAa,sBAAb,SAA4C,sBAAA,CAAA,oBAA5C,CAAgE;AAG9D;;;;;;;;;;;;;;;;;AAiBG;AACH,EAAA,WAAA,CACE,QADF,EAEE,MAFF,EAGE,QAHF,EAIE,aAJF,EAKE,WALF,EAME,UANF,EAMyB;AAEvB,QAAI,CAAC,QAAL,EAAe;AACb,MAAA,QAAQ,GAAG,kBAAX;AACD;;AAED,QAAI,CAAC,MAAL,EAAa;AACX,MAAA,MAAM,GAAG,eAAA,CAAA,aAAA,CAAc,iBAAvB;AACD;;AAED,QAAI,CAAC,QAAL,EAAe;AACb,MAAA,QAAQ,GAAG,eAAA,CAAA,aAAA,CAAc,sBAAzB;AACD;;AAED,UAAM,QAAN,EAAgB,MAAhB,EAAwB,aAAxB,EAAuC,WAAvC,EAAoD,UAApD;AAEA,SAAK,QAAL,GAAgB,QAAhB;AACD;;AAEM,EAAA,QAAQ,GAAA;AACb;AACA,WAAO,KAAK,iBAAL,CAAuB,KAAK,QAA5B,CAAP;AACD;;AAjD6D;;AAAhE,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tokenCredentialsBase_1 = require(\"./tokenCredentialsBase\");\r\nconst authConstants_1 = require(\"../util/authConstants\");\r\nclass DeviceTokenCredentials extends tokenCredentialsBase_1.TokenCredentialsBase {\r\n    /**\r\n     * Creates a new DeviceTokenCredentials object that gets a new access token using userCodeInfo (contains user_code, device_code)\r\n     * for authenticating user on device.\r\n     *\r\n     * When this credential is used, the script will provide a url and code. The user needs to copy the url and the code, paste it\r\n     * in a browser and authenticate over there. If successful, the script will get the access token.\r\n     *\r\n     *\r\n     * @param clientId - The active directory application client id.\r\n     * @param domain - The domain or tenant id containing this application. Default value is \"common\"\r\n     * @param username - The user name for account in the form: \"user@example.com\".\r\n     * @param tokenAudience - The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\r\n     * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\r\n     * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\r\n     * for an example.\r\n     * @param environment - The azure environment to authenticate with. Default environment is \"Azure\" popularly known as \"Public Azure Cloud\".\r\n     * @param tokenCache - The token cache. Default value is the MemoryCache object from adal.\r\n     */\r\n    constructor(clientId, domain, username, tokenAudience, environment, tokenCache) {\r\n        if (!username) {\r\n            username = \"user@example.com\";\r\n        }\r\n        if (!domain) {\r\n            domain = authConstants_1.AuthConstants.AAD_COMMON_TENANT;\r\n        }\r\n        if (!clientId) {\r\n            clientId = authConstants_1.AuthConstants.DEFAULT_ADAL_CLIENT_ID;\r\n        }\r\n        super(clientId, domain, tokenAudience, environment, tokenCache);\r\n        this.username = username;\r\n    }\r\n    getToken() {\r\n        // For device auth, this is just getTokenFromCache.\r\n        return this.getTokenFromCache(this.username);\r\n    }\r\n}\r\nexports.DeviceTokenCredentials = DeviceTokenCredentials;\r\n//# sourceMappingURL=deviceTokenCredentials.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst TYPES = require('./datatypes').TYPES;\n\nconst Table = require('./table');\n\nlet PromiseLibrary = Promise;\nconst driver = {};\nconst map = [];\n/**\n * Register you own type map.\n *\n * @path module.exports.map\n * @param {*} jstype JS data type.\n * @param {*} sqltype SQL data type.\n */\n\nmap.register = function (jstype, sqltype) {\n  for (let index = 0; index < this.length; index++) {\n    const item = this[index];\n\n    if (item.js === jstype) {\n      this.splice(index, 1);\n      break;\n    }\n  }\n\n  this.push({\n    js: jstype,\n    sql: sqltype\n  });\n  return null;\n};\n\nmap.register(String, TYPES.NVarChar);\nmap.register(Number, TYPES.Int);\nmap.register(Boolean, TYPES.Bit);\nmap.register(Date, TYPES.DateTime);\nmap.register(Buffer, TYPES.VarBinary);\nmap.register(Table, TYPES.TVP);\n/**\n * @ignore\n */\n\nconst getTypeByValue = function (value) {\n  if (value === null || value === undefined) {\n    return TYPES.NVarChar;\n  }\n\n  switch (typeof value) {\n    case 'string':\n      for (const item of Array.from(map)) {\n        if (item.js === String) {\n          return item.sql;\n        }\n      }\n\n      return TYPES.NVarChar;\n\n    case 'number':\n    case 'bigint':\n      if (value % 1 === 0) {\n        if (value < -2147483648 || value > 2147483647) {\n          return TYPES.BigInt;\n        } else {\n          return TYPES.Int;\n        }\n      } else {\n        return TYPES.Float;\n      }\n\n    case 'boolean':\n      for (const item of Array.from(map)) {\n        if (item.js === Boolean) {\n          return item.sql;\n        }\n      }\n\n      return TYPES.Bit;\n\n    case 'object':\n      for (const item of Array.from(map)) {\n        if (value instanceof item.js) {\n          return item.sql;\n        }\n      }\n\n      return TYPES.NVarChar;\n\n    default:\n      return TYPES.NVarChar;\n  }\n};\n\nmodule.exports = {\n  driver,\n  getTypeByValue,\n  map\n};\nObject.defineProperty(module.exports, 'Promise', {\n  get: () => {\n    return PromiseLibrary;\n  },\n  set: value => {\n    PromiseLibrary = value;\n  }\n});","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/lib/shared.js"],"names":["TYPES","require","Table","PromiseLibrary","Promise","driver","map","register","jstype","sqltype","index","length","item","js","splice","push","sql","String","NVarChar","Number","Int","Boolean","Bit","Date","DateTime","Buffer","VarBinary","TVP","getTypeByValue","value","undefined","Array","from","BigInt","Float","module","exports","Object","defineProperty","get","set"],"mappings":"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","sourcesContent":["'use strict'\n\nconst TYPES = require('./datatypes').TYPES\nconst Table = require('./table')\n\nlet PromiseLibrary = Promise\nconst driver = {}\nconst map = []\n\n/**\n * Register you own type map.\n *\n * @path module.exports.map\n * @param {*} jstype JS data type.\n * @param {*} sqltype SQL data type.\n */\n\nmap.register = function (jstype, sqltype) {\n  for (let index = 0; index < this.length; index++) {\n    const item = this[index]\n    if (item.js === jstype) {\n      this.splice(index, 1)\n      break\n    }\n  }\n\n  this.push({\n    js: jstype,\n    sql: sqltype\n  })\n\n  return null\n}\n\nmap.register(String, TYPES.NVarChar)\nmap.register(Number, TYPES.Int)\nmap.register(Boolean, TYPES.Bit)\nmap.register(Date, TYPES.DateTime)\nmap.register(Buffer, TYPES.VarBinary)\nmap.register(Table, TYPES.TVP)\n\n/**\n * @ignore\n */\n\nconst getTypeByValue = function (value) {\n  if ((value === null) || (value === undefined)) { return TYPES.NVarChar }\n\n  switch (typeof value) {\n    case 'string':\n      for (const item of Array.from(map)) {\n        if (item.js === String) {\n          return item.sql\n        }\n      }\n\n      return TYPES.NVarChar\n\n    case 'number':\n    case 'bigint':\n      if (value % 1 === 0) {\n        if (value < -2147483648 || value > 2147483647) {\n          return TYPES.BigInt\n        } else {\n          return TYPES.Int\n        }\n      } else {\n        return TYPES.Float\n      }\n\n    case 'boolean':\n      for (const item of Array.from(map)) {\n        if (item.js === Boolean) {\n          return item.sql\n        }\n      }\n\n      return TYPES.Bit\n\n    case 'object':\n      for (const item of Array.from(map)) {\n        if (value instanceof item.js) {\n          return item.sql\n        }\n      }\n\n      return TYPES.NVarChar\n\n    default:\n      return TYPES.NVarChar\n  }\n}\n\nmodule.exports = {\n  driver,\n  getTypeByValue,\n  map\n}\n\nObject.defineProperty(module.exports, 'Promise', {\n  get: () => {\n    return PromiseLibrary\n  },\n  set: (value) => {\n    PromiseLibrary = value\n  }\n})\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst ConnectionPool = require('./connection-pool');\n\nconst PreparedStatement = require('./prepared-statement');\n\nconst Request = require('./request');\n\nconst Transaction = require('./transaction');\n\nconst {\n  ConnectionError,\n  TransactionError,\n  RequestError,\n  PreparedStatementError,\n  MSSQLError\n} = require('../error');\n\nconst shared = require('../shared');\n\nconst Table = require('../table');\n\nconst ISOLATION_LEVEL = require('../isolationlevel');\n\nconst {\n  TYPES\n} = require('../datatypes');\n\nconst {\n  connect,\n  close,\n  on,\n  off,\n  removeListener,\n  query,\n  batch\n} = require('../global-connection');\n\nmodule.exports = {\n  ConnectionPool,\n  Transaction,\n  Request,\n  PreparedStatement,\n  ConnectionError,\n  TransactionError,\n  RequestError,\n  PreparedStatementError,\n  MSSQLError,\n  driver: shared.driver,\n  exports: {\n    ConnectionError,\n    TransactionError,\n    RequestError,\n    PreparedStatementError,\n    MSSQLError,\n    Table,\n    ISOLATION_LEVEL,\n    TYPES,\n    MAX: 65535,\n    // (1 << 16) - 1\n    map: shared.map,\n    getTypeByValue: shared.getTypeByValue,\n    connect,\n    close,\n    on,\n    removeListener,\n    off,\n    query,\n    batch\n  }\n};\nObject.defineProperty(module.exports, 'Promise', {\n  enumerable: true,\n  get: () => {\n    return shared.Promise;\n  },\n  set: value => {\n    shared.Promise = value;\n  }\n});\n\nfor (const key in TYPES) {\n  const value = TYPES[key];\n  module.exports.exports[key] = value;\n  module.exports.exports[key.toUpperCase()] = value;\n}\n/**\n * @callback Request~requestCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Object} [result] Request result.\n */\n\n/**\n * @callback Request~bulkCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Number} [rowsAffected] Number of affected rows.\n */\n\n/**\n * @callback basicCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n */\n\n/**\n * @callback acquireCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n * @param {Object} [config] Connection config\n */\n\n/**\n * Dispatched after connection has established.\n * @event ConnectionPool#connect\n */\n\n/**\n * Dispatched after connection has closed a pool (by calling close).\n * @event ConnectionPool#close\n */\n\n/**\n * Dispatched when transaction begin.\n * @event Transaction#begin\n */\n\n/**\n * Dispatched on successful commit.\n * @event Transaction#commit\n */\n\n/**\n * Dispatched on successful rollback.\n * @event Transaction#rollback\n */\n\n/**\n * Dispatched when metadata for new recordset are parsed.\n * @event Request#recordset\n */\n\n/**\n * Dispatched when new row is parsed.\n * @event Request#row\n */\n\n/**\n * Dispatched when request is complete.\n * @event Request#done\n */\n\n/**\n * Dispatched on error.\n * @event Request#error\n */","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/lib/base/index.js"],"names":["ConnectionPool","require","PreparedStatement","Request","Transaction","ConnectionError","TransactionError","RequestError","PreparedStatementError","MSSQLError","shared","Table","ISOLATION_LEVEL","TYPES","connect","close","on","off","removeListener","query","batch","module","exports","driver","MAX","map","getTypeByValue","Object","defineProperty","enumerable","get","Promise","set","value","key","toUpperCase"],"mappings":"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","sourcesContent":["'use strict'\n\nconst ConnectionPool = require('./connection-pool')\nconst PreparedStatement = require('./prepared-statement')\nconst Request = require('./request')\nconst Transaction = require('./transaction')\nconst { ConnectionError, TransactionError, RequestError, PreparedStatementError, MSSQLError } = require('../error')\nconst shared = require('../shared')\nconst Table = require('../table')\nconst ISOLATION_LEVEL = require('../isolationlevel')\nconst { TYPES } = require('../datatypes')\nconst { connect, close, on, off, removeListener, query, batch } = require('../global-connection')\n\nmodule.exports = {\n  ConnectionPool,\n  Transaction,\n  Request,\n  PreparedStatement,\n  ConnectionError,\n  TransactionError,\n  RequestError,\n  PreparedStatementError,\n  MSSQLError,\n  driver: shared.driver,\n  exports: {\n    ConnectionError,\n    TransactionError,\n    RequestError,\n    PreparedStatementError,\n    MSSQLError,\n    Table,\n    ISOLATION_LEVEL,\n    TYPES,\n    MAX: 65535, // (1 << 16) - 1\n    map: shared.map,\n    getTypeByValue: shared.getTypeByValue,\n    connect,\n    close,\n    on,\n    removeListener,\n    off,\n    query,\n    batch\n  }\n}\n\nObject.defineProperty(module.exports, 'Promise', {\n  enumerable: true,\n  get: () => {\n    return shared.Promise\n  },\n  set: (value) => {\n    shared.Promise = value\n  }\n})\n\nfor (const key in TYPES) {\n  const value = TYPES[key]\n  module.exports.exports[key] = value\n  module.exports.exports[key.toUpperCase()] = value\n}\n\n/**\n * @callback Request~requestCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Object} [result] Request result.\n */\n\n/**\n * @callback Request~bulkCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Number} [rowsAffected] Number of affected rows.\n */\n\n/**\n * @callback basicCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n */\n\n/**\n * @callback acquireCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n * @param {Object} [config] Connection config\n */\n\n/**\n * Dispatched after connection has established.\n * @event ConnectionPool#connect\n */\n\n/**\n * Dispatched after connection has closed a pool (by calling close).\n * @event ConnectionPool#close\n */\n\n/**\n * Dispatched when transaction begin.\n * @event Transaction#begin\n */\n\n/**\n * Dispatched on successful commit.\n * @event Transaction#commit\n */\n\n/**\n * Dispatched on successful rollback.\n * @event Transaction#rollback\n */\n\n/**\n * Dispatched when metadata for new recordset are parsed.\n * @event Request#recordset\n */\n\n/**\n * Dispatched when new row is parsed.\n * @event Request#row\n */\n\n/**\n * Dispatched when request is complete.\n * @event Request#done\n */\n\n/**\n * Dispatched on error.\n * @event Request#error\n */\n"]},"metadata":{},"sourceType":"script"}
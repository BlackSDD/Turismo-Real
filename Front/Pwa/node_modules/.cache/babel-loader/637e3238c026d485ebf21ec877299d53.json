{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SQLServerStatementColumnEncryptionSetting = exports.DescribeParameterEncryptionResultSet2 = exports.DescribeParameterEncryptionResultSet1 = exports.SQLServerEncryptionType = void 0; // This code is based on the `mssql-jdbc` library published under the conditions of MIT license.\n// Copyright (c) 2019 Microsoft Corporation\n\nlet SQLServerEncryptionType;\nexports.SQLServerEncryptionType = SQLServerEncryptionType;\n\n(function (SQLServerEncryptionType) {\n  SQLServerEncryptionType[SQLServerEncryptionType[\"Deterministic\"] = 1] = \"Deterministic\";\n  SQLServerEncryptionType[SQLServerEncryptionType[\"Randomized\"] = 2] = \"Randomized\";\n  SQLServerEncryptionType[SQLServerEncryptionType[\"PlainText\"] = 0] = \"PlainText\";\n})(SQLServerEncryptionType || (exports.SQLServerEncryptionType = SQLServerEncryptionType = {})); // Fields in the first resultset of \"sp_describe_parameter_encryption\"\n// We expect the server to return the fields in the resultset in the same order as mentioned below.\n// If the server changes the below order, then transparent parameter encryption will break.\n\n\nlet DescribeParameterEncryptionResultSet1; // Fields in the second resultset of \"sp_describe_parameter_encryption\"\n// We expect the server to return the fields in the resultset in the same order as mentioned below.\n// If the server changes the below order, then transparent parameter encryption will break.\n\nexports.DescribeParameterEncryptionResultSet1 = DescribeParameterEncryptionResultSet1;\n\n(function (DescribeParameterEncryptionResultSet1) {\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyOrdinal\"] = 0] = \"KeyOrdinal\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"DbId\"] = 1] = \"DbId\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyId\"] = 2] = \"KeyId\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyVersion\"] = 3] = \"KeyVersion\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyMdVersion\"] = 4] = \"KeyMdVersion\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"EncryptedKey\"] = 5] = \"EncryptedKey\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"ProviderName\"] = 6] = \"ProviderName\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyPath\"] = 7] = \"KeyPath\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyEncryptionAlgorithm\"] = 8] = \"KeyEncryptionAlgorithm\";\n})(DescribeParameterEncryptionResultSet1 || (exports.DescribeParameterEncryptionResultSet1 = DescribeParameterEncryptionResultSet1 = {}));\n\nlet DescribeParameterEncryptionResultSet2;\nexports.DescribeParameterEncryptionResultSet2 = DescribeParameterEncryptionResultSet2;\n\n(function (DescribeParameterEncryptionResultSet2) {\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ParameterOrdinal\"] = 0] = \"ParameterOrdinal\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ParameterName\"] = 1] = \"ParameterName\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncryptionAlgorithm\"] = 2] = \"ColumnEncryptionAlgorithm\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncrytionType\"] = 3] = \"ColumnEncrytionType\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncryptionKeyOrdinal\"] = 4] = \"ColumnEncryptionKeyOrdinal\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"NormalizationRuleVersion\"] = 5] = \"NormalizationRuleVersion\";\n})(DescribeParameterEncryptionResultSet2 || (exports.DescribeParameterEncryptionResultSet2 = DescribeParameterEncryptionResultSet2 = {}));\n\nlet SQLServerStatementColumnEncryptionSetting;\nexports.SQLServerStatementColumnEncryptionSetting = SQLServerStatementColumnEncryptionSetting;\n\n(function (SQLServerStatementColumnEncryptionSetting) {\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"UseConnectionSetting\"] = 0] = \"UseConnectionSetting\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"Enabled\"] = 1] = \"Enabled\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"ResultSetOnly\"] = 2] = \"ResultSetOnly\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"Disabled\"] = 3] = \"Disabled\";\n})(SQLServerStatementColumnEncryptionSetting || (exports.SQLServerStatementColumnEncryptionSetting = SQLServerStatementColumnEncryptionSetting = {}));","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/node_modules/tedious/lib/always-encrypted/types.js"],"names":["Object","defineProperty","exports","value","SQLServerStatementColumnEncryptionSetting","DescribeParameterEncryptionResultSet2","DescribeParameterEncryptionResultSet1","SQLServerEncryptionType"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SQLServerStatementColumnEncryptionSetting = exports.DescribeParameterEncryptionResultSet2 = exports.DescribeParameterEncryptionResultSet1 = exports.SQLServerEncryptionType = void 0;\n// This code is based on the `mssql-jdbc` library published under the conditions of MIT license.\n// Copyright (c) 2019 Microsoft Corporation\nlet SQLServerEncryptionType;\nexports.SQLServerEncryptionType = SQLServerEncryptionType;\n\n(function (SQLServerEncryptionType) {\n  SQLServerEncryptionType[SQLServerEncryptionType[\"Deterministic\"] = 1] = \"Deterministic\";\n  SQLServerEncryptionType[SQLServerEncryptionType[\"Randomized\"] = 2] = \"Randomized\";\n  SQLServerEncryptionType[SQLServerEncryptionType[\"PlainText\"] = 0] = \"PlainText\";\n})(SQLServerEncryptionType || (exports.SQLServerEncryptionType = SQLServerEncryptionType = {}));\n\n// Fields in the first resultset of \"sp_describe_parameter_encryption\"\n// We expect the server to return the fields in the resultset in the same order as mentioned below.\n// If the server changes the below order, then transparent parameter encryption will break.\nlet DescribeParameterEncryptionResultSet1; // Fields in the second resultset of \"sp_describe_parameter_encryption\"\n// We expect the server to return the fields in the resultset in the same order as mentioned below.\n// If the server changes the below order, then transparent parameter encryption will break.\n\nexports.DescribeParameterEncryptionResultSet1 = DescribeParameterEncryptionResultSet1;\n\n(function (DescribeParameterEncryptionResultSet1) {\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyOrdinal\"] = 0] = \"KeyOrdinal\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"DbId\"] = 1] = \"DbId\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyId\"] = 2] = \"KeyId\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyVersion\"] = 3] = \"KeyVersion\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyMdVersion\"] = 4] = \"KeyMdVersion\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"EncryptedKey\"] = 5] = \"EncryptedKey\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"ProviderName\"] = 6] = \"ProviderName\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyPath\"] = 7] = \"KeyPath\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyEncryptionAlgorithm\"] = 8] = \"KeyEncryptionAlgorithm\";\n})(DescribeParameterEncryptionResultSet1 || (exports.DescribeParameterEncryptionResultSet1 = DescribeParameterEncryptionResultSet1 = {}));\n\nlet DescribeParameterEncryptionResultSet2;\nexports.DescribeParameterEncryptionResultSet2 = DescribeParameterEncryptionResultSet2;\n\n(function (DescribeParameterEncryptionResultSet2) {\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ParameterOrdinal\"] = 0] = \"ParameterOrdinal\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ParameterName\"] = 1] = \"ParameterName\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncryptionAlgorithm\"] = 2] = \"ColumnEncryptionAlgorithm\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncrytionType\"] = 3] = \"ColumnEncrytionType\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncryptionKeyOrdinal\"] = 4] = \"ColumnEncryptionKeyOrdinal\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"NormalizationRuleVersion\"] = 5] = \"NormalizationRuleVersion\";\n})(DescribeParameterEncryptionResultSet2 || (exports.DescribeParameterEncryptionResultSet2 = DescribeParameterEncryptionResultSet2 = {}));\n\nlet SQLServerStatementColumnEncryptionSetting;\nexports.SQLServerStatementColumnEncryptionSetting = SQLServerStatementColumnEncryptionSetting;\n\n(function (SQLServerStatementColumnEncryptionSetting) {\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"UseConnectionSetting\"] = 0] = \"UseConnectionSetting\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"Enabled\"] = 1] = \"Enabled\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"ResultSetOnly\"] = 2] = \"ResultSetOnly\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"Disabled\"] = 3] = \"Disabled\";\n})(SQLServerStatementColumnEncryptionSetting || (exports.SQLServerStatementColumnEncryptionSetting = SQLServerStatementColumnEncryptionSetting = {}));"]},"metadata":{},"sourceType":"script"}
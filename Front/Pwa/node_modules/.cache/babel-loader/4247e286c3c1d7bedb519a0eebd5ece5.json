{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"@js-joda/core\"); // globalDate is to be used for JavaScript's global 'Date' object to avoid name clashing with the 'Date' constant below\n\n\nconst globalDate = global.Date;\n\nconst EPOCH_DATE = _core.LocalDate.ofYearDay(1, 1);\n\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x03]);\nconst Date = {\n  id: 0x28,\n  type: 'DATEN',\n  name: 'Date',\n  declaration: function () {\n    return 'date';\n  },\n  generateTypeInfo: function () {\n    return Buffer.from([this.id]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let date;\n\n    if (options.useUTC) {\n      date = _core.LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    } else {\n      date = _core.LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n    }\n\n    const days = EPOCH_DATE.until(date, _core.ChronoUnit.DAYS);\n    const buffer = Buffer.alloc(3);\n    buffer.writeUIntLE(days, 0, 3);\n    yield buffer;\n  },\n\n  // TODO: value is techincally of type 'unknown'.\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof globalDate)) {\n      value = new globalDate(globalDate.parse(value));\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = Date;\nexports.default = _default;\nmodule.exports = Date;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/data-types/date.js"],"names":["Object","defineProperty","exports","value","default","_core","require","globalDate","global","Date","EPOCH_DATE","LocalDate","ofYearDay","NULL_LENGTH","Buffer","from","DATA_LENGTH","id","type","name","declaration","generateTypeInfo","generateParameterLength","parameter","options","generateParameterData","date","useUTC","of","getUTCFullYear","getUTCMonth","getUTCDate","getFullYear","getMonth","getDate","days","until","ChronoUnit","DAYS","buffer","alloc","writeUIntLE","validate","parse","isNaN","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _core = require(\"@js-joda/core\");\r\n\r\n// globalDate is to be used for JavaScript's global 'Date' object to avoid name clashing with the 'Date' constant below\r\nconst globalDate = global.Date;\r\n\r\nconst EPOCH_DATE = _core.LocalDate.ofYearDay(1, 1);\r\n\r\nconst NULL_LENGTH = Buffer.from([0x00]);\r\nconst DATA_LENGTH = Buffer.from([0x03]);\r\nconst Date = {\r\n  id: 0x28,\r\n  type: 'DATEN',\r\n  name: 'Date',\r\n  declaration: function () {\r\n    return 'date';\r\n  },\r\n  generateTypeInfo: function () {\r\n    return Buffer.from([this.id]);\r\n  },\r\n\r\n  generateParameterLength(parameter, options) {\r\n    if (parameter.value == null) {\r\n      return NULL_LENGTH;\r\n    }\r\n\r\n    return DATA_LENGTH;\r\n  },\r\n\r\n  *generateParameterData(parameter, options) {\r\n    if (parameter.value == null) {\r\n      return;\r\n    }\r\n\r\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\r\n\r\n    let date;\r\n\r\n    if (options.useUTC) {\r\n      date = _core.LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\r\n    } else {\r\n      date = _core.LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\r\n    }\r\n\r\n    const days = EPOCH_DATE.until(date, _core.ChronoUnit.DAYS);\r\n    const buffer = Buffer.alloc(3);\r\n    buffer.writeUIntLE(days, 0, 3);\r\n    yield buffer;\r\n  },\r\n\r\n  // TODO: value is techincally of type 'unknown'.\r\n  validate: function (value) {\r\n    if (value == null) {\r\n      return null;\r\n    }\r\n\r\n    if (!(value instanceof globalDate)) {\r\n      value = new globalDate(globalDate.parse(value));\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n      throw new TypeError('Invalid date.');\r\n    }\r\n\r\n    return value;\r\n  }\r\n};\r\nvar _default = Date;\r\nexports.default = _default;\r\nmodule.exports = Date;"]},"metadata":{},"sourceType":"script"}
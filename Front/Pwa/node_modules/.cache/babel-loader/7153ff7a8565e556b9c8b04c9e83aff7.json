{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _regeneratorRuntime = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\n\nvar ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n/**\r\n * Provides information about managed service identity token credentials on a virtual machine provisioned in Azure.\r\n */\n\n\nvar MSIVmTokenCredentials = /*#__PURE__*/function (_msiTokenCredentials_) {\n  _inherits(MSIVmTokenCredentials, _msiTokenCredentials_);\n\n  var _super = _createSuper(MSIVmTokenCredentials);\n\n  function MSIVmTokenCredentials(options) {\n    var _this;\n\n    _classCallCheck(this, MSIVmTokenCredentials);\n\n    if (!options) options = {};\n    _this = _super.call(this, options);\n\n    if (!options.msiEndpoint) {\n      options.msiEndpoint = \"http://169.254.169.254/metadata/identity/oauth2/token\";\n    } else if (typeof options.msiEndpoint !== \"string\") {\n      throw new Error(\"msiEndpoint must be a string.\");\n    }\n\n    var urlBuilder = ms_rest_js_1.URLBuilder.parse(options.msiEndpoint);\n\n    if (!urlBuilder.getScheme()) {\n      options.msiEndpoint = \"http://\".concat(options.msiEndpoint);\n    }\n\n    if (!options.apiVersion) {\n      options.apiVersion = \"2018-02-01\";\n    } else if (typeof options.apiVersion !== \"string\") {\n      throw new Error(\"apiVersion must be a string.\");\n    }\n\n    if (!options.httpMethod) {\n      options.httpMethod = \"GET\";\n    }\n\n    _this.apiVersion = options.apiVersion;\n    _this.msiEndpoint = options.msiEndpoint;\n    _this.httpMethod = options.httpMethod;\n    _this.objectId = options.objectId;\n    _this.clientId = options.clientId;\n    _this.identityId = options.identityId;\n    return _this;\n  }\n  /**\r\n   * Prepares and sends a POST request to a service endpoint hosted on the Azure VM, which responds with the access token.\r\n   * @returns Promise with the tokenResponse (tokenType and accessToken are the two important properties).\r\n   */\n\n\n  _createClass(MSIVmTokenCredentials, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var reqOptions, opRes, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                reqOptions = this.prepareRequestOptions();\n                _context.next = 3;\n                return this._httpClient.sendRequest(reqOptions);\n\n              case 3:\n                opRes = _context.sent;\n                result = this.parseTokenResponse(opRes.bodyAsText);\n\n                if (result.tokenType) {\n                  _context.next = 9;\n                  break;\n                }\n\n                throw new Error(\"Invalid token response, did not find tokenType. Response body is: \".concat(opRes.bodyAsText));\n\n              case 9:\n                if (result.accessToken) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Invalid token response, did not find accessToken. Response body is: \".concat(opRes.bodyAsText));\n\n              case 11:\n                return _context.abrupt(\"return\", result);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"prepareRequestOptions\",\n    value: function prepareRequestOptions() {\n      var reqOptions = {\n        url: this.msiEndpoint,\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n          Metadata: \"true\"\n        },\n        method: this.httpMethod,\n        queryParameters: {\n          \"api-version\": this.apiVersion,\n          resource: this.resource,\n          object_id: this.objectId,\n          client_id: this.clientId,\n          mi_res_id: this.identityId\n        }\n      };\n      var webResource = new ms_rest_js_1.WebResource();\n      return webResource.prepare(reqOptions);\n    }\n  }]);\n\n  return MSIVmTokenCredentials;\n}(msiTokenCredentials_1.MSITokenCredentials);\n\nexports.MSIVmTokenCredentials = MSIVmTokenCredentials;","map":{"version":3,"sources":["../../../lib/credentials/msiVmTokenCredentials.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,qBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAyCA;;AAEG;;;IACU,qB;;;;;AAQX,iCAAY,OAAZ,EAAkC;AAAA;;AAAA;;AAChC,QAAI,CAAC,OAAL,EAAc,OAAO,GAAG,EAAV;AACd,8BAAM,OAAN;;AAEA,QAAI,CAAC,OAAO,CAAC,WAAb,EAA0B;AACxB,MAAA,OAAO,CAAC,WAAR,GAAsB,uDAAtB;AACD,KAFD,MAEO,IAAI,OAAO,OAAO,CAAC,WAAf,KAA+B,QAAnC,EAA6C;AAClD,YAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,QAAM,UAAU,GAAG,YAAA,CAAA,UAAA,CAAW,KAAX,CAAiB,OAAO,CAAC,WAAzB,CAAnB;;AACA,QAAI,CAAC,UAAU,CAAC,SAAX,EAAL,EAA6B;AAC3B,MAAA,OAAO,CAAC,WAAR,oBAAgC,OAAO,CAAC,WAAxC;AACD;;AAED,QAAI,CAAC,OAAO,CAAC,UAAb,EAAyB;AACvB,MAAA,OAAO,CAAC,UAAR,GAAqB,YAArB;AACD,KAFD,MAEO,IAAI,OAAO,OAAO,CAAC,UAAf,KAA8B,QAAlC,EAA4C;AACjD,YAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,QAAI,CAAC,OAAO,CAAC,UAAb,EAAyB;AACvB,MAAA,OAAO,CAAC,UAAR,GAAqB,KAArB;AACD;;AAED,UAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA,UAAK,WAAL,GAAmB,OAAO,CAAC,WAA3B;AACA,UAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA,UAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,UAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,UAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AA9BgC;AA+BjC;AAED;;;AAGG;;;;;WACG,oBAAQ;;;;;;;AACN,gBAAA,U,GAAa,KAAK,qBAAL,E;;AAEL,uBAAM,KAAK,WAAL,CAAiB,WAAjB,CAA6B,UAA7B,CAAN;;;AAAR,gBAAA,K;AACA,gBAAA,M,GAAS,KAAK,kBAAL,CAAwB,KAAK,CAAC,UAA9B,C;;oBACV,MAAM,CAAC,S;;;;;sBACJ,IAAI,KAAJ,6EACiE,KAAK,CAAC,UADvE,E;;;oBAGI,MAAM,CAAC,W;;;;;sBACX,IAAI,KAAJ,+EACmE,KAAK,CAAC,UADzE,E;;;iDAKD,M;;;;;;;;;AACR;;;WAES,iCAAqB;AAC7B,UAAM,UAAU,GAA0B;AACxC,QAAA,GAAG,EAAE,KAAK,WAD8B;AAExC,QAAA,OAAO,EAAE;AACP,0BAAgB,kDADT;AAEP,UAAA,QAAQ,EAAE;AAFH,SAF+B;AAMxC,QAAA,MAAM,EAAE,KAAK,UAN2B;AAOxC,QAAA,eAAe,EAAE;AACf,yBAAe,KAAK,UADL;AAEf,UAAA,QAAQ,EAAE,KAAK,QAFA;AAGf,UAAA,SAAS,EAAE,KAAK,QAHD;AAIf,UAAA,SAAS,EAAE,KAAK,QAJD;AAKf,UAAA,SAAS,EAAE,KAAK;AALD;AAPuB,OAA1C;AAgBA,UAAM,WAAW,GAAG,IAAI,YAAA,CAAA,WAAJ,EAApB;AACA,aAAO,WAAW,CAAC,OAAZ,CAAoB,UAApB,CAAP;AACD;;;;EAlFwC,qBAAA,CAAA,mB;;AAA3C,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\r\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\r\n/**\r\n * Provides information about managed service identity token credentials on a virtual machine provisioned in Azure.\r\n */\r\nclass MSIVmTokenCredentials extends msiTokenCredentials_1.MSITokenCredentials {\r\n    constructor(options) {\r\n        if (!options)\r\n            options = {};\r\n        super(options);\r\n        if (!options.msiEndpoint) {\r\n            options.msiEndpoint = \"http://169.254.169.254/metadata/identity/oauth2/token\";\r\n        }\r\n        else if (typeof options.msiEndpoint !== \"string\") {\r\n            throw new Error(\"msiEndpoint must be a string.\");\r\n        }\r\n        const urlBuilder = ms_rest_js_1.URLBuilder.parse(options.msiEndpoint);\r\n        if (!urlBuilder.getScheme()) {\r\n            options.msiEndpoint = `http://${options.msiEndpoint}`;\r\n        }\r\n        if (!options.apiVersion) {\r\n            options.apiVersion = \"2018-02-01\";\r\n        }\r\n        else if (typeof options.apiVersion !== \"string\") {\r\n            throw new Error(\"apiVersion must be a string.\");\r\n        }\r\n        if (!options.httpMethod) {\r\n            options.httpMethod = \"GET\";\r\n        }\r\n        this.apiVersion = options.apiVersion;\r\n        this.msiEndpoint = options.msiEndpoint;\r\n        this.httpMethod = options.httpMethod;\r\n        this.objectId = options.objectId;\r\n        this.clientId = options.clientId;\r\n        this.identityId = options.identityId;\r\n    }\r\n    /**\r\n     * Prepares and sends a POST request to a service endpoint hosted on the Azure VM, which responds with the access token.\r\n     * @returns Promise with the tokenResponse (tokenType and accessToken are the two important properties).\r\n     */\r\n    getToken() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const reqOptions = this.prepareRequestOptions();\r\n            const opRes = yield this._httpClient.sendRequest(reqOptions);\r\n            const result = this.parseTokenResponse(opRes.bodyAsText);\r\n            if (!result.tokenType) {\r\n                throw new Error(`Invalid token response, did not find tokenType. Response body is: ${opRes.bodyAsText}`);\r\n            }\r\n            else if (!result.accessToken) {\r\n                throw new Error(`Invalid token response, did not find accessToken. Response body is: ${opRes.bodyAsText}`);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    prepareRequestOptions() {\r\n        const reqOptions = {\r\n            url: this.msiEndpoint,\r\n            headers: {\r\n                \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n                Metadata: \"true\"\r\n            },\r\n            method: this.httpMethod,\r\n            queryParameters: {\r\n                \"api-version\": this.apiVersion,\r\n                resource: this.resource,\r\n                object_id: this.objectId,\r\n                client_id: this.clientId,\r\n                mi_res_id: this.identityId\r\n            }\r\n        };\r\n        const webResource = new ms_rest_js_1.WebResource();\r\n        return webResource.prepare(reqOptions);\r\n    }\r\n}\r\nexports.MSIVmTokenCredentials = MSIVmTokenCredentials;\r\n//# sourceMappingURL=msiVmTokenCredentials.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _errors = require(\"./errors\");\n\nvar _types = require(\"./always-encrypted/types\");\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\n\n\nclass Request extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * This event, describing result set columns, will be emitted before row\n   * events are emitted. This event may be emited multiple times when more\n   * than one recordset is produced by the statement.\n   *\n   * An array like object, where the columns can be accessed either by index\n   * or name. Columns with a name that is an integer are not accessible by name,\n   * as it would be interpreted as an array index.\n   */\n\n  /**\n   * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n   */\n\n  /**\n   * The request encountered an error and has not been prepared.\n   */\n\n  /**\n   * A row resulting from execution of the SQL statement.\n   */\n\n  /**\n   * All rows from a result set have been provided (through `row` events).\n   *\n   * This token is used to indicate the completion of a SQL statement.\n   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n   * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\n   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n   *\n   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n   */\n\n  /**\n   * `request.on('doneInProc', function (rowCount, more, rows) { });`\n   *\n   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n   * in a stored procedure have been provided (through `row` events).\n   *\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n   * executed through SQL statements.\\\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n   * See also `Using Parameters`.\n   */\n\n  /**\n   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n   */\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * @private\n   */\n\n\n  emit(event, ...args) {\n    return super.emit(event, ...args);\n  }\n  /**\n   * @param sqlTextOrProcedure\n   *   The SQL statement to be executed\n   *\n   * @param callback\n   *   The callback to execute once the request has been fully completed.\n   */\n\n\n  constructor(sqlTextOrProcedure, callback, options) {\n    super();\n    this.sqlTextOrProcedure = void 0;\n    this.parameters = void 0;\n    this.parametersByName = void 0;\n    this.preparing = void 0;\n    this.canceled = void 0;\n    this.paused = void 0;\n    this.userCallback = void 0;\n    this.handle = void 0;\n    this.error = void 0;\n    this.connection = void 0;\n    this.timeout = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.callback = void 0;\n    this.shouldHonorAE = void 0;\n    this.statementColumnEncryptionSetting = void 0;\n    this.cryptoMetadataLoaded = void 0;\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n    this.statementColumnEncryptionSetting = options && options.statementColumnEncryptionSetting || _types.SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\n    this.cryptoMetadataLoaded = false;\n\n    this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n\n\n  addParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const {\n      output = false,\n      length,\n      precision,\n      scale\n    } = options;\n    const parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n\n\n  addOutputParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    options.output = true;\n    this.addParameter(name, type, value, options);\n  }\n  /**\n   * @private\n   */\n\n\n  makeParamsParameter(parameters) {\n    let paramsParameter = '';\n\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n\n    return paramsParameter;\n  }\n  /**\n   * @private\n   */\n\n\n  validateParameters() {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n\n      try {\n        parameter.value = parameter.type.validate(parameter.value);\n      } catch (error) {\n        throw new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\n      }\n    }\n  }\n  /**\n   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n   * If this request is already in a paused state, calling [[pause]] has no effect.\n   */\n\n\n  pause() {\n    if (this.paused) {\n      return;\n    }\n\n    this.emit('pause');\n    this.paused = true;\n  }\n  /**\n   * Resumes the flow of data from the database.\n   * If this request is not in a paused state, calling [[resume]] has no effect.\n   */\n\n\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n\n    this.paused = false;\n    this.emit('resume');\n  }\n  /**\n   * Cancels a request while waiting for a server response.\n   */\n\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n  /**\n   * Sets a timeout for this request.\n   *\n   * @param timeout\n   *   The number of milliseconds before the request is considered failed,\n   *   or `0` for no timeout. When no timeout is set for the request,\n   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n   */\n\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n\n}\n\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/node_modules/tedious/lib/request.js"],"names":["Object","defineProperty","exports","value","default","_events","require","_errors","_types","Request","EventEmitter","on","event","listener","emit","args","constructor","sqlTextOrProcedure","callback","options","parameters","parametersByName","preparing","canceled","paused","userCallback","handle","error","connection","timeout","rows","rst","rowCount","shouldHonorAE","statementColumnEncryptionSetting","cryptoMetadataLoaded","undefined","SQLServerStatementColumnEncryptionSetting","UseConnectionSetting","err","addParameter","name","type","output","length","precision","scale","parameter","push","addOutputParameter","makeParamsParameter","paramsParameter","i","len","declaration","validateParameters","validate","RequestError","message","pause","resume","cancel","setTimeout","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _errors = require(\"./errors\");\n\nvar _types = require(\"./always-encrypted/types\");\n\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\nclass Request extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * This event, describing result set columns, will be emitted before row\n   * events are emitted. This event may be emited multiple times when more\n   * than one recordset is produced by the statement.\n   *\n   * An array like object, where the columns can be accessed either by index\n   * or name. Columns with a name that is an integer are not accessible by name,\n   * as it would be interpreted as an array index.\n   */\n\n  /**\n   * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n   */\n\n  /**\n   * The request encountered an error and has not been prepared.\n   */\n\n  /**\n   * A row resulting from execution of the SQL statement.\n   */\n\n  /**\n   * All rows from a result set have been provided (through `row` events).\n   *\n   * This token is used to indicate the completion of a SQL statement.\n   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n   * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\n   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n   *\n   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n   */\n\n  /**\n   * `request.on('doneInProc', function (rowCount, more, rows) { });`\n   *\n   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n   * in a stored procedure have been provided (through `row` events).\n   *\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n   * executed through SQL statements.\\\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n   * See also `Using Parameters`.\n   */\n\n  /**\n   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n   */\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * @private\n   */\n\n\n  emit(event, ...args) {\n    return super.emit(event, ...args);\n  }\n  /**\n   * @param sqlTextOrProcedure\n   *   The SQL statement to be executed\n   *\n   * @param callback\n   *   The callback to execute once the request has been fully completed.\n   */\n\n\n  constructor(sqlTextOrProcedure, callback, options) {\n    super();\n    this.sqlTextOrProcedure = void 0;\n    this.parameters = void 0;\n    this.parametersByName = void 0;\n    this.preparing = void 0;\n    this.canceled = void 0;\n    this.paused = void 0;\n    this.userCallback = void 0;\n    this.handle = void 0;\n    this.error = void 0;\n    this.connection = void 0;\n    this.timeout = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.callback = void 0;\n    this.shouldHonorAE = void 0;\n    this.statementColumnEncryptionSetting = void 0;\n    this.cryptoMetadataLoaded = void 0;\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n    this.statementColumnEncryptionSetting = options && options.statementColumnEncryptionSetting || _types.SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\n    this.cryptoMetadataLoaded = false;\n\n    this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n\n\n  addParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const {\n      output = false,\n      length,\n      precision,\n      scale\n    } = options;\n    const parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n\n\n  addOutputParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    options.output = true;\n    this.addParameter(name, type, value, options);\n  }\n  /**\n   * @private\n   */\n\n\n  makeParamsParameter(parameters) {\n    let paramsParameter = '';\n\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n\n    return paramsParameter;\n  }\n  /**\n   * @private\n   */\n\n\n  validateParameters() {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n\n      try {\n        parameter.value = parameter.type.validate(parameter.value);\n      } catch (error) {\n        throw new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\n      }\n    }\n  }\n  /**\n   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n   * If this request is already in a paused state, calling [[pause]] has no effect.\n   */\n\n\n  pause() {\n    if (this.paused) {\n      return;\n    }\n\n    this.emit('pause');\n    this.paused = true;\n  }\n  /**\n   * Resumes the flow of data from the database.\n   * If this request is not in a paused state, calling [[resume]] has no effect.\n   */\n\n\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n\n    this.paused = false;\n    this.emit('resume');\n  }\n  /**\n   * Cancels a request while waiting for a server response.\n   */\n\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n  /**\n   * Sets a timeout for this request.\n   *\n   * @param timeout\n   *   The number of milliseconds before the request is considered failed,\n   *   or `0` for no timeout. When no timeout is set for the request,\n   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n   */\n\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n\n}\n\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;"]},"metadata":{},"sourceType":"script"}
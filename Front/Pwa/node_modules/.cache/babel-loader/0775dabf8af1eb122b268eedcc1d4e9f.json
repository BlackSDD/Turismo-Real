{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _defineProperty = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SCHEMA = exports.SchemaTypes = void 0;\n\nvar connection_string_1 = require(\"./connection-string\");\n\nvar SchemaTypes;\n\n(function (SchemaTypes) {\n  SchemaTypes[SchemaTypes[\"BOOL\"] = 0] = \"BOOL\";\n  SchemaTypes[SchemaTypes[\"STRING\"] = 1] = \"STRING\";\n  SchemaTypes[SchemaTypes[\"NUMBER\"] = 2] = \"NUMBER\";\n})(SchemaTypes = exports.SchemaTypes || (exports.SchemaTypes = {})); // schema for MSSQL connection strings (https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring)\n\n\nexports.SCHEMA = {\n  'Application Name': {\n    type: SchemaTypes.STRING,\n    aliases: ['App'],\n    validator: function validator(val) {\n      return val.length <= 128;\n    }\n  },\n  'ApplicationIntent': {\n    type: SchemaTypes.STRING,\n    allowedValues: ['ReadOnly', 'ReadWrite'],\n    default: 'ReadWrite'\n  },\n  'Asynchronous Processing': {\n    type: SchemaTypes.BOOL,\n    default: false,\n    aliases: ['Async']\n  },\n  'AttachDBFilename': {\n    type: SchemaTypes.STRING,\n    aliases: ['Extended Properties', 'Initial File Name']\n  },\n  'Authentication': {\n    type: SchemaTypes.STRING,\n    allowedValues: ['Active Directory Integrated', 'Active Directory Password', 'Sql Password']\n  },\n  'Column Encryption Setting': {\n    type: SchemaTypes.STRING\n  },\n  'Connection Timeout': {\n    type: SchemaTypes.NUMBER,\n    aliases: ['Connect Timeout', 'Timeout'],\n    default: 15\n  },\n  'Connection Lifetime': {\n    type: SchemaTypes.NUMBER,\n    aliases: ['Load Balance Timeout'],\n    default: 0\n  },\n  'ConnectRetryCount': {\n    type: SchemaTypes.NUMBER,\n    default: 1,\n    validator: function validator(val) {\n      return val > 0 && val <= 255;\n    }\n  },\n  'ConnectRetryInterval': {\n    type: SchemaTypes.NUMBER,\n    default: 10\n  },\n  'Context Connection': {\n    type: SchemaTypes.BOOL,\n    default: false\n  },\n  'Current Language': {\n    aliases: ['Language'],\n    type: SchemaTypes.STRING,\n    validator: function validator(val) {\n      return val.length <= 128;\n    }\n  },\n  'Data Source': {\n    aliases: ['Addr', 'Address', 'Server', 'Network Address'],\n    type: SchemaTypes.STRING\n  },\n  'Encrypt': {\n    type: SchemaTypes.BOOL,\n    default: false\n  },\n  'Enlist': {\n    type: SchemaTypes.BOOL,\n    default: true\n  },\n  'Failover Partner': {\n    type: SchemaTypes.STRING\n  },\n  'Initial Catalog': {\n    type: SchemaTypes.STRING,\n    aliases: ['Database'],\n    validator: function validator(val) {\n      return val.length <= 128;\n    }\n  },\n  'Integrated Security': {\n    type: SchemaTypes.BOOL,\n    aliases: ['Trusted_Connection'],\n    coerce: function coerce(val) {\n      return val === 'sspi' || null;\n    }\n  },\n  'Max Pool Size': {\n    type: SchemaTypes.NUMBER,\n    default: 100,\n    validator: function validator(val) {\n      return val >= 1;\n    }\n  },\n  'Min Pool Size': {\n    type: SchemaTypes.NUMBER,\n    default: 0,\n    validator: function validator(val) {\n      return val >= 0;\n    }\n  },\n  'MultipleActiveResultSets': {\n    type: SchemaTypes.BOOL,\n    default: false\n  },\n  'MultiSubnetFailover': {\n    type: SchemaTypes.BOOL,\n    default: false\n  },\n  'Network Library': {\n    type: SchemaTypes.STRING,\n    aliases: ['Network', 'Net'],\n    allowedValues: ['dbnmpntw', 'dbmsrpcn', 'dbmsadsn', 'dbmsgnet', 'dbmslpcn', 'dbmsspxn', 'dbmssocn', 'Dbmsvinn']\n  },\n  'Packet Size': {\n    type: SchemaTypes.NUMBER,\n    default: 8000,\n    validator: function validator(val) {\n      return val >= 512 && val <= 32768;\n    }\n  },\n  'Password': {\n    type: SchemaTypes.STRING,\n    aliases: ['PWD'],\n    validator: function validator(val) {\n      return val.length <= 128;\n    }\n  },\n  'Persist Security Info': {\n    type: SchemaTypes.BOOL,\n    aliases: ['PersistSecurityInfo'],\n    default: false\n  },\n  'PoolBlockingPeriod': {\n    type: SchemaTypes.NUMBER,\n    default: 0,\n    coerce: function coerce(val) {\n      switch (val.toLowerCase()) {\n        case 'alwaysblock':\n          return 1;\n\n        case 'auto':\n          return 0;\n\n        case 'neverblock':\n          return 2;\n      }\n\n      return null;\n    }\n  },\n  'Pooling': {\n    type: SchemaTypes.BOOL,\n    default: true\n  },\n  'Replication': {\n    type: SchemaTypes.BOOL,\n    default: false\n  },\n  'Transaction Binding': {\n    type: SchemaTypes.STRING,\n    allowedValues: ['Implicit Unbind', 'Explicit Unbind'],\n    default: 'Implicit Unbind'\n  },\n  'TransparentNetworkIPResolution': {\n    type: SchemaTypes.BOOL,\n    default: true\n  },\n  'TrustServerCertificate': {\n    type: SchemaTypes.BOOL,\n    default: false\n  },\n  'Type System Version': {\n    type: SchemaTypes.STRING,\n    allowedValues: ['SQL Server 2012', 'SQL Server 2008', 'SQL Server 2005', 'Latest']\n  },\n  'User ID': {\n    type: SchemaTypes.STRING,\n    aliases: ['UID'],\n    validator: function validator(val) {\n      return val.length <= 128;\n    }\n  },\n  'User Instance': {\n    type: SchemaTypes.BOOL,\n    default: false\n  },\n  'Workstation ID': {\n    type: SchemaTypes.STRING,\n    aliases: ['WSID'],\n    validator: function validator(val) {\n      return val.length <= 128;\n    }\n  }\n};\n\nfunction guessType(value) {\n  if (value.trim() === '') {\n    return SchemaTypes.STRING;\n  }\n\n  if (!Number.isNaN(parseInt(value, 10))) {\n    return SchemaTypes.NUMBER;\n  }\n\n  if (['true', 'false', 'yes', 'no'].includes(value.toLowerCase())) {\n    return SchemaTypes.BOOL;\n  }\n\n  return SchemaTypes.STRING;\n}\n\nfunction coerce(value, type, coercer) {\n  if (coercer) {\n    var coerced = coercer(value);\n\n    if (coerced !== null) {\n      return coerced;\n    }\n  }\n\n  switch (type) {\n    case SchemaTypes.BOOL:\n      if (['true', 'yes', '1'].includes(value.toLowerCase())) {\n        return true;\n      }\n\n      if (['false', 'no', '0'].includes(value.toLowerCase())) {\n        return false;\n      }\n\n      return value;\n\n    case SchemaTypes.NUMBER:\n      return parseInt(value, 10);\n  }\n\n  return value;\n}\n\nfunction validate(value, allowedValues, validator) {\n  var valid = true;\n\n  if (validator) {\n    valid = validator(value);\n  }\n\n  if (valid) {\n    valid = (allowedValues === null || allowedValues === void 0 ? void 0 : allowedValues.includes(value)) || false;\n  }\n\n  return valid;\n}\n\nfunction parseSqlConnectionString(connectionString) {\n  var canonicalProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var allowUnknown = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var strict = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var schema = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : exports.SCHEMA;\n  var flattenedSchema = Object.entries(schema).reduce(function (flattened, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        item = _ref2[1];\n\n    var _a;\n\n    Object.assign(flattened, _defineProperty({}, key.toLowerCase(), item));\n    return ((_a = item.aliases) === null || _a === void 0 ? void 0 : _a.reduce(function (accum, alias) {\n      return Object.assign(accum, _defineProperty({}, alias.toLowerCase(), _objectSpread(_objectSpread({}, item), {}, {\n        canonical: key.toLowerCase()\n      })));\n    }, flattened)) || flattened;\n  }, {});\n  return Object.entries(connection_string_1.default(connectionString)).reduce(function (config, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        prop = _ref4[0],\n        value = _ref4[1];\n\n    if (!Object.prototype.hasOwnProperty.call(flattenedSchema, prop)) {\n      return Object.assign(config, _defineProperty({}, prop, coerce(value, guessType(value))));\n    }\n\n    var coercedValue = coerce(value, flattenedSchema[prop].type, flattenedSchema[prop].coerce);\n\n    if (strict && !validate(coercedValue, flattenedSchema[prop].allowedValues, flattenedSchema[prop].validator)) {\n      coercedValue = flattenedSchema[prop].default;\n    }\n\n    var propName = canonicalProps ? flattenedSchema[prop].canonical || prop : prop;\n    return Object.assign(config, _defineProperty({}, propName, coercedValue));\n  }, {});\n}\n\nexports.default = parseSqlConnectionString;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/@tediousjs/connection-string/lib/parser/sql-connection-string.js"],"names":["Object","defineProperty","exports","value","SCHEMA","SchemaTypes","connection_string_1","require","type","STRING","aliases","validator","val","length","allowedValues","default","BOOL","NUMBER","coerce","toLowerCase","guessType","trim","Number","isNaN","parseInt","includes","coercer","coerced","validate","valid","parseSqlConnectionString","connectionString","canonicalProps","allowUnknown","strict","schema","flattenedSchema","entries","reduce","flattened","key","item","_a","assign","accum","alias","canonical","config","prop","prototype","hasOwnProperty","call","coercedValue","propName"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SCHEMA = exports.SchemaTypes = void 0;\r\nconst connection_string_1 = require(\"./connection-string\");\r\nvar SchemaTypes;\r\n(function (SchemaTypes) {\r\n    SchemaTypes[SchemaTypes[\"BOOL\"] = 0] = \"BOOL\";\r\n    SchemaTypes[SchemaTypes[\"STRING\"] = 1] = \"STRING\";\r\n    SchemaTypes[SchemaTypes[\"NUMBER\"] = 2] = \"NUMBER\";\r\n})(SchemaTypes = exports.SchemaTypes || (exports.SchemaTypes = {}));\r\n// schema for MSSQL connection strings (https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring)\r\nexports.SCHEMA = {\r\n    'Application Name': {\r\n        type: SchemaTypes.STRING,\r\n        aliases: ['App'],\r\n        validator(val) {\r\n            return val.length <= 128;\r\n        },\r\n    },\r\n    'ApplicationIntent': {\r\n        type: SchemaTypes.STRING,\r\n        allowedValues: ['ReadOnly', 'ReadWrite'],\r\n        default: 'ReadWrite',\r\n    },\r\n    'Asynchronous Processing': {\r\n        type: SchemaTypes.BOOL,\r\n        default: false,\r\n        aliases: ['Async'],\r\n    },\r\n    'AttachDBFilename': {\r\n        type: SchemaTypes.STRING,\r\n        aliases: ['Extended Properties', 'Initial File Name'],\r\n    },\r\n    'Authentication': {\r\n        type: SchemaTypes.STRING,\r\n        allowedValues: ['Active Directory Integrated', 'Active Directory Password', 'Sql Password'],\r\n    },\r\n    'Column Encryption Setting': {\r\n        type: SchemaTypes.STRING,\r\n    },\r\n    'Connection Timeout': {\r\n        type: SchemaTypes.NUMBER,\r\n        aliases: ['Connect Timeout', 'Timeout'],\r\n        default: 15,\r\n    },\r\n    'Connection Lifetime': {\r\n        type: SchemaTypes.NUMBER,\r\n        aliases: ['Load Balance Timeout'],\r\n        default: 0,\r\n    },\r\n    'ConnectRetryCount': {\r\n        type: SchemaTypes.NUMBER,\r\n        default: 1,\r\n        validator(val) {\r\n            return val > 0 && val <= 255;\r\n        },\r\n    },\r\n    'ConnectRetryInterval': {\r\n        type: SchemaTypes.NUMBER,\r\n        default: 10,\r\n    },\r\n    'Context Connection': {\r\n        type: SchemaTypes.BOOL,\r\n        default: false,\r\n    },\r\n    'Current Language': {\r\n        aliases: ['Language'],\r\n        type: SchemaTypes.STRING,\r\n        validator(val) {\r\n            return val.length <= 128;\r\n        },\r\n    },\r\n    'Data Source': {\r\n        aliases: ['Addr', 'Address', 'Server', 'Network Address'],\r\n        type: SchemaTypes.STRING,\r\n    },\r\n    'Encrypt': {\r\n        type: SchemaTypes.BOOL,\r\n        default: false,\r\n    },\r\n    'Enlist': {\r\n        type: SchemaTypes.BOOL,\r\n        default: true,\r\n    },\r\n    'Failover Partner': {\r\n        type: SchemaTypes.STRING,\r\n    },\r\n    'Initial Catalog': {\r\n        type: SchemaTypes.STRING,\r\n        aliases: ['Database'],\r\n        validator(val) {\r\n            return val.length <= 128;\r\n        },\r\n    },\r\n    'Integrated Security': {\r\n        type: SchemaTypes.BOOL,\r\n        aliases: ['Trusted_Connection'],\r\n        coerce(val) {\r\n            return val === 'sspi' || null;\r\n        },\r\n    },\r\n    'Max Pool Size': {\r\n        type: SchemaTypes.NUMBER,\r\n        default: 100,\r\n        validator(val) {\r\n            return val >= 1;\r\n        },\r\n    },\r\n    'Min Pool Size': {\r\n        type: SchemaTypes.NUMBER,\r\n        default: 0,\r\n        validator(val) {\r\n            return val >= 0;\r\n        },\r\n    },\r\n    'MultipleActiveResultSets': {\r\n        type: SchemaTypes.BOOL,\r\n        default: false,\r\n    },\r\n    'MultiSubnetFailover': {\r\n        type: SchemaTypes.BOOL,\r\n        default: false,\r\n    },\r\n    'Network Library': {\r\n        type: SchemaTypes.STRING,\r\n        aliases: ['Network', 'Net'],\r\n        allowedValues: ['dbnmpntw', 'dbmsrpcn', 'dbmsadsn', 'dbmsgnet', 'dbmslpcn', 'dbmsspxn', 'dbmssocn', 'Dbmsvinn'],\r\n    },\r\n    'Packet Size': {\r\n        type: SchemaTypes.NUMBER,\r\n        default: 8000,\r\n        validator(val) {\r\n            return val >= 512 && val <= 32768;\r\n        },\r\n    },\r\n    'Password': {\r\n        type: SchemaTypes.STRING,\r\n        aliases: ['PWD'],\r\n        validator(val) {\r\n            return val.length <= 128;\r\n        },\r\n    },\r\n    'Persist Security Info': {\r\n        type: SchemaTypes.BOOL,\r\n        aliases: ['PersistSecurityInfo'],\r\n        default: false,\r\n    },\r\n    'PoolBlockingPeriod': {\r\n        type: SchemaTypes.NUMBER,\r\n        default: 0,\r\n        coerce(val) {\r\n            switch (val.toLowerCase()) {\r\n                case 'alwaysblock':\r\n                    return 1;\r\n                case 'auto':\r\n                    return 0;\r\n                case 'neverblock':\r\n                    return 2;\r\n            }\r\n            return null;\r\n        },\r\n    },\r\n    'Pooling': {\r\n        type: SchemaTypes.BOOL,\r\n        default: true,\r\n    },\r\n    'Replication': {\r\n        type: SchemaTypes.BOOL,\r\n        default: false,\r\n    },\r\n    'Transaction Binding': {\r\n        type: SchemaTypes.STRING,\r\n        allowedValues: ['Implicit Unbind', 'Explicit Unbind'],\r\n        default: 'Implicit Unbind',\r\n    },\r\n    'TransparentNetworkIPResolution': {\r\n        type: SchemaTypes.BOOL,\r\n        default: true,\r\n    },\r\n    'TrustServerCertificate': {\r\n        type: SchemaTypes.BOOL,\r\n        default: false,\r\n    },\r\n    'Type System Version': {\r\n        type: SchemaTypes.STRING,\r\n        allowedValues: ['SQL Server 2012', 'SQL Server 2008', 'SQL Server 2005', 'Latest'],\r\n    },\r\n    'User ID': {\r\n        type: SchemaTypes.STRING,\r\n        aliases: ['UID'],\r\n        validator(val) {\r\n            return val.length <= 128;\r\n        },\r\n    },\r\n    'User Instance': {\r\n        type: SchemaTypes.BOOL,\r\n        default: false,\r\n    },\r\n    'Workstation ID': {\r\n        type: SchemaTypes.STRING,\r\n        aliases: ['WSID'],\r\n        validator(val) {\r\n            return val.length <= 128;\r\n        },\r\n    },\r\n};\r\nfunction guessType(value) {\r\n    if (value.trim() === '') {\r\n        return SchemaTypes.STRING;\r\n    }\r\n    if (!Number.isNaN(parseInt(value, 10))) {\r\n        return SchemaTypes.NUMBER;\r\n    }\r\n    if (['true', 'false', 'yes', 'no'].includes(value.toLowerCase())) {\r\n        return SchemaTypes.BOOL;\r\n    }\r\n    return SchemaTypes.STRING;\r\n}\r\nfunction coerce(value, type, coercer) {\r\n    if (coercer) {\r\n        const coerced = coercer(value);\r\n        if (coerced !== null) {\r\n            return coerced;\r\n        }\r\n    }\r\n    switch (type) {\r\n        case SchemaTypes.BOOL:\r\n            if (['true', 'yes', '1'].includes(value.toLowerCase())) {\r\n                return true;\r\n            }\r\n            if (['false', 'no', '0'].includes(value.toLowerCase())) {\r\n                return false;\r\n            }\r\n            return value;\r\n        case SchemaTypes.NUMBER:\r\n            return parseInt(value, 10);\r\n    }\r\n    return value;\r\n}\r\nfunction validate(value, allowedValues, validator) {\r\n    let valid = true;\r\n    if (validator) {\r\n        valid = validator(value);\r\n    }\r\n    if (valid) {\r\n        valid = (allowedValues === null || allowedValues === void 0 ? void 0 : allowedValues.includes(value)) || false;\r\n    }\r\n    return valid;\r\n}\r\nfunction parseSqlConnectionString(connectionString, canonicalProps = false, allowUnknown = false, strict = false, schema = exports.SCHEMA) {\r\n    const flattenedSchema = Object.entries(schema).reduce((flattened, [key, item]) => {\r\n        var _a;\r\n        Object.assign(flattened, {\r\n            [key.toLowerCase()]: item,\r\n        });\r\n        return ((_a = item.aliases) === null || _a === void 0 ? void 0 : _a.reduce((accum, alias) => {\r\n            return Object.assign(accum, {\r\n                [alias.toLowerCase()]: {\r\n                    ...item,\r\n                    canonical: key.toLowerCase(),\r\n                },\r\n            });\r\n        }, flattened)) || flattened;\r\n    }, {});\r\n    return Object.entries(connection_string_1.default(connectionString)).reduce((config, [prop, value]) => {\r\n        if (!Object.prototype.hasOwnProperty.call(flattenedSchema, prop)) {\r\n            return Object.assign(config, {\r\n                [prop]: coerce(value, guessType(value)),\r\n            });\r\n        }\r\n        let coercedValue = coerce(value, flattenedSchema[prop].type, flattenedSchema[prop].coerce);\r\n        if (strict && !validate(coercedValue, flattenedSchema[prop].allowedValues, flattenedSchema[prop].validator)) {\r\n            coercedValue = flattenedSchema[prop].default;\r\n        }\r\n        const propName = canonicalProps ? flattenedSchema[prop].canonical || prop : prop;\r\n        return Object.assign(config, {\r\n            [propName]: coercedValue,\r\n        });\r\n    }, {});\r\n}\r\nexports.default = parseSqlConnectionString;\r\n"]},"metadata":{},"sourceType":"script"}
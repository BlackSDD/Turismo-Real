{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _get = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _errors = require(\"./errors\");\n\nvar _types = require(\"./always-encrypted/types\");\n/**\r\n * ```js\r\n * const { Request } = require('tedious');\r\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\r\n *   // Request completion callback...\r\n * });\r\n * connection.execSql(request);\r\n * ```\r\n */\n\n\nvar Request = /*#__PURE__*/function (_events$EventEmitter) {\n  _inherits(Request, _events$EventEmitter);\n\n  var _super = _createSuper(Request);\n\n  /**\r\n   * @param sqlTextOrProcedure\r\n   *   The SQL statement to be executed\r\n   *\r\n   * @param callback\r\n   *   The callback to execute once the request has been fully completed.\r\n   */\n  function Request(sqlTextOrProcedure, callback, options) {\n    var _this;\n\n    _classCallCheck(this, Request);\n\n    _this = _super.call(this);\n    _this.sqlTextOrProcedure = void 0;\n    _this.parameters = void 0;\n    _this.parametersByName = void 0;\n    _this.preparing = void 0;\n    _this.canceled = void 0;\n    _this.paused = void 0;\n    _this.userCallback = void 0;\n    _this.handle = void 0;\n    _this.error = void 0;\n    _this.connection = void 0;\n    _this.timeout = void 0;\n    _this.rows = void 0;\n    _this.rst = void 0;\n    _this.rowCount = void 0;\n    _this.callback = void 0;\n    _this.shouldHonorAE = void 0;\n    _this.statementColumnEncryptionSetting = void 0;\n    _this.cryptoMetadataLoaded = void 0;\n    _this.sqlTextOrProcedure = sqlTextOrProcedure;\n    _this.parameters = [];\n    _this.parametersByName = {};\n    _this.preparing = false;\n    _this.handle = undefined;\n    _this.canceled = false;\n    _this.paused = false;\n    _this.error = undefined;\n    _this.connection = undefined;\n    _this.timeout = undefined;\n    _this.userCallback = callback;\n    _this.statementColumnEncryptionSetting = options && options.statementColumnEncryptionSetting || _types.SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\n    _this.cryptoMetadataLoaded = false;\n\n    _this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n\n    return _this;\n  }\n  /**\r\n   * @param name\r\n   *   The parameter name. This should correspond to a parameter in the SQL,\r\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\r\n   *\r\n   * @param type\r\n   *   One of the supported data types.\r\n   *\r\n   * @param value\r\n   *   The value that the parameter is to be given. The Javascript type of the\r\n   *   argument should match that documented for data types.\r\n   *\r\n   * @param options\r\n   *   Additional type options. Optional.\r\n   */\n  // TODO: `type` must be a valid TDS value type\n\n\n  _createClass(Request, [{\n    key: \"on\",\n    value:\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * @private\r\n     */\n\n    /**\r\n     * This event, describing result set columns, will be emitted before row\r\n     * events are emitted. This event may be emited multiple times when more\r\n     * than one recordset is produced by the statement.\r\n     *\r\n     * An array like object, where the columns can be accessed either by index\r\n     * or name. Columns with a name that is an integer are not accessible by name,\r\n     * as it would be interpreted as an array index.\r\n     */\n\n    /**\r\n     * The request has been prepared and can be used in subsequent calls to execute and unprepare.\r\n     */\n\n    /**\r\n     * The request encountered an error and has not been prepared.\r\n     */\n\n    /**\r\n     * A row resulting from execution of the SQL statement.\r\n     */\n\n    /**\r\n     * All rows from a result set have been provided (through `row` events).\r\n     *\r\n     * This token is used to indicate the completion of a SQL statement.\r\n     * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\r\n     * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\r\n     * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\r\n     *\r\n     * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\r\n     * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\r\n     */\n\n    /**\r\n     * `request.on('doneInProc', function (rowCount, more, rows) { });`\r\n     *\r\n     * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\r\n     * in a stored procedure have been provided (through `row` events).\r\n     *\r\n     * This event may also occur when executing multiple calls with the same query using [[execSql]].\r\n     */\n\n    /**\r\n     * Indicates the completion status of a stored procedure. This is also generated for stored procedures\r\n     * executed through SQL statements.\\\r\n     * This event may also occur when executing multiple calls with the same query using [[execSql]].\r\n     */\n\n    /**\r\n     * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\r\n     * See also `Using Parameters`.\r\n     */\n\n    /**\r\n     * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\r\n     */\n    function on(event, listener) {\n      return _get(_getPrototypeOf(Request.prototype), \"on\", this).call(this, event, listener);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(Request.prototype), \"emit\", this)).call.apply(_get2, [this, event].concat(args));\n    }\n  }, {\n    key: \"addParameter\",\n    value: function addParameter(name, type, value, options) {\n      if (options == null) {\n        options = {};\n      }\n\n      var _options = options,\n          _options$output = _options.output,\n          output = _options$output === void 0 ? false : _options$output,\n          length = _options.length,\n          precision = _options.precision,\n          scale = _options.scale;\n      var parameter = {\n        type: type,\n        name: name,\n        value: value,\n        output: output,\n        length: length,\n        precision: precision,\n        scale: scale\n      };\n      this.parameters.push(parameter);\n      this.parametersByName[name] = parameter;\n    }\n    /**\r\n     * @param name\r\n     *   The parameter name. This should correspond to a parameter in the SQL,\r\n     *   or a parameter that a called procedure expects.\r\n     *\r\n     * @param type\r\n     *   One of the supported data types.\r\n     *\r\n     * @param value\r\n     *   The value that the parameter is to be given. The Javascript type of the\r\n     *   argument should match that documented for data types\r\n     *\r\n     * @param options\r\n     *   Additional type options. Optional.\r\n     */\n\n  }, {\n    key: \"addOutputParameter\",\n    value: function addOutputParameter(name, type, value, options) {\n      if (options == null) {\n        options = {};\n      }\n\n      options.output = true;\n      this.addParameter(name, type, value, options);\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"makeParamsParameter\",\n    value: function makeParamsParameter(parameters) {\n      var paramsParameter = '';\n\n      for (var i = 0, len = parameters.length; i < len; i++) {\n        var parameter = parameters[i];\n\n        if (paramsParameter.length > 0) {\n          paramsParameter += ', ';\n        }\n\n        paramsParameter += '@' + parameter.name + ' ';\n        paramsParameter += parameter.type.declaration(parameter);\n\n        if (parameter.output) {\n          paramsParameter += ' OUTPUT';\n        }\n      }\n\n      return paramsParameter;\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"validateParameters\",\n    value: function validateParameters() {\n      for (var i = 0, len = this.parameters.length; i < len; i++) {\n        var parameter = this.parameters[i];\n\n        try {\n          parameter.value = parameter.type.validate(parameter.value);\n        } catch (error) {\n          throw new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\n        }\n      }\n    }\n    /**\r\n     * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\r\n     * If this request is already in a paused state, calling [[pause]] has no effect.\r\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.paused) {\n        return;\n      }\n\n      this.emit('pause');\n      this.paused = true;\n    }\n    /**\r\n     * Resumes the flow of data from the database.\r\n     * If this request is not in a paused state, calling [[resume]] has no effect.\r\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.paused) {\n        return;\n      }\n\n      this.paused = false;\n      this.emit('resume');\n    }\n    /**\r\n     * Cancels a request while waiting for a server response.\r\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.canceled) {\n        return;\n      }\n\n      this.canceled = true;\n      this.emit('cancel');\n    }\n    /**\r\n     * Sets a timeout for this request.\r\n     *\r\n     * @param timeout\r\n     *   The number of milliseconds before the request is considered failed,\r\n     *   or `0` for no timeout. When no timeout is set for the request,\r\n     *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\r\n     */\n\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeout) {\n      this.timeout = timeout;\n    }\n  }]);\n\n  return Request;\n}(_events.EventEmitter);\n\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/request.js"],"names":["Object","defineProperty","exports","value","default","_events","require","_errors","_types","Request","sqlTextOrProcedure","callback","options","parameters","parametersByName","preparing","canceled","paused","userCallback","handle","error","connection","timeout","rows","rst","rowCount","shouldHonorAE","statementColumnEncryptionSetting","cryptoMetadataLoaded","undefined","SQLServerStatementColumnEncryptionSetting","UseConnectionSetting","err","emit","event","listener","args","name","type","output","length","precision","scale","parameter","push","addParameter","paramsParameter","i","len","declaration","validate","RequestError","message","EventEmitter","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _events = require(\"events\");\r\n\r\nvar _errors = require(\"./errors\");\r\n\r\nvar _types = require(\"./always-encrypted/types\");\r\n\r\n/**\r\n * ```js\r\n * const { Request } = require('tedious');\r\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\r\n *   // Request completion callback...\r\n * });\r\n * connection.execSql(request);\r\n * ```\r\n */\r\nclass Request extends _events.EventEmitter {\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * @private\r\n   */\r\n\r\n  /**\r\n   * This event, describing result set columns, will be emitted before row\r\n   * events are emitted. This event may be emited multiple times when more\r\n   * than one recordset is produced by the statement.\r\n   *\r\n   * An array like object, where the columns can be accessed either by index\r\n   * or name. Columns with a name that is an integer are not accessible by name,\r\n   * as it would be interpreted as an array index.\r\n   */\r\n\r\n  /**\r\n   * The request has been prepared and can be used in subsequent calls to execute and unprepare.\r\n   */\r\n\r\n  /**\r\n   * The request encountered an error and has not been prepared.\r\n   */\r\n\r\n  /**\r\n   * A row resulting from execution of the SQL statement.\r\n   */\r\n\r\n  /**\r\n   * All rows from a result set have been provided (through `row` events).\r\n   *\r\n   * This token is used to indicate the completion of a SQL statement.\r\n   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\r\n   * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\r\n   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\r\n   *\r\n   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\r\n   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\r\n   */\r\n\r\n  /**\r\n   * `request.on('doneInProc', function (rowCount, more, rows) { });`\r\n   *\r\n   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\r\n   * in a stored procedure have been provided (through `row` events).\r\n   *\r\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\r\n   */\r\n\r\n  /**\r\n   * Indicates the completion status of a stored procedure. This is also generated for stored procedures\r\n   * executed through SQL statements.\\\r\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\r\n   */\r\n\r\n  /**\r\n   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\r\n   * See also `Using Parameters`.\r\n   */\r\n\r\n  /**\r\n   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\r\n   */\r\n  on(event, listener) {\r\n    return super.on(event, listener);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  emit(event, ...args) {\r\n    return super.emit(event, ...args);\r\n  }\r\n  /**\r\n   * @param sqlTextOrProcedure\r\n   *   The SQL statement to be executed\r\n   *\r\n   * @param callback\r\n   *   The callback to execute once the request has been fully completed.\r\n   */\r\n\r\n\r\n  constructor(sqlTextOrProcedure, callback, options) {\r\n    super();\r\n    this.sqlTextOrProcedure = void 0;\r\n    this.parameters = void 0;\r\n    this.parametersByName = void 0;\r\n    this.preparing = void 0;\r\n    this.canceled = void 0;\r\n    this.paused = void 0;\r\n    this.userCallback = void 0;\r\n    this.handle = void 0;\r\n    this.error = void 0;\r\n    this.connection = void 0;\r\n    this.timeout = void 0;\r\n    this.rows = void 0;\r\n    this.rst = void 0;\r\n    this.rowCount = void 0;\r\n    this.callback = void 0;\r\n    this.shouldHonorAE = void 0;\r\n    this.statementColumnEncryptionSetting = void 0;\r\n    this.cryptoMetadataLoaded = void 0;\r\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\r\n    this.parameters = [];\r\n    this.parametersByName = {};\r\n    this.preparing = false;\r\n    this.handle = undefined;\r\n    this.canceled = false;\r\n    this.paused = false;\r\n    this.error = undefined;\r\n    this.connection = undefined;\r\n    this.timeout = undefined;\r\n    this.userCallback = callback;\r\n    this.statementColumnEncryptionSetting = options && options.statementColumnEncryptionSetting || _types.SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\r\n    this.cryptoMetadataLoaded = false;\r\n\r\n    this.callback = function (err, rowCount, rows) {\r\n      if (this.preparing) {\r\n        this.preparing = false;\r\n\r\n        if (err) {\r\n          this.emit('error', err);\r\n        } else {\r\n          this.emit('prepared');\r\n        }\r\n      } else {\r\n        this.userCallback(err, rowCount, rows);\r\n        this.emit('requestCompleted');\r\n      }\r\n    };\r\n  }\r\n  /**\r\n   * @param name\r\n   *   The parameter name. This should correspond to a parameter in the SQL,\r\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\r\n   *\r\n   * @param type\r\n   *   One of the supported data types.\r\n   *\r\n   * @param value\r\n   *   The value that the parameter is to be given. The Javascript type of the\r\n   *   argument should match that documented for data types.\r\n   *\r\n   * @param options\r\n   *   Additional type options. Optional.\r\n   */\r\n  // TODO: `type` must be a valid TDS value type\r\n\r\n\r\n  addParameter(name, type, value, options) {\r\n    if (options == null) {\r\n      options = {};\r\n    }\r\n\r\n    const {\r\n      output = false,\r\n      length,\r\n      precision,\r\n      scale\r\n    } = options;\r\n    const parameter = {\r\n      type: type,\r\n      name: name,\r\n      value: value,\r\n      output: output,\r\n      length: length,\r\n      precision: precision,\r\n      scale: scale\r\n    };\r\n    this.parameters.push(parameter);\r\n    this.parametersByName[name] = parameter;\r\n  }\r\n  /**\r\n   * @param name\r\n   *   The parameter name. This should correspond to a parameter in the SQL,\r\n   *   or a parameter that a called procedure expects.\r\n   *\r\n   * @param type\r\n   *   One of the supported data types.\r\n   *\r\n   * @param value\r\n   *   The value that the parameter is to be given. The Javascript type of the\r\n   *   argument should match that documented for data types\r\n   *\r\n   * @param options\r\n   *   Additional type options. Optional.\r\n   */\r\n\r\n\r\n  addOutputParameter(name, type, value, options) {\r\n    if (options == null) {\r\n      options = {};\r\n    }\r\n\r\n    options.output = true;\r\n    this.addParameter(name, type, value, options);\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  makeParamsParameter(parameters) {\r\n    let paramsParameter = '';\r\n\r\n    for (let i = 0, len = parameters.length; i < len; i++) {\r\n      const parameter = parameters[i];\r\n\r\n      if (paramsParameter.length > 0) {\r\n        paramsParameter += ', ';\r\n      }\r\n\r\n      paramsParameter += '@' + parameter.name + ' ';\r\n      paramsParameter += parameter.type.declaration(parameter);\r\n\r\n      if (parameter.output) {\r\n        paramsParameter += ' OUTPUT';\r\n      }\r\n    }\r\n\r\n    return paramsParameter;\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  validateParameters() {\r\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\r\n      const parameter = this.parameters[i];\r\n\r\n      try {\r\n        parameter.value = parameter.type.validate(parameter.value);\r\n      } catch (error) {\r\n        throw new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\r\n   * If this request is already in a paused state, calling [[pause]] has no effect.\r\n   */\r\n\r\n\r\n  pause() {\r\n    if (this.paused) {\r\n      return;\r\n    }\r\n\r\n    this.emit('pause');\r\n    this.paused = true;\r\n  }\r\n  /**\r\n   * Resumes the flow of data from the database.\r\n   * If this request is not in a paused state, calling [[resume]] has no effect.\r\n   */\r\n\r\n\r\n  resume() {\r\n    if (!this.paused) {\r\n      return;\r\n    }\r\n\r\n    this.paused = false;\r\n    this.emit('resume');\r\n  }\r\n  /**\r\n   * Cancels a request while waiting for a server response.\r\n   */\r\n\r\n\r\n  cancel() {\r\n    if (this.canceled) {\r\n      return;\r\n    }\r\n\r\n    this.canceled = true;\r\n    this.emit('cancel');\r\n  }\r\n  /**\r\n   * Sets a timeout for this request.\r\n   *\r\n   * @param timeout\r\n   *   The number of milliseconds before the request is considered failed,\r\n   *   or `0` for no timeout. When no timeout is set for the request,\r\n   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\r\n   */\r\n\r\n\r\n  setTimeout(timeout) {\r\n    this.timeout = timeout;\r\n  }\r\n\r\n}\r\n\r\nvar _default = Request;\r\nexports.default = _default;\r\nmodule.exports = Request;"]},"metadata":{},"sourceType":"script"}
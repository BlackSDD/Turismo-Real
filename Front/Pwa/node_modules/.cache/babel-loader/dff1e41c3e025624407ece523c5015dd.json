{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n\nconst login_1 = require(\"../login\");\n/**\r\n * Describes the credentials by retrieving token via Azure CLI.\r\n */\n\n\nclass AzureCliCredentials {\n  constructor(subscriptionInfo, tokenInfo, // tslint:disable-next-line: no-inferrable-types\n  resource = \"https://management.azure.com\") {\n    /**\r\n     * Azure resource endpoints.\r\n     * - Defaults to Azure Resource Manager from environment: AzureCloud. \"https://management.azure.com\"\r\n     * - For Azure KeyVault: \"https://vault.azure.net\"\r\n     * - For Azure Batch: \"https://batch.core.windows.net\"\r\n     * - For Azure Active Directory Graph: \"https://graph.windows.net\"\r\n     *\r\n     * To get the resource for other clouds:\r\n     * - `az cloud list`\r\n     */\n    // tslint:disable-next-line: no-inferrable-types\n    this.resource = \"https://management.azure.com\";\n    /**\r\n     * The number of seconds within which it is good to renew the token.\r\n     *  A constant set to 270 seconds (4.5 minutes).\r\n     */\n\n    this._tokenRenewalMarginInSeconds = 270;\n    this.subscriptionInfo = subscriptionInfo;\n    this.tokenInfo = tokenInfo;\n    this.resource = resource;\n  }\n  /**\r\n   * Tries to get the new token from Azure CLI, if the token has expired or the subscription has\r\n   * changed else uses the cached accessToken.\r\n   * @returns The tokenResponse (tokenType and accessToken are the two important properties).\r\n   */\n\n\n  getToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._hasTokenExpired() || this._hasSubscriptionChanged() || this._hasResourceChanged()) {\n        try {\n          // refresh the access token\n          this.tokenInfo = yield AzureCliCredentials.getAccessToken({\n            subscriptionIdOrName: this.subscriptionInfo.id,\n            resource: this.resource\n          });\n        } catch (err) {\n          throw new Error(`An error occurred while refreshing the new access ` + `token:${err.stderr ? err.stderr : err.message}`);\n        }\n      }\n\n      const result = {\n        accessToken: this.tokenInfo.accessToken,\n        tokenType: this.tokenInfo.tokenType,\n        expiresOn: this.tokenInfo.expiresOn,\n        tenantId: this.tokenInfo.tenant\n      };\n      return result;\n    });\n  }\n  /**\r\n   * Signs a request with the Authentication header.\r\n   * @param The request to be signed.\r\n   */\n\n\n  signRequest(webResource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tokenResponse = yield this.getToken();\n      webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, `${tokenResponse.tokenType} ${tokenResponse.accessToken}`);\n      return webResource;\n    });\n  }\n\n  _hasTokenExpired() {\n    let result = true;\n    const now = Math.floor(Date.now() / 1000);\n\n    if (this.tokenInfo.expiresOn && this.tokenInfo.expiresOn instanceof Date && Math.floor(this.tokenInfo.expiresOn.getTime() / 1000) - now > this._tokenRenewalMarginInSeconds) {\n      result = false;\n    }\n\n    return result;\n  }\n\n  _hasSubscriptionChanged() {\n    return this.subscriptionInfo.id !== this.tokenInfo.subscription;\n  }\n\n  _parseToken() {\n    try {\n      const base64Url = this.tokenInfo.accessToken.split(\".\")[1];\n      const base64 = decodeURIComponent(Buffer.from(base64Url, \"base64\").toString(\"binary\").split(\"\").map(c => {\n        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(\"\"));\n      return JSON.parse(base64);\n    } catch (err) {\n      const msg = `An error occurred while parsing the access token: ${err.stack}`;\n      throw new Error(msg);\n    }\n  }\n\n  _isAzureResourceManagerEndpoint(newResource, currentResource) {\n    if (newResource.endsWith(\"/\")) newResource = newResource.slice(0, -1);\n    if (currentResource.endsWith(\"/\")) currentResource = currentResource.slice(0, -1);\n    return newResource === \"https://management.core.windows.net\" && currentResource === \"https://management.azure.com\" || newResource === \"https://management.azure.com\" && currentResource === \"https://management.core.windows.net\";\n  }\n\n  _hasResourceChanged() {\n    const parsedToken = this._parseToken(); // normalize the resource string, since it is possible to\n    // provide a resource without a trailing slash\n\n\n    const currentResource = parsedToken.aud && parsedToken.aud.endsWith(\"/\") ? parsedToken.aud.slice(0, -1) : parsedToken.aud;\n    const newResource = this.resource.endsWith(\"/\") ? this.resource.slice(0, -1) : this.resource;\n    const result = this._isAzureResourceManagerEndpoint(newResource, currentResource) ? false : currentResource !== newResource;\n    return result;\n  }\n  /**\r\n   * Gets the access token for the default or specified subscription.\r\n   * @param options Optional parameters that can be provided to get the access token.\r\n   */\n\n\n  static getAccessToken(options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const cmdArguments = [\"account\", \"get-access-token\"];\n\n        if (options.subscriptionIdOrName) {\n          cmdArguments.push(\"-s\");\n          cmdArguments.push(options.subscriptionIdOrName);\n        }\n\n        if (options.resource) {\n          cmdArguments.push(\"--resource\");\n          cmdArguments.push(options.resource);\n        }\n\n        const result = yield login_1.execAz(cmdArguments);\n        result.expiresOn = new Date(result.expiresOn);\n        return result;\n      } catch (err) {\n        const message = `An error occurred while getting credentials from ` + `Azure CLI: ${err.stack}`;\n        throw new Error(message);\n      }\n    });\n  }\n  /**\r\n   * Gets the subscription from Azure CLI.\r\n   * @param subscriptionIdOrName - The name or id of the subscription for which the information is\r\n   * required.\r\n   */\n\n\n  static getSubscription(subscriptionIdOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (subscriptionIdOrName && (typeof subscriptionIdOrName !== \"string\" || !subscriptionIdOrName.length)) {\n        throw new Error(\"'subscriptionIdOrName' must be a non-empty string.\");\n      }\n\n      try {\n        const cmdArguments = [\"account\", \"show\"];\n\n        if (subscriptionIdOrName) {\n          cmdArguments.push(\"-s\");\n          cmdArguments.push(subscriptionIdOrName);\n        }\n\n        const result = yield login_1.execAz(cmdArguments);\n        return result;\n      } catch (err) {\n        const message = `An error occurred while getting information about the current subscription from ` + `Azure CLI: ${err.stack}`;\n        throw new Error(message);\n      }\n    });\n  }\n  /**\r\n   * Sets the specified subscription as the default subscription for Azure CLI.\r\n   * @param subscriptionIdOrName The name or id of the subsciption that needs to be set as the\r\n   * default subscription.\r\n   */\n\n\n  static setDefaultSubscription(subscriptionIdOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield login_1.execAz([\"account\", \"set\", \"-s\", subscriptionIdOrName]);\n      } catch (err) {\n        const message = `An error occurred while setting the current subscription from ` + `Azure CLI: ${err.stack}`;\n        throw new Error(message);\n      }\n    });\n  }\n  /**\r\n   * Returns a list of all the subscriptions from Azure CLI.\r\n   * @param options Optional parameters that can be provided while listing all the subcriptions.\r\n   */\n\n\n  static listAllSubscriptions(options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let subscriptionList = [];\n\n      try {\n        const cmdArguments = [\"account\", \"list\"];\n\n        if (options.all) {\n          cmdArguments.push(\" --all\");\n        }\n\n        if (options.refresh) {\n          cmdArguments.push(\"--refresh\");\n        }\n\n        subscriptionList = yield login_1.execAz(cmdArguments);\n\n        if (subscriptionList && subscriptionList.length) {\n          for (const sub of subscriptionList) {\n            if (sub.cloudName) {\n              sub.environmentName = sub.cloudName;\n              delete sub.cloudName;\n            }\n          }\n        }\n\n        return subscriptionList;\n      } catch (err) {\n        const message = `An error occurred while getting a list of all the subscription from ` + `Azure CLI: ${err.stack}`;\n        throw new Error(message);\n      }\n    });\n  }\n  /**\r\n   * Provides credentials that can be used by the JS SDK to interact with Azure via azure cli.\r\n   * **Pre-requisite**\r\n   * - **install azure-cli** . For more information see\r\n   * {@link https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest Install Azure CLI}\r\n   * - **login via `az login`**\r\n   * @param options - Optional parameters that can be provided while creating AzureCliCredentials.\r\n   */\n\n\n  static create(options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const [subscriptinInfo, accessToken] = yield Promise.all([AzureCliCredentials.getSubscription(options.subscriptionIdOrName), AzureCliCredentials.getAccessToken(options)]);\n      return new AzureCliCredentials(subscriptinInfo, accessToken, options.resource);\n    });\n  }\n\n}\n\nexports.AzureCliCredentials = AzureCliCredentials;","map":{"version":3,"sources":["../../../lib/credentials/azureCliCredentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License. See License.txt in the project root for license information.\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\r\nconst login_1 = require(\"../login\");\r\n/**\r\n * Describes the credentials by retrieving token via Azure CLI.\r\n */\r\nclass AzureCliCredentials {\r\n    constructor(subscriptionInfo, tokenInfo, \r\n    // tslint:disable-next-line: no-inferrable-types\r\n    resource = \"https://management.azure.com\") {\r\n        /**\r\n         * Azure resource endpoints.\r\n         * - Defaults to Azure Resource Manager from environment: AzureCloud. \"https://management.azure.com\"\r\n         * - For Azure KeyVault: \"https://vault.azure.net\"\r\n         * - For Azure Batch: \"https://batch.core.windows.net\"\r\n         * - For Azure Active Directory Graph: \"https://graph.windows.net\"\r\n         *\r\n         * To get the resource for other clouds:\r\n         * - `az cloud list`\r\n         */\r\n        // tslint:disable-next-line: no-inferrable-types\r\n        this.resource = \"https://management.azure.com\";\r\n        /**\r\n         * The number of seconds within which it is good to renew the token.\r\n         *  A constant set to 270 seconds (4.5 minutes).\r\n         */\r\n        this._tokenRenewalMarginInSeconds = 270;\r\n        this.subscriptionInfo = subscriptionInfo;\r\n        this.tokenInfo = tokenInfo;\r\n        this.resource = resource;\r\n    }\r\n    /**\r\n     * Tries to get the new token from Azure CLI, if the token has expired or the subscription has\r\n     * changed else uses the cached accessToken.\r\n     * @returns The tokenResponse (tokenType and accessToken are the two important properties).\r\n     */\r\n    getToken() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this._hasTokenExpired() || this._hasSubscriptionChanged() || this._hasResourceChanged()) {\r\n                try {\r\n                    // refresh the access token\r\n                    this.tokenInfo = yield AzureCliCredentials.getAccessToken({\r\n                        subscriptionIdOrName: this.subscriptionInfo.id,\r\n                        resource: this.resource\r\n                    });\r\n                }\r\n                catch (err) {\r\n                    throw new Error(`An error occurred while refreshing the new access ` +\r\n                        `token:${err.stderr ? err.stderr : err.message}`);\r\n                }\r\n            }\r\n            const result = {\r\n                accessToken: this.tokenInfo.accessToken,\r\n                tokenType: this.tokenInfo.tokenType,\r\n                expiresOn: this.tokenInfo.expiresOn,\r\n                tenantId: this.tokenInfo.tenant\r\n            };\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Signs a request with the Authentication header.\r\n     * @param The request to be signed.\r\n     */\r\n    signRequest(webResource) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const tokenResponse = yield this.getToken();\r\n            webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, `${tokenResponse.tokenType} ${tokenResponse.accessToken}`);\r\n            return webResource;\r\n        });\r\n    }\r\n    _hasTokenExpired() {\r\n        let result = true;\r\n        const now = Math.floor(Date.now() / 1000);\r\n        if (this.tokenInfo.expiresOn &&\r\n            this.tokenInfo.expiresOn instanceof Date &&\r\n            Math.floor(this.tokenInfo.expiresOn.getTime() / 1000) - now >\r\n                this._tokenRenewalMarginInSeconds) {\r\n            result = false;\r\n        }\r\n        return result;\r\n    }\r\n    _hasSubscriptionChanged() {\r\n        return this.subscriptionInfo.id !== this.tokenInfo.subscription;\r\n    }\r\n    _parseToken() {\r\n        try {\r\n            const base64Url = this.tokenInfo.accessToken.split(\".\")[1];\r\n            const base64 = decodeURIComponent(Buffer.from(base64Url, \"base64\")\r\n                .toString(\"binary\")\r\n                .split(\"\")\r\n                .map((c) => {\r\n                return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n            })\r\n                .join(\"\"));\r\n            return JSON.parse(base64);\r\n        }\r\n        catch (err) {\r\n            const msg = `An error occurred while parsing the access token: ${err.stack}`;\r\n            throw new Error(msg);\r\n        }\r\n    }\r\n    _isAzureResourceManagerEndpoint(newResource, currentResource) {\r\n        if (newResource.endsWith(\"/\"))\r\n            newResource = newResource.slice(0, -1);\r\n        if (currentResource.endsWith(\"/\"))\r\n            currentResource = currentResource.slice(0, -1);\r\n        return ((newResource === \"https://management.core.windows.net\" &&\r\n            currentResource === \"https://management.azure.com\") ||\r\n            (newResource === \"https://management.azure.com\" &&\r\n                currentResource === \"https://management.core.windows.net\"));\r\n    }\r\n    _hasResourceChanged() {\r\n        const parsedToken = this._parseToken();\r\n        // normalize the resource string, since it is possible to\r\n        // provide a resource without a trailing slash\r\n        const currentResource = parsedToken.aud && parsedToken.aud.endsWith(\"/\")\r\n            ? parsedToken.aud.slice(0, -1)\r\n            : parsedToken.aud;\r\n        const newResource = this.resource.endsWith(\"/\") ? this.resource.slice(0, -1) : this.resource;\r\n        const result = this._isAzureResourceManagerEndpoint(newResource, currentResource)\r\n            ? false\r\n            : currentResource !== newResource;\r\n        return result;\r\n    }\r\n    /**\r\n     * Gets the access token for the default or specified subscription.\r\n     * @param options Optional parameters that can be provided to get the access token.\r\n     */\r\n    static getAccessToken(options = {}) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const cmdArguments = [\"account\", \"get-access-token\"];\r\n                if (options.subscriptionIdOrName) {\r\n                    cmdArguments.push(\"-s\");\r\n                    cmdArguments.push(options.subscriptionIdOrName);\r\n                }\r\n                if (options.resource) {\r\n                    cmdArguments.push(\"--resource\");\r\n                    cmdArguments.push(options.resource);\r\n                }\r\n                const result = yield login_1.execAz(cmdArguments);\r\n                result.expiresOn = new Date(result.expiresOn);\r\n                return result;\r\n            }\r\n            catch (err) {\r\n                const message = `An error occurred while getting credentials from ` + `Azure CLI: ${err.stack}`;\r\n                throw new Error(message);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the subscription from Azure CLI.\r\n     * @param subscriptionIdOrName - The name or id of the subscription for which the information is\r\n     * required.\r\n     */\r\n    static getSubscription(subscriptionIdOrName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (subscriptionIdOrName &&\r\n                (typeof subscriptionIdOrName !== \"string\" || !subscriptionIdOrName.length)) {\r\n                throw new Error(\"'subscriptionIdOrName' must be a non-empty string.\");\r\n            }\r\n            try {\r\n                const cmdArguments = [\"account\", \"show\"];\r\n                if (subscriptionIdOrName) {\r\n                    cmdArguments.push(\"-s\");\r\n                    cmdArguments.push(subscriptionIdOrName);\r\n                }\r\n                const result = yield login_1.execAz(cmdArguments);\r\n                return result;\r\n            }\r\n            catch (err) {\r\n                const message = `An error occurred while getting information about the current subscription from ` +\r\n                    `Azure CLI: ${err.stack}`;\r\n                throw new Error(message);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the specified subscription as the default subscription for Azure CLI.\r\n     * @param subscriptionIdOrName The name or id of the subsciption that needs to be set as the\r\n     * default subscription.\r\n     */\r\n    static setDefaultSubscription(subscriptionIdOrName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield login_1.execAz([\"account\", \"set\", \"-s\", subscriptionIdOrName]);\r\n            }\r\n            catch (err) {\r\n                const message = `An error occurred while setting the current subscription from ` +\r\n                    `Azure CLI: ${err.stack}`;\r\n                throw new Error(message);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all the subscriptions from Azure CLI.\r\n     * @param options Optional parameters that can be provided while listing all the subcriptions.\r\n     */\r\n    static listAllSubscriptions(options = {}) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let subscriptionList = [];\r\n            try {\r\n                const cmdArguments = [\"account\", \"list\"];\r\n                if (options.all) {\r\n                    cmdArguments.push(\" --all\");\r\n                }\r\n                if (options.refresh) {\r\n                    cmdArguments.push(\"--refresh\");\r\n                }\r\n                subscriptionList = yield login_1.execAz(cmdArguments);\r\n                if (subscriptionList && subscriptionList.length) {\r\n                    for (const sub of subscriptionList) {\r\n                        if (sub.cloudName) {\r\n                            sub.environmentName = sub.cloudName;\r\n                            delete sub.cloudName;\r\n                        }\r\n                    }\r\n                }\r\n                return subscriptionList;\r\n            }\r\n            catch (err) {\r\n                const message = `An error occurred while getting a list of all the subscription from ` +\r\n                    `Azure CLI: ${err.stack}`;\r\n                throw new Error(message);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Provides credentials that can be used by the JS SDK to interact with Azure via azure cli.\r\n     * **Pre-requisite**\r\n     * - **install azure-cli** . For more information see\r\n     * {@link https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest Install Azure CLI}\r\n     * - **login via `az login`**\r\n     * @param options - Optional parameters that can be provided while creating AzureCliCredentials.\r\n     */\r\n    static create(options = {}) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const [subscriptinInfo, accessToken] = yield Promise.all([\r\n                AzureCliCredentials.getSubscription(options.subscriptionIdOrName),\r\n                AzureCliCredentials.getAccessToken(options)\r\n            ]);\r\n            return new AzureCliCredentials(subscriptinInfo, accessToken, options.resource);\r\n        });\r\n    }\r\n}\r\nexports.AzureCliCredentials = AzureCliCredentials;\r\n//# sourceMappingURL=azureCliCredentials.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst EPOCH_DATE = new Date(1900, 0, 1);\nconst UTC_EPOCH_DATE = new Date(Date.UTC(1900, 0, 1));\nconst DATA_LENGTH = Buffer.from([0x04]);\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst SmallDateTime = {\n  id: 0x3A,\n  type: 'DATETIM4',\n  name: 'SmallDateTime',\n  declaration: function () {\n    return 'smalldatetime';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([_datetimen.default.id, 0x04]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = Buffer.alloc(4);\n    let days, dstDiff, minutes;\n\n    if (options.useUTC) {\n      days = Math.floor((parameter.value.getTime() - UTC_EPOCH_DATE.getTime()) / (1000 * 60 * 60 * 24));\n      minutes = parameter.value.getUTCHours() * 60 + parameter.value.getUTCMinutes();\n    } else {\n      dstDiff = -(parameter.value.getTimezoneOffset() - EPOCH_DATE.getTimezoneOffset()) * 60 * 1000;\n      days = Math.floor((parameter.value.getTime() - EPOCH_DATE.getTime() + dstDiff) / (1000 * 60 * 60 * 24));\n      minutes = parameter.value.getHours() * 60 + parameter.value.getMinutes();\n    }\n\n    buffer.writeUInt16LE(days, 0);\n    buffer.writeUInt16LE(minutes, 2);\n    yield buffer;\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = SmallDateTime;\nexports.default = _default;\nmodule.exports = SmallDateTime;","map":{"version":3,"sources":["B:/Duoc/Portafolio_de_titulo/Git/Turismo-Real/Front/Pwa/node_modules/mssql/node_modules/tedious/lib/data-types/smalldatetime.js"],"names":["Object","defineProperty","exports","value","default","_datetimen","_interopRequireDefault","require","obj","__esModule","EPOCH_DATE","Date","UTC_EPOCH_DATE","UTC","DATA_LENGTH","Buffer","from","NULL_LENGTH","SmallDateTime","id","type","name","declaration","generateTypeInfo","generateParameterLength","parameter","options","generateParameterData","buffer","alloc","days","dstDiff","minutes","useUTC","Math","floor","getTime","getUTCHours","getUTCMinutes","getTimezoneOffset","getHours","getMinutes","writeUInt16LE","validate","parse","isNaN","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst EPOCH_DATE = new Date(1900, 0, 1);\r\nconst UTC_EPOCH_DATE = new Date(Date.UTC(1900, 0, 1));\r\nconst DATA_LENGTH = Buffer.from([0x04]);\r\nconst NULL_LENGTH = Buffer.from([0x00]);\r\nconst SmallDateTime = {\r\n  id: 0x3A,\r\n  type: 'DATETIM4',\r\n  name: 'SmallDateTime',\r\n  declaration: function () {\r\n    return 'smalldatetime';\r\n  },\r\n\r\n  generateTypeInfo() {\r\n    return Buffer.from([_datetimen.default.id, 0x04]);\r\n  },\r\n\r\n  generateParameterLength(parameter, options) {\r\n    if (parameter.value == null) {\r\n      return NULL_LENGTH;\r\n    }\r\n\r\n    return DATA_LENGTH;\r\n  },\r\n\r\n  generateParameterData: function* (parameter, options) {\r\n    if (parameter.value == null) {\r\n      return;\r\n    }\r\n\r\n    const buffer = Buffer.alloc(4);\r\n    let days, dstDiff, minutes;\r\n\r\n    if (options.useUTC) {\r\n      days = Math.floor((parameter.value.getTime() - UTC_EPOCH_DATE.getTime()) / (1000 * 60 * 60 * 24));\r\n      minutes = parameter.value.getUTCHours() * 60 + parameter.value.getUTCMinutes();\r\n    } else {\r\n      dstDiff = -(parameter.value.getTimezoneOffset() - EPOCH_DATE.getTimezoneOffset()) * 60 * 1000;\r\n      days = Math.floor((parameter.value.getTime() - EPOCH_DATE.getTime() + dstDiff) / (1000 * 60 * 60 * 24));\r\n      minutes = parameter.value.getHours() * 60 + parameter.value.getMinutes();\r\n    }\r\n\r\n    buffer.writeUInt16LE(days, 0);\r\n    buffer.writeUInt16LE(minutes, 2);\r\n    yield buffer;\r\n  },\r\n  validate: function (value) {\r\n    if (value == null) {\r\n      return null;\r\n    }\r\n\r\n    if (!(value instanceof Date)) {\r\n      value = new Date(Date.parse(value));\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n      throw new TypeError('Invalid date.');\r\n    }\r\n\r\n    return value;\r\n  }\r\n};\r\nvar _default = SmallDateTime;\r\nexports.default = _default;\r\nmodule.exports = SmallDateTime;"]},"metadata":{},"sourceType":"script"}
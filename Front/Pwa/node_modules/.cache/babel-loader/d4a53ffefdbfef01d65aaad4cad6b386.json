{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst Binary = {\n  id: 0xAD,\n  type: 'BIGBinary',\n  name: 'Binary',\n  maximumLength: 8000,\n  declaration: function (parameter) {\n    const value = parameter.value;\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    return 'binary(' + length + ')';\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value;\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(3);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeUInt16LE(parameter.length, 1);\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(parameter.length, 0);\n    return buffer;\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield parameter.value.slice(0, parameter.length !== undefined ? Math.min(parameter.length, this.maximumLength) : this.maximumLength);\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      throw new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = Binary;\nexports.default = _default;\nmodule.exports = Binary;","map":{"version":3,"sources":["C:/Users/matia/Documents/Git/Turismo-Real/front/pwa/node_modules/mssql/node_modules/tedious/lib/data-types/binary.js"],"names":["Object","defineProperty","exports","value","default","NULL_LENGTH","Buffer","from","Binary","id","type","name","maximumLength","declaration","parameter","length","output","resolveLength","generateTypeInfo","buffer","alloc","writeUInt8","writeUInt16LE","generateParameterLength","options","generateParameterData","slice","undefined","Math","min","validate","isBuffer","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst Binary = {\n  id: 0xAD,\n  type: 'BIGBinary',\n  name: 'Binary',\n  maximumLength: 8000,\n  declaration: function (parameter) {\n    const value = parameter.value;\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    return 'binary(' + length + ')';\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value;\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(3);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeUInt16LE(parameter.length, 1);\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(parameter.length, 0);\n    return buffer;\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield parameter.value.slice(0, parameter.length !== undefined ? Math.min(parameter.length, this.maximumLength) : this.maximumLength);\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      throw new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = Binary;\nexports.default = _default;\nmodule.exports = Binary;"]},"metadata":{},"sourceType":"script"}
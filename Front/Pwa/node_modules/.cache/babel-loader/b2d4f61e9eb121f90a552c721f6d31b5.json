{"ast":null,"code":"'use strict';\n\nconst shared = require('./shared');\n\nlet globalConnection = null;\nconst globalConnectionHandlers = {};\n/**\r\n * Open global connection pool.\r\n *\r\n * @param {Object|String} config Connection configuration object or connection string.\r\n * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n * @return {Promise.<ConnectionPool>}\r\n */\n\nfunction connect(config, callback) {\n  if (!globalConnection) {\n    globalConnection = new shared.driver.ConnectionPool(config);\n\n    for (const event in globalConnectionHandlers) {\n      for (let i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\n        globalConnection.on(event, globalConnectionHandlers[event][i]);\n      }\n    }\n\n    const ogClose = globalConnection.close;\n\n    const globalClose = function (callback) {\n      // remove event handlers from the global connection\n      for (const event in globalConnectionHandlers) {\n        for (let i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\n          this.removeListener(event, globalConnectionHandlers[event][i]);\n        }\n      } // attach error handler to prevent process crash in case of error\n\n\n      this.on('error', err => {\n        if (globalConnectionHandlers.error) {\n          for (let i = 0, l = globalConnectionHandlers.error.length; i < l; i++) {\n            globalConnectionHandlers.error[i].call(this, err);\n          }\n        }\n      });\n      globalConnection = null;\n      return ogClose.call(this, callback);\n    };\n\n    globalConnection.close = globalClose.bind(globalConnection);\n  }\n\n  if (typeof callback === 'function') {\n    return globalConnection.connect((err, connection) => {\n      if (err) {\n        globalConnection = null;\n      }\n\n      callback(err, connection);\n    });\n  }\n\n  return globalConnection.connect().catch(err => {\n    globalConnection = null;\n    return shared.Promise.reject(err);\n  });\n}\n/**\r\n * Close all active connections in the global pool.\r\n *\r\n * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\r\n * @return {ConnectionPool|Promise}\r\n */\n\n\nfunction close(callback) {\n  if (globalConnection) {\n    const gc = globalConnection;\n    globalConnection = null;\n    return gc.close(callback);\n  }\n\n  if (typeof callback === 'function') {\n    setImmediate(callback);\n    return null;\n  }\n\n  return new shared.Promise(resolve => {\n    resolve(globalConnection);\n  });\n}\n/**\r\n * Attach event handler to global connection pool.\r\n *\r\n * @param {String} event Event name.\r\n * @param {Function} handler Event handler.\r\n * @return {ConnectionPool}\r\n */\n\n\nfunction on(event, handler) {\n  if (!globalConnectionHandlers[event]) globalConnectionHandlers[event] = [];\n  globalConnectionHandlers[event].push(handler);\n  if (globalConnection) globalConnection.on(event, handler);\n  return globalConnection;\n}\n/**\r\n * Detach event handler from global connection.\r\n *\r\n * @param {String} event Event name.\r\n * @param {Function} handler Event handler.\r\n * @return {ConnectionPool}\r\n */\n\n\nfunction removeListener(event, handler) {\n  if (!globalConnectionHandlers[event]) return globalConnection;\n  const index = globalConnectionHandlers[event].indexOf(handler);\n  if (index === -1) return globalConnection;\n  globalConnectionHandlers[event].splice(index, 1);\n  if (globalConnectionHandlers[event].length === 0) globalConnectionHandlers[event] = undefined;\n  if (globalConnection) globalConnection.removeListener(event, handler);\n  return globalConnection;\n}\n/**\r\n * Creates a new query using global connection from a tagged template string.\r\n *\r\n * @variation 1\r\n * @param {Array|String} strings Array of string literals or sql command.\r\n * @param {...*} keys Values.\r\n * @return {Request}\r\n */\n\n/**\r\n * Execute the SQL command.\r\n *\r\n * @variation 2\r\n * @param {String} command T-SQL command to be executed.\r\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n * @return {Request|Promise}\r\n */\n\n\nfunction query() {\n  if (typeof arguments[0] === 'string') {\n    return new shared.driver.Request().query(arguments[0], arguments[1]);\n  }\n\n  const values = Array.prototype.slice.call(arguments);\n  const strings = values.shift();\n  return new shared.driver.Request()._template(strings, values, 'query');\n}\n/**\r\n * Creates a new batch using global connection from a tagged template string.\r\n *\r\n * @variation 1\r\n * @param {Array} strings Array of string literals.\r\n * @param {...*} keys Values.\r\n * @return {Request}\r\n */\n\n/**\r\n * Execute the SQL command.\r\n *\r\n * @variation 2\r\n * @param {String} command T-SQL command to be executed.\r\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n * @return {Request|Promise}\r\n */\n\n\nfunction batch() {\n  if (typeof arguments[0] === 'string') {\n    return new shared.driver.Request().batch(arguments[0], arguments[1]);\n  }\n\n  const values = Array.prototype.slice.call(arguments);\n  const strings = values.shift();\n  return new shared.driver.Request()._template(strings, values, 'batch');\n}\n\nmodule.exports = {\n  batch,\n  close,\n  connect,\n  off: removeListener,\n  on,\n  query,\n  removeListener\n};\nObject.defineProperty(module.exports, 'pool', {\n  get: () => {\n    return globalConnection;\n  },\n  set: () => {}\n});","map":{"version":3,"sources":["C:/Users/jesus/Documents/GitHub/Turismo-Real/Front/Pwa/node_modules/mssql/lib/global-connection.js"],"names":["shared","require","globalConnection","globalConnectionHandlers","connect","config","callback","driver","ConnectionPool","event","i","l","length","on","ogClose","close","globalClose","removeListener","err","error","call","bind","connection","catch","Promise","reject","gc","setImmediate","resolve","handler","push","index","indexOf","splice","undefined","query","arguments","Request","values","Array","prototype","slice","strings","shift","_template","batch","module","exports","off","Object","defineProperty","get","set"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst shared = require('./shared')\r\n\r\nlet globalConnection = null\r\nconst globalConnectionHandlers = {}\r\n\r\n/**\r\n * Open global connection pool.\r\n *\r\n * @param {Object|String} config Connection configuration object or connection string.\r\n * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\r\n * @return {Promise.<ConnectionPool>}\r\n */\r\n\r\nfunction connect (config, callback) {\r\n  if (!globalConnection) {\r\n    globalConnection = new shared.driver.ConnectionPool(config)\r\n\r\n    for (const event in globalConnectionHandlers) {\r\n      for (let i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\r\n        globalConnection.on(event, globalConnectionHandlers[event][i])\r\n      }\r\n    }\r\n\r\n    const ogClose = globalConnection.close\r\n\r\n    const globalClose = function (callback) {\r\n      // remove event handlers from the global connection\r\n      for (const event in globalConnectionHandlers) {\r\n        for (let i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\r\n          this.removeListener(event, globalConnectionHandlers[event][i])\r\n        }\r\n      }\r\n\r\n      // attach error handler to prevent process crash in case of error\r\n      this.on('error', err => {\r\n        if (globalConnectionHandlers.error) {\r\n          for (let i = 0, l = globalConnectionHandlers.error.length; i < l; i++) {\r\n            globalConnectionHandlers.error[i].call(this, err)\r\n          }\r\n        }\r\n      })\r\n\r\n      globalConnection = null\r\n      return ogClose.call(this, callback)\r\n    }\r\n\r\n    globalConnection.close = globalClose.bind(globalConnection)\r\n  }\r\n  if (typeof callback === 'function') {\r\n    return globalConnection.connect((err, connection) => {\r\n      if (err) {\r\n        globalConnection = null\r\n      }\r\n      callback(err, connection)\r\n    })\r\n  }\r\n  return globalConnection.connect().catch((err) => {\r\n    globalConnection = null\r\n    return shared.Promise.reject(err)\r\n  })\r\n}\r\n\r\n/**\r\n * Close all active connections in the global pool.\r\n *\r\n * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\r\n * @return {ConnectionPool|Promise}\r\n */\r\n\r\nfunction close (callback) {\r\n  if (globalConnection) {\r\n    const gc = globalConnection\r\n    globalConnection = null\r\n    return gc.close(callback)\r\n  }\r\n\r\n  if (typeof callback === 'function') {\r\n    setImmediate(callback)\r\n    return null\r\n  }\r\n\r\n  return new shared.Promise((resolve) => {\r\n    resolve(globalConnection)\r\n  })\r\n}\r\n\r\n/**\r\n * Attach event handler to global connection pool.\r\n *\r\n * @param {String} event Event name.\r\n * @param {Function} handler Event handler.\r\n * @return {ConnectionPool}\r\n */\r\n\r\nfunction on (event, handler) {\r\n  if (!globalConnectionHandlers[event]) globalConnectionHandlers[event] = []\r\n  globalConnectionHandlers[event].push(handler)\r\n\r\n  if (globalConnection) globalConnection.on(event, handler)\r\n  return globalConnection\r\n}\r\n\r\n/**\r\n * Detach event handler from global connection.\r\n *\r\n * @param {String} event Event name.\r\n * @param {Function} handler Event handler.\r\n * @return {ConnectionPool}\r\n */\r\n\r\nfunction removeListener (event, handler) {\r\n  if (!globalConnectionHandlers[event]) return globalConnection\r\n  const index = globalConnectionHandlers[event].indexOf(handler)\r\n  if (index === -1) return globalConnection\r\n  globalConnectionHandlers[event].splice(index, 1)\r\n  if (globalConnectionHandlers[event].length === 0) globalConnectionHandlers[event] = undefined\r\n\r\n  if (globalConnection) globalConnection.removeListener(event, handler)\r\n  return globalConnection\r\n}\r\n\r\n/**\r\n * Creates a new query using global connection from a tagged template string.\r\n *\r\n * @variation 1\r\n * @param {Array|String} strings Array of string literals or sql command.\r\n * @param {...*} keys Values.\r\n * @return {Request}\r\n */\r\n\r\n/**\r\n * Execute the SQL command.\r\n *\r\n * @variation 2\r\n * @param {String} command T-SQL command to be executed.\r\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n * @return {Request|Promise}\r\n */\r\n\r\nfunction query () {\r\n  if (typeof arguments[0] === 'string') { return new shared.driver.Request().query(arguments[0], arguments[1]) }\r\n\r\n  const values = Array.prototype.slice.call(arguments)\r\n  const strings = values.shift()\r\n\r\n  return new shared.driver.Request()._template(strings, values, 'query')\r\n}\r\n\r\n/**\r\n * Creates a new batch using global connection from a tagged template string.\r\n *\r\n * @variation 1\r\n * @param {Array} strings Array of string literals.\r\n * @param {...*} keys Values.\r\n * @return {Request}\r\n */\r\n\r\n/**\r\n * Execute the SQL command.\r\n *\r\n * @variation 2\r\n * @param {String} command T-SQL command to be executed.\r\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\r\n * @return {Request|Promise}\r\n */\r\n\r\nfunction batch () {\r\n  if (typeof arguments[0] === 'string') { return new shared.driver.Request().batch(arguments[0], arguments[1]) }\r\n\r\n  const values = Array.prototype.slice.call(arguments)\r\n  const strings = values.shift()\r\n\r\n  return new shared.driver.Request()._template(strings, values, 'batch')\r\n}\r\n\r\nmodule.exports = {\r\n  batch,\r\n  close,\r\n  connect,\r\n  off: removeListener,\r\n  on,\r\n  query,\r\n  removeListener\r\n}\r\n\r\nObject.defineProperty(module.exports, 'pool', {\r\n  get: () => {\r\n    return globalConnection\r\n  },\r\n  set: () => {}\r\n})\r\n"]},"metadata":{},"sourceType":"script"}